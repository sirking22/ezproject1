import os
import aiohttp
import json
from typing import Optional, Dict, Any

class NotionClient:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Notion. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ env –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."""
    def __init__(self):
        self.api_key = os.getenv("NOTION_TOKEN")
        self.base_url = os.getenv("NOTION_BASE_URL", "https://api.notion.com/v1/")
        if not self.api_key:
            raise ValueError("NOTION_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ env")

    async def create_database(self, title: str, description: str, properties: Dict[str, Any], 
                            icon: str = "üèÜ", cover: str = "") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Notion"""
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ env
        parent_page_id = os.getenv("NOTION_PARENT_PAGE_ID")
        if not parent_page_id:
            raise ValueError("NOTION_PARENT_PAGE_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ env")
        
        data = {
            "parent": {"page_id": parent_page_id},
            "title": [{"text": {"content": title}}],
            "properties": properties,
            "icon": {"type": "emoji", "emoji": icon}
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.base_url}databases",
                headers=headers,
                json=data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["id"]
                else:
                    error_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {response.status} - {error_text}")

    async def create_page(self, database_id: str, properties: Dict[str, Any]) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion"""
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Notion
        notion_properties = {}
        for key, value in properties.items():
            if isinstance(value, str):
                if key == "–ö–æ–º–ø–∞–Ω–∏—è/–ü—Ä–æ–¥—É–∫—Ç" or key == "–û–±–ª–∞—Å—Ç—å —Å–∏–ª—ã" or key == "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞" or key == "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞" or key == "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞" or key == "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è" or key == "–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞":
                    notion_properties[key] = {"title": [{"text": {"content": value}}]}
                elif key == "–í–µ–±-—Å–∞–π—Ç" or key == "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏":
                    notion_properties[key] = {"url": value}
                elif key == "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" or key == "–°—Ä–æ–∫–∏" or key == "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏":
                    notion_properties[key] = {"date": {"start": value}}
                elif key == "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" or key == "–û—Ç—Ä–∞—Å–ª—å" or key == "–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" or key == "–£—Ä–æ–≤–µ–Ω—å –≤–ª–∏—è–Ω–∏—è" or key == "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" or key == "–°—Ç–∞–¥–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞" or key == "–°—Ç–∞—Ç—É—Å" or key == "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞" or key == "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞" or key == "–¢–∏–ø –ø—Ä–∞–≤–∏–ª–∞" or key == "–°–µ–≥–º–µ–Ω—Ç" or key == "–¶–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç" or key == "–í–æ–∑—Ä–∞—Å—Ç" or key == "–î–æ—Ö–æ–¥" or key == "–¢–∏–ø" or key == "–£—Ä–æ–≤–µ–Ω—å –∑—Ä–µ–ª–æ—Å—Ç–∏":
                    notion_properties[key] = {"select": {"name": value}}
                else:
                    notion_properties[key] = {"rich_text": [{"text": {"content": value}}]}
            elif isinstance(value, int) or isinstance(value, float):
                if key == "–†—ã–Ω–æ—á–Ω–∞—è –¥–æ–ª—è" or key == "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)":
                    notion_properties[key] = {"number": value / 100}  # –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
                else:
                    notion_properties[key] = {"number": value}
            elif isinstance(value, list):
                notion_properties[key] = {"multi_select": [{"name": item} for item in value]}
            elif isinstance(value, dict):
                notion_properties[key] = value
            else:
                notion_properties[key] = {"rich_text": [{"text": {"content": str(value)}}]}
        
        data = {
            "parent": {"database_id": database_id},
            "properties": notion_properties
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.base_url}pages",
                headers=headers,
                json=data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["id"]
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {error_text}")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
                    return None

    def do_something(self):
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤—ã –∫ Notion
        pass 