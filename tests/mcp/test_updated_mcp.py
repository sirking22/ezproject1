#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Ö–µ–º
"""

import asyncio
from notion_mcp_server import NotionMCPServer

async def test_updated_mcp():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Ö–µ–º...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server = NotionMCPServer()
        print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Ö–µ–º
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Ö–µ–º:")
        
        # 1. –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ö–µ–º
        result = await server.list_schema_databases({})
        print(f"üìã –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(result[0]['databases'])} –±–∞–∑")
        
        # 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ
        result = await server.get_schema_database_info({"database_name": "tasks"})
        if result[0]["success"]:
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ tasks –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   - –ü–æ–ª—è: {len(result[0]['properties'])}")
            print(f"   - –°—Ç–∞—Ç—É—Å—ã: {len(result[0]['status_options'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result[0]['error']}")
        
        # 3. –û–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è
        result = await server.get_schema_options({"database_name": "tasks", "property_name": "–°—Ç–∞—Ç—É—Å"})
        if result[0]["success"]:
            print(f"‚úÖ –û–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"   - –¢–∏–ø: {result[0]['property_type']}")
            print(f"   - –û–ø—Ü–∏–∏: {result[0]['options']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result[0]['error']}")
        
        # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        result = await server.validate_schema_property({"database_name": "tasks", "property_name": "–°—Ç–∞—Ç—É—Å", "value": "To do"})
        if result[0]["success"]:
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è: {result[0]['is_valid']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result[0]['error']}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_updated_mcp()) 