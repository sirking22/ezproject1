"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ö–µ–º
"""

import os
import json
from datetime import datetime
from notion_schema_monitor import NotionSchemaMonitor
from auto_update_schemas import load_changes, validate_updates

def test_monitoring_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–•–ï–ú")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    monitor = NotionSchemaMonitor()
    
    try:
        changes = monitor.detect_changes()
        print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        if changes:
            print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            for change in changes:
                print(f"  - {change.database_name}: {change.change_type} - {change.property_name} = {change.new_value}")
        else:
            print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    try:
        changes = load_changes()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º...")
    try:
        is_valid = validate_updates()
        if is_valid:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    test_changes = [
        {
            "database_name": "tasks",
            "change_type": "new_status",
            "property_name": "–°—Ç–∞—Ç—É—Å",
            "new_value": "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å",
            "timestamp": datetime.now().isoformat()
        },
        {
            "database_name": "ideas",
            "change_type": "new_multi_select_option",
            "property_name": "–¢–µ–≥–∏",
            "new_value": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–≥",
            "timestamp": datetime.now().isoformat()
        }
    ]
    
    try:
        with open("test_schema_changes.json", "w", encoding="utf-8") as f:
            json.dump(test_changes, f, indent=2, ensure_ascii=False)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        monitor.create_backup()
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    # 6. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\n6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    try:
        if os.path.exists("test_schema_changes.json"):
            os.remove("test_schema_changes.json")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    return True

def test_manual_update():
    """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º"""
    print("\nüîß –¢–ï–°–¢ –†–£–ß–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
    print("=" * 30)
    
    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    test_changes = [
        {
            "database_name": "tasks",
            "change_type": "new_status",
            "property_name": "–°—Ç–∞—Ç—É—Å",
            "new_value": "–†—É—á–Ω–æ–π —Ç–µ—Å—Ç"
        }
    ]
    
    with open("schema_changes.json", "w", encoding="utf-8") as f:
        json.dump(test_changes, f, indent=2, ensure_ascii=False)
    
    print("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª schema_changes.json —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")
    print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python auto_update_schemas.py")
    print("üí° –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ schema_changes.json")

def show_monitoring_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 40)
    
    files_to_check = [
        "notion_schema_monitor.py",
        "auto_update_schemas.py",
        "notion_database_schemas.py",
        "test_schemas_integration.py"
    ]
    
    for file in files_to_check:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CI —Ñ–∞–π–ª—ã
    ci_files = [
        ".github/workflows/schema-monitoring.yml",
        ".github/workflows/schema-validation.yml"
    ]
    
    print("\nüîß CI/CD —Ñ–∞–π–ª—ã:")
    for file in ci_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–•–ï–ú")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    show_monitoring_status()
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    if test_monitoring_system():
        print("\nüéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
        print("\nüìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: python notion_schema_monitor.py")
        print("2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: python auto_update_schemas.py")
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python test_schemas_integration.py")
        print("4. CI –ø—Ä–æ–≤–µ—Ä–∫–∞: python setup_ci.py check")
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        response = input("\nüß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è? (y/n): ")
        if response.lower() == 'y':
            test_manual_update()
    else:
        print("\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")

if __name__ == "__main__":
    main() 