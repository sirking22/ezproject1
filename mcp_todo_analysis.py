import asyncio
import json
from mcp import ClientSession, StdioServerParameters
from mcp.types import TextContent

async def analyze_tasks_via_mcp():
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
    server = StdioServerParameters(
        command="python",
        args=["-m", "mcp.server", "stdio", "--config", "mcp_config.json"]
    )
    
    async with ClientSession(server) as session:
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools = await session.list_tools()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in tools.tools]}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∑–∞–¥–∞—á
        print("\nüéØ –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –ó–ê–î–ê–ß:")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –∑–∞–¥–∞—á
        result = await session.call_tool("notion_get_database", {
            "database_id": "9c5f4269d61449b6a7485579a3c21da3"
        })
        
        if result.content:
            db_info = json.loads(result.content[0].text)
            print(f"üìä –ë–∞–∑–∞ –∑–∞–¥–∞—á: {db_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìã –ü–æ–ª—è: {list(db_info.get('properties', {}).keys())}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ To Do
        result = await session.call_tool("notion_query_database", {
            "database_id": "9c5f4269d61449b6a7485579a3c21da3",
            "filter": {
                "property": " –°—Ç–∞—Ç—É—Å",
                "status": {
                    "equals": "To do"
                }
            }
        })
        
        if result.content:
            tasks = json.loads(result.content[0].text)
            print(f"\nüéØ –ó–ê–î–ê–ß–ò –í –°–¢–ê–¢–£–°–ï 'TO DO': {len(tasks)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
            if tasks:
                first_task = tasks[0]
                print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –ó–ê–î–ê–ß–ò:")
                print(f"   ID: {first_task.get('id')}")
                print(f"   –ü–æ–ª—è: {list(first_task.get('properties', {}).keys())}")
                
                # –ò—â–µ–º –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                props = first_task.get('properties', {})
                for field_name, field_data in props.items():
                    if field_data.get('type') == 'title':
                        print(f"   ‚úÖ –ù–ê–ó–í–ê–ù–ò–ï –≤ –ø–æ–ª–µ '{field_name}': {field_data.get('title', [{}])[0].get('plain_text', '')}")
                    elif field_data.get('type') == 'rich_text':
                        print(f"   üìù Rich text –≤ –ø–æ–ª–µ '{field_name}': {field_data.get('rich_text', [{}])[0].get('plain_text', '')}")

if __name__ == "__main__":
    asyncio.run(analyze_tasks_via_mcp()) 