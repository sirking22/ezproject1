"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ö–µ–º–∞–º–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å notion_database_schemas.py
"""

import os
import json
from notion_database_schemas import (
    get_database_schema,
    get_all_schemas,
    get_database_id,
    get_status_options,
    get_select_options,
    get_multi_select_options,
    get_relations,
    validate_property_value
)

def test_schema_retrieval():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    databases = ["tasks", "subtasks", "projects", "ideas", "materials", "kpi", "epics", "guides", "superguide", "marketing", "smm"]
    
    for db_name in databases:
        schema = get_database_schema(db_name)
        if schema:
            print(f"‚úÖ {db_name}: {schema.name} (ID: {schema.database_id})")
        else:
            print(f"‚ùå {db_name}: —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print()

def test_database_ids():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("üÜî –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    expected_ids = {
        "tasks": "d09df250ce7e4e0d9fbe4e036d320def",
        "subtasks": "9c5f4269d61449b6a7485579a3c21da3",
        "projects": "342f18c67a5e41fead73dcec00770f4e",
        "ideas": "ad92a6e21485428c84de8587706b3be1",
        "materials": "1d9ace03d9ff804191a4d35aeedcbbd4",
        "kpi": "1d6ace03d9ff80bfb809ed21dfd2150c",
        "epics": "6fc4322e6d0c45a6b37ac49b818a063a",
        "guides": "47c6086858d442ebaeceb4fad1b23ba3",
        "superguide": "3e6a5838b4044a87a8433c3664995c5b",
        "marketing": "231b91aa-831d-470c-9dda-a3dd45037594",
        "smm": "65a90504-cb5b-4a08-a721-e91df3c57d82"
    }
    
    for db_name, expected_id in expected_ids.items():
        actual_id = get_database_id(db_name)
        if actual_id == expected_id:
            print(f"‚úÖ {db_name}: {actual_id}")
        else:
            print(f"‚ùå {db_name}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_id}, –ø–æ–ª—É—á–µ–Ω–æ {actual_id}")
    
    print()

def test_status_options():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    print("üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤")
    
    test_cases = [
        ("tasks", "–°—Ç–∞—Ç—É—Å", ["To do", "In Progress", "Done", "Backlog", "Regular"]),
        ("subtasks", " –°—Ç–∞—Ç—É—Å", ["needs review", "in progress", "complete", "To do", "In progress"]),
        ("projects", "–°—Ç–∞—Ç—É—Å", ["Regular", "Backlog", "Paused", "Planning", "In Progress", "Review", "In Production", "Done", "Canceled", "Archived"]),
        ("ideas", "–°—Ç–∞—Ç—É—Å", ["To do", "–û–±—Å—É–¥–∏—Ç—å", "In progress", "+\\-", "–û–∫", "–ê—Ä—Ö–∏–≤"]),
        ("materials", "–°—Ç–∞—Ç—É—Å", ["Backlog", "To do", "In progress", "+\\-", "–ö —Ä–µ–ª–∏–∑—É", "–û–∫", "–°—Ç–æ—Ä–æ–Ω–Ω–∏–µ", "–ê—Ä—Ö–∏–≤"])
    ]
    
    for db_name, property_name, expected_options in test_cases:
        actual_options = get_status_options(db_name, property_name)
        if actual_options == expected_options:
            print(f"‚úÖ {db_name}.{property_name}: {len(actual_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        else:
            print(f"‚ùå {db_name}.{property_name}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_options}")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {actual_options}")
    
    print()

def test_select_options():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞"""
    print("üéØ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞")
    
    test_cases = [
        ("tasks", "! –ó–∞–¥–∞—á–∏", ["!!!", "!!", "!", ".", "—Ç–µ—Å—Ç"]),
        ("subtasks", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["!!!", "!!", "!", ".", ">>", ">", "–°—Ä–µ–¥–Ω–∏–π"]),
        ("projects", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["!!!", "!!", "!", "."]),
        ("ideas", "–§–æ—Ä–º–∞—Ç", ["–ò–¥–µ—è", "–°–æ–≤–µ—Ç", "Best Practice", "–°—Ç–∞—Ç—å—è", "–í–∏–¥–µ–æ"]),
        ("kpi", "–¢–∏–ø KPI", ["% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–û—Ö–≤–∞—Ç", "–í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"])
    ]
    
    for db_name, property_name, expected_options in test_cases:
        actual_options = get_select_options(db_name, property_name)
        if actual_options == expected_options:
            print(f"‚úÖ {db_name}.{property_name}: {len(actual_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        else:
            print(f"‚ùå {db_name}.{property_name}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
    
    print()

def test_multi_select_options():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    print("üè∑Ô∏è –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞")
    
    test_cases = [
        ("tasks", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "–ú–∞—Ä–∫–µ—Ç", "–í–∏–¥–µ–æ", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–í–µ–±", "–ë—Ä–µ–Ω–¥", "–ö–æ–ø–∏—Ä–∞–π—Ç", "SMM", "–§–æ—Ç–æ", "–î–∏–∑–∞–π–Ω", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–û—Ä–≥", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤"]),
        ("subtasks", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ["–ü—Ä–æ–¥—É–∫—Ç", "–ë—Ä–µ–Ω–¥", "–ú–∞—Ä–∫–µ—Ç", "–°–æ—Ü —Å–µ—Ç–∏", "–í–∏–¥–µ–æ", "–§–æ—Ç–æ", "–î–∏–∑–∞–π–Ω", "–í–µ–±", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ö–æ–ø–∏—Ä–∞–π—Ç", "–û—Ä–≥"]),
        ("projects", " –¢–µ–≥–∏", ["–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤", "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "–ú–∞—Ä–∫–µ—Ç", "–ë—Ä–µ–Ω–¥", "–í–µ–±", "SMM", "–í–∏–¥–µ–æ", "–§–æ—Ç–æ", "–û—Ä–≥", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ö–æ–ø–∏—Ä–∞–π—Ç", "–î–∏–∑–∞–π–Ω", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"])
    ]
    
    for db_name, property_name, expected_options in test_cases:
        actual_options = get_multi_select_options(db_name, property_name)
        if actual_options == expected_options:
            print(f"‚úÖ {db_name}.{property_name}: {len(actual_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        else:
            print(f"‚ùå {db_name}.{property_name}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
    
    print()

def test_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π"""
    print("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π")
    
    test_cases = [
        ("tasks", "–°—Ç–∞—Ç—É—Å", "To do", True),
        ("tasks", "–°—Ç–∞—Ç—É—Å", "Invalid Status", False),
        ("subtasks", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "!!!", True),
        ("subtasks", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "Invalid Priority", False),
        ("ideas", "–§–æ—Ä–º–∞—Ç", "–ò–¥–µ—è", True),
        ("ideas", "–§–æ—Ä–º–∞—Ç", "Invalid Format", False)
    ]
    
    for db_name, property_name, value, expected_valid in test_cases:
        actual_valid = validate_property_value(db_name, property_name, value)
        if actual_valid == expected_valid:
            print(f"‚úÖ {db_name}.{property_name} = '{value}': {'–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if actual_valid else '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'}")
        else:
            print(f"‚ùå {db_name}.{property_name} = '{value}': –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_valid}, –ø–æ–ª—É—á–µ–Ω–æ {actual_valid}")
    
    print()

def test_relations():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π"""
    print("üîó –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π")
    
    test_cases = [
        ("tasks", {"–ü—Ä–æ–µ–∫—Ç": "342f18c67a5e41fead73dcec00770f4e", "–ü–æ–¥ –∑–∞–¥–∞—á–∏": "9c5f4269d61449b6a7485579a3c21da3", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": "1d9ace03d9ff804191a4d35aeedcbbd4"}),
        ("subtasks", {"–ó–∞–¥–∞—á–∏": "d09df250ce7e4e0d9fbe4e036d320def"}),
        ("projects", {"–≠–ø–∏–∫": "6fc4322e6d0c45a6b37ac49b818a063a", "–î–∏–∑–∞–π–Ω": "d09df250ce7e4e0d9fbe4e036d320def", "–°–ú–ú": "65a90504-cb5b-4a08-a721-e91df3c57d82", "–ú–∞—Ä–∫–µ—Ç": "231b91aa-831d-470c-9dda-a3dd45037594"})
    ]
    
    for db_name, expected_relations in test_cases:
        actual_relations = get_relations(db_name)
        if actual_relations == expected_relations:
            print(f"‚úÖ {db_name}: {len(actual_relations)} —Å–≤—è–∑–µ–π")
        else:
            print(f"‚ùå {db_name}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–≤—è–∑–µ–π")
    
    print()

def generate_schema_documentation():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ö–µ–º"""
    print("üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ö–µ–º")
    
    all_schemas = get_all_schemas()
    
    documentation = {
        "title": "–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Notion",
        "description": "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å—Ç–∞—Ç—É—Å–æ–≤, —Ç–µ–≥–æ–≤ –∏ —Å–≤—è–∑–µ–π",
        "databases": {}
    }
    
    for db_name, schema in all_schemas.items():
        doc = {
            "name": schema.name,
            "database_id": schema.database_id,
            "description": schema.description,
            "properties": schema.properties,
            "status_options": schema.status_options,
            "select_options": schema.select_options,
            "multi_select_options": schema.multi_select_options,
            "relations": schema.relations
        }
        documentation["databases"][db_name] = doc
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    with open("notion_schemas_documentation.json", "w", encoding="utf-8") as f:
        json.dump(documentation, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ notion_schemas_documentation.json")
    print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –°–•–ï–ú –ë–ê–ó –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("NOTION_TOKEN"):
        print("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_schema_retrieval()
    test_database_ids()
    test_status_options()
    test_select_options()
    test_multi_select_options()
    test_validation()
    test_relations()
    generate_schema_documentation()
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 