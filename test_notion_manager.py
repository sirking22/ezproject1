#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Notion
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ç–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from src.services.notion_manager_simple import SimpleNotionManager
from notion_database_schemas import DATABASE_SCHEMAS

load_dotenv()

async def test_notion_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Notion"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    notion_client = AsyncClient(auth=os.getenv('NOTION_TOKEN'))
    manager = SimpleNotionManager(notion_client, DATABASE_SCHEMAS)
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π NotionManager...")
    
    # ===== –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ =====
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...")
    
    task_data = {
        "title": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Notion",
        "description": "–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "status": "To do",
        "priority": "!!!"
    }
    
    result = await manager.create_task(task_data)
    
    if result.success:
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {result.data['id']}")
        task_id = result.data['id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        print("\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏...")
        update_result = await manager.update_task_status(task_id, "In Progress")
        
        if update_result.success:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {update_result.data['properties']['–°—Ç–∞—Ç—É—Å']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_result.error}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result.error}")
    
    # ===== –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∏ =====
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–¥–µ—é...")
    
    idea_data = {
        "name": "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã —Å Notion",
        "description": "–°–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é –∏ –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Notion",
        "tags": ["–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "notion", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"],
        "importance": 8,
        "url": "https://github.com/example/notion-manager"
    }
    
    idea_result = await manager.create_idea(idea_data)
    
    if idea_result.success:
        print(f"‚úÖ –ò–¥–µ—è —Å–æ–∑–¥–∞–Ω–∞: {idea_result.data['id']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {idea_result.data['properties']['Name']}")
        print(f"   –¢–µ–≥–∏: {idea_result.data['properties']['–¢–µ–≥–∏']}")
        print(f"   –í–∞–∂–Ω–æ—Å—Ç—å: {idea_result.data['properties']['–í–µ—Å']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: {idea_result.error}")
    
    # ===== –¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ =====
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª...")
    
    material_data = {
        "name": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–æ–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É",
        "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Notion",
        "url": "https://disk.yandex.ru/i/example-guide",
        "tags": ["–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"]
    }
    
    material_result = await manager.create_material(material_data)
    
    if material_result.success:
        print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {material_result.data['id']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {material_result.data['properties']['Name']}")
        print(f"   URL: {material_result.data['properties']['URL']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_result.error}")
    
    # ===== –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö =====
    print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...")
    
    tasks_result = await manager.get_tasks(limit=5)
    
    if tasks_result.success:
        tasks = tasks_result.data
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á:")
        
        for i, task in enumerate(tasks[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            print(f"   {i}. {task['properties'].get('–ó–∞–¥–∞—á–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} "
                  f"[{task['properties'].get('–°—Ç–∞—Ç—É—Å', '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞')}]")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {tasks_result.error}")
    
    # ===== –¢–ï–°–¢ 5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è =====
    print("\n6Ô∏è‚É£ –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É...")
    
    filtered_result = await manager.get_tasks(
        filters={"status": "To do"},
        limit=5
    )
    
    if filtered_result.success:
        filtered_tasks = filtered_result.data
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_tasks)} –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'To do'")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filtered_result.error}")
    
    # ===== –¢–ï–°–¢ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–π =====
    print("\n7Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π...")
    
    ideas_result = await manager.get_ideas(limit=5)
    
    if ideas_result.success:
        ideas = ideas_result.data
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ideas)} –∏–¥–µ–π:")
        
        for i, idea in enumerate(ideas[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            name = idea['properties'].get('Name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            weight = idea['properties'].get('–í–µ—Å', 0)
            print(f"   {i}. {name} (–≤–∞–∂–Ω–æ—Å—Ç—å: {weight})")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π: {ideas_result.error}")
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
    stats = manager.get_stats()
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_requests']}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_requests']}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")

async def test_specific_operations():
    """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    notion_client = AsyncClient(auth=os.getenv('NOTION_TOKEN'))
    manager = SimpleNotionManager(notion_client, DATABASE_SCHEMAS)
    
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    complete_task = {
        "title": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        "description": "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "status": "In Progress",
        "priority": "!!",
        "date": "2024-01-30"
    }
    
    result = await manager.create_task(complete_task)
    
    if result.success:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞: {result.data['id']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±–ª–æ–∂–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        cover_result = await manager.set_cover_image(
            result.data['id'], 
            "https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=400"
        )
        
        if cover_result.success:
            print("‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏: {cover_result.error}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∑–∞–¥–∞—á–∏: {result.error}")

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
    
    required_vars = ['NOTION_TOKEN', 'NOTION_TASKS_DB_ID', 'NOTION_IDEAS_DB_ID', 'NOTION_MATERIALS_DB_ID']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê NOTION")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not validate_environment():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º")
        return
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await test_notion_manager()
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        await test_specific_operations()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())