#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–≤–æ—Ä—è—â–∏—Ö
"""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

from transcribe_with_speakers import AssemblyAITranscriber

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–∏—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = os.getenv('ASSEMBLYAI_API_KEY')
        if not api_key:
            print("‚ùå ASSEMBLYAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print("üé§ –¢–µ—Å—Ç–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–∏—Ö...")
        print("üöÄ –£–ª—É—á—à–µ–Ω–∏—è:")
        print("  ‚úÖ speakers_expected: 10 (–æ–∂–∏–¥–∞–µ–º 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")
        print("  ‚úÖ –£–º–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã (–ø–∞—É–∑–∞ >2 —Å–µ–∫)")
        print("  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—á–∏")
        print("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (Speaker A-J)")
        print("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 26 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (A-Z)")
        print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        transcriber = AssemblyAITranscriber()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–º –∞—É–¥–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # –î–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∞–π–ª
        print("üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python test_transcribe.py")
        print()
        print("üîß –£–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 