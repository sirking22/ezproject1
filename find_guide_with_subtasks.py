#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ü–û–ò–°–ö –ì–ê–ô–î–ê –° –ü–û–î–ó–ê–î–ê–ß–ê–ú–ò
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

async def find_guide_with_subtasks():
    """–ù–∞—Ö–æ–¥–∏—Ç –≥–∞–π–¥ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"üîç –ü–û–ò–°–ö –ì–ê–ô–î–ê –° –ü–û–î–ó–ê–î–ê–ß–ê–ú–ò")
    print("=" * 50)
    
    try:
        # –ò—â–µ–º –≤ –±–∞–∑–µ –≥–∞–π–¥–æ–≤
        guides_query = await client.databases.query(
            database_id="47c60868-58d4-42eb-aece-b4fad1b23ba3",  # –ì–∞–π–¥—ã
            filter={
                "property": "–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏",
                "relation": {
                    "is_not_empty": True
                }
            }
        )
        
        guides = guides_query.get('results', [])
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –≥–∞–π–¥–æ–≤ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏: {len(guides)}")
        
        for i, guide in enumerate(guides, 1):
            guide_id = guide['id']
            guide_title = guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∑–∞–¥–∞—á
            subtasks_relation = guide['properties'].get('–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏', {}).get('relation', [])
            
            print(f"{i}. {guide_title}")
            print(f"   üÜî ID: {guide_id}")
            print(f"   üìã –ü–æ–¥–∑–∞–¥–∞—á: {len(subtasks_relation)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–¥–∑–∞–¥–∞—á–∏
            for j, subtask_ref in enumerate(subtasks_relation[:3], 1):
                try:
                    subtask = await client.pages.retrieve(page_id=subtask_ref['id'])
                    subtask_title = subtask['properties'].get('–ü–æ–¥–∑–∞–¥–∞—á–∏', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    print(f"      {j}. {subtask_title}")
                except:
                    print(f"      {j}. –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏")
            
            if len(subtasks_relation) > 3:
                print(f"      ... –∏ –µ—â–µ {len(subtasks_relation) - 3}")
            
            print()
        
        if guides:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –≥–∞–π–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            first_guide = guides[0]
            guide_id = first_guide['id']
            guide_title = first_guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            print(f"üéØ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"üìö –ì–∞–π–¥: {guide_title}")
            print(f"üÜî ID: {guide_id}")
            
            return guide_id
        else:
            print("‚ùå –ì–∞–π–¥—ã —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    asyncio.run(find_guide_with_subtasks()) 