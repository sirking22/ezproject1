#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion
"""

import json
import logging
import os
from typing import Dict, Any, List
from datetime import datetime

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn

from notion_client import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Notion –∫–ª–∏–µ–Ω—Ç–∞
notion = Client(auth=os.getenv("NOTION_TOKEN"))

# ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
KPI_DB = "1d6ace03d9ff80bfb809ed21dfd2150c"
RDT_DB = "195ace03d9ff80c1a1b0d236ec3564d2"

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Notion API Server", version="1.0.0")

class KPIRecord(BaseModel):
    name: str
    kpi_type: str
    target_value: float
    employee_id: str
    period_start: str = "2025-07-01"
    period_end: str = "2025-07-31"
    comment: str = ""

class EmployeeSearch(BaseModel):
    employee_name: str

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {"message": "Notion API Server", "version": "1.0.0"}

@app.get("/databases")
async def list_databases():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    return {
        "databases": {
            "kpi": {"name": "KPI –∏ –º–µ—Ç—Ä–∏–∫–∏", "id": KPI_DB},
            "rdt": {"name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (RDT)", "id": RDT_DB}
        }
    }

@app.post("/kpi/create")
async def create_kpi_record(record: KPIRecord):
    """–°–æ–∑–¥–∞—Ç—å KPI –∑–∞–ø–∏—Å—å"""
    try:
        properties = {
            "Name": {"title": [{"text": {"content": record.name}}]},
            "–¢–∏–ø KPI": {"select": {"name": record.kpi_type}},
            "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": {"number": record.target_value},
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏": {"relation": [{"id": record.employee_id}]},
            "–ü–µ—Ä–∏–æ–¥": {"date": {"start": record.period_start, "end": record.period_end}},
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {"rich_text": [{"text": {"content": record.comment}}]}
        }
        
        response = notion.pages.create(
            parent={"database_id": KPI_DB},
            properties=properties
        )
        
        return {
            "success": True,
            "message": "KPI –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞",
            "id": response["id"],
            "url": response["url"]
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è KPI: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/employee/search")
async def get_employee_id(search: EmployeeSearch):
    """–ü–æ–ª—É—á–∏—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    try:
        response = notion.databases.query(
            database_id=RDT_DB,
            page_size=100
        )
        
        employee_name = search.employee_name.lower()
        
        for page in response.get("results", []):
            props = page.get("properties", {})
            title = props.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", {}).get("title", [])
            if title:
                name = title[0]["plain_text"].lower()
                if employee_name in name or name in employee_name:
                    return {
                        "success": True,
                        "employee_name": search.employee_name,
                        "employee_id": page["id"],
                        "page_url": page["url"]
                    }
        
        return {
            "success": False,
            "message": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {search.employee_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/kpi/list")
async def list_kpi_records(page_size: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ KPI –∑–∞–ø–∏—Å–µ–π"""
    try:
        response = notion.databases.query(
            database_id=KPI_DB,
            page_size=page_size
        )
        
        records = []
        for page in response.get("results", []):
            records.append({
                "id": page["id"],
                "url": page["url"],
                "created_time": page["created_time"]
            })
        
        return {
            "success": True,
            "records": records,
            "total": len(records)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è KPI: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/kpi/bulk_create")
async def bulk_create_kpi(records: List[KPIRecord]):
    """–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ KPI –∑–∞–ø–∏—Å–µ–π"""
    results = []
    
    for record in records:
        try:
            properties = {
                "Name": {"title": [{"text": {"content": record.name}}]},
                "–¢–∏–ø KPI": {"select": {"name": record.kpi_type}},
                "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": {"number": record.target_value},
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏": {"relation": [{"id": record.employee_id}]},
                "–ü–µ—Ä–∏–æ–¥": {"date": {"start": record.period_start, "end": record.period_end}},
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {"rich_text": [{"text": {"content": record.comment}}]}
            }
            
            response = notion.pages.create(
                parent={"database_id": KPI_DB},
                properties=properties
            )
            
            results.append({
                "success": True,
                "name": record.name,
                "id": response["id"]
            })
        except Exception as e:
            results.append({
                "success": False,
                "name": record.name,
                "error": str(e)
            })
    
    return {
        "success": True,
        "results": results,
        "total": len(records),
        "successful": len([r for r in results if r["success"]])
    }

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Notion API Server –Ω–∞ http://localhost:8000")
    uvicorn.run(app, host="0.0.0.0", port=8000) 