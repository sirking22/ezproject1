#!/usr/bin/env python3
"""
Notion MCP Client –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion —á–µ—Ä–µ–∑ Model Context Protocol
"""

import asyncio
import json
import logging
from typing import Any, Dict, List, Optional
import subprocess
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NotionMCPClient:
    def __init__(self, server_path: str = "notion_mcp_server.py"):
        self.server_path = server_path
        self.process = None
        self.connected = False
        
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å
            self.process = await asyncio.create_subprocess_exec(
                sys.executable, self.server_path,
                stdin=asyncio.subprocess.PIPE,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await asyncio.sleep(2)
            self.connected = True
            logger.info("‚úÖ Notion MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    async def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.process:
            self.process.terminate()
            await self.process.wait()
            self.connected = False
            logger.info("üõë Notion MCP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def call_tool(self, tool_name: str, arguments: Dict[str, Any]) -> str:
        """–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ MCP"""
        if not self.connected:
            await self.start_server()
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            request = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "tools/call",
                "params": {
                    "name": tool_name,
                    "arguments": arguments
                }
            }
            logger.info(f"MCP REQUEST: {json.dumps(request, ensure_ascii=False)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            request_json = json.dumps(request) + "\n"
            self.process.stdin.write(request_json.encode())
            await self.process.stdin.drain()
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            response_line = await self.process.stdout.readline()
            logger.info(f"MCP RESPONSE RAW: {response_line}")
            response = json.loads(response_line.decode())
            logger.info(f"MCP RESPONSE: {json.dumps(response, ensure_ascii=False)}")
            
            if "result" in response:
                content = response["result"]["content"]
                if content and len(content) > 0:
                    return content[0]["text"]
                return "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            else:
                error = response.get("error", {})
                return f"–û—à–∏–±–∫–∞: {error.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"
    
    async def get_pages(self, database_id: str, limit: int = 50) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return await self.call_tool("notion_get_pages", {
            "database_id": database_id,
            "limit": limit
        })
    
    async def create_page(self, database_id: str, title: str, **kwargs) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        args = {
            "database_id": database_id,
            "title": title,
            **kwargs
        }
        return await self.call_tool("notion_create_page", args)
    
    async def update_page(self, page_id: str, **kwargs) -> str:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        args = {"page_id": page_id, **kwargs}
        return await self.call_tool("notion_update_page", args)
    
    async def search_pages(self, query: str, database_id: Optional[str] = None, limit: int = 20) -> str:
        """–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        args = {"query": query, "limit": limit}
        if database_id:
            args["database_id"] = database_id
        return await self.call_tool("notion_search_pages", args)
    
    async def get_database_info(self, database_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return await self.call_tool("notion_get_database_info", {
            "database_id": database_id
        })
    
    async def bulk_update(self, database_id: str, updates: List[Dict[str, Any]]) -> str:
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        return await self.call_tool("notion_bulk_update", {
            "database_id": database_id,
            "updates": updates
        })

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–æ–∂–∫–∞–º–∏
class NotionCoverManager:
    def __init__(self, mcp_client: NotionMCPClient):
        self.mcp_client = mcp_client
        
    async def apply_covers_from_yandex(self, database_id: str, yandex_folder: str = "Telegram Import"):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –æ–±–ª–æ–∂–µ–∫
        pages_result = await self.mcp_client.get_pages(database_id, limit=100)
        logger.info("üìÑ –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–ª–æ–∂–µ–∫")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–æ–∂–µ–∫
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –±–∞–∑—ã {database_id} –∏–∑ –ø–∞–ø–∫–∏ {yandex_folder}"

async def test_mcp_client():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∫–ª–∏–µ–Ω—Ç–∞"""
    client = NotionMCPClient()
    
    try:
        await client.start_server()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database_id = os.getenv("NOTION_DATABASE_ID")
        if database_id:
            result = await client.get_database_info(database_id)
            print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            print(result)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            search_result = await client.search_pages("–¥–∏–∑–∞–π–Ω", limit=5)
            print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
            print(search_result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        await client.stop_server()

if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    load_dotenv()
    
    asyncio.run(test_mcp_client()) 