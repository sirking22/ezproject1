#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å Files & media
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ universal_materials_bot.py
"""

import asyncio
import aiohttp
import os
import re
import random
from datetime import datetime
from typing import Optional, Tuple
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")
MATERIALS_DB = os.getenv("MATERIALS_DB")

def log(message: str, level: str = "INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] [{level}] {message}")

async def get_image_from_url(url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Å—ã–ª–æ–∫"""
    log(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é URL: {url}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL
    if "figma.com" in url:
        return await get_figma_image(url)
    elif "prnt.sc" in url or "lightshot.cc" in url:
        return await get_lightshot_image(url)
    elif "yadi.sk" in url or "disk.yandex.ru" in url:
        return await get_yandex_disk_image(url)
    elif any(ext in url.lower() for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp']):
        return url  # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    else:
        log(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø URL: {url}", "ERROR")
        return None

async def get_figma_image(figma_url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Figma"""
    try:
        log(f"üé® –ü–æ–ª—É—á–∞—é Figma –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {figma_url}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º file key
        if "/design/" in figma_url:
            file_key = figma_url.split("/design/")[1].split("/")[0]
        elif "/file/" in figma_url:
            file_key = figma_url.split("/file/")[1].split("/")[0]
        else:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å file_key –∏–∑ Figma URL", "ERROR")
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º node id
        node_id = None
        if "node-id=" in figma_url:
            node_id = figma_url.split("node-id=")[1].split("&")[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Figma API
        figma_token = os.getenv("FIGMA_TOKEN")
        headers = {"X-Figma-Token": figma_token} if figma_token else {}
        
        if node_id:
            images_url = f"https://api.figma.com/v1/images/{file_key}?ids={node_id}&format=png&scale=2"
        else:
            images_url = f"https://api.figma.com/v1/images/{file_key}?format=png&scale=2"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(images_url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    images = data.get("images", {})
                    
                    if node_id:
                        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º node_id
                        image_url = None
                        for key, url in images.items():
                            if key == node_id or key == node_id.replace("-", ":"):
                                image_url = url
                                break
                        if not image_url and images:
                            image_url = list(images.values())[0]
                    else:
                        image_url = list(images.values())[0] if images else None
                    
                    if image_url:
                        log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ Figma –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url[:60]}...")
                        return image_url
                else:
                    log(f"‚ùå –û—à–∏–±–∫–∞ Figma API: {response.status}", "ERROR")
        
        return None
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Figma –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", "ERROR")
        return None

async def get_lightshot_image(lightshot_url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ LightShot"""
    try:
        log(f"üì∏ –ü–æ–ª—É—á–∞—é LightShot –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {lightshot_url}")
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(lightshot_url, headers=headers) as response:
                if response.status == 200:
                    html = await response.text()
                    
                    # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ HTML
                    patterns = [
                        r'https://image\.prntscr\.com/image/[^"\']+',
                        r'https://[^"\']*\.png',
                        r'https://[^"\']*\.jpg',
                        r'https://[^"\']*\.jpeg',
                        r'https://[^"\']*\.webp'
                    ]
                    
                    for pattern in patterns:
                        matches = re.findall(pattern, html)
                        if matches:
                            image_url = matches[0]
                            log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ LightShot –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                            return image_url
                    
                    log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ LightShot HTML", "ERROR")
                else:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è LightShot HTML: {response.status}", "ERROR")
        
        return None
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è LightShot –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", "ERROR")
        return None

async def get_yandex_disk_image(yandex_url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
    try:
        log(f"‚òÅÔ∏è –ü–æ–ª—É—á–∞—é –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {yandex_url}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ URL
        if "/i/" in yandex_url:
            file_id = yandex_url.split("/i/")[1]
        elif "/d/" in yandex_url:
            file_id = yandex_url.split("/d/")[1].split("/")[0]
        else:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å file_id –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ URL", "ERROR")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        direct_url = f"https://disk.yandex.ru/i/{file_id}"
        log(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {direct_url}")
        
        return direct_url
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", "ERROR")
        return None

async def upload_to_yandex_disk_and_get_permanent_url(image_url: str, filename: str) -> Tuple[str, str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è Files & media"""
    log(f"üì• –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(image_url) as response:
            if response.status != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}")
            
            image_data = await response.read()
            log(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {len(image_data)} –±–∞–π—Ç")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            random_suffix = random.randint(1000, 9999)
            safe_filename = f"{filename}_{timestamp}_{random_suffix}.jpg"
            remote_path = f"/notion_covers/{safe_filename}"
            
            log(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {remote_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
            params = {
                "path": remote_path,
                "overwrite": "true"
            }
            
            async with session.get(upload_url, headers=headers, params=params) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∑–∫–∏: {response.status} - {error_text}")
                
                upload_data = await response.json()
                href = upload_data.get("href")
                
                if not href:
                    raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω href –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                async with session.put(href, data=image_data) as put_response:
                    if put_response.status != 201:
                        error_text = await put_response.text()
                        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {put_response.status} - {error_text}")
                
                log(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–ª–æ–∂–∫–∏ (—á–µ—Ä–µ–∑ download API)
                download_url = "https://cloud-api.yandex.net/v1/disk/resources/download"
                download_params = {"path": remote_path}
                
                async with session.get(download_url, headers=headers, params=download_params) as download_response:
                    if download_response.status != 200:
                        error_text = await download_response.text()
                        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è download —Å—Å—ã–ª–∫–∏: {download_response.status} - {error_text}")
                    
                    download_data = await download_response.json()
                    cover_url = download_data.get("href")
                    
                    if not cover_url:
                        raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–±–ª–æ–∂–∫–∏")
                    
                    log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–±–ª–æ–∂–∫–∏: {cover_url[:80]}...")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –¥–ª—è Files & media
                publish_url = f"https://cloud-api.yandex.net/v1/disk/resources/publish?path={remote_path}"
                async with session.put(publish_url, headers=headers) as publish_response:
                    if publish_response.status == 200:
                        publish_data = await publish_response.json()
                        if 'href' in publish_data:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è public_url
                            file_info_url = publish_data['href']
                            async with session.get(file_info_url, headers=headers) as file_response:
                                if file_response.status == 200:
                                    file_info = await file_response.json()
                                    if 'public_url' in file_info:
                                        files_media_url = file_info['public_url']
                                        log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –¥–ª—è Files & media: {files_media_url}")
                                        return cover_url, files_media_url, remote_path
                
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
                log(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback - —Ç—É –∂–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –∏ Files & media")
                return cover_url, cover_url, remote_path

async def create_notion_material(title: str, cover_url: str, files_media_url: str, original_url: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion —Å –æ–±–ª–æ–∂–∫–æ–π –∏ Files & media"""
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å Files & media –∏ –æ–±–ª–æ–∂–∫–æ–π (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ universal_materials_bot.py)
    material_data = {
        "parent": {"database_id": MATERIALS_DB},
        "properties": {
            "Name": {"title": [{"text": {"content": title}}]},
            "URL": {"url": original_url},
            "Files & media": {
                "files": [{
                    "external": {"url": files_media_url},
                    "name": "Material File"
                }]
            }
        },
        "cover": {
            "type": "external",
            "external": {"url": cover_url}
        }
    }
    
    async with aiohttp.ClientSession() as session:
        log(f"üìÑ –°–æ–∑–¥–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion...")
        async with session.post("https://api.notion.com/v1/pages", headers=headers, json=material_data) as response:
            if response.status == 200:
                data = await response.json()
                page_url = data.get("url")
                log(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω –≤ Notion: {page_url}")
                return page_url
            else:
                error_text = await response.text()
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {response.status} - {error_text}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é)
    test_url = "https://prnt.sc/Gk-idc6SARl7"
    
    try:
        log("üöÄ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–ê")
        log("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—Å—ã–ª–∫–∏
        image_url = await get_image_from_url(test_url)
        if not image_url:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—Å—ã–ª–∫–∏", "ERROR")
            return
        
        log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url[:60]}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –∏ Files & media
        cover_url, files_media_url, remote_path = await upload_to_yandex_disk_and_get_permanent_url(image_url, "test_material")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion
        title = "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —Å—Å—ã–ª–∫–∏"
        notion_url = await create_notion_material(
            title=title,
            cover_url=cover_url,  # –û–±–ª–æ–∂–∫–∞ (–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
            files_media_url=files_media_url,  # Files & media (—Å—Å—ã–ª–∫–∞ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º)
            original_url=test_url
        )
        
        print(f"\nüéâ –ú–ê–¢–ï–†–ò–ê–õ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
        print(f"üìÑ –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion: {notion_url}")
        print(f"üñºÔ∏è –û–±–ª–æ–∂–∫–∞ (–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞): {cover_url[:80]}...")
        print(f"üìé Files & media (—Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º): {files_media_url[:80]}...")
        print(f"üíæ –§–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ: {remote_path}")
        print(f"üîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {test_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å—Å—ã–ª–æ–∫
        if "downloader.disk.yandex.ru" in cover_url:
            print(f"‚úÖ –û–±–ª–æ–∂–∫–∞: –î–û–õ–ì–û–í–ï–ß–ù–ê–Ø (—á–µ—Ä–µ–∑ download API)")
        else:
            print(f"‚ö†Ô∏è –û–±–ª–æ–∂–∫–∞: –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π")
            
        if "yadi.sk" in files_media_url:
            print(f"‚úÖ Files & media: –° –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–û–ú (–ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞)")
        else:
            print(f"‚ö†Ô∏è Files & media: –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä—è–º—ã–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º")
            
    except Exception as e:
        log(f"‚ùå –û–®–ò–ë–ö–ê: {e}", "ERROR")

if __name__ == "__main__":
    asyncio.run(main()) 