#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫ –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
"""

import asyncio
import json
import logging
from notion_mcp_server import NotionMCPServer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def create_subtask_for_any_task():
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞
    server = NotionMCPServer()
    
    logger.info("üîç –ò—â–µ–º –ª—é–±—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ª—é–±—É—é –∑–∞–¥–∞—á—É
    tasks_result = await server.get_pages({
        "database_id": "d09df250ce7e4e0d9fbe4e036d320def",
        "page_size": 1
    })
    
    if not tasks_result:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    tasks_data = json.loads(tasks_result[0].text)
    tasks = tasks_data.get("results", [])
    
    if not tasks:
        logger.error("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –≤ –±–∞–∑–µ")
        return
    
    task = tasks[0]
    task_id = task["id"]
    task_title = ""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    for prop_name, prop_value in task["properties"].items():
        if prop_name == "–ó–∞–¥–∞—á–∞" and prop_value.get("type") == "title" and prop_value.get("title"):
            task_title = prop_value["title"][0]["plain_text"]
            break
    
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_title} (ID: {task_id})")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É
    logger.info("üìù –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É...")
    
    subtask_properties = {
        "–ü–æ–¥–∑–∞–¥–∞—á–∏": {
            "title": [
                {
                    "text": {
                        "content": "–î–æ–¥–µ–ª–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø"
                    }
                }
            ]
        },
        " –°—Ç–∞—Ç—É—Å": {
            "status": {
                "name": "To do"
            }
        },
        "–ó–∞–¥–∞—á–∏": {
            "relation": [
                {
                    "id": task_id
                }
            ]
        },
        "–ß–∞—Å—ã": {
            "number": 0.5
        }
    }
    
    subtask_result = await server.create_page({
        "database_id": "9c5f4269d61449b6a7485579a3c21da3",
        "properties": subtask_properties
    })
    
    if not subtask_result:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    subtask_data = json.loads(subtask_result[0].text)
    subtask_id = subtask_data.get("page_id")
    subtask_url = subtask_data.get("url")
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞: –î–æ–¥–µ–ª–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø")
    logger.info(f"   ID –ø–æ–¥–∑–∞–¥–∞—á–∏: {subtask_id}")
    logger.info(f"   –ß–∞—Å—ã: 0.5")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫–∏
    logger.info("\nüîó –°–°–´–õ–ö–ò:")
    task_url = f"https://notion.so/{task_id.replace('-', '')}"
    logger.info(f"   üìã –ó–∞–¥–∞—á–∞: {task_url}")
    logger.info(f"   üìù –ü–æ–¥–∑–∞–¥–∞—á–∞: {subtask_url}")
    
    logger.info("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    logger.info("   1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á—É")
    logger.info("   2. –í –ø–æ–ª–µ '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' –¥–æ–±–∞–≤—å—Ç–µ 'Arsentiy'")
    logger.info("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –ø–æ–ª–µ '–ß–∞—Å—ã' —É–∫–∞–∑–∞–Ω–æ 0.5")
    logger.info("   4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    logger.info("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await create_subtask_for_any_task()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 