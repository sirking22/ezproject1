#!/usr/bin/env python3
"""
üéØ –í–ù–ï–î–†–ï–ù–ò–ï KPI –°–ò–°–¢–ï–ú–´
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ KPI –¥–ª—è YouTube, –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏, –°–æ—Ü—Å–µ—Ç–µ–π –∏ –ö–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø—Ü–∏–π –≤ –ø–æ–ª—è
"""

import asyncio
import json
import os
from typing import Dict, List, Any
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
from safe_database_operations import SafeDatabaseOperations

class KPISystemImplementation:
    """–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π KPI —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.kpi_db_id = "1d6ace03d9ff80bfb809ed21dfd2150c"
        self.safe_ops = SafeDatabaseOperations()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ KPI –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        self.kpi_structure = {
            "YouTube": [
                {"name": "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "type": "number", "goal": 10000},
                {"name": "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "type": "number", "goal": 1000},
                {"name": "CTR", "type": "number", "goal": 5.0},
                {"name": "–í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å", "type": "number", "goal": 8.0}
            ],
            "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è": [
                {"name": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "type": "number", "goal": 95.0},
                {"name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫", "type": "number", "goal": 2},
                {"name": "–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "type": "number", "goal": 90.0},
                {"name": "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "type": "number", "goal": 48}
            ],
            "–°–æ—Ü—Å–µ—Ç–∏": [
                {"name": "–ü–µ—Ä–µ—Ö–æ–¥—ã", "type": "number", "goal": 500},
                {"name": "–ö–ª–∏–∫–∏", "type": "number", "goal": 1000},
                {"name": "–í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å", "type": "number", "goal": 6.0},
                {"name": "–û—Ö–≤–∞—Ç", "type": "number", "goal": 5000}
            ],
            "–ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤": [
                {"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É", "type": "number", "goal": 200},
                {"name": "–ü—Ä–æ–¥–∞–∂–∏", "type": "number", "goal": 50},
                {"name": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è", "type": "number", "goal": 25.0},
                {"name": "–ö–ª–∏–∫–∏", "type": "number", "goal": 1000},
                {"name": "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "type": "number", "goal": 10000}
            ]
        }
    
    async def create_kpi_records(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö KPI –∑–∞–ø–∏—Å–µ–π"""
        print("üéØ –í–ù–ï–î–†–ï–ù–ò–ï KPI –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        total_created = 0
        total_errors = 0
        
        for direction, kpis in self.kpi_structure.items():
            print(f"\nüìä –°–æ–∑–¥–∞–µ–º KPI –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction}")
            print("-" * 40)
            
            for kpi in kpis:
                try:
                    # –°–æ–∑–¥–∞–µ–º properties –¥–ª—è –∑–∞–ø–∏—Å–∏
                    properties = {
                        "Name": {
                            "title": [{
                                "text": {
                                    "content": f"{direction} - {kpi['name']}"
                                }
                            }]
                        },
                        "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ / –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": {
                            "multi_select": [{"name": direction}]
                        },
                        "–¢–∏–ø KPI": {
                            "select": {"name": kpi['name']}
                        },
                        "–¶–µ–ª—å / –∑–∞–¥–∞—á–∞": {
                            "rich_text": [{
                                "text": {
                                    "content": f"{kpi['goal']} {self._get_unit(kpi['name'])}"
                                }
                            }]
                        }
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø—Ü–∏–π
                    result = await self.safe_ops.safe_create_page_with_auto_options(
                        self.kpi_db_id, 
                        properties
                    )
                    
                    if result["success"]:
                        print(f"  ‚úÖ {direction} - {kpi['name']}: {result['page_id']}")
                        total_created += 1
                    else:
                        print(f"  ‚ùå {direction} - {kpi['name']}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        total_errors += 1
                        
                except Exception as e:
                    print(f"  ‚ùå {direction} - {kpi['name']}: {e}")
                    total_errors += 1
        
        print(f"\nüìà –ò–¢–û–ì–ò:")
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_created}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {total_errors}")
        print(f"  üìä –í—Å–µ–≥–æ KPI: {sum(len(kpis) for kpis in self.kpi_structure.values())}")
    
    def _get_unit(self, kpi_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è KPI"""
        units = {
            "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": "–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", 
            "CTR": "%",
            "–í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å": "%",
            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": "%",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫": "–ø—Ä–∞–≤–æ–∫",
            "–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è": "%",
            "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è": "—á–∞—Å–æ–≤",
            "–ü–µ—Ä–µ—Ö–æ–¥—ã": "–ø–µ—Ä–µ—Ö–æ–¥–æ–≤",
            "–ö–ª–∏–∫–∏": "–∫–ª–∏–∫–æ–≤",
            "–û—Ö–≤–∞—Ç": "–æ—Ö–≤–∞—Ç",
            "–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É": "–¥–æ–±–∞–≤–ª–µ–Ω–∏–π",
            "–ü—Ä–æ–¥–∞–∂–∏": "–ø—Ä–æ–¥–∞–∂",
            "–ö–æ–Ω–≤–µ—Ä—Å–∏—è": "%"
        }
        return units.get(kpi_name, "")
    
    async def test_mcp_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º"""
        print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 40)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        test_properties = {
            "Name": {
                "title": [{
                    "text": {
                        "content": "–¢–µ—Å—Ç MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
                    }
                }]
            },
            "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ / –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": {
                "multi_select": [{"name": "YouTube"}]
            },
            "–¢–∏–ø KPI": {
                "select": {"name": "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"}
            },
            "–¶–µ–ª—å / –∑–∞–¥–∞—á–∞": {
                "rich_text": [{
                    "text": {
                        "content": "1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
                    }
                }]
            }
        }
        
        try:
            result = await self.safe_ops.safe_create_page_with_auto_options(
                self.kpi_db_id,
                test_properties
            )
            
            if result["success"]:
                print("  ‚úÖ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"  üìù ID –∑–∞–ø–∏—Å–∏: {result['page_id']}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ MCP: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ MCP: {e}")
    
    async def verify_kpi_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã KPI –±–∞–∑—ã"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ KPI –ë–ê–ó–´")
        print("=" * 40)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
            db_info = await self.safe_ops.get_database_info(self.kpi_db_id)
            
            if db_info:
                properties = db_info.get("properties", {})
                print(f"  üìã –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(properties)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                key_fields = ["Name", "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ / –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–¢–∏–ø KPI", "–¶–µ–ª—å / –∑–∞–¥–∞—á–∞"]
                for field in key_fields:
                    if field in properties:
                        print(f"  ‚úÖ {field}")
                    else:
                        print(f"  ‚ùå {field} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                        
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    kpi_system = KPISystemImplementation()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    await kpi_system.verify_kpi_structure()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    await kpi_system.test_mcp_integration()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ KPI
    await kpi_system.create_kpi_records()
    
    print("\nüéâ –í–ù–ï–î–†–ï–ù–ò–ï KPI –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    asyncio.run(main()) 