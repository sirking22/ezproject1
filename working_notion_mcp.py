#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π Notion MCP Server
"""

import asyncio
import json
import logging
import os
from typing import Any, Dict, List, Optional
from datetime import datetime, UTC
from pathlib import Path
from dotenv import load_dotenv, find_dotenv

from notion_client import AsyncClient

# MCP imports
from mcp.server import Server
from mcp.server.models import InitializationOptions
from mcp.server.stdio import stdio_server
from mcp.types import (
    CallToolRequest,
    CallToolResult,
    ListToolsRequest,
    ListToolsResult,
    Tool,
    TextContent,
    ImageContent,
    EmbeddedResource,
    LoggingLevel,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = find_dotenv()
load_dotenv(env_path, override=False)
print(f"[MCP] ENV —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {env_path}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NotionMCPServer:
    """–†–∞–±–æ—á–∏–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Notion"""
    def __init__(self):
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.tasks_db_id = os.getenv("NOTION_TASKS_DB_ID")
        self.ideas_db_id = os.getenv("NOTION_IDEAS_DB_ID")
        self.materials_db_id = os.getenv("NOTION_MATERIALS_DB_ID")
        
        if not self.notion_token:
            raise ValueError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        self.client = AsyncClient(auth=self.notion_token)
        logger.info(f"[MCP] NOTION_TOKEN loaded: {bool(self.notion_token)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞
        self.server = Server("notion-mcp-server")
        self.setup_tools()
    
    def setup_tools(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP"""
        
        @self.server.list_tools()
        async def handle_list_tools():
            """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
            return [
                Tool(
                    name="get_pages",
                    description="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "database_id": {"type": "string", "description": "ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"},
                            "filter_dict": {"type": "object", "description": "–§–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"}
                        }
                    }
                ),
                Tool(
                    name="get_database_info",
                    description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "database_id": {"type": "string", "description": "ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}
                        }
                    }
                ),
                Tool(
                    name="ping",
                    description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞",
                    inputSchema={
                        "type": "object",
                        "properties": {}
                    }
                )
            ]
        
        @self.server.call_tool()
        async def handle_call_tool(name: str, arguments: Dict[str, Any]):
            """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
            try:
                if name == "ping":
                    return TextContent(type="text", text="‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                elif name == "get_pages":
                    return await self.get_pages(arguments)
                elif name == "get_database_info":
                    return await self.get_database_info(arguments)
                else:
                    return TextContent(type="text", text=f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {name}: {e}")
                return TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def get_pages(self, args: Dict[str, Any]) -> TextContent:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        database_id = args.get("database_id", self.tasks_db_id)
        
        try:
            response = await self.client.databases.query(
                database_id=database_id,
                page_size=10
            )
            
            pages = response.get("results", [])
            result = f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –±–∞–∑–µ {database_id}:\n"
            
            for page in pages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                page_id = page["id"]
                page_url = page["url"]
                result += f"- {page_id}: {page_url}\n"
            
            return TextContent(type="text", text=result)
        except Exception as e:
            return TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")
    
    async def get_database_info(self, args: Dict[str, Any]) -> TextContent:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        database_id = args.get("database_id", self.tasks_db_id)
        
        try:
            response = await self.client.databases.retrieve(database_id=database_id)
            
            result = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {database_id}:\n"
            result += f"- –ù–∞–∑–≤–∞–Ω–∏–µ: {response.get('title', [{}])[0].get('plain_text', 'N/A')}\n"
            result += f"- URL: {response.get('url', 'N/A')}\n"
            result += f"- –°–æ–∑–¥–∞–Ω–∞: {response.get('created_time', 'N/A')}\n"
            
            return TextContent(type="text", text=result)
        except Exception as e:
            return TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ Notion MCP Server")
    
    server = NotionMCPServer()
    
    async with stdio_server() as (read_stream, write_stream):
        await server.server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="notion-mcp-server",
                server_version="1.0.0",
                capabilities=server.server.get_capabilities(None, {}),
            ),
        )

if __name__ == "__main__":
    asyncio.run(main()) 