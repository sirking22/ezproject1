#!/usr/bin/env python3
"""
üéØ –ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï NOTION
–ü—Ä—è–º–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Notion –ø–æ ID –∑–∞–ø–∏—Å–µ–π
"""

import os
import json
import asyncio
from typing import Dict, List
from notion_client import AsyncClient
from datetime import datetime

class DirectNotionUpdater:
    """–ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Notion"""
    
    def __init__(self):
        self.notion = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
        self.database_id = "ad92a6e21485428c84de8587706b3be1"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_data = self._load_analysis_data()
        
    def _load_analysis_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with open("telegram_full_analysis.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, list):
                    return {item["page_id"]: item for item in data}
                return data
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}

    async def apply_direct_changes(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä—è–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Notion"""
        print("üéØ –ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï NOTION")
        print("="*50)
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        changes = [
            {
                'page_id': '1104',
                'action': 'delete',
                'reason': '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–µ–Ω–¥–∏–Ω–≥–µ'
            },
            {
                'page_id': '526', 
                'action': 'update',
                'title_cleanup': True,
                'description_cleanup': True,
                'add_tags': ['–î–∏–∑–∞–π–Ω', '–í–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã', '–ù–µ–π—Ä–æ—Å–µ—Ç–∏'],
                'set_importance': 5,
                'reason': '–û—á–∏—Å—Ç–∫–∞ –æ—Ç –±–∏–ª–∏–±–µ—Ä–¥—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ö—É–∫–æ–≤'
            }
        ]
        
        applied = 0
        errors = 0
        
        for change in changes:
            try:
                page_id = change['page_id']
                print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {page_id}: {change['reason']}")
                
                if change['action'] == 'delete':
                    await self._delete_page(page_id)
                    print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {page_id}")
                
                elif change['action'] == 'update':
                    await self._update_page_direct(page_id, change)
                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {page_id}")
                
                applied += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                errors += 1
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {applied}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")

    async def _delete_page(self, page_id: str):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion"""
        await self.notion.pages.update(
            page_id=page_id,
            archived=True  # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        )

    async def _update_page_direct(self, page_id: str, change: Dict):
        """–ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        properties = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if page_id in self.analysis_data:
            current_data = self.analysis_data[page_id]
            
            # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            if change.get('title_cleanup'):
                new_title = self._clean_title(current_data['current_title'])
                if new_title != current_data['current_title']:
                    properties["Name"] = {
                        "title": [
                            {
                                "text": {
                                    "content": new_title
                                }
                            }
                        ]
                    }
            
            # –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
            if change.get('description_cleanup'):
                new_description = self._clean_description(current_data.get('current_description', ''))
                if new_description != current_data.get('current_description', ''):
                    properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {
                        "rich_text": [
                            {
                                "text": {
                                    "content": new_description
                                }
                            }
                        ]
                    }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
            if change.get('add_tags'):
                current_tags = current_data.get('current_tags', [])
                new_tags = list(set(current_tags + change['add_tags']))
                properties["–¢–µ–≥–∏"] = {
                    "multi_select": [
                        {"name": tag} for tag in new_tags
                    ]
                }
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
            if change.get('set_importance'):
                properties["–í–∞–∂–Ω–æ—Å—Ç—å"] = {
                    "number": change['set_importance']
                }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if properties:
            await self.notion.pages.update(
                page_id=page_id,
                properties=properties
            )

    def _clean_title(self, title: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –±–∏–ª–∏–±–µ—Ä–¥—ã"""
        import re
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        title = re.sub(r'\s+', ' ', title)
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞-–º—É—Å–æ—Ä
        garbage_words = ['om', 'ok', "i'll", 'look', 'video', 'about', "i don't know what this is"]
        for word in garbage_words:
            title = re.sub(rf'\b{word}\b', '', title, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        title = re.sub(r'[^\w\s\-\.]', '', title)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        title = title.strip()
        
        return title

    def _clean_description(self, description: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –º—É—Å–æ—Ä–∞"""
        import re
        
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Wildberries
        description = re.sub(r'https?://[^\s]*wildberries[^\s]*', '', description, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø–æ —Ç–µ–º–µ)
        color_words = ['–∑–µ–ª–µ–Ω—ã–π', '–≥–æ–ª—É–±–æ–π', '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π']
        for color in color_words:
            description = re.sub(rf'\b{color}\b', '', description, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        description = re.sub(r'\s+', ' ', description)
        
        return description.strip()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    updater = DirectNotionUpdater()
    await updater.apply_direct_changes()

if __name__ == "__main__":
    asyncio.run(main()) 