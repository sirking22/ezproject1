#!/usr/bin/env python3
"""
üéØ ROLE-BASED MATERIALS BOT - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ–ª–µ–≤—ã–º –¥–æ—Å—Ç—É–ø–æ–º
–¢—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä -> –ú–µ–Ω–µ–¥–∂–µ—Ä -> –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
"""

import os
import asyncio
import logging
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple, Any
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from notion_client import AsyncClient
import httpx
from openai import AsyncOpenAI
from session_manager import SessionManager, UserProfile
from services.designer_report_service import DesignerReportService, WorkReport

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('role_based_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class RoleBasedMaterialsBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.materials_db_id = os.getenv('MATERIALS_DB')
        self.tasks_db_id = os.getenv('NOTION_TASKS_DB_ID')
        self.subtasks_db_id = os.getenv('NOTION_SUBTASKS_DB_ID')
        
        # LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')
        self.llm_client = None
        if self.deepseek_api_key:
            self.llm_client = AsyncOpenAI(
                api_key=self.deepseek_api_key,
                base_url="https://api.deepseek.com/v1"
            )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.notion_client = None
        if self.notion_token:
            self.notion_client = AsyncClient(auth=self.notion_token)
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
        self.session_manager = SessionManager()
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π (–¥–ª—è material_info –∏ —Ç.–¥.)
        self.session_data = {}
        
        # –ö—ç—à –∑–∞–¥–∞—á
        self.tasks_cache = {}
        self.cache_expiry = {}
        self.cache_duration = 300  # 5 –º–∏–Ω—É—Ç
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'materials_created': 0,
            'tasks_linked': 0,
            'llm_queries': 0,
            'errors': 0
        }
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç—á–µ—Ç–æ–≤
        self.report_service = DesignerReportService()
        
        logger.info(f"‚úÖ Role-Based Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: Telegram={bool(self.telegram_token)}, Notion={bool(self.notion_client)}, LLM={bool(self.llm_client)}")

    def get_user_session(self, user_id: int) -> Optional[UserProfile]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.session_manager.get_session(user_id)

    def create_user_session(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> UserProfile:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.session_manager.create_session(user_id, username, first_name, last_name)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = self.get_user_session(user_id)
        if not session:
            username = user.username or user.first_name or str(user_id)
            session = self.create_user_session(
                user_id=user_id,
                username=username,
                first_name=user.first_name or "",
                last_name=user.last_name or ""
            )
        
        await self.show_welcome(update, session)

    async def show_welcome(self, update: Update, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="role_admin")],
            [InlineKeyboardButton("üìã –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data="role_manager")],
            [InlineKeyboardButton("üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data="role_executor")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n\n"
            "üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "üìã **–ú–µ–Ω–µ–¥–∂–µ—Ä** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏\n"
            "üõ†Ô∏è **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å** - —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_role_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        session = self.get_user_session(user_id)
        if not session:
            session = self.create_user_session(user_id, query.from_user.username)
        
        role = query.data.replace("role_", "")
        session.role = role
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        self.session_manager.update_session_activity(user_id)
        
        if role == UserRole.EXECUTOR:
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await self.show_executor_selection(query)
        else:
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            await self.show_role_functions(query, role)

    async def show_executor_selection(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        keyboard = [
            [InlineKeyboardButton("–ê—Ä—Å–µ–Ω–∏–π", callback_data="executor_arseniy")],
            [InlineKeyboardButton("–ú–∞—à–∞", callback_data="executor_masha")],
            [InlineKeyboardButton("–í–∏–∫–∞", callback_data="executor_vika")],
            [InlineKeyboardButton("–ê–Ω—è", callback_data="executor_anya")],
            [InlineKeyboardButton("–°–∞—à–∞", callback_data="executor_sasha")],
            [InlineKeyboardButton("–ê–∫–∫–∞—É–Ω—Ç", callback_data="executor_account")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üõ†Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_executor_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        session = self.get_user_session(user_id)
        if not session:
            return
        
        executor = query.data.replace("executor_", "")
        session.executor = executor
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        self.session_manager.update_session_activity(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await self.show_role_functions(query, UserRole.EXECUTOR, executor)

    async def show_role_functions(self, query, role: str, executor: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏"""
        role_names = {
            UserRole.ADMIN: "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            UserRole.MANAGER: "üìã –ú–µ–Ω–µ–¥–∂–µ—Ä", 
            UserRole.EXECUTOR: f"üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ({executor})" if executor else "üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
        }
        
        role_text = role_names.get(role, role)
        
        keyboard = [
            [InlineKeyboardButton("üìÅ –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="add_material")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        if role in [UserRole.ADMIN, UserRole.MANAGER]:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="management")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ **–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role_text}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        session = self.get_user_session(user_id)
        if not session:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        session.update_activity()
        
        if query.data.startswith("role_"):
            await self.handle_role_selection(update, context)
        elif query.data.startswith("executor_"):
            await self.handle_executor_selection(update, context)
        elif query.data == "add_material":
            await self.start_add_material(query, session)
        elif query.data == "my_tasks":
            await self.show_my_tasks(query, session)
        elif query.data == "stats":
            await self.show_stats(query, session)
        elif query.data == "help":
            await self.show_help(query, session)
        elif query.data == "management":
            await self.show_management(query, session)

    async def start_add_material(self, query, session: UserProfile):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        await query.edit_message_text(
            "üìÅ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Figma —Ñ–∞–π–ª –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ https://www.figma.com/file/...\n"
            "‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è —Å–∞–π—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "‚Ä¢ –û–±–ª–æ–∂–∫–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª.",
            parse_mode='Markdown'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        session.material_info = {"state": "waiting_material"}

    async def show_my_tasks(self, query, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            tasks = await self.get_user_tasks(session)
            
            if not tasks:
                await query.edit_message_text(
                    "üìã **–í–∞—à–∏ –∑–∞–¥–∞—á–∏**\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
                    parse_mode='Markdown'
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á
            tasks_text = "üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n\n"
            for i, task in enumerate(tasks[:5], 1):
                status = task.get('properties', {}).get('–°—Ç–∞—Ç—É—Å', {}).get('status', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                name = task.get('properties', {}).get('–ó–∞–¥–∞—á–∞', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                tasks_text += f"{i}. **{name}** ({status})\n"
            
            if len(tasks) > 5:
                tasks_text += f"\n... –∏ –µ—â–µ {len(tasks) - 5} –∑–∞–¥–∞—á"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                tasks_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )

    async def get_user_tasks(self, session: UserProfile) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª–∏"""
        try:
            if not self.notion_client:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            response = await self.notion_client.databases.query(
                database_id=self.tasks_db_id,
                filter={
                    "or": [
                        {"property": "–°—Ç–∞—Ç—É—Å", "status": {"does_not_equal": "Done"}},
                        {"property": "–°—Ç–∞—Ç—É—Å", "status": {"does_not_equal": "Canceled"}}
                    ]
                }
            )
            
            tasks = response.get('results', [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ–ª–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            if session.role == UserRole.EXECUTOR and session.executor:
                # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö –∑–∞–¥–∞—á–∏
                filtered_tasks = []
                for task in tasks:
                    participants = task.get('properties', {}).get('–£—á–∞—Å—Ç–Ω–∏–∫–∏', {}).get('people', [])
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
                    if self.is_executor_in_task(participants, session.executor):
                        filtered_tasks.append(task)
                return filtered_tasks
            else:
                # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                return tasks
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
            return []

    def is_executor_in_task(self, participants: List[Dict], executor: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∑–∞–¥–∞—á–∏"""
        # –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        executor_mapping = {
            "arseniy": ["–ê—Ä—Å–µ–Ω–∏–π", "arseniy", "–ê—Ä—Å"],
            "masha": ["–ú–∞—à–∞", "masha", "–ú–∞—Ä–∏—è"],
            "vika": ["–í–∏–∫–∞", "vika", "–í–∏–∫—Ç–æ—Ä–∏—è"],
            "anya": ["–ê–Ω—è", "anya", "–ê–Ω–Ω–∞"],
            "sasha": ["–°–∞—à–∞", "sasha", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"],
            "account": ["–ê–∫–∫–∞—É–Ω—Ç", "account", "–û–±—â–∏–π"]
        }
        
        executor_variants = executor_mapping.get(executor, [executor])
        
        for participant in participants:
            name = participant.get('name', '').lower()
            for variant in executor_variants:
                if variant.lower() in name:
                    return True
        return False

    async def show_stats(self, query, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.session_manager.get_statistics()
        stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        stats_text += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['active_sessions']}\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        stats_text += f"‚Ä¢ –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['recent_activity']}\n\n"
        
        stats_text += f"üìÅ **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:**\n"
        stats_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {self.stats['materials_created']}\n"
        stats_text += f"‚Ä¢ –°–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–∞–º–∏: {self.stats['tasks_linked']}\n\n"
        
        stats_text += f"üß† **LLM –∑–∞–ø—Ä–æ—Å—ã:** {self.stats['llm_queries']}\n"
        stats_text += f"‚ùå **–û—à–∏–±–∫–∏:** {self.stats['errors']}\n\n"
        
        stats_text += f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {session.role}"
        if session.executor:
            stats_text += f" ({session.executor})"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_help(self, query, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
        
        help_text += "üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        help_text += "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏\n"
        help_text += "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        help_text += "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
        
        help_text += "üìÅ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:**\n"
        help_text += "1. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª'\n"
        help_text += "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É Figma –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        help_text += "3. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        help_text += "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n\n"
        
        help_text += "üë• **–†–æ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø—ã:**\n"
        help_text += "‚Ä¢ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
        help_text += "‚Ä¢ **–ú–µ–Ω–µ–¥–∂–µ—Ä** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
        help_text += "‚Ä¢ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å** - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏\n\n"
        
        help_text += "üõ†Ô∏è **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:** –ê—Ä—Å–µ–Ω–∏–π, –ú–∞—à–∞, –í–∏–∫–∞, –ê–Ω—è, –°–∞—à–∞, –ê–∫–∫–∞—É–Ω—Ç"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_management(self, query, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è **–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        session = self.get_user_session(user_id)
        
        if not session:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        text = update.message.text.strip()
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text_lower in ['/start', '—Å—Ç–∞—Ä—Ç']:
            await self.start_command(update, None)
        elif text_lower in ['/help', '–ø–æ–º–æ—â—å', 'help']:
            await self.show_help_text(update, session)
        elif text_lower in ['/tasks', '–∑–∞–¥–∞—á–∏', '–º–æ–∏ –∑–∞–¥–∞—á–∏']:
            await self.show_my_tasks(update, session)
        elif text_lower in ['/stats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
            await self.show_stats_text(update, session)
        elif text_lower in ['/report', '–æ—Ç—á–µ—Ç']:
            await self.report_command(update, context)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç—á–µ—Ç–æ–º
            if await self.try_parse_report(update, session, text):
                return
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
            await self.process_command(update, session, text)

    async def process_material_input(self, update: Update, session: UserProfile, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            if "figma.com" in text.lower():
                material_type = "figma"
                material_info = {"url": text, "type": material_type}
            else:
                material_type = "description"
                material_info = {"description": text, "type": material_type}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_data
            user_id = update.effective_user.id
            self.session_data[user_id] = material_info
            self.session_data[user_id]["state"] = "processing"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await update.message.reply_text(
                "üîÑ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª...**\n\n"
                "–ò—â—É —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.",
                parse_mode='Markdown'
            )
            
            # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            related_tasks = await self.find_related_tasks(session, material_info)
            
            if related_tasks:
                await self.show_task_selection(update, session, related_tasks)
            else:
                await self.show_no_tasks_found(update, session)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
            self.stats['errors'] += 1
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def find_related_tasks(self, session: UserProfile, material_info: Dict) -> List[Dict]:
        """–ù–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        try:
            user_tasks = await self.get_user_tasks(session)
            
            if not user_tasks:
                return []
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            keywords = self.extract_keywords(material_info)
            
            related_tasks = []
            for task in user_tasks:
                task_name = task.get('properties', {}).get('–ó–∞–¥–∞—á–∞', {}).get('title', [{}])[0].get('text', {}).get('content', '').lower()
                task_desc = task.get('properties', {}).get('–û–ø–∏—Å–∞–Ω–∏–µ', {}).get('rich_text', [{}])[0].get('text', {}).get('content', '').lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                for keyword in keywords:
                    if keyword.lower() in task_name or keyword.lower() in task_desc:
                        related_tasks.append(task)
                        break
            
            return related_tasks[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–¥–∞—á
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á: {e}")
            return []

    def extract_keywords(self, material_info: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        keywords = []
        
        if material_info.get("type") == "figma":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ Figma URL
            url = material_info.get("url", "")
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            keywords = ["figma", "–¥–∏–∑–∞–π–Ω", "–º–∞–∫–µ—Ç"]
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            description = material_info.get("description", "")
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
            words = re.findall(r'\b\w+\b', description.lower())
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            keywords = [word for word in words if len(word) > 3]
        
        return keywords

    async def show_task_selection(self, update: Update, session: UserProfile, tasks: List[Dict]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è"""
        keyboard = []
        
        for i, task in enumerate(tasks):
            task_name = task.get('properties', {}).get('–ó–∞–¥–∞—á–∞', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            status = task.get('properties', {}).get('–°—Ç–∞—Ç—É—Å', {}).get('status', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            button_text = f"{i+1}. {task_name[:30]}... ({status})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_task_{i}")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –ù–µ —Å–≤—è–∑—ã–≤–∞—Ç—å", callback_data="no_link")])
        keyboard.append([InlineKeyboardButton("üîÑ –ù–∞–π—Ç–∏ –µ—â–µ", callback_data="find_more")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìã **–ù–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_no_tasks_found(self, update: Update, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"""
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", callback_data="create_task")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_material")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå **–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def process_command(self, update: Update, session: UserProfile, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"""
        text_lower = text.lower()
        
        if text_lower in ['/start', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å']:
            await self.start_command(update, None)
        elif text_lower in ['/help', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞']:
            await self.show_help_text(update, session)
        elif text_lower in ['/stats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
            await self.show_stats_text(update, session)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )

    async def show_help_text(self, update: Update, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
        help_text = "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
        help_text += "üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        help_text += "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏\n"
        help_text += "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        help_text += "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
        help_text += f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {session.role}"
        if session.executor:
            help_text += f" ({session.executor})"
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def show_stats_text(self, update: Update, session: UserProfile):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
        stats = self.session_manager.get_statistics()
        stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        stats_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['active_sessions']}\n"
        stats_text += f"üìÅ –°–æ–∑–¥–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {self.stats['materials_created']}\n"
        stats_text += f"üß† LLM –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['llm_queries']}\n"
        stats_text += f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}\n\n"
        stats_text += f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {session.role}"
        if session.executor:
            stats_text += f" ({session.executor})"
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
        user_id = update.effective_user.id
        session = self.get_user_session(user_id)
        if not session:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–∂–∏–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self.session_data[user_id] = {"state": "awaiting_report"}
        await update.message.reply_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ**\n\n"
            "**–§–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ `–ü—Ä–æ–µ–∫—Ç –ó–∞–¥–∞—á–∞ 2—á –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã`\n"
            "‚Ä¢ `–ü—Ä–æ–µ–∫—Ç - –ó–∞–¥–∞—á–∞ - –û–ø–∏—Å–∞–Ω–∏–µ 1.5—á`\n"
            "‚Ä¢ `TASK-123 3—á done –û–ø–∏—Å–∞–Ω–∏–µ https://figma.com/...`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 –í–µ—Ä—Å—Ç–∫–∞ 2—á –°–¥–µ–ª–∞–ª –º–∞–∫–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏`\n"
            "‚Ä¢ `–ë—Ä–µ–Ω–¥–∏–Ω–≥ –õ–æ–≥–æ—Ç–∏–ø 1.5—á –°–æ–∑–¥–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–∞ https://figma.com/file/abc123`",
            parse_mode='Markdown'
        )

    async def try_parse_report(self, update: Update, session: UserProfile, text: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç—á–µ—Ç"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä –∏–∑ designer_report_service
            report = self.report_service.parse_quick_report(text)
            
            if report:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
                report.designer_name = session.username or session.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
                success, message = self.report_service.process_report(report)
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ **–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                        f"üìã **–ü—Ä–æ–µ–∫—Ç:** {report.project_name}\n"
                        f"üéØ **–ó–∞–¥–∞—á–∞:** {report.task_name}\n"
                        f"‚è± **–í—Ä–µ–º—è:** {report.time_spent_hours}—á\n"
                        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {report.work_description}\n\n"
                        f"üíæ {message}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞:**\n{message}",
                        parse_mode='Markdown'
                    )
                
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.telegram_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.show_help_text))
        application.add_handler(CommandHandler("stats", self.show_stats_text))
        application.add_handler(CommandHandler("report", self.report_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ Role-Based Bot –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = RoleBasedMaterialsBot()
    bot.run()

if __name__ == "__main__":
    main() 