#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –£–õ–£–ß–®–ï–ù–ù–´–ô TELEGRAM –ë–û–¢ –° –ù–û–í–´–ú –ú–ï–ù–ï–î–ñ–ï–†–û–ú NOTION
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —á–µ—Ç–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import logging
from datetime import datetime
from typing import Dict, Any, Optional
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from notion_client import AsyncClient
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from src.services.notion_manager_simple import SimpleNotionManager, NotionResult
from notion_database_schemas import DATABASE_SCHEMAS
from simple_bot import YandexUploader, VideoProcessor, LLMProcessor

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('enhanced_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
YA_TOKEN = os.getenv('YA_ACCESS_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

if not all([NOTION_TOKEN, YA_TOKEN, TELEGRAM_TOKEN]):
    logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã!")
    exit(1)

logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
notion_client = None
notion_manager = None
ya_uploader = None
llm_processor = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class EnhancedBotManager:
    """üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞"""
    
    def __init__(self):
        self.notion_client = AsyncClient(auth=NOTION_TOKEN)
        self.notion_manager = SimpleNotionManager(self.notion_client, DATABASE_SCHEMAS)
        self.ya_uploader = YandexUploader()
        self.llm_processor = LLMProcessor()
        
    async def process_file_upload(self, file_url: str, filename: str, user_input: str = "") -> Dict[str, Any]:
        """
        üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        
        Args:
            file_url: URL —Ñ–∞–π–ª–∞ –æ—Ç Telegram
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            user_input: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {filename}")
            
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Yandex.Disk
            upload_result = await self.ya_uploader.upload_file(file_url, filename)
            
            if not upload_result['success']:
                return {
                    'success': False,
                    'error': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_result['error']}"
                }
            
            file_public_url = upload_result['url']
            preview_url = upload_result.get('preview_url', '')
            
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_public_url}")
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ —Å LLM (–µ—Å–ª–∏ –µ—Å—Ç—å)
            analysis_data = {}
            if user_input:
                logger.info("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥...")
                analysis_data = await self.llm_processor.parse_natural_language(user_input)
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            content_type = self._determine_content_type(filename, user_input)
            
            # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ
            if content_type == 'idea':
                result = await self._create_idea_record(filename, file_public_url, analysis_data)
            elif content_type == 'material':
                result = await self._create_material_record(filename, file_public_url, analysis_data)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                result = await self._create_material_record(filename, file_public_url, analysis_data)
            
            if not result.success:
                return {
                    'success': False,
                    'error': f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {result.error}"
                }
            
            # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–≤–∏–¥–µ–æ
            if preview_url and content_type in ['idea', 'material']:
                cover_result = await self.notion_manager.set_cover_image(
                    result.data['id'], 
                    preview_url
                )
                if cover_result.success:
                    logger.info("üñºÔ∏è –û–±–ª–æ–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            return {
                'success': True,
                'notion_record': result.data,
                'file_url': file_public_url,
                'content_type': content_type
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _determine_content_type(self, filename: str, user_input: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        if any(keyword in user_input.lower() for keyword in ['–∏–¥–µ—è', '–∫–æ–Ω—Ü–µ–ø—Ç', '–∑–∞–¥—É–º–∫–∞']):
            return 'idea'
        
        # –ü–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        if filename.lower().endswith(('.jpg', '.png', '.mp4', '.mov', '.avi')):
            return 'idea'  # –ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –æ–±—ã—á–Ω–æ –∏–¥–µ–∏
        else:
            return 'material'  # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–æ—á–µ–µ - –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    
    async def _create_idea_record(self, filename: str, file_url: str, analysis_data: Dict) -> NotionResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –∏–¥–µ–π"""
        idea_data = {
            'name': analysis_data.get('name', filename),
            'description': analysis_data.get('description', ''),
            'url': file_url,
            'tags': analysis_data.get('tags', []),
            'importance': analysis_data.get('importance', 5)
        }
        
        return await self.notion_manager.create_idea(idea_data)
    
    async def _create_material_record(self, filename: str, file_url: str, analysis_data: Dict) -> NotionResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        material_data = {
            'name': analysis_data.get('name', filename),
            'description': analysis_data.get('description', ''),
            'url': file_url,
            'tags': analysis_data.get('tags', [])
        }
        
        return await self.notion_manager.create_material(material_data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
bot_manager = EnhancedBotManager()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [
        [InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
        [InlineKeyboardButton("üí° –°–æ–∑–¥–∞—Ç—å –∏–¥–µ—é", callback_data="create_idea")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "ü§ñ *–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        message = update.message
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        if message.document:
            file_obj = message.document
            filename = file_obj.file_name or f"document_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        elif message.photo:
            file_obj = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            filename = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        elif message.video:
            file_obj = message.video
            filename = f"video_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
        elif message.audio:
            file_obj = message.audio
            filename = f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp3"
        else:
            await message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
        file = await context.bot.get_file(file_obj.file_id)
        file_url = file.file_path
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input = message.caption or ""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.reply_text(
            f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª `{filename}`...",
            parse_mode='Markdown'
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        result = await bot_manager.process_file_upload(file_url, filename, user_input)
        
        if result['success']:
            notion_record = result['notion_record']
            content_type = result['content_type']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É
            icon = "üí°" if content_type == 'idea' else "üìÅ"
            type_name = "–∏–¥–µ—è" if content_type == 'idea' else "–º–∞—Ç–µ—Ä–∏–∞–ª"
            
            success_text = (
                f"{icon} *{type_name.title()} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {notion_record['properties'].get('Name', filename)}\n"
                f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Notion]({notion_record['url']})\n"
                f"‚òÅÔ∏è [–§–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ]({result['file_url']})"
            )
            
            await processing_msg.edit_text(
                success_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
        else:
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:\n`{result['error']}`",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "create_task":
        await query.edit_message_text(
            "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "`–ù–∞–∑–≤–∞–Ω–∏–µ: –ú–æ—è –∑–∞–¥–∞—á–∞`\n"
            "`–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`\n"
            "`–°—Ç–∞—Ç—É—Å: To do`\n"
            "`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: !!!`",
            parse_mode='Markdown'
        )
        user_states[query.from_user.id] = 'creating_task'
        
    elif data == "create_idea":
        await query.edit_message_text(
            "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "`–ù–∞–∑–≤–∞–Ω–∏–µ: –ú–æ—è –∏–¥–µ—è`\n"
            "`–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`\n"
            "`–¢–µ–≥–∏: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è`\n"
            "`–í–∞–∂–Ω–æ—Å—Ç—å: 8`",
            parse_mode='Markdown'
        )
        user_states[query.from_user.id] = 'creating_idea'
        
    elif data == "stats":
        stats = bot_manager.notion_manager.get_stats()
        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:*\n\n"
            f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_requests']}\n"
            f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_requests']}\n"
            f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%"
        )
        await query.edit_message_text(stats_text, parse_mode='Markdown')
        
    elif data == "my_tasks":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks_result = await bot_manager.notion_manager.get_tasks(limit=5)
        
        if tasks_result.success:
            tasks = tasks_result.data
            if tasks:
                tasks_text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n\n"
                for i, task in enumerate(tasks[:5], 1):
                    title = task['properties'].get('–ó–∞–¥–∞—á–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    status = task['properties'].get('–°—Ç–∞—Ç—É—Å', '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞')
                    tasks_text += f"{i}. {title} [{status}]\n"
            else:
                tasks_text = "üìã –ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            tasks_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {tasks_result.error}"
        
        await query.edit_message_text(tasks_text, parse_mode='Markdown')

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_states.get(user_id)
    
    if state == 'creating_task':
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = await parse_task_data(text)
        if task_data:
            result = await bot_manager.notion_manager.create_task(task_data)
            
            if result.success:
                await update.message.reply_text(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
                    f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Notion]({result.data['url']})",
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result.error}"
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        
    elif state == 'creating_idea':
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–∏
        idea_data = await parse_idea_data(text)
        if idea_data:
            result = await bot_manager.notion_manager.create_idea(idea_data)
            
            if result.success:
                await update.message.reply_text(
                    f"üí° –ò–¥–µ—è —Å–æ–∑–¥–∞–Ω–∞!\n"
                    f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Notion]({result.data['url']})",
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: {result.error}"
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        try:
            analysis = await bot_manager.llm_processor.parse_natural_language(text)
            
            if analysis.get('name'):
                result = await bot_manager.notion_manager.create_idea(analysis)
                
                if result.success:
                    await update.message.reply_text(
                        f"üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ –∏–¥–µ—è!\n"
                        f"üìù {analysis['name']}\n"
                        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Notion]({result.data['url']})",
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    )
            else:
                await update.message.reply_text(
                    "üí≠ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            )

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

async def parse_task_data(text: str) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        lines = text.strip().split('\n')
        task_data = {}
        
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip().lower()
                value = value.strip()
                
                if key in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name', 'title']:
                    task_data['title'] = value
                elif key in ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description']:
                    task_data['description'] = value
                elif key in ['—Å—Ç–∞—Ç—É—Å', 'status']:
                    task_data['status'] = value
                elif key in ['–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'priority']:
                    task_data['priority'] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'title' not in task_data:
            return None
            
        return task_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞—á–∏: {e}")
        return None

async def parse_idea_data(text: str) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–¥–µ–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        lines = text.strip().split('\n')
        idea_data = {}
        
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip().lower()
                value = value.strip()
                
                if key in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name']:
                    idea_data['name'] = value
                elif key in ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description']:
                    idea_data['description'] = value
                elif key in ['—Ç–µ–≥–∏', 'tags']:
                    idea_data['tags'] = [tag.strip() for tag in value.split(',')]
                elif key in ['–≤–∞–∂–Ω–æ—Å—Ç—å', 'importance']:
                    try:
                        idea_data['importance'] = int(value)
                    except:
                        idea_data['importance'] = 5
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'name' not in idea_data:
            return None
            
        return idea_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–¥–µ–∏: {e}")
        return None

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling update: {context.error}")
    
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    application.add_handler(MessageHandler(filters.PHOTO, handle_file))
    application.add_handler(MessageHandler(filters.VIDEO, handle_file))
    application.add_handler(MessageHandler(filters.AUDIO, handle_file))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("   –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    print("   –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()