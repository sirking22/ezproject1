#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –æ—Ç–≤–µ—Ç–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
"""

import asyncio
import json
import logging
from notion_mcp_server import NotionMCPServer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def debug_mcp_response():
    """–û—Ç–ª–∞–¥–∏—Ç—å –æ—Ç–≤–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞
    server = NotionMCPServer()
    
    logger.info("üîç –û—Ç–ª–∞–¥–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    tasks_result = await server.get_pages({
        "database_id": "d09df250ce7e4e0d9fbe4e036d320def"
    })
    
    if not tasks_result:
        logger.error("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞")
        return
    
    logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞")
    logger.info(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(tasks_result)}")
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(tasks_result)}")
    
    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if tasks_result:
        first_result = tasks_result[0]
        logger.info(f"–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(first_result)}")
        logger.info(f"–¢–µ–∫—Å—Ç: {first_result.text[:500]}...")
        
        try:
            data = json.loads(first_result.text)
            logger.info(f"JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω")
            logger.info(f"–ö–ª—é—á–∏: {list(data.keys())}")
            
            if "results" in data:
                results = data["results"]
                logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                
                if results:
                    first_task = results[0]
                    logger.info(f"–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: {type(first_task)}")
                    logger.info(f"–ö–ª—é—á–∏ –∑–∞–¥–∞—á–∏: {list(first_task.keys())}")
                    
                    if "properties" in first_task:
                        props = first_task["properties"]
                        logger.info(f"–°–≤–æ–π—Å—Ç–≤–∞ –∑–∞–¥–∞—á–∏: {list(props.keys())}")
                        
                        # –ò—â–µ–º –ø–æ–ª–µ "–ó–∞–¥–∞—á–∞"
                        for prop_name, prop_value in props.items():
                            if prop_name == "–ó–∞–¥–∞—á–∞":
                                logger.info(f"–ü–æ–ª–µ '–ó–∞–¥–∞—á–∞': {prop_value}")
                                break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await debug_mcp_response()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 