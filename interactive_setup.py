#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ë–ò–ó–ù–ï–°-–¶–ï–ü–û–ß–ï–ö

–ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import requests
import json
from dotenv import load_dotenv

–ê—É–¥–∏–æ
–í–∏–∫—Ç–æ—Ä –í–∞—Å–∏–ª—å–µ–≤. ¬´–ë–µ–ª–∞—è –∫–Ω–∏–≥–∞¬ª
–ú–∞–∫—Å–∏–º –°—É—Å–ª–æ–≤

load_dotenv()

class InteractiveSetup:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        if not self.notion_token:
            raise ValueError("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        self.headers = {
            "Authorization": f"Bearer {self.notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        # ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.databases = {
            'concepts': '6fc4322e6d0c45a6b37ac49b818a063a',
            'tasks': 'd09df250ce7e4e0d9fbe4e036d320def',
            'materials': '1d9ace03d9ff804191a4d35aeedcbbd4',
            'guides': '47c6086858d442ebaeceb4fad1b23ba3',
            'kpi': '1d6ace03d9ff80bfb809ed21dfd2150c'
        }
    
    def ask_confirmation(self, question):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            response = input(f"\n{question} (–¥–∞/–Ω–µ—Ç): ").lower().strip()
            if response in ['–¥–∞', 'y', 'yes', '–¥']:
                return True
            elif response in ['–Ω–µ—Ç', 'n', 'no', '–Ω']:
                return False
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
    
    def add_field_with_confirmation(self, database_name, field_name, field_type, options=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        
        question = f"–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ '{field_name}' ({field_type}) –≤ –±–∞–∑—É {database_name.upper()}?"
        
        if self.ask_confirmation(question):
            success = self._add_field(database_name, field_name, field_type, options)
            if success:
                print(f"‚úÖ –ü–æ–ª–µ '{field_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è '{field_name}'")
            return success
        else:
            print(f"‚è≠Ô∏è –ü–æ–ª–µ '{field_name}' –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return False
    
    def _add_field(self, database_name, field_name, field_type, options=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        database_id = self.databases[database_name]
        
        if field_type == 'relation':
            property_data = {
                "name": field_name,
                "type": "relation",
                "relation": {
                    "database_id": options  # options —Å–æ–¥–µ—Ä–∂–∏—Ç target_db_id
                }
            }
        elif field_type == 'select':
            property_data = {
                "name": field_name,
                "type": "select",
                "select": {
                    "options": [{"name": option} for option in options]
                }
            }
        elif field_type == 'rich_text':
            property_data = {
                "name": field_name,
                "type": "rich_text"
            }
        elif field_type == 'number':
            property_data = {
                "name": field_name,
                "type": "number"
            }
        elif field_type == 'date':
            property_data = {
                "name": field_name,
                "type": "date"
            }
        elif field_type == 'person':
            property_data = {
                "name": field_name,
                "type": "people"
            }
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è: {field_type}")
            return False
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/databases/{database_id}",
                headers=self.headers,
                json={
                    "properties": {
                        field_name: property_data
                    }
                }
            )
            
            if response.status_code == 200:
                return True
            else:
                print(f"   –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞: {e}")
            return False
    
    def setup_concepts_testing_fields(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤"""
        
        print("\nüéØ –≠–¢–ê–ü 1: –ü–û–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í CONCEPTS")
        print("=" * 60)
        
        # –ü–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        fields_to_add = [
            {
                'name': '–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                'type': 'select',
                'options': ['–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è', '–í —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', '–£—Å–ø–µ—à–µ–Ω', '–ü—Ä–æ–≤–∞–ª–µ–Ω']
            },
            {
                'name': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞',
                'type': 'rich_text'
            },
            {
                'name': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
                'type': 'select',
                'options': ['–í–Ω–µ–¥—Ä—è—Ç—å', '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å']
            },
            {
                'name': '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                'type': 'date'
            },
            {
                'name': '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                'type': 'date'
            }
        ]
        
        added_count = 0
        for field in fields_to_add:
            success = self.add_field_with_confirmation(
                'concepts',
                field['name'],
                field['type'],
                field.get('options')
            )
            if success:
                added_count += 1
        
        print(f"\nüìä –ò–¢–û–ì–ò –≠–¢–ê–ü–ê 1:")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {added_count}/{len(fields_to_add)}")
        
        return added_count > 0
    
    def setup_guides_activity_fields(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–∞–π–¥–æ–≤"""
        
        print("\nüéØ –≠–¢–ê–ü 2: –ü–û–õ–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò –í GUIDES")
        print("=" * 60)
        
        # –ü–æ–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–∞–π–¥–æ–≤
        fields_to_add = [
            {
                'name': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π',
                'type': 'number'
            },
            {
                'name': '–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏',
                'type': 'select',
                'options': ['–ê–∫—Ç—É–∞–ª—å–Ω—ã–π', '–¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–£—Å—Ç–∞—Ä–µ–ª']
            },
            {
                'name': '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'type': 'date'
            },
            {
                'name': '–ê–≤—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'type': 'person'
            },
            {
                'name': '–°—Ç–∞—Ç—É—Å –≥–∞–π–¥–∞',
                'type': 'select',
                'options': ['–ê–∫—Ç–∏–≤–Ω—ã–π', '–í –¥–æ—Ä–∞–±–æ—Ç–∫–µ', '–ê—Ä—Ö–∏–≤–Ω—ã–π']
            },
            {
                'name': '–ü—Ä–∏—á–∏–Ω–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è',
                'type': 'rich_text'
            }
        ]
        
        added_count = 0
        for field in fields_to_add:
            success = self.add_field_with_confirmation(
                'guides',
                field['name'],
                field['type'],
                field.get('options')
            )
            if success:
                added_count += 1
        
        print(f"\nüìä –ò–¢–û–ì–ò –≠–¢–ê–ü–ê 2:")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {added_count}/{len(fields_to_add)}")
        
        return added_count > 0
    
    def setup_additional_relations(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"""
        
        print("\nüéØ –≠–¢–ê–ü 3: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–í–Ø–ó–ò")
        print("=" * 60)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
        relations_to_add = [
            {
                'database': 'guides',
                'name': '–ó–∞–º–µ–Ω—è—é—â–∏–π –≥–∞–π–¥',
                'target': 'guides'  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–≤—è–∑—å
            }
        ]
        
        added_count = 0
        for relation in relations_to_add:
            success = self.add_field_with_confirmation(
                relation['database'],
                relation['name'],
                'relation',
                self.databases[relation['target']]
            )
            if success:
                added_count += 1
        
        print(f"\nüìä –ò–¢–û–ì–ò –≠–¢–ê–ü–ê 3:")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {added_count}/{len(relations_to_add)}")
        
        return added_count > 0
    
    def run_interactive_setup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        
        print("üöÄ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ë–ò–ó–ù–ï–°-–¶–ï–ü–û–ß–ï–ö")
        print("üéØ –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º")
        print("=" * 80)
        
        print("\nüí° –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        print("üí° –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        
        # –≠—Ç–∞–ø 1: –ü–æ–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ–ø—Ç–∞—Ö
        concepts_success = self.setup_concepts_testing_fields()
        
        # –≠—Ç–∞–ø 2: –ü–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥–∞–π–¥–∞—Ö
        guides_success = self.setup_guides_activity_fields()
        
        # –≠—Ç–∞–ø 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
        relations_success = self.setup_additional_relations()
        
        # –ò—Ç–æ–≥–∏
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò")
        print("=" * 50)
        
        if concepts_success:
            print("‚úÖ –ü–æ–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CONCEPTS - –ù–ê–°–¢–†–û–ï–ù–´")
        else:
            print("‚ùå –ü–æ–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CONCEPTS - –ù–ï –ù–ê–°–¢–†–û–ï–ù–´")
        
        if guides_success:
            print("‚úÖ –ü–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ GUIDES - –ù–ê–°–¢–†–û–ï–ù–´")
        else:
            print("‚ùå –ü–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ GUIDES - –ù–ï –ù–ê–°–¢–†–û–ï–ù–´")
        
        if relations_success:
            print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ - –ù–ê–°–¢–†–û–ï–ù–´")
        else:
            print("‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ - –ù–ï –ù–ê–°–¢–†–û–ï–ù–´")
        
        if concepts_success or guides_success or relations_success:
            print(f"\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("üöÄ –ù–æ–≤—ã–µ –ø–æ–ª—è –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print(f"\n‚ö†Ô∏è –ù–ò–ß–ï–ì–û –ù–ï –ë–´–õ–û –ù–ê–°–¢–†–û–ï–ù–û")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        setup = InteractiveSetup()
        setup.run_interactive_setup()
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 