import json
import os
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List, Any, Optional
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
TASKS_DB_ID = os.getenv("NOTION_TASKS_DB_ID")
TEAMS_DB_ID = os.getenv("NOTION_TEAMS_DB_ID")

if not all([NOTION_TOKEN, TASKS_DB_ID, TEAMS_DB_ID]):
    raise RuntimeError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã NOTION_TOKEN, NOTION_TASKS_DB_ID, NOTION_TEAMS_DB_ID")

class TaskManagementFixer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self):
        self.headers = {
            "Authorization": f"Bearer {NOTION_TOKEN}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        self.employees = {}
        self.tasks = []
        self.fixes_applied = defaultdict(list)
        self.errors = []
        
    def load_audit_report(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –∞—É–¥–∏—Ç–∞"""
        try:
            with open("task_audit_report.json", "r", encoding="utf-8") as f:
                report = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            for emp in report.get("employees", []):
                self.employees[emp["id"]] = emp
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
            if "tasks" in report:
                self.tasks = report["tasks"]
            else:
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç –≤ –æ—Ç—á–µ—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
                self.fetch_tasks()
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç –∞—É–¥–∏—Ç–∞: {len(self.employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, {len(self.tasks)} –∑–∞–¥–∞—á")
            return True
            
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª task_audit_report.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ task_management_audit.py")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def fetch_tasks(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞–Ω–æ–≤–æ"""
        print("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...")
        url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for task in results:
            props = task.get("properties", {})
            task_info = {
                "id": task["id"],
                "title": self._extract_title(props),
                "status": self._extract_status(props),
                "assignees": self._extract_assignees(props),
                "deadline": self._extract_deadline(props),
                "created": self._extract_created(props),
                "properties": props
            }
            self.tasks.append(task_info)
    
    def _extract_title(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        for field in ["–ó–∞–¥–∞—á–∞", "Name", "Title", "–ù–∞–∑–≤–∞–Ω–∏–µ"]:
            if field in props and props[field].get("title"):
                return props[field]["title"][0]["plain_text"]
        return "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    
    def _extract_status(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å"""
        for field in ["–°—Ç–∞—Ç—É—Å", "Status"]:
            if field in props:
                status_obj = props[field]
                if status_obj.get("status"):
                    return status_obj["status"]["name"]
                elif status_obj.get("select"):
                    return status_obj["select"]["name"]
        return "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    def _extract_assignees(self, props: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        for field in ["–£—á–∞—Å—Ç–Ω–∏–∫–∏", "Assignee", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "Responsible"]:
            if field in props and props[field].get("people"):
                return [p.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") for p in props[field]["people"]]
        return []
    
    def _extract_deadline(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–¥–ª–∞–π–Ω"""
        for field in ["–î–µ–¥–ª–∞–π–Ω", "Due Date", "–î–∞—Ç–∞", "Deadline"]:
            if field in props and props[field].get("date"):
                return props[field]["date"]["start"]
        return ""
    
    def _extract_created(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è"""
        if "Created time" in props:
            return props["Created time"]["created_time"]
        return ""
    
    def find_employee_by_name(self, name: str) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
        for emp in self.employees.values():
            if emp["name"].lower() == name.lower():
                return emp
        return None
    
    def fix_no_assignee_tasks(self) -> None:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        no_assignee_tasks = [t for t in self.tasks if not t["assignees"]]
        
        if not no_assignee_tasks:
            print("   ‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
            return
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É)
        available_employees = [emp for emp in self.employees.values()]
        if not available_employees:
            print("   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return
        
        for task in no_assignee_tasks[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee = available_employees[0]
            
            try:
                self._assign_employee_to_task(task["id"], employee["id"])
                self.fixes_applied["assigned_employee"].append({
                    "task": task["title"],
                    "employee": employee["name"]
                })
                print(f"   ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω {employee['name']} –Ω–∞ –∑–∞–¥–∞—á—É: {task['title']}")
                
            except Exception as e:
                self.errors.append(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {employee['name']} –Ω–∞ {task['title']}: {e}")
    
    def fix_unknown_assignees(self) -> None:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        unknown_assignees = set()
        for task in self.tasks:
            for assignee in task["assignees"]:
                if not self.find_employee_by_name(assignee):
                    unknown_assignees.add(assignee)
        
        if not unknown_assignees:
            print("   ‚úÖ –ù–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
            return
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(unknown_assignees)} –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:")
        for name in unknown_assignees:
            print(f"      - {name}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–∞
        print("\n   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("      1. –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏—Ö –ª—é–¥–µ–π –≤ –±–∞–∑—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print("      2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –∏–º–µ–Ω–∞—Ö")
        print("      3. –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    
    def fix_no_status_tasks(self) -> None:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"""
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞...")
        
        no_status_tasks = [t for t in self.tasks if t["status"] in ["–ù–µ —É–∫–∞–∑–∞–Ω", ""]]
        
        if not no_status_tasks:
            print("   ‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "To Do" –¥–ª—è –∑–∞–¥–∞—á –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
        for task in no_status_tasks[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            try:
                self._update_task_status(task["id"], "To Do")
                self.fixes_applied["set_status"].append({
                    "task": task["title"],
                    "status": "To Do"
                })
                print(f"   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å 'To Do' –¥–ª—è: {task['title']}")
                
            except Exception as e:
                self.errors.append(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {task['title']}: {e}")
    
    def fix_overdue_tasks(self) -> None:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
        
        now = datetime.now().date()
        overdue_tasks = []
        
        for task in self.tasks:
            if task["deadline"]:
                try:
                    deadline = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                    if deadline < now and task["status"].lower() not in ["done", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"]:
                        overdue_tasks.append((task, deadline))
                except:
                    pass
        
        if not overdue_tasks:
            print("   ‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(overdue_tasks)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:")
        for task, deadline in overdue_tasks[:5]:
            print(f"      - {task['title']} (–¥–æ {deadline})")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        print("\n   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("      1. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã")
        print("      2. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ'")
        print("      3. –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
    
    def fix_old_todo_tasks(self) -> None:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –≤ ToDo"""
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –≤ ToDo...")
        
        now = datetime.now().date()
        old_todo_tasks = []
        
        for task in self.tasks:
            if task["status"].lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]:
                if task["created"]:
                    try:
                        created = datetime.fromisoformat(task["created"].split("T")[0]).date()
                        if created < now - timedelta(days=7):
                            old_todo_tasks.append((task, created))
                    except:
                        pass
        
        if not old_todo_tasks:
            print("   ‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –≤ ToDo")
            return
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(old_todo_tasks)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –≤ ToDo:")
        for task, created in old_todo_tasks[:5]:
            print(f"      - {task['title']} (—Å–æ–∑–¥–∞–Ω–∞ {created})")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"
        for task, created in old_todo_tasks[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            try:
                self._update_task_status(task["id"], "In Progress")
                self.fixes_applied["moved_to_progress"].append({
                    "task": task["title"],
                    "created": str(created)
                })
                print(f"   ‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ 'In Progress': {task['title']}")
                
            except Exception as e:
                self.errors.append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {task['title']}: {e}")
    
    def _assign_employee_to_task(self, task_id: str, employee_id: str) -> None:
        """–ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É"""
        url = f"https://api.notion.com/v1/pages/{task_id}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        assignee_field = None
        for field in ["–£—á–∞—Å—Ç–Ω–∏–∫–∏", "Assignee", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "Responsible"]:
            if field in self.tasks[0]["properties"]:
                assignee_field = field
                break
        
        if not assignee_field:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        
        properties = {
            assignee_field: {
                "people": [{"id": employee_id}]
            }
        }
        
        response = requests.patch(url, headers=self.headers, json={"properties": properties})
        if response.status_code != 200:
            raise Exception(f"API error: {response.status_code} - {response.text}")
    
    def _update_task_status(self, task_id: str, status: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        url = f"https://api.notion.com/v1/pages/{task_id}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_field = None
        for field in ["–°—Ç–∞—Ç—É—Å", "Status"]:
            if field in self.tasks[0]["properties"]:
                status_field = field
                break
        
        if not status_field:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞")
        
        properties = {
            status_field: {
                "select": {"name": status}
            }
        }
        
        response = requests.patch(url, headers=self.headers, json={"properties": properties})
        if response.status_code != 200:
            raise Exception(f"API error: {response.status_code} - {response.text}")
    
    def generate_fix_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
        print("\nüìä –û–¢–ß–ï–¢ –û–ë –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•")
        print("=" * 40)
        
        total_fixes = sum(len(fixes) for fixes in self.fixes_applied.values())
        print(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {total_fixes}")
        
        for fix_type, fixes in self.fixes_applied.items():
            if fixes:
                print(f"\nüîß {fix_type.upper()}: {len(fixes)}")
                for fix in fixes[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    if isinstance(fix, dict):
                        for key, value in fix.items():
                            print(f"   ‚Ä¢ {key}: {value}")
                    else:
                        print(f"   ‚Ä¢ {fix}")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors[:5]:
                print(f"   ‚Ä¢ {error}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            "timestamp": datetime.now().isoformat(),
            "fixes_applied": dict(self.fixes_applied),
            "errors": self.errors,
            "total_fixes": total_fixes
        }
        
        with open("task_fixes_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ task_fixes_report.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò")
    print("=" * 60)
    
    fixer = TaskManagementFixer()
    
    if not fixer.load_audit_report():
        return 1
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fixer.fix_no_assignee_tasks()
        fixer.fix_unknown_assignees()
        fixer.fix_no_status_tasks()
        fixer.fix_overdue_tasks()
        fixer.fix_old_todo_tasks()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        fixer.generate_fix_report()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 