#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ô –ó–ê–î–ê–ß–ò
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
CHECKLISTS_DB = "47c6086858d442ebaeceb4fad1b23ba3"

async def real_check_task(task_id: str):
    """–†–µ–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"üîç –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–î–ê–ß–ò")
    print("=" * 50)
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        task = await client.pages.retrieve(page_id=task_id)
        task_title = task['properties'].get('–ó–∞–¥–∞—á–∞', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        print(f"üìã –ó–∞–¥–∞—á–∞: {task_title}")
        print(f"üÜî ID: {task_id}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —Å –≥–∞–π–¥–∞–º–∏
        guides_relation = task['properties'].get('üì¨ –ì–∞–π–¥—ã', {}).get('relation', [])
        print(f"üìö –°–≤—è–∑–∞–Ω–æ —Å –≥–∞–π–¥–∞–º–∏: {len(guides_relation)}")
        for guide in guides_relation:
            print(f"   ‚Ä¢ {guide.get('id', 'N/A')}")
        
        # 3. –ò—â–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π
        print(f"\nüîç –ü–û–ò–°–ö –ü–û–î–ó–ê–î–ê–ß –ó–ê–î–ê–ß–ò:")
        subtasks_query = await client.databases.query(
            database_id=CHECKLISTS_DB,
            filter={
                "property": "–î–∏–∑–∞–π–Ω –∑–∞–¥–∞—á–∏",
                "relation": {
                    "contains": task_id
                }
            }
        )
        
        task_subtasks = subtasks_query.get('results', [])
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(task_subtasks)}")
        
        if task_subtasks:
            for i, subtask in enumerate(task_subtasks, 1):
                title = subtask['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                status = subtask['properties'].get('–°—Ç–∞—Ç—É—Å', {}).get('status', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                print(f"{i}. {title}")
                print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                print(f"   ID: {subtask['id']}")
                print()
        else:
            print("‚ùå –ü–û–î–ó–ê–î–ê–ß–ò –ù–ï –ù–ê–ô–î–ï–ù–´!")
        
        return {
            'task_title': task_title,
            'guides_count': len(guides_relation),
            'subtasks_count': len(task_subtasks)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    task_id = "21dace03-d9ff-8191-bcb0-ce64de65980e"
    
    result = asyncio.run(real_check_task(task_id))
    
    if result:
        print(f"\nüìä –†–ï–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò:")
        print(f"üìã –ó–∞–¥–∞—á–∞: {result['task_title']}")
        print(f"üìö –°–≤—è–∑–∞–Ω–æ —Å –≥–∞–π–¥–∞–º–∏: {result['guides_count']}")
        print(f"üìã –ü–æ–¥–∑–∞–¥–∞—á —É –∑–∞–¥–∞—á–∏: {result['subtasks_count']}")
        
        if result['subtasks_count'] == 0:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –£ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á!")
        else:
            print("‚úÖ –£ –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò!") 