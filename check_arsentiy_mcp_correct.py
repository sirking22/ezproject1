#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ Arsentiy —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ MCP —Ñ—É–Ω–∫—Ü–∏–∏
"""

import os
import sys
import json
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env_vars():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "NOTION_TOKEN",
        "NOTION_DESIGN_TASKS_DB_ID",  # Tasks Database
        "NOTION_SUBTASKS_DB_ID"       # Subtasks Database
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª")
        sys.exit(1)
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")
    subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")
    
    if not token or not tasks_db_id or not subtasks_db_id:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    return {
        "token": token,
        "tasks_db_id": tasks_db_id,
        "subtasks_db_id": subtasks_db_id
    }

async def check_arsentiy_in_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Arsentiy –≤ Tasks Database —á–µ—Ä–µ–∑ MCP"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê ARSENTIY –í TASKS DATABASE")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MCP —Å–µ—Ä–≤–µ—Ä
        from notion_mcp_server import NotionMCPServer
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
        server = NotionMCPServer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Tasks Database
        tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –∑–∞–¥–∞—á: {tasks_db_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP —Ñ—É–Ω–∫—Ü–∏—é get_pages
        arguments = {
            "database_id": tasks_db_id,
            "page_size": 1000  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        }
        
        result = await server.get_pages(arguments)
        
        if result and len(result) > 0:
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            content = result[0].text
            tasks_data = json.loads(content)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tasks_data)} –∑–∞–¥–∞—á")
            
            # –ò—â–µ–º Arsentiy –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
            arsentiy_tasks = []
            all_assignees = set()
            
            for task in tasks_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "–£—á–∞—Å—Ç–Ω–∏–∫–∏"
                if "–£—á–∞—Å—Ç–Ω–∏–∫–∏" in task:
                    assignees = task["–£—á–∞—Å—Ç–Ω–∏–∫–∏"]
                    if isinstance(assignees, list):
                        for assignee in assignees:
                            if isinstance(assignee, dict) and "name" in assignee:
                                all_assignees.add(assignee["name"])
                                if assignee["name"] == "Arsentiy":
                                    arsentiy_tasks.append(task)
            
            print(f"\nüë• –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ Tasks Database:")
            for assignee in sorted(all_assignees):
                print(f"  - {assignee}")
            
            print(f"\nüéØ –ó–∞–¥–∞—á–∏ Arsentiy: {len(arsentiy_tasks)}")
            for i, task in enumerate(arsentiy_tasks, 1):
                title = task.get("–ó–∞–¥–∞—á–∞", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                status = task.get("–°—Ç–∞—Ç—É—Å", "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞")
                print(f"{i}. {title} (–°—Ç–∞—Ç—É—Å: {status})")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Tasks Database")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Tasks Database: {e}")

async def check_arsentiy_in_subtasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Arsentiy –≤ Subtasks Database —á–µ—Ä–µ–∑ MCP"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê ARSENTIY –í SUBTASKS DATABASE")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MCP —Å–µ—Ä–≤–µ—Ä
        from notion_mcp_server import NotionMCPServer
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
        server = NotionMCPServer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Subtasks Database
        subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –ø–æ–¥–∑–∞–¥–∞—á: {subtasks_db_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP —Ñ—É–Ω–∫—Ü–∏—é get_pages
        arguments = {
            "database_id": subtasks_db_id,
            "page_size": 1000  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
        }
        
        result = await server.get_pages(arguments)
        
        if result and len(result) > 0:
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            content = result[0].text
            subtasks_data = json.loads(content)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(subtasks_data)} –ø–æ–¥–∑–∞–¥–∞—á")
            
            # –ò—â–µ–º Arsentiy –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
            arsentiy_subtasks = []
            all_assignees = set()
            
            for subtask in subtasks_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                if "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" in subtask:
                    assignees = subtask["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]
                    if isinstance(assignees, list):
                        for assignee in assignees:
                            if isinstance(assignee, dict) and "name" in assignee:
                                all_assignees.add(assignee["name"])
                                if assignee["name"] == "Arsentiy":
                                    arsentiy_subtasks.append(subtask)
            
            print(f"\nüë• –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ Subtasks Database:")
            for assignee in sorted(all_assignees):
                print(f"  - {assignee}")
            
            print(f"\nüìù –ü–æ–¥–∑–∞–¥–∞—á–∏ Arsentiy: {len(arsentiy_subtasks)}")
            for i, subtask in enumerate(arsentiy_subtasks, 1):
                title = subtask.get("–ü–æ–¥–∑–∞–¥–∞—á–∏", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                status = subtask.get(" –°—Ç–∞—Ç—É—Å", "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞")  # —Å –ø—Ä–æ–±–µ–ª–æ–º!
                print(f"{i}. {title} (–°—Ç–∞—Ç—É—Å: {status})")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Subtasks Database")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Subtasks Database: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê ARSENTIY –ß–ï–†–ï–ó MCP –°–ï–†–í–ï–†")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = load_env_vars()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await check_arsentiy_in_tasks()
    await check_arsentiy_in_subtasks()
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(main()) 