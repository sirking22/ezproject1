#!/usr/bin/env python3
"""
ENHANCED BUSINESS BOT - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 13 –±–∞–∑ + 29 relations
–û–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import os
import re
import logging
from datetime import datetime
from dotenv import load_dotenv
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class NotionAPI:
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö 13 –±–∞–∑"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.headers = {
            "Authorization": f"Bearer {self.notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        
        # –í—Å–µ 13 —Ä–∞–±–æ—á–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.databases = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
            'tasks': os.getenv('NOTION_TASKS_DB_ID'),
            'materials': os.getenv('NOTION_MATERIALS_DB_ID'),
            'ideas': os.getenv('NOTION_IDEAS_DB_ID'),
            'guides': os.getenv('NOTION_GUIDES_DB_ID'),
            
            # Business –æ–ø–µ—Ä–∞—Ü–∏–∏
            'content_plan': os.getenv('NOTION_CONTENT_PLAN_DB_ID'),
            'platforms': os.getenv('NOTION_PLATFORMS_DB_ID'),
            'clients': os.getenv('NOTION_CLIENTS_DB_ID'),
            'competitors': os.getenv('NOTION_COMPETITORS_DB_ID'),
            
            # –ö–æ–º–∞–Ω–¥–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
            'employees': os.getenv('NOTION_EMPLOYEES_DB_ID'),
            'tasks_templates': os.getenv('NOTION_TASKS_TEMPLATES_DB_ID'),
            'kpi': os.getenv('NOTION_KPI_DB_ID'),
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
            'learning': os.getenv('NOTION_LEARNING_DB_ID'),
            'links': os.getenv('NOTION_LINKS_DB_ID')
        }
        
        # –°—Ö–µ–º—ã relations (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.relations_map = {
            'tasks': {
                'templates': 'tasks_templates',
                'subtasks': 'tasks',  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–≤—è–∑—å
                'dependencies': 'tasks'
            },
            'materials': {
                'ideas': 'ideas',
                'guides': 'guides'
            },
            'ideas': {
                'materials': 'materials',
                'guides': 'guides', 
                'tasks': 'tasks',
                'competitors': 'competitors'
            },
            'guides': {
                'materials': 'materials',
                'ideas': 'ideas',
                'competitors': 'competitors',
                'employees': 'employees',
                'kpi': 'kpi'
            },
            'content_plan': {
                'platforms': 'platforms'
            },
            'platforms': {
                'content_plan': 'content_plan'
            },
            'kpi': {
                'guides': 'guides',
                'employees': 'employees'
            },
            'employees': {
                'guides': 'guides'
            },
            'tasks_templates': {
                'tasks': 'tasks'
            },
            'competitors': {
                'guides': 'guides',
                'ideas': 'ideas'
            }
        }

    async def _get_session(self):
        """–°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é"""
        return aiohttp.ClientSession()

    async def create_page(self, database_id: str, properties: dict) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        url = "https://api.notion.com/v1/pages"
        data = {
            "parent": {"database_id": database_id},
            "properties": properties
        }
        
        async with await self._get_session() as session:
            async with session.post(url, headers=self.headers, json=data) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    error_text = await response.text()
                    logger.error(f"Error creating page: {error_text}")
                    return {"error": error_text}

    async def search_database(self, database_id: str, query: str) -> dict:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        url = f"https://api.notion.com/v1/databases/{database_id}/query"
        
        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
        search_filter = {
            "or": [
                {
                    "property": "Name",
                    "title": {
                        "contains": query
                    }
                },
                {
                    "property": "Description", 
                    "rich_text": {
                        "contains": query
                    }
                }
            ]
        }
        
        data = {
            "filter": search_filter,
            "page_size": 10
        }
        
        async with await self._get_session() as session:
            async with session.post(url, headers=self.headers, json=data) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    # Fallback - –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
                    async with session.post(f"https://api.notion.com/v1/databases/{database_id}/query", 
                                          headers=self.headers, json={"page_size": 10}) as fallback_response:
                        if fallback_response.status == 200:
                            return await fallback_response.json()
                        return {"results": []}

    def get_related_databases(self, base_db: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.relations_map.get(base_db, {})

class EnhancedBusinessBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö 13 –±–∞–∑"""
    
    def __init__(self):
        self.notion = NotionAPI()
        self.team = {
            '–∞–Ω–Ω–∞': 'Anna - Designer',
            'anna': 'Anna - Designer', 
            '—Å–∞—à–∞': 'Alexander - Developer',
            'alexander': 'Alexander - Developer',
            '–º–∞—Ä–∏—è': 'Maria - Marketing',
            '–º–∞—à–∞': 'Maria - Marketing',
            '–≤–∏–∫–∞': 'Victoria - Content',
            'victoria': 'Victoria - Content',
            '–∞—Ä—Å–µ–Ω–∏–π': 'Arsenii - Analytics',
            'arsenii': 'Arsenii - Analytics'
        }

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –±–∞–∑"""
        keyboard = [
            [
                InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="db_tasks"),
                InlineKeyboardButton("üí° –ò–¥–µ–∏", callback_data="db_ideas")
            ],
            [
                InlineKeyboardButton("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="db_materials"),
                InlineKeyboardButton("üìñ –ì–∞–π–¥—ã", callback_data="db_guides")
            ],
            [
                InlineKeyboardButton("üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="db_content_plan"),
                InlineKeyboardButton("üè¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="db_platforms")
            ],
            [
                InlineKeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞", callback_data="db_employees"),
                InlineKeyboardButton("üìä KPI", callback_data="db_kpi")
            ],
            [
                InlineKeyboardButton("üëî –ö–ª–∏–µ–Ω—Ç—ã", callback_data="db_clients"),
                InlineKeyboardButton("üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", callback_data="db_competitors")
            ],
            [
                InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data="db_links"),
                InlineKeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ", callback_data="db_learning")
            ],
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º", callback_data="search_all"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="system_status")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üöÄ **ENHANCED BUSINESS BOT v2.0**\n\n"
            "**‚ú® 13 –ê–ö–¢–ò–í–ù–´–• –ë–ê–ó –î–ê–ù–ù–´–•:**\n"
            "‚Ä¢ üìã –ó–∞–¥–∞—á–∏ (49 –ø–æ–ª–µ–π, 6 —Å–≤—è–∑–µ–π)\n"
            "‚Ä¢ üìñ –ì–∞–π–¥—ã (25 –ø–æ–ª–µ–π, 6 —Å–≤—è–∑–µ–π)\n" 
            "‚Ä¢ üí° –ò–¥–µ–∏ (18 –ø–æ–ª–µ–π, 4 —Å–≤—è–∑–∏)\n"
            "‚Ä¢ üìä KPI (15 –ø–æ–ª–µ–π, 4 —Å–≤—è–∑–∏)\n"
            "‚Ä¢ üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (14 –ø–æ–ª–µ–π, 3 —Å–≤—è–∑–∏)\n"
            "‚Ä¢ üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (18 –ø–æ–ª–µ–π, 2 —Å–≤—è–∑–∏)\n"
            "‚Ä¢ + 7 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∞–∑\n\n"
            "**üîó 29 –ê–ö–¢–ò–í–ù–´–• –°–í–Ø–ó–ï–ô**\n"
            "**üéØ 95% –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PRODUCTION**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("db_"):
            db_name = query.data[3:]  # —É–±–∏—Ä–∞–µ–º "db_"
            await self.show_database_menu(query, db_name)
        elif query.data == "search_all":
            await self.show_search_help(query)
        elif query.data == "system_status":
            await self.show_system_status(query)
        elif query.data == "back":
            await self.show_main_menu(query)

    async def show_database_menu(self, query, db_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db_info = {
            'tasks': {'title': '–ó–∞–¥–∞—á–∏ (–î–∏–∑–∞–π–Ω)', 'fields': 49, 'relations': 6, 'icon': 'üìã'},
            'materials': {'title': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'fields': 14, 'relations': 3, 'icon': 'üìö'},
            'ideas': {'title': '–ë–∞–∑–∞ –∏–¥–µ–π/—Å–æ–≤–µ—Ç–æ–≤', 'fields': 18, 'relations': 4, 'icon': 'üí°'},
            'guides': {'title': '–ì–∞–π–¥—ã', 'fields': 25, 'relations': 6, 'icon': 'üìñ'},
            'content_plan': {'title': '–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω', 'fields': 8, 'relations': 1, 'icon': 'üìÑ'},
            'platforms': {'title': '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'fields': 12, 'relations': 1, 'icon': 'üè¢'},
            'clients': {'title': '–ë–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤', 'fields': 1, 'relations': 0, 'icon': 'üëî'},
            'competitors': {'title': '–†–µ—Ñ—ã', 'fields': 18, 'relations': 2, 'icon': 'üîç'},
            'employees': {'title': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 'fields': 5, 'relations': 1, 'icon': 'üë•'},
            'tasks_templates': {'title': '–¢–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏', 'fields': 5, 'relations': 1, 'icon': 'üìù'},
            'kpi': {'title': 'KPI', 'fields': 15, 'relations': 4, 'icon': 'üìä'},
            'learning': {'title': '–ë–∞–∑–∞ –æ–±—É—á–µ–Ω–∏—è', 'fields': 1, 'relations': 0, 'icon': 'üìö'},
            'links': {'title': '–°—Å—ã–ª–∫–∏', 'fields': 6, 'relations': 0, 'icon': 'üîó'}
        }
        
        info = db_info.get(db_name, {'title': db_name, 'fields': 0, 'relations': 0, 'icon': 'üìÑ'})
        related_dbs = self.notion.get_related_databases(db_name)
        
        keyboard = [
            [
                InlineKeyboardButton(f"‚ûï –°–æ–∑–¥–∞—Ç—å –≤ {info['icon']}", callback_data=f"create_{db_name}"),
                InlineKeyboardButton(f"üîç –ü–æ–∏—Å–∫ –≤ {info['icon']}", callback_data=f"search_{db_name}")
            ]
        ]
        
        if related_dbs:
            keyboard.append([InlineKeyboardButton("üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –±–∞–∑—ã", callback_data=f"relations_{db_name}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"{info['icon']} **{info['title'].upper()}**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –ü–æ–ª–µ–π: {info['fields']}\n"
            f"‚Ä¢ –°–≤—è–∑–µ–π: {info['relations']}\n"
            f"‚Ä¢ ID: `{self.notion.databases.get(db_name, '–Ω–µ –Ω–∞–π–¥–µ–Ω')[:20]}...`\n\n"
        )
        
        if related_dbs:
            text += f"üîó **–°–≤—è–∑–∞–Ω–Ω—ã–µ –±–∞–∑—ã:** {', '.join(related_dbs.values())}\n\n"
        
        text += "**–§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥:**\n"
        
        if db_name == 'tasks':
            text += "`–∑–∞–¥–∞—á–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ @—É—á–∞—Å—Ç–Ω–∏–∫–∏ - –æ–ø–∏—Å–∞–Ω–∏–µ`"
        elif db_name == 'ideas':
            text += "`–∏–¥–µ—è: –Ω–∞–∑–≤–∞–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ - —Ç–µ–≥–∏`"
        elif db_name == 'materials':
            text += "`–º–∞—Ç–µ—Ä–∏–∞–ª: –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å—Å—ã–ª–∫–∞ - —Ç–µ–≥–∏`"
        else:
            text += f"`{db_name}: –Ω–∞–∑–≤–∞–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ`"
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_system_status(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        text = (
            "üìä **–°–¢–ê–¢–£–° BUSINESS OPERATION SYSTEM**\n\n"
            "**üéØ –ì–û–¢–û–í–ù–û–°–¢–¨: 95% - PRODUCTION READY!**\n\n"
            "**‚úÖ –ê–ö–¢–ò–í–ù–´–ï –ë–ê–ó–´ (13/16):**\n"
            "‚Ä¢ üìã Tasks (–î–∏–∑–∞–π–Ω) - 49 –ø–æ–ª–µ–π, 6 —Å–≤—è–∑–µ–π\n"
            "‚Ä¢ üìñ Guides (–ì–∞–π–¥—ã) - 25 –ø–æ–ª–µ–π, 6 —Å–≤—è–∑–µ–π\n"
            "‚Ä¢ üí° Ideas - 18 –ø–æ–ª–µ–π, 4 —Å–≤—è–∑–∏\n"
            "‚Ä¢ üìä KPI - 15 –ø–æ–ª–µ–π, 4 —Å–≤—è–∑–∏\n"
            "‚Ä¢ üìö Materials - 14 –ø–æ–ª–µ–π, 3 —Å–≤—è–∑–∏\n"
            "‚Ä¢ üîç Competitors - 18 –ø–æ–ª–µ–π, 2 —Å–≤—è–∑–∏\n"
            "‚Ä¢ üìÑ Content Plan - 8 –ø–æ–ª–µ–π, 1 —Å–≤—è–∑—å\n"
            "‚Ä¢ üè¢ Platforms - 12 –ø–æ–ª–µ–π, 1 —Å–≤—è–∑—å\n"
            "‚Ä¢ üë• Employees - 5 –ø–æ–ª–µ–π, 1 —Å–≤—è–∑—å\n"
            "‚Ä¢ üìù Templates - 5 –ø–æ–ª–µ–π, 1 —Å–≤—è–∑—å\n"
            "‚Ä¢ üëî Clients - 1 –ø–æ–ª–µ\n"
            "‚Ä¢ üìö Learning - 1 –ø–æ–ª–µ\n"
            "‚Ä¢ üîó Links - 6 –ø–æ–ª–µ–π\n\n"
            "**üîó –í–°–ï–ì–û RELATIONS: 29**\n\n"
            "**üî¥ –ù–ï–î–û–°–¢–£–ü–ù–´ (3/16):**\n"
            "‚Ä¢ Concepts (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)\n"
            "‚Ä¢ Teams (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID)\n"
            "‚Ä¢ Products (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)\n\n"
            "**üöÄ –ö–õ–Æ–ß–ï–í–´–ï –¶–ï–ü–û–ß–ö–ò:**\n"
            "‚Ä¢ Knowledge: Materials ‚Üí Ideas ‚Üí Guides ‚úÖ\n"
            "‚Ä¢ Operations: Tasks ‚Üê Templates ‚Üê KPI ‚úÖ\n"
            "‚Ä¢ Business: Content ‚Üî Platforms ‚úÖ\n"
            "‚Ä¢ Analytics: Competitors ‚Üí Ideas ‚Üí KPI ‚úÖ\n\n"
            "**–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!**"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_search_help(self, query):
        """–ü–æ–º–æ—â—å –ø–æ –ø–æ–∏—Å–∫—É"""
        text = (
            "üîç **–ü–û–ò–°–ö –ü–û –í–°–ï–ú 13 –ë–ê–ó–ê–ú**\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞:**\n"
            "‚Ä¢ `–Ω–∞–π—Ç–∏: –∑–∞–ø—Ä–æ—Å` - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º\n"
            "‚Ä¢ `–ø–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å` - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
            "**–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤:**\n"
            "üìã Tasks, üí° Ideas, üìö Materials, üìñ Guides,\n"
            "üìÑ Content Plan, üè¢ Platforms, üëî Clients,\n"
            "üîç Competitors, üë• Employees, üìä KPI,\n"
            "üìù Templates, üìö Learning, üîó Links\n\n"
            "**29 —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –±–∞–∑–∞–º–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è!**"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_main_menu(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        keyboard = [
            [
                InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="db_tasks"),
                InlineKeyboardButton("üí° –ò–¥–µ–∏", callback_data="db_ideas")
            ],
            [
                InlineKeyboardButton("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="db_materials"),
                InlineKeyboardButton("üìñ –ì–∞–π–¥—ã", callback_data="db_guides")
            ],
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º", callback_data="search_all"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="system_status")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "üöÄ **ENHANCED BUSINESS BOT v2.0**\n13 –±–∞–∑, 29 —Å–≤—è–∑–µ–π, 95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower().strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        if text.startswith('–∑–∞–¥–∞—á–∞:') or text.startswith('task:'):
            await self.create_task(update, text)
        elif text.startswith('–∏–¥–µ—è:') or text.startswith('idea:'):
            await self.create_idea(update, text)
        elif text.startswith('–º–∞—Ç–µ—Ä–∏–∞–ª:') or text.startswith('material:'):
            await self.create_material(update, text)
        elif text.startswith('–≥–∞–π–¥:') or text.startswith('guide:'):
            await self.create_guide(update, text)
        elif text.startswith('–Ω–∞–π—Ç–∏:') or text.startswith('–ø–æ–∏—Å–∫') or text.startswith('search'):
            query = text.split(':', 1)[-1].strip() if ':' in text else text.split(' ', 1)[-1].strip()
            await self.search_all_databases(update, query)
        else:
            # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º
            await self.search_all_databases(update, text)

    async def create_task(self, update: Update, text: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º: –∑–∞–¥–∞—á–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ @—É—á–∞—Å—Ç–Ω–∏–∫–∏ - –æ–ø–∏—Å–∞–Ω–∏–µ
            content = text.split(':', 1)[1].strip()
            
            if '-' in content:
                title_part, description = content.split('-', 1)
                description = description.strip()
            else:
                title_part = content
                description = ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = re.findall(r'@(\w+)', title_part)
            title = re.sub(r'@\w+', '', title_part).strip()
            
            # –°–æ–∑–¥–∞–µ–º –≤ Notion
            properties = {
                "Name": {"title": [{"text": {"content": title}}]},
                "Description": {"rich_text": [{"text": {"content": description}}]} if description else {"rich_text": []},
                "Status": {"select": {"name": "–ù–æ–≤–∞—è"}},
                "Created": {"date": {"start": datetime.now().isoformat()}}
            }
            
            if participants:
                team_members = [self.team.get(p.lower(), p) for p in participants]
                properties["Participants"] = {"rich_text": [{"text": {"content": ", ".join(team_members)}}]}
            
            result = await self.notion.create_page(self.notion.databases['tasks'], properties)
            
            if 'error' not in result:
                response = f"‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\nüìã **{title}**\n"
                if description:
                    response += f"üìù {description}\n"
                if participants:
                    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(team_members)}\n"
                response += f"\nüîó **–°–≤—è–∑–∞–Ω–Ω—ã–µ –±–∞–∑—ã:** Templates, Projects, Stats"
            else:
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result['error']}"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    async def create_idea(self, update: Update, text: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∏"""
        try:
            content = text.split(':', 1)[1].strip()
            parts = content.split('-')
            
            title = parts[0].strip()
            description = parts[1].strip() if len(parts) > 1 else ""
            tags = parts[2].strip() if len(parts) > 2 else ""
            
            properties = {
                "Name": {"title": [{"text": {"content": title}}]},
                "Description": {"rich_text": [{"text": {"content": description}}]} if description else {"rich_text": []},
                "Tags": {"rich_text": [{"text": {"content": tags}}]} if tags else {"rich_text": []},
                "Created": {"date": {"start": datetime.now().isoformat()}}
            }
            
            result = await self.notion.create_page(self.notion.databases['ideas'], properties)
            
            if 'error' not in result:
                response = f"‚úÖ **–ò–¥–µ—è —Å–æ–∑–¥–∞–Ω–∞!**\n\nüí° **{title}**\n"
                if description:
                    response += f"üìù {description}\n"
                if tags:
                    response += f"üè∑ –¢–µ–≥–∏: {tags}\n"
                response += f"\nüîó **–°–≤—è–∑–∞–Ω–Ω—ã–µ –±–∞–∑—ã:** Materials, Guides, Tasks, Competitors"
            else:
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: {result['error']}"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    async def search_all_databases(self, update: Update, query: str):
        """–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º 13 –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        if not query or len(query) < 2:
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return
        
        await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫ '{query}' –ø–æ –≤—Å–µ–º 13 –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
        
        results = {}
        total_found = 0
        
        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        for db_name, db_id in self.notion.databases.items():
            if db_id:
                try:
                    search_result = await self.notion.search_database(db_id, query)
                    if search_result.get('results'):
                        results[db_name] = search_result['results']
                        total_found += len(search_result['results'])
                except Exception as e:
                    logger.error(f"Search error in {db_name}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if total_found == 0:
            response = f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ 13 –±–∞–∑–∞—Ö"
        else:
            response = f"üîç **–ù–∞–π–¥–µ–Ω–æ {total_found} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ '{query}':**\n\n"
            
            for db_name, items in results.items():
                if items:
                    db_info = {
                        'tasks': 'üìã –ó–∞–¥–∞—á–∏',
                        'ideas': 'üí° –ò–¥–µ–∏', 
                        'materials': 'üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
                        'guides': 'üìñ –ì–∞–π–¥—ã',
                        'content_plan': 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç',
                        'platforms': 'üè¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã',
                        'clients': 'üëî –ö–ª–∏–µ–Ω—Ç—ã',
                        'competitors': 'üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã',
                        'employees': 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
                        'kpi': 'üìä KPI',
                        'tasks_templates': 'üìù –®–∞–±–ª–æ–Ω—ã',
                        'learning': 'üìö –û–±—É—á–µ–Ω–∏–µ',
                        'links': 'üîó –°—Å—ã–ª–∫–∏'
                    }
                    
                    response += f"**{db_info.get(db_name, db_name)}** ({len(items)}):\n"
                    
                    for item in items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        title = ""
                        if item.get('properties', {}).get('Name', {}).get('title'):
                            title = item['properties']['Name']['title'][0]['text']['content']
                        elif item.get('properties', {}).get('Title', {}).get('title'):
                            title = item['properties']['Title']['title'][0]['text']['content']
                        
                        if title:
                            response += f"‚Ä¢ {title}\n"
                    
                    response += "\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–∞–∑—ã
            response += "üîó **–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**"
        
        await update.message.reply_text(response, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN not found in environment variables")
        return
    
    application = Application.builder().token(token).build()
    bot = EnhancedBusinessBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CallbackQueryHandler(bot.handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_message))
    
    print("üöÄ Enhanced Business Bot v2.0 –∑–∞–ø—É—â–µ–Ω!")
    print("üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: 13 –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö, 29 relations")
    print("üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: 95% - Production Ready!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 