#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–∞–π–¥–∞ —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GUIDES_DB = "47c6086858d442ebaeceb4fad1b23ba3"
TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
CHECKLISTS_DB = "9c5f4269d61449b6a7485579a3c21da3"

async def create_test_guide_with_checklist():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –≥–∞–π–¥ —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print("üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ì–ê–ô–î–ê –° –ß–ï–ö–õ–ò–°–¢–ê–ú–ò")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥–∞–π–¥
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–∞–π–¥–∞...")
        
        guide_properties = {
            "Name": {
                "title": [{"text": {"content": "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –≥–∞–π–¥ —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏"}}]
            },
            "–û–ø–∏—Å–∞–Ω–∏–µ": {
                "rich_text": [{"text": {"content": "–¢–µ—Å—Ç–æ–≤—ã–π –≥–∞–π–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏"}}]
            },
            "–°—Ç–∞—Ç—É—Å": {
                "status": {"name": "–°—Ç–∞—Ä—Ç"}
            },
            "Guide Status": {
                "select": {"name": "Active"}
            }
        }
        
        guide_response = await client.pages.create(
            parent={"database_id": GUIDES_DB},
            properties=guide_properties,
            children=[
                {
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [{"type": "text", "text": {"content": "## ‚úÖ –ß–µ–∫–ª–∏—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞:"}}]
                    }
                },
                {
                    "type": "to_do",
                    "to_do": {
                        "rich_text": [{"type": "text", "text": {"content": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"}}],
                        "checked": False
                    }
                },
                {
                    "type": "to_do",
                    "to_do": {
                        "rich_text": [{"type": "text", "text": {"content": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"}}],
                        "checked": False
                    }
                },
                {
                    "type": "to_do",
                    "to_do": {
                        "rich_text": [{"type": "text", "text": {"content": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"}}],
                        "checked": False
                    }
                },
                {
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [{"type": "text", "text": {"content": "## üìã –ß–µ–∫–ª–∏—Å—Ç:"}}]
                    }
                },
                {
                    "type": "to_do",
                    "to_do": {
                        "rich_text": [{"type": "text", "text": {"content": "–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"}}],
                        "checked": False
                    }
                },
                {
                    "type": "to_do",
                    "to_do": {
                        "rich_text": [{"type": "text", "text": {"content": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–¥-—Ä–µ–≤—å—é"}}],
                        "checked": False
                    }
                },
                {
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [{"type": "text", "text": {"content": "–≠—Ç–æ—Ç –≥–∞–π–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ –≥–∞–π–¥–æ–≤."}}]
                    }
                }
            ]
        )
        
        guide_id = guide_response['id']
        print(f"‚úÖ –ì–∞–π–¥ —Å–æ–∑–¥–∞–Ω: {guide_id}")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —ç—Ç–∏–º –≥–∞–π–¥–æ–º
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏...")
        
        task_properties = {
            "–§ –∑–∞–¥–∞—á–∏": {
                "url": "https://example.com/test-task"
            },
            "–û–ø–∏—Å–∞–Ω–∏–µ": {
                "rich_text": [{"text": {"content": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∫–∏ —Å –≥–∞–π–¥–æ–º"}}]
            },
            "–°—Ç–∞—Ç—É—Å": {
                "status": {"name": "To do"}
            },
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {
                "multi_select": [{"name": "Regular"}]
            },
            "üì¨ –ì–∞–π–¥—ã": {
                "relation": [{"id": guide_id}]
            }
        }
        
        task_response = await client.pages.create(
            parent={"database_id": TASKS_DB},
            properties=task_properties
        )
        
        task_id = task_response['id']
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–æ–≤...")
        
        blocks = await client.blocks.children.list(block_id=guide_id)
        
        guide_text = []
        for block in blocks.get('results', []):
            block_type = block['type']
            
            if block_type == 'paragraph':
                rich_text = block['paragraph'].get('rich_text', [])
                if rich_text:
                    guide_text.append(rich_text[0]['text']['content'])
            elif block_type == 'heading_2':
                rich_text = block['heading_2'].get('rich_text', [])
                if rich_text:
                    guide_text.append(f"## {rich_text[0]['text']['content']}")
            elif block_type == 'to_do':
                rich_text = block['to_do'].get('rich_text', [])
                checked = block['to_do'].get('checked', False)
                if rich_text:
                    checkbox = "[x]" if checked else "[ ]"
                    guide_text.append(f"- {checkbox} {rich_text[0]['text']['content']}")
        
        full_text = "\n".join(guide_text)
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–∞–π–¥–∞ –ø–æ–ª—É—á–µ–Ω ({len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º —á–µ–∫–ª–∏—Å—Ç—ã
        import re
        checklists = []
        
        patterns = [
            r'## ‚úÖ –ß–µ–∫–ª–∏—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞:(.*?)(?=##|\Z)',
            r'## üìã –ß–µ–∫–ª–∏—Å—Ç:(.*?)(?=##|\Z)',
            r'## ‚úÖ –ß–µ–∫–ª–∏—Å—Ç:(.*?)(?=##|\Z)',
            r'### –ß–µ–∫–ª–∏—Å—Ç:(.*?)(?=###|\Z)',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, full_text, re.DOTALL | re.IGNORECASE)
            for match in matches:
                if match.strip():
                    items = re.findall(r'- \[ \] (.*?)(?=\n- \[ \]|\n##|\n###|\Z)', match, re.DOTALL)
                    if items:
                        checklists.append({
                            'title': '–ß–µ–∫–ª–∏—Å—Ç –∏–∑ –≥–∞–π–¥–∞',
                            'items': [item.strip() for item in items if item.strip()]
                        })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklists)}")
        
        # 5. –°–æ–∑–¥–∞–µ–º —á–µ–∫–ª–∏—Å—Ç—ã –≤ –±–∞–∑–µ
        print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –≤ –±–∞–∑–µ...")
        
        created_checklists = 0
        for checklist in checklists:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ–∫–ª–∏—Å—Ç–∞
            checklist_content = []
            for item in checklist['items']:
                checklist_content.append({
                    "type": "to_do",
                    "to_do": {
                        "rich_text": [{"type": "text", "text": {"content": item}}],
                        "checked": False
                    }
                })
            
            # –°–≤–æ–π—Å—Ç–≤–∞ —á–µ–∫–ª–∏—Å—Ç–∞
            checklist_properties = {
                "–ü–æ–¥–∑–∞–¥–∞—á–∏": {
                    "title": [{"text": {"content": f"–ß–µ–∫–ª–∏—Å—Ç: –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞"}}]
                },
                " –°—Ç–∞—Ç—É—Å": {
                    "status": {"name": "To do"}
                },
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": {
                    "select": {"name": "–°—Ä–µ–¥–Ω–∏–π"}
                },
                "–ó–∞–¥–∞—á–∏": {
                    "relation": [{"id": task_id}]
                },
                "üì¨ –ì–∞–π–¥—ã": {
                    "relation": [{"id": guide_id}]
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ–∫–ª–∏—Å—Ç–∞
            checklist_response = await client.pages.create(
                parent={"database_id": CHECKLISTS_DB},
                properties=checklist_properties,
                children=[
                    {
                        "type": "heading_2",
                        "heading_2": {
                            "rich_text": [{"type": "text", "text": {"content": "–ß–µ–∫–ª–∏—Å—Ç"}}]
                        }
                    },
                    *checklist_content,
                    {
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∫ –∫–æ–ø–∏—è –∏–∑ –≥–∞–π–¥–∞. –ü—É–Ω–∫—Ç–æ–≤: {len(checklist['items'])}"}}]
                        }
                    }
                ]
            )
            
            created_checklists += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫–ª–∏—Å—Ç {created_checklists}: {checklist_response['id']}")
        
        # 6. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print(f"‚úÖ –ì–∞–π–¥ —Å–æ–∑–¥–∞–Ω: {guide_id}")
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        print(f"‚úÖ –ß–µ–∫–ª–∏—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(checklists)}")
        print(f"‚úÖ –ß–µ–∫–ª–∏—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {created_checklists}")
        
        if created_checklists > 0:
            print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –°–≤—è–∑–∫–∞ –≥–∞–π–¥ ‚Üí –∑–∞–¥–∞—á–∞ ‚Üí —á–µ–∫–ª–∏—Å—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥: https://www.notion.so/dreamclub22/{guide_id.replace('-', '')}")
            print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É: https://www.notion.so/dreamclub22/{task_id.replace('-', '')}")
        else:
            print("\n‚ö†Ô∏è –ß–µ–∫–ª–∏—Å—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        
        return guide_id, task_id, created_checklists
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return None, None, 0

if __name__ == "__main__":
    asyncio.run(create_test_guide_with_checklist()) 