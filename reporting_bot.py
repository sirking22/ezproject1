#!/usr/bin/env python3
"""
ü§ñ REPORTING BOT - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å Notion
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –æ —Ä–∞–±–æ—Ç–µ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –∏—Ö —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ Notion
"""

import os
import re
import json
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from dotenv import load_dotenv

import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from services.designer_report_service import DesignerReportService
from services.notion_bot_service import NotionBotService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ReportingBot:
    """–ë–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion"""
    
    def __init__(self):
        self.telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.cloudflare_proxy = os.getenv("CLOUDFLARE_PROXY")
        
        if not self.telegram_token or not self.notion_token:
            raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ NOTION_TOKEN")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.report_service = DesignerReportService()
        self.notion_service = NotionBotService()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        logger.info(f"‚úÖ ReportingBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: Telegram={bool(self.telegram_token)}, Notion={bool(self.notion_token)}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        welcome_text = f"""
üéØ **REPORTING BOT** - –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤

–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! 

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ `/report` - –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ
‚Ä¢ `/tasks` - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ `/help` - –ü–æ–º–æ—â—å

**–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:**
```
–ü–æ—Ç—Ä–∞—Ç–∏–ª 2 —á–∞—Å–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞
–°—Å—ã–ª–∫–∞: https://figma.com/file/...
–°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ
```

**–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç:**
"–ü–æ—Ç—Ä–∞—Ç–∏–ª 1.5 —á–∞—Å–∞ –Ω–∞ –≤–µ—Ä—Å—Ç–∫—É, —Å–¥–µ–ª–∞–ª –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="create_report")],
            [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="show_tasks")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–ü–û–ú–û–©–¨ –ü–û REPORTING BOT**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/report` - –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
‚Ä¢ `/tasks` - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:**
```
–í—Ä–µ–º—è: 2.5 —á–∞—Å–∞
–ó–∞–¥–∞—á–∞: –î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞
–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–∞
–°—Å—ã–ª–∫–∏: https://figma.com/file/...
–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ
```

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:**
‚Ä¢ –í—Ä–µ–º—è: "–ø–æ—Ç—Ä–∞—Ç–∏–ª 2 —á–∞—Å–∞", "—Ä–∞–±–æ—Ç–∞–ª 1.5—á"
‚Ä¢ –°—Å—ã–ª–∫–∏: Figma, LightShot, Yandex.Disk
‚Ä¢ –°—Ç–∞—Ç—É—Å: "–∑–∞–≤–µ—Ä—à–µ–Ω–æ", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", "–ø—Ä–æ–±–ª–µ–º—ã"

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 3 —á–∞—Å–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω, —Å–¥–µ–ª–∞–ª –º–∞–∫–µ—Ç"
‚Ä¢ "–†–∞–±–æ—Ç–∞–ª 1.5—á –Ω–∞–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º, –≥–æ—Ç–æ–≤–æ"
‚Ä¢ "2 —á–∞—Å–∞ –≤–µ—Ä—Å—Ç–∫–∞, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–∞–ø—Ç–∏–≤–æ–º"
        """
        
        if update.message:
            await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
        if not update.effective_user:
            if update.message:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        user_id = update.effective_user.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        self.user_states[user_id] = "waiting_report"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        tasks = await self._get_active_tasks()
        
        if tasks:
            keyboard = []
            for task in tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á
                task_title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]
                keyboard.append([InlineKeyboardButton(
                    f"üìã {task_title}", 
                    callback_data=f"select_task_{task['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚ùå –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞–¥–∞—á–µ", callback_data="no_task")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.message:
                await update.message.reply_text(
                    "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        else:
            if update.message:
                await update.message.reply_text(
                    "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç:",
                    parse_mode='Markdown'
                )
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
        tasks = await self._get_active_tasks()
        
        if not tasks:
            await update.message.reply_text("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        tasks_text = "üìã **–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:**\n\n"
        
        for i, task in enumerate(tasks[:10], 1):
            title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            status = task.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            priority = task.get('priority', '–û–±—ã—á–Ω–∞—è')
            
            tasks_text += f"{i}. **{title}**\n"
            tasks_text += f"   –°—Ç–∞—Ç—É—Å: {status} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n"
        
        keyboard = [[InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="create_report")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(tasks_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data == "create_report":
            await self.report_command(update, context)
        
        elif data == "show_tasks":
            await self.tasks_command(update, context)
        
        elif data == "help":
            await self.help_command(update, context)
        
        elif data.startswith("select_task_"):
            task_id = data.replace("select_task_", "")
            self.user_states[user_id] = f"waiting_report_task_{task_id}"
            
            await query.edit_message_text(
                f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç:",
                parse_mode='Markdown'
            )
        
        elif data == "no_task":
            self.user_states[user_id] = "waiting_report"
            
            await query.edit_message_text(
                "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç:",
                parse_mode='Markdown'
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id)
        
        if user_state and user_state.startswith("waiting_report"):
            await self._process_report(update, text, user_state)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            if self._is_likely_report(text):
                await self._process_report(update, text, "auto_report")
            else:
                await update.message.reply_text(
                    "üí° –ù–∞–ø–∏—à–∏—Ç–µ `/report` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ `/help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                )
    
    def _is_likely_report(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Ç—á–µ—Ç"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        report_keywords = [
            '–ø–æ—Ç—Ä–∞—Ç–∏–ª', '—Ä–∞–±–æ—Ç–∞–ª', '—á–∞—Å–æ–≤', '—á–∞—Å–∞', '—á–∞—Å', '–º–∏–Ω—É—Ç',
            '—Å–¥–µ–ª–∞–ª', '–∑–∞–≤–µ—Ä—à–∏–ª', '–≥–æ—Ç–æ–≤–æ', '–ø—Ä–æ–±–ª–µ–º—ã', '–≥–æ—Ç–æ–≤',
            '–¥–∏–∑–∞–π–Ω', '–≤–µ—Ä—Å—Ç–∫–∞', '–∫–æ–¥', '–º–∞–∫–µ—Ç', '–ª–æ–≥–æ—Ç–∏–ø'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        has_keywords = any(keyword in text_lower for keyword in report_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_patterns = [
            r'\d+\s*(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|—á|–º–∏–Ω—É—Ç|–º–∏–Ω)',
            r'\d+\.\d+\s*(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|—á)'
        ]
        has_time = any(re.search(pattern, text_lower) for pattern in time_patterns)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
        has_links = bool(re.search(r'https?://', text))
        
        return has_keywords or has_time or has_links
    
    async def _process_report(self, update: Update, text: str, user_state: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        try:
            # –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç
            report_data = self.report_service.parse_report(text)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            task_id = None
            if user_state.startswith("waiting_report_task_"):
                task_id = user_state.replace("waiting_report_task_", "")
            else:
                # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                task_id = await self._find_related_task(report_data)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –≤ Notion
            report_result = await self._create_notion_report(report_data, task_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = self._format_report_response(report_data, report_result)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states.pop(user_id, None)
            
            await update.message.reply_text(response_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help`"
            )
    
    async def _get_active_tasks(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Notion"""
        try:
            # ID –±–∞–∑—ã –∑–∞–¥–∞—á
            tasks_db_id = os.getenv("DESIGN_TASKS_DB", "d09df250-ce7e-4e0d-9fbe-4e036d320def")
            
            headers = {
                "Authorization": f"Bearer {self.notion_token}",
                "Notion-Version": "2022-06-28",
                "Content-Type": "application/json"
            }
            
            # –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            query_payload = {
                "filter": {
                    "and": [
                        {
                            "property": "Status",
                            "select": {
                                "does_not_equal": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                            }
                        },
                        {
                            "property": "Status",
                            "select": {
                                "does_not_equal": "–û—Ç–º–µ–Ω–µ–Ω–æ"
                            }
                        }
                    ]
                },
                "sorts": [
                    {
                        "property": "Priority",
                        "direction": "descending"
                    }
                ],
                "page_size": 10
            }
            
            url = f"{self.cloudflare_proxy}/v1/databases/{tasks_db_id}/query"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=query_payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        tasks = []
                        
                        for result in data.get('results', []):
                            properties = result.get('properties', {})
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                            name_prop = properties.get('Name', {}).get('title', [])
                            title = name_prop[0].get('plain_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') if name_prop else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å
                            status_prop = properties.get('Status', {}).get('select', {})
                            status = status_prop.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if status_prop else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            priority_prop = properties.get('Priority', {}).get('select', {})
                            priority = priority_prop.get('name', '–û–±—ã—á–Ω–∞—è') if priority_prop else '–û–±—ã—á–Ω–∞—è'
                            
                            tasks.append({
                                'id': result['id'],
                                'title': title,
                                'status': status,
                                'priority': priority
                            })
                        
                        return tasks
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {response.status}")
                        return []
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return []
    
    async def _find_related_task(self, report_data: Dict[str, Any]) -> Optional[str]:
        """–ò—â–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        try:
            tasks = await self._get_active_tasks()
            
            if not tasks:
                return None
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ—Ç—á–µ—Ç–∞
            report_text = f"{report_data.get('description', '')} {report_data.get('title', '')}".lower()
            
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for task in tasks:
                task_title = task['title'].lower()
                
                # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if any(word in task_title for word in report_text.split() if len(word) > 3):
                    return task['id']
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    async def _create_notion_report(self, report_data: Dict[str, Any], task_id: Optional[str]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –≤ Notion"""
        try:
            # ID –±–∞–∑—ã –æ—Ç—á–µ—Ç–æ–≤ (—Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç)
            reports_db_id = os.getenv("REPORTS_DB", "reports_database_id")
            
            headers = {
                "Authorization": f"Bearer {self.notion_token}",
                "Notion-Version": "2022-06-28",
                "Content-Type": "application/json"
            }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            properties = {
                "Name": {
                    "title": [
                        {
                            "text": {
                                "content": report_data.get('title', '–û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ')
                            }
                        }
                    ]
                },
                "Description": {
                    "rich_text": [
                        {
                            "text": {
                                "content": report_data.get('description', '')
                            }
                        }
                    ]
                },
                "Time Spent": {
                    "number": report_data.get('time_spent', 0)
                },
                "Status": {
                    "select": {
                        "name": report_data.get('status', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
                    }
                },
                "Date": {
                    "date": {
                        "start": datetime.now().isoformat()
                    }
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            if task_id:
                properties["Related Task"] = {
                    "relation": [
                        {
                            "id": task_id
                        }
                    ]
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            materials = report_data.get('materials', [])
            if materials:
                properties["Materials"] = {
                    "url": materials[0] if materials else ""
                }
            
            payload = {
                "parent": {
                    "database_id": reports_db_id
                },
                "properties": properties
            }
            
            url = f"{self.cloudflare_proxy}/v1/pages"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        result = await response.json()
                        return {
                            "success": True,
                            "page_id": result['id'],
                            "url": result.get('url', '')
                        }
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {response.status}")
                        return {"success": False, "error": f"HTTP {response.status}"}
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return {"success": False, "error": str(e)}
    
    def _format_report_response(self, report_data: Dict[str, Any], report_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç—á–µ—Ç"""
        response = "‚úÖ **–û–¢–ß–ï–¢ –°–û–ó–î–ê–ù**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {report_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        response += f"‚è±Ô∏è **–í—Ä–µ–º—è:** {report_data.get('time_spent', 0)} —á–∞—Å–æ–≤\n"
        response += f"üìä **–°—Ç–∞—Ç—É—Å:** {report_data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials = report_data.get('materials', [])
        if materials:
            response += f"üîó **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:** {len(materials)} —Å—Å—ã–ª–æ–∫\n"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        if report_result.get('success'):
            response += f"üìÑ **–°–æ–∑–¥–∞–Ω–æ –≤ Notion:** [–û—Ç–∫—Ä—ã—Ç—å]({report_result.get('url', '')})\n"
        else:
            response += f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {report_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        response += "\nüéØ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —Å–≤—è–∑–∞–Ω —Å –∑–∞–¥–∞—á–µ–π"
        
        return response
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        application = Application.builder().token(self.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("report", self.report_command))
        application.add_handler(CommandHandler("tasks", self.tasks_command))
        
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("üöÄ ReportingBot –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = ReportingBot()
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main() 