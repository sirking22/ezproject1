"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import json
import re
from typing import Dict, List, Any
from pathlib import Path

def load_changes() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    changes_file = "schema_changes.json"
    if not Path(changes_file).exists():
        print("‚ùå –§–∞–π–ª schema_changes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with open(changes_file, "r", encoding="utf-8") as f:
        return json.load(f)

def update_schema_file(changes: List[Dict[str, Any]]):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª notion_database_schemas.py"""
    schema_file = "notion_database_schemas.py"
    
    if not Path(schema_file).exists():
        print("‚ùå –§–∞–π–ª notion_database_schemas.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(schema_file, "r", encoding="utf-8") as f:
        content = f.read()
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    changes_by_db = {}
    for change in changes:
        db_name = change["database_name"]
        if db_name not in changes_by_db:
            changes_by_db[db_name] = []
        changes_by_db[db_name].append(change)
    
    # –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–∂–¥—É—é —Å—Ö–µ–º—É
    for db_name, db_changes in changes_by_db.items():
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã {db_name}...")
        
        # –ù–∞–π—Ç–∏ –±–ª–æ–∫ —Å—Ö–µ–º—ã –≤ —Ñ–∞–π–ª–µ
        pattern = rf'"{db_name}": DatabaseSchema\([^)]+\)'
        match = re.search(pattern, content, re.DOTALL)
        
        if not match:
            print(f"‚ö†Ô∏è –°—Ö–µ–º–∞ {db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")
            continue
        
        schema_block = match.group(0)
        updated_block = schema_block
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for change in db_changes:
            change_type = change["change_type"]
            property_name = change["property_name"]
            new_value = change["new_value"]
            
            if change_type == "new_status":
                updated_block = add_status_option(updated_block, property_name, new_value)
            elif change_type == "new_select_option":
                updated_block = add_select_option(updated_block, property_name, new_value)
            elif change_type == "new_multi_select_option":
                updated_block = add_multi_select_option(updated_block, property_name, new_value)
            elif change_type == "new_property":
                updated_block = add_property(updated_block, property_name, new_value)
        
        # –ó–∞–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ
        content = content.replace(schema_block, updated_block)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(schema_file, "w", encoding="utf-8") as f:
        f.write(content)
    
    print("‚úÖ –§–∞–π–ª notion_database_schemas.py –æ–±–Ω–æ–≤–ª—ë–Ω")
    return True

def add_status_option(schema_block: str, property_name: str, new_value: str) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Å—Ö–µ–º—É"""
    # –ù–∞–π—Ç–∏ –±–ª–æ–∫ status_options
    pattern = rf'status_options=\{{[^}}]*"–°—Ç–∞—Ç—É—Å":\s*\[[^\]]*\]'
    match = re.search(pattern, schema_block, re.DOTALL)
    
    if match:
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–æ–∫
        status_block = match.group(0)
        if new_value not in status_block:
            # –ù–∞–π—Ç–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É —Å–ø–∏—Å–∫–∞
            list_end = status_block.rfind("]")
            if list_end != -1:
                updated_status = status_block[:list_end] + f', "{new_value}"' + status_block[list_end:]
                return schema_block.replace(status_block, updated_status)
    
    return schema_block

def add_select_option(schema_block: str, property_name: str, new_value: str) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ–ø—Ü–∏—é –≤—ã–±–æ—Ä–∞ –≤ —Å—Ö–µ–º—É"""
    # –ù–∞–π—Ç–∏ –±–ª–æ–∫ select_options
    pattern = rf'select_options=\{{[^}}]*"{re.escape(property_name)}":\s*\[[^\]]*\]'
    match = re.search(pattern, schema_block, re.DOTALL)
    
    if match:
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ–ø—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫
        select_block = match.group(0)
        if new_value not in select_block:
            # –ù–∞–π—Ç–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É —Å–ø–∏—Å–∫–∞
            list_end = select_block.rfind("]")
            if list_end != -1:
                updated_select = select_block[:list_end] + f', "{new_value}"' + select_block[list_end:]
                return schema_block.replace(select_block, updated_select)
    
    return schema_block

def add_multi_select_option(schema_block: str, property_name: str, new_value: str) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥ –≤ —Å—Ö–µ–º—É"""
    # –ù–∞–π—Ç–∏ –±–ª–æ–∫ multi_select_options
    pattern = rf'multi_select_options=\{{[^}}]*"{re.escape(property_name)}":\s*\[[^\]]*\]'
    match = re.search(pattern, schema_block, re.DOTALL)
    
    if match:
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥ –≤ —Å–ø–∏—Å–æ–∫
        multi_block = match.group(0)
        if new_value not in multi_block:
            # –ù–∞–π—Ç–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É —Å–ø–∏—Å–∫–∞
            list_end = multi_block.rfind("]")
            if list_end != -1:
                updated_multi = multi_block[:list_end] + f', "{new_value}"' + multi_block[list_end:]
                return schema_block.replace(multi_block, updated_multi)
    
    return schema_block

def add_property(schema_block: str, property_name: str, property_type: str) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –≤ —Å—Ö–µ–º—É"""
    # –ù–∞–π—Ç–∏ –±–ª–æ–∫ properties
    pattern = r'properties=\{[^}]*\}'
    match = re.search(pattern, schema_block, re.DOTALL)
    
    if match:
        properties_block = match.group(0)
        if property_name not in properties_block:
            # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
            property_entry = f'"{property_name}": {{"type": "{property_type}"}}'
            
            # –ù–∞–π—Ç–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É properties
            brace_end = properties_block.rfind("}")
            if brace_end != -1:
                updated_properties = properties_block[:brace_end] + f', {property_entry}' + properties_block[brace_end:]
                return schema_block.replace(properties_block, updated_properties)
    
    return schema_block

def create_migration_script(changes: List[Dict[str, Any]]):
    """–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"""
    migration_lines = [
        "# –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º",
        "# –ó–∞–ø—É—Å–∫: python migrate_schemas.py",
        "",
        "from notion_database_schemas import DATABASE_SCHEMAS",
        "import json",
        "",
        "def apply_migrations():",
        "    \"\"\"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ —Å—Ö–µ–º–∞–º\"\"\"",
        ""
    ]
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    changes_by_db = {}
    for change in changes:
        db_name = change["database_name"]
        if db_name not in changes_by_db:
            changes_by_db[db_name] = []
        changes_by_db[db_name].append(change)
    
    for db_name, db_changes in changes_by_db.items():
        migration_lines.append(f"    # –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è {db_name}")
        
        for change in db_changes:
            change_type = change["change_type"]
            property_name = change["property_name"]
            new_value = change["new_value"]
            
            if change_type == "new_status":
                migration_lines.append(
                    f"    # DATABASE_SCHEMAS['{db_name}'].status_options['{property_name}'].append('{new_value}')"
                )
            elif change_type == "new_select_option":
                migration_lines.append(
                    f"    # DATABASE_SCHEMAS['{db_name}'].select_options['{property_name}'].append('{new_value}')"
                )
            elif change_type == "new_multi_select_option":
                migration_lines.append(
                    f"    # DATABASE_SCHEMAS['{db_name}'].multi_select_options['{property_name}'].append('{new_value}')"
                )
            elif change_type == "new_property":
                migration_lines.append(
                    f"    # DATABASE_SCHEMAS['{db_name}'].properties['{property_name}'] = {{'type': '{new_value}'}}"
                )
        
        migration_lines.append("")
    
    migration_lines.extend([
        "    print('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')",
        "",
        "if __name__ == '__main__':",
        "    apply_migrations()"
    ])
    
    with open("migrate_schemas.py", "w", encoding="utf-8") as f:
        f.write("\n".join(migration_lines))
    
    print("‚úÖ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: migrate_schemas.py")

def validate_updates():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Å—Ö–µ–º—ã
        from notion_database_schemas import get_all_schemas
        
        schemas = get_all_schemas()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(schemas)} —Å—Ö–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—É—é —Å—Ö–µ–º—É
        for db_name, schema in schemas.items():
            if not schema.database_id:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–µ {db_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç database_id")
                return False
            
            if not schema.name:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–µ {db_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç name")
                return False
        
        print("‚úÖ –í—Å–µ —Å—Ö–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–•–ï–ú")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    changes = load_changes()
    
    if not changes:
        print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ—Ç")
        return
    
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    import shutil
    shutil.copy("notion_database_schemas.py", "notion_database_schemas.py.backup")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ö–µ–º
    if update_schema_file(changes):
        # –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        create_migration_script(changes)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if validate_updates():
            print("\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python test_schemas_integration.py")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CI: python setup_ci.py check")
            print("3. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            print("4. –£–¥–∞–ª–∏—Ç–µ schema_changes.json –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: notion_database_schemas.py.backup")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ö–µ–º")

if __name__ == "__main__":
    main() 