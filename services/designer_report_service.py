"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
"""

import re
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict

from notion_client import Client
from config.designer_bot_config import config

logger = logging.getLogger(__name__)

@dataclass
class WorkReport:
    """–û—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–µ –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
    designer_name: str
    project_name: str
    task_name: str
    work_description: str
    time_spent_hours: float
    materials_added: List[str] = None
    links_added: List[str] = None
    comments: str = ""
    timestamp: str = None
    status_changed: Optional[str] = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()
        if self.materials_added is None:
            self.materials_added = []
        if self.links_added is None:
            self.links_added = []

class DesignerReportService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.notion = Client(auth=config.notion.token)
        self.schemas = config.get_database_schemas()
    
    def parse_quick_report(self, text: str) -> Optional[WorkReport]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        for pattern in config.quick_report_patterns:
            match = re.match(pattern, text, re.IGNORECASE)
            if match:
                groups = match.groups()
                
                if len(groups) >= 3:
                    # –§–æ—Ä–º–∞—Ç: "–ü—Ä–æ–µ–∫—Ç - –ó–∞–¥–∞—á–∞ - –û–ø–∏—Å–∞–Ω–∏–µ –í—Ä–µ–º—è"
                    project_task = groups[0].strip()
                    description = groups[1].strip()
                    time_spent = float(groups[2])
                elif len(groups) >= 2:
                    # –§–æ—Ä–º–∞—Ç: "–ü—Ä–æ–µ–∫—Ç –í—Ä–µ–º—è" –∏–ª–∏ "–ü—Ä–æ–µ–∫—Ç - –í—Ä–µ–º—è"
                    project_task = groups[0].strip()
                    time_spent = float(groups[1])
                    description = "–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"
                else:
                    continue
                
                # –†–∞–∑–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–¥–∞—á—É
                project_parts = project_task.split()
                if len(project_parts) >= 2:
                    task = project_parts[-1]
                    project = ' '.join(project_parts[:-1])
                else:
                    project = project_task
                    task = "–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"
                
                return WorkReport(
                    designer_name="",  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                    project_name=project,
                    task_name=task,
                    work_description=description,
                    time_spent_hours=time_spent
                )
        
        return None
    
    def find_task_in_notion(self, task_name: str, project_name: str = "") -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –≤ Notion"""
        try:
            filters = []
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
            filters.append({
                "property": "–ó–∞–¥–∞—á–∞",
                "title": {
                    "contains": task_name
                }
            })
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç, –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
            if project_name:
                project_id = self.find_project_id(project_name)
                if project_id:
                    filters.append({
                        "property": "–ü—Ä–æ–µ–∫—Ç",
                        "relation": {
                            "contains": project_id
                        }
                    })
            
            response = self.notion.databases.query(
                database_id=config.notion.tasks_database_id,
                filter={
                    "and": filters
                } if len(filters) > 1 else filters[0]
            )
            
            if response["results"]:
                return response["results"][0]
            
            return None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    def find_project_id(self, project_name: str) -> Optional[str]:
        """–ù–∞–π—Ç–∏ ID –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            response = self.notion.databases.query(
                database_id=config.notion.projects_database_id,
                filter={
                    "property": "Name",
                    "title": {
                        "contains": project_name
                    }
                }
            )
            
            if response["results"]:
                return response["results"][0]["id"]
            
            return None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
    
    def update_task_in_notion(self, report: WorkReport) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Notion"""
        try:
            task = self.find_task_in_notion(report.task_name, report.project_name)
            
            if not task:
                logger.warning(f"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {report.task_name}")
                return False
            
            task_id = task["id"]
            current_properties = task["properties"]
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = {}
            
            # –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            current_time = current_properties.get("–ó–∞—Ç—Ä–∞—á–µ–Ω–æ_–º–∏–Ω—É—Ç", {}).get("number", 0)
            new_time = current_time + int(report.time_spent_hours * 60)
            
            updates["–ó–∞—Ç—Ä–∞—á–µ–Ω–æ_–º–∏–Ω—É—Ç"] = {
                "number": new_time
            }
            
            # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if report.work_description:
                current_comments = current_properties.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", {}).get("rich_text", [])
                
                new_comment = {
                    "text": {
                        "content": f"[{datetime.now().strftime('%H:%M')}] {report.designer_name}: {report.work_description}"
                    }
                }
                
                if report.materials_added:
                    new_comment["text"]["content"] += f"\nüìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {', '.join(report.materials_added)}"
                
                if report.links_added:
                    new_comment["text"]["content"] += f"\nüîó –°—Å—ã–ª–∫–∏: {', '.join(report.links_added)}"
                
                current_comments.append(new_comment)
                
                updates["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"] = {
                    "rich_text": current_comments
                }
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if report.status_changed:
                updates["–°—Ç–∞—Ç—É—Å"] = {
                    "status": {
                        "name": report.status_changed
                    }
                }
            
            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.notion.pages.update(
                page_id=task_id,
                properties=updates
            )
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {report.task_name} (–≤—Ä–µ–º—è: +{report.time_spent_hours}—á)")
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    def create_material_in_notion(self, report: WorkReport, file_url: str = "") -> bool:
        """–°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion"""
        try:
            material_properties = {
                "Name": {
                    "title": [
                        {
                            "text": {
                                "content": f"{report.project_name} - {report.task_name}"
                            }
                        }
                    ]
                },
                "–û–ø–∏—Å–∞–Ω–∏–µ": {
                    "rich_text": [
                        {
                            "text": {
                                "content": f"–ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {report.designer_name}: {report.work_description}"
                            }
                        }
                    ]
                },
                "–°—Ç–∞—Ç—É—Å": {
                    "status": {
                        "name": "–í —Ä–∞–±–æ—Ç–µ"
                    }
                },
                "–¢–µ–≥–∏": {
                    "multi_select": [
                        {"name": "–î–∏–∑–∞–π–Ω"},
                        {"name": report.project_name}
                    ]
                }
            }
            
            if file_url:
                material_properties["URL"] = {
                    "url": file_url
                }
            
            self.notion.pages.create(
                parent={"database_id": config.notion.materials_database_id},
                properties=material_properties
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {report.project_name} - {report.task_name}")
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
            return False
    
    def get_daily_summary(self, designer_name: str, date: datetime = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –∑–∞ –¥–µ–Ω—å"""
        if date is None:
            date = datetime.now()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∏–∑ Notion
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            "designer": designer_name,
            "date": date.strftime("%Y-%m-%d"),
            "total_time": 0,
            "tasks_count": 0,
            "projects": []
        }
    
    def validate_report(self, report: WorkReport) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞"""
        errors = []
        
        if not report.designer_name:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞")
        
        if not report.project_name:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç")
        
        if not report.task_name:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–∞—á–∞")
        
        if report.time_spent_hours <= 0:
            errors.append("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if report.time_spent_hours > config.reports.max_time_per_report:
            errors.append(f"–í—Ä–µ–º—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ({config.reports.max_time_per_report}—á)")
        
        if errors:
            return False, "; ".join(errors)
        
        return True, ""
    
    def extract_links_from_text(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        url_pattern = r'https?://[^\s]+'
        return re.findall(url_pattern, text)
    
    def extract_materials_from_text(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        materials = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        patterns = {
            "figma": r'figma\.com/file/[a-zA-Z0-9]+',
            "drive": r'drive\.google\.com/[^\s]+',
            "yandex": r'disk\.yandex\.ru/[^\s]+',
            "image": r'\.(jpg|jpeg|png|gif|svg)\b',
            "video": r'\.(mp4|avi|mov|mkv)\b'
        }
        
        for material_type, pattern in patterns.items():
            if re.search(pattern, text, re.IGNORECASE):
                materials.append(material_type)
        
        return materials
    
    def process_report(self, report: WorkReport) -> Tuple[bool, str]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—á—ë—Ç"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, error_msg = self.validate_report(report)
        if not is_valid:
            return False, error_msg
        
        # –ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        if report.work_description:
            report.links_added = self.extract_links_from_text(report.work_description)
            report.materials_added = self.extract_materials_from_text(report.work_description)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Notion
        success = self.update_task_in_notion(report)
        
        if success:
            return True, "–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
        else:
            return False, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Notion"
    
    def get_active_projects(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            response = self.notion.databases.query(
                database_id=config.notion.projects_database_id,
                filter={
                    "property": "–°—Ç–∞—Ç—É—Å",
                    "status": {
                        "does_not_equal": "–ó–∞–≤–µ—Ä—à—ë–Ω"
                    }
                }
            )
            
            projects = []
            for page in response["results"]:
                name_prop = page["properties"].get("Name", {})
                if name_prop.get("title"):
                    projects.append(name_prop["title"][0]["plain_text"])
            
            return projects[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ–µ–∫—Ç–æ–≤
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return ["–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04", "–ë—Ä–µ–Ω–¥–∏–Ω–≥", "–î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞"]
    
    def get_tasks_for_project(self, project_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_id = self.find_project_id(project_name)
            if not project_id:
                return ["–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"]
            
            response = self.notion.databases.query(
                database_id=config.notion.tasks_database_id,
                filter={
                    "property": "–ü—Ä–æ–µ–∫—Ç",
                    "relation": {
                        "contains": project_id
                    }
                }
            )
            
            tasks = []
            for page in response["results"]:
                name_prop = page["properties"].get("–ó–∞–¥–∞—á–∞", {})
                if name_prop.get("title"):
                    tasks.append(name_prop["title"][0]["plain_text"])
            
            return tasks[:8] if tasks else ["–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"]
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return ["–í–µ—Ä—Å—Ç–∫–∞", "–î–∏–∑–∞–π–Ω", "–ë—Ä–µ–Ω–¥–∏–Ω–≥", "–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
service = DesignerReportService() 