#!/usr/bin/env python3
"""
üéØ PRODUCT LIFECYCLE MANAGER
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ RAMIT

–§–£–ù–ö–¶–ò–û–ù–ê–õ:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ç—É—Å–µ
3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö
4. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–∞–∑–∞–º–∏

–ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ:
–ü—Ä–µ–¥–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Üí –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Üí –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ ‚Üí –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Üí –ê—Ä—Ö–∏–≤
"""

import os
import json
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from notion_client import AsyncClient
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/product_lifecycle.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class ProductStatus:
    """–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ"""
    name: str
    description: str
    color: str
    next_statuses: List[str]
    min_duration_days: int = 0
    max_duration_days: int = 365
    auto_transition: bool = False
    transition_conditions: Optional[Dict[str, Any]] = None

@dataclass
class ProductLifecycleEvent:
    """–°–æ–±—ã—Ç–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product_id: str
    product_name: str
    old_status: str
    new_status: str
    timestamp: datetime
    reason: str
    triggered_by: str  # "manual", "auto", "system"
    metadata: Optional[Dict[str, Any]] = None

class ProductLifecycleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.notion = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
        self.product_lines_db = os.getenv("PRODUCT_LINES_DB", "")
        self.projects_db = os.getenv("PROJECTS_DB", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.lifecycle_statuses = {
            "–ü—Ä–µ–¥–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": ProductStatus(
                name="–ü—Ä–µ–¥–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                description="–ò–¥–µ—è, –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –ø—Ä–æ—Ç–æ—Ç–∏–ø, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                color="yellow",
                next_statuses=["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–ê—Ä—Ö–∏–≤"],
                min_duration_days=7,
                max_duration_days=90,
                auto_transition=False,
                transition_conditions={
                    "has_prototype": True,
                    "has_business_plan": True,
                    "has_funding": True
                }
            ),
            "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": ProductStatus(
                name="–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                description="–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                color="blue",
                next_statuses=["–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "–ê—Ä—Ö–∏–≤"],
                min_duration_days=30,
                max_duration_days=180,
                auto_transition=False,
                transition_conditions={
                    "has_materials": True,
                    "has_quality_control": True,
                    "production_ready": True
                }
            ),
            "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ": ProductStatus(
                name="–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ",
                description="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ä–µ–∫–ª–∞–º–∞, –ø—Ä–æ–¥–∞–∂–∏",
                color="orange",
                next_statuses=["–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ê—Ä—Ö–∏–≤"],
                min_duration_days=14,
                max_duration_days=365,
                auto_transition=False,
                transition_conditions={
                    "has_marketing_materials": True,
                    "has_sales_channel": True,
                    "stable_sales": True
                }
            ),
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": ProductStatus(
                name="–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                description="–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                color="green",
                next_statuses=["–ê—Ä—Ö–∏–≤"],
                min_duration_days=0,
                max_duration_days=730,
                auto_transition=False,
                transition_conditions={
                    "has_support_system": True,
                    "has_update_plan": True
                }
            ),
            "–ê—Ä—Ö–∏–≤": ProductStatus(
                name="–ê—Ä—Ö–∏–≤",
                description="–°–Ω—è—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∞—Ä—Ö–∏–≤",
                color="gray",
                next_statuses=[],
                min_duration_days=0,
                max_duration_days=0,
                auto_transition=False
            )
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_products": 0,
            "products_by_status": {},
            "transitions_today": 0,
            "overdue_products": 0,
            "avg_time_in_status": {}
        }

    async def get_all_products(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –ª–∏–Ω–µ–µ–∫"""
        try:
            response = await self.notion.databases.query(
                database_id=self.product_lines_db,
                sorts=[{"property": "Name", "direction": "ascending"}]
            )
            
            products = []
            for page in response.get("results", []):
                product = self._parse_product_page(page)
                if product:
                    products.append(product)
            
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return products
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return []

    def _parse_product_page(self, page: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            properties = page.get("properties", {})
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            name_prop = properties.get("Name", {})
            name = ""
            if name_prop.get("type") == "title":
                title = name_prop.get("title", [])
                name = " ".join([t.get("plain_text", "") for t in title]) if title else ""
            
            # –ê—Ä—Ç–∏–∫—É–ª
            article_prop = properties.get("–ê—Ä—Ç–∏–∫—É–ª", {})
            article = ""
            if article_prop.get("type") == "select":
                article = article_prop.get("select", {}).get("name", "")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            category_prop = properties.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", {})
            category = ""
            if category_prop.get("type") == "select":
                category = category_prop.get("select", {}).get("name", "")
            
            # –°—Ç–∞—Ç—É—Å
            status_prop = properties.get("–°—Ç–∞—Ç—É—Å", {})
            status = ""
            if status_prop.get("type") == "status":
                status = status_prop.get("status", {}).get("name", "")
            
            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            created_time = page.get("created_time", "")
            
            return {
                "id": page.get("id", ""),
                "name": name,
                "article": article,
                "category": category,
                "status": status,
                "created_time": created_time,
                "last_edited_time": page.get("last_edited_time", "")
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return None

    async def update_product_status(self, product_id: str, new_status: str, reason: str = "", triggered_by: str = "manual") -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            if new_status not in self.lifecycle_statuses:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Notion
            await self.notion.pages.update(
                page_id=product_id,
                properties={
                    "–°—Ç–∞—Ç—É—Å": {
                        "status": {
                            "name": new_status
                        }
                    }
                }
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = ProductLifecycleEvent(
                product_id=product_id,
                product_name="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                old_status="",    # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                new_status=new_status,
                timestamp=datetime.now(),
                reason=reason,
                triggered_by=triggered_by
            )
            
            await self._log_lifecycle_event(event)
            
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    async def check_auto_transitions(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"""
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤...")
        
        products = await self.get_all_products()
        transitions_made = []
        overdue_products = []
        
        for product in products:
            current_status = product.get("status", "")
            
            if current_status not in self.lifecycle_statuses:
                continue
            
            status_config = self.lifecycle_statuses[current_status]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç–∞—Ç—É—Å–µ
            created_time = datetime.fromisoformat(product["created_time"].replace("Z", "+00:00"))
            time_in_status = datetime.now(created_time.tzinfo) - created_time
            days_in_status = time_in_status.days
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if days_in_status > status_config.max_duration_days:
                overdue_products.append({
                    "product": product,
                    "days_overdue": days_in_status - status_config.max_duration_days
                })
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –∞—Ä—Ö–∏–≤
                if status_config.next_statuses:
                    next_status = status_config.next_statuses[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                    success = await self.update_product_status(
                        product["id"], 
                        next_status, 
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤ —Å—Ç–∞—Ç—É—Å–µ '{current_status}' ({days_in_status} –¥–Ω–µ–π)",
                        "auto"
                    )
                    
                    if success:
                        transitions_made.append({
                            "product": product,
                            "from_status": current_status,
                            "to_status": next_status,
                            "reason": "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"
                        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["transitions_today"] += len(transitions_made)
        self.stats["overdue_products"] = len(overdue_products)
        
        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: {len(transitions_made)} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, {len(overdue_products)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ")
        
        return {
            "transitions_made": transitions_made,
            "overdue_products": overdue_products,
            "total_checked": len(products)
        }

    async def get_lifecycle_analytics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        products = await self.get_all_products()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for product in products:
            status = product.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            status_counts[status] = status_counts.get(status, 0) + 1
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö
        avg_time_by_status = {}
        for status in self.lifecycle_statuses:
            products_in_status = [p for p in products if p.get("status") == status]
            if products_in_status:
                total_days = 0
                for product in products_in_status:
                    created_time = datetime.fromisoformat(product["created_time"].replace("Z", "+00:00"))
                    time_in_status = datetime.now(created_time.tzinfo) - created_time
                    total_days += time_in_status.days
                
                avg_time_by_status[status] = total_days / len(products_in_status)
        
        # –ü—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
        attention_needed = []
        for product in products:
            status = product.get("status", "")
            if status in self.lifecycle_statuses:
                status_config = self.lifecycle_statuses[status]
                created_time = datetime.fromisoformat(product["created_time"].replace("Z", "+00:00"))
                time_in_status = datetime.now(created_time.tzinfo) - created_time
                days_in_status = time_in_status.days
                
                if days_in_status > status_config.max_duration_days * 0.8:  # 80% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
                    attention_needed.append({
                        "product": product,
                        "days_in_status": days_in_status,
                        "max_days": status_config.max_duration_days
                    })
        
        return {
            "total_products": len(products),
            "status_distribution": status_counts,
            "avg_time_by_status": avg_time_by_status,
            "attention_needed": attention_needed,
            "lifecycle_efficiency": self._calculate_lifecycle_efficiency(products)
        }

    def _calculate_lifecycle_efficiency(self, products: List[Dict[str, Any]]) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        total_products = len(products)
        if total_products == 0:
            return {}
        
        # –ü—Ä–æ–¥—É–∫—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
        correct_status_count = 0
        for product in products:
            status = product.get("status", "")
            if status in self.lifecycle_statuses:
                correct_status_count += 1
        
        # –ü—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
        no_delay_count = 0
        for product in products:
            status = product.get("status", "")
            if status in self.lifecycle_statuses:
                status_config = self.lifecycle_statuses[status]
                created_time = datetime.fromisoformat(product["created_time"].replace("Z", "+00:00"))
                time_in_status = datetime.now(created_time.tzinfo) - created_time
                days_in_status = time_in_status.days
                
                if days_in_status <= status_config.max_duration_days:
                    no_delay_count += 1
        
        return {
            "status_accuracy": (correct_status_count / total_products) * 100,
            "timeline_efficiency": (no_delay_count / total_products) * 100,
            "overall_efficiency": ((correct_status_count + no_delay_count) / (total_products * 2)) * 100
        }

    async def _log_lifecycle_event(self, event: ProductLifecycleEvent):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            log_file = "logs/product_lifecycle_events.json"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
            events = []
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    events = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            event_dict = asdict(event)
            event_dict["timestamp"] = event.timestamp.isoformat()
            events.append(event_dict)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–±—ã—Ç–∏–π)
            events = events[-1000:]
            
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(events, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")

    async def generate_lifecycle_report(self) -> Dict[str, Any]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É"""
        analytics = await self.get_lifecycle_analytics()
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_products": analytics["total_products"],
                "products_by_status": analytics["status_distribution"],
                "efficiency_metrics": analytics["lifecycle_efficiency"]
            },
            "details": {
                "avg_time_by_status": analytics["avg_time_by_status"],
                "attention_needed": analytics["attention_needed"]
            },
            "recommendations": self._generate_recommendations(analytics)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f"reports/lifecycle_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        os.makedirs("reports", exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –û—Ç—á–µ—Ç –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report

    def _generate_recommendations(self, analytics: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_dist = analytics["status_distribution"]
        total = analytics["total_products"]
        
        if total > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ç–æ—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö
            for status, count in status_dist.items():
                percentage = (count / total) * 100
                if percentage > 40:  # –ë–æ–ª—å—à–µ 40% –≤ –æ–¥–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
                    recommendations.append(f"‚ö†Ô∏è –ó–∞—Ç–æ—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ '{status}': {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ({percentage:.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = analytics["lifecycle_efficiency"]
            if efficiency.get("timeline_efficiency", 100) < 80:
                recommendations.append("üö® –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ - –º–Ω–æ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            
            if efficiency.get("status_accuracy", 100) < 90:
                recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤ - –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º, —Ç—Ä–µ–±—É—é—â–∏–º –≤–Ω–∏–º–∞–Ω–∏—è
        attention_needed = analytics["attention_needed"]
        if attention_needed:
            recommendations.append(f"üìã {len(attention_needed)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è (–±–ª–∏–∑–∫–∏ –∫ –ø—Ä–æ—Å—Ä–æ—á–∫–µ)")
        
        return recommendations

    async def run_daily_lifecycle_check(self) -> Dict[str, Any]:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        logger.info("üåÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        start_time = datetime.now()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        transitions_result = await self.check_auto_transitions()
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = await self.get_lifecycle_analytics()
        
        # 3. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = await self.generate_lifecycle_report()
        
        execution_time = (datetime.now() - start_time).total_seconds()
        
        result = {
            "success": True,
            "execution_time": execution_time,
            "transitions": transitions_result,
            "analytics": analytics,
            "report": report
        }
        
        logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f}—Å")
        return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    manager = ProductLifecycleManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    result = await manager.run_daily_lifecycle_check()
    
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê:")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['execution_time']:.2f}—Å")
    print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(result['transitions']['transitions_made'])}")
    print(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(result['transitions']['overdue_products'])}")
    print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {result['analytics']['total_products']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    print("\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–¢–ê–¢–£–°–ê–ú:")
    for status, count in result['analytics']['status_distribution'].items():
        print(f"  {status}: {count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if result['report']['recommendations']:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in result['report']['recommendations']:
            print(f"  {rec}")

if __name__ == "__main__":
    asyncio.run(main()) 