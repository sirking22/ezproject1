#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–ê–ú–ò –î–õ–Ø –ü–†–û–î–£–ö–¢–û–í RAMIT

–¶–µ–ª—å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —Å–≤—è–∑—ã–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã) 
—Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –≤ –±–∞–∑–µ –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–õ–æ–≥–∏–∫–∞:
1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
2. –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–¥—É–∫—Ç–∞
3. –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
4. –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
"""

import os
import re
import asyncio
import json
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from dotenv import load_dotenv
from notion_client import AsyncClient
import requests

load_dotenv()

class ProductMaterialsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ RAMIT"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.product_lines_db_id = os.getenv('PRODUCT_LINES_DB')
        self.materials_db_id = os.getenv('MATERIALS_DB')
        self.yandex_disk_token = os.getenv('YANDEX_DISK_TOKEN')
        
        if not self.notion_token:
            raise ValueError("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        if not self.product_lines_db_id:
            raise ValueError("‚ùå PRODUCT_LINES_DB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        if not self.materials_db_id:
            raise ValueError("‚ùå MATERIALS_DB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        if not self.yandex_disk_token:
            raise ValueError("‚ùå YANDEX_DISK_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        self.client = AsyncClient(auth=self.notion_token)
        
        # –¢–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.material_types = {
            'video': ['.mp4', '.avi', '.mov', '.mkv', '.wmv'],
            'photo': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff'],
            'document': ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx'],
            'archive': ['.zip', '.rar', '.7z']
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        self.material_patterns = [
            r'(\w+-\d+)',  # RGJ-04, BDM-07
            r'(\w+\d+)',   # RGJ04, BDM07
            r'(\w+_\d+)',  # RGJ_04, BDM_07
        ]
    
    async def get_all_product_lines(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–∏–Ω–µ–π–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        try:
            response = await self.client.databases.query(
                database_id=str(self.product_lines_db_id)
            )
            
            products = response.get("results", [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return []
    
    def extract_article_from_product(self, product_data: Dict) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        properties = product_data.get("properties", {})
        article_property = properties.get("–ê—Ä—Ç–∏–∫—É–ª", {})
        
        if article_property.get("type") == "select":
            select_data = article_property.get("select", {})
            if select_data:
                return select_data.get("name")
        
        return None
    
    def search_materials_on_yandex_disk(self, article: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        
        print(f"üîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ...")
        
        materials = []
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∞—Ä—Ç–∏–∫—É–ª–∞
            search_variants = [
                article,
                article.replace('-', ''),
                article.replace('-', '_'),
                article.lower(),
                article.upper()
            ]
            
            for variant in search_variants:
                # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
                search_url = "https://cloud-api.yandex.net/v1/disk/resources/search"
                headers = {
                    "Authorization": f"OAuth {self.yandex_disk_token}",
                    "Content-Type": "application/json"
                }
                
                params = {
                    "q": variant,
                    "limit": 100
                }
                
                response = requests.get(search_url, headers=headers, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    items = data.get("items", [])
                    
                    for item in items:
                        file_path = item.get("path", "")
                        file_name = item.get("name", "")
                        file_type = item.get("mime_type", "")
                        file_size = item.get("size", 0)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        material_type = self.determine_material_type(file_name, file_type)
                        
                        if material_type:
                            materials.append({
                                "name": file_name,
                                "path": file_path,
                                "type": material_type,
                                "size": file_size,
                                "mime_type": file_type,
                                "article": article,
                                "search_variant": variant
                            })
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}")
            return materials
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            return []
    
    def determine_material_type(self, file_name: str, mime_type: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ MIME-—Ç–∏–ø—É"""
        
        file_extension = os.path.splitext(file_name)[1].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        for material_type, extensions in self.material_types.items():
            if file_extension in extensions:
                return material_type
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ MIME-—Ç–∏–ø—É
        if 'video' in mime_type:
            return 'video'
        elif 'image' in mime_type:
            return 'photo'
        elif 'pdf' in mime_type or 'document' in mime_type:
            return 'document'
        elif 'archive' in mime_type or 'zip' in mime_type:
            return 'archive'
        
        return None
    
    async def create_material_in_notion(self, material_data: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ Notion"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            page_data = {
                "parent": {"database_id": self.materials_db_id},
                "properties": {
                    "Name": {
                        "title": [
                            {
                                "text": {
                                    "content": material_data["name"]
                                }
                            }
                        ]
                    },
                    "–¢–∏–ø": {
                        "select": {
                            "name": material_data["type"].title()
                        }
                    },
                    "–†–∞–∑–º–µ—Ä": {
                        "number": material_data["size"]
                    },
                    "URL": {
                        "url": f"https://disk.yandex.ru{material_data['path']}"
                    },
                    "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥—É–∫—Ç–∞": {
                        "rich_text": [
                            {
                                "text": {
                                    "content": material_data["article"]
                                }
                            }
                        ]
                    },
                    "–°—Ç–∞—Ç—É—Å": {
                        "status": {
                            "name": "–ê–∫—Ç–∏–≤–Ω—ã–π"
                        }
                    }
                }
            }
            
            response = await self.client.pages.create(**page_data)
            created_page_id = response["id"]
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {material_data['name']} (ID: {created_page_id})")
            return created_page_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
            return None
    
    async def link_material_to_product(self, product_id: str, material_id: str):
        """–°–≤—è–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            product_response = await self.client.pages.retrieve(product_id)
            product_properties = product_response.get("properties", {})
            
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
            materials_field = None
            for field_name, field_data in product_properties.items():
                if "–º–∞—Ç–µ—Ä–∏–∞–ª" in field_name.lower() or "—Ñ–∞–π–ª" in field_name.lower():
                    if field_data.get("type") == "relation":
                        materials_field = field_name
                        break
            
            if materials_field:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
                existing_relations = product_properties[materials_field].get("relation", [])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
                new_relations = existing_relations + [{"id": material_id}]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                await self.client.pages.update(
                    page_id=product_id,
                    properties={
                        materials_field: {
                            "relation": new_relations
                        }
                    }
                )
                
                print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º")
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
    
    async def process_product_materials(self, product_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª
        article = self.extract_article_from_product(product_data)
        
        if not article:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        properties = product_data.get("properties", {})
        name_property = properties.get("Name", {})
        
        if name_property.get("type") != "title":
            print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
            return
        
        title_content = name_property.get("title", [])
        if not title_content:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
            return
        
        product_name = title_content[0].get("plain_text", "")
        
        print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name} (–∞—Ä—Ç–∏–∫—É–ª: {article})")
        
        # –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        materials = self.search_materials_on_yandex_disk(article)
        
        if not materials:
            print(f"‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ Notion –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
        for material in materials:
            material_id = await self.create_material_in_notion(material)
            
            if material_id:
                await self.link_material_to_product(product_data["id"], material_id)
    
    async def process_all_products(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        
        print("üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ú–ê–¢–ï–†–ò–ê–õ–û–í –î–õ–Ø –ü–†–û–î–£–ö–¢–û–í")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        products = await self.get_all_product_lines()
        
        if not products:
            print("‚ùå –õ–∏–Ω–µ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        processed_count = 0
        materials_count = 0
        error_count = 0
        
        for product in products:
            try:
                await self.process_product_materials(product)
                processed_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                error_count += 1
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –ú–ê–¢–ï–†–ò–ê–õ–û–í:")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {processed_count}")
        print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {materials_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üìã –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
        print("=" * 60)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        manager = ProductMaterialsManager()
        await manager.process_all_products()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 