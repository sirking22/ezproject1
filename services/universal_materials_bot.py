"""
üéØ UNIVERSAL MATERIALS BOT - –ú–ï–ì–ê-–ê–ì–†–ï–ì–ê–¢–û–† –í–°–ï–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô

–ü–†–ò–ù–¶–ò–ü –ü–ê–†–ï–¢–û: 20% –∫–æ–¥–∞ = 80% –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
- Figma —Å—Å—ã–ª–∫–∏ ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø—Ä–µ–≤—å—é
- –°–∫—Ä–∏–Ω—à–æ—Ç—ã ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
- –§–∞–π–ª—ã ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –£–º–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∏ ‚Üî –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Üî KPI ‚Üî —Ä–µ–ª–∏–∑—ã ‚Üî —É—á–∞—Å—Ç–Ω–∏–∫–∏
- –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (98%) + LLM (2%)
- –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–æ–∫/—á–µ–∫–ª–∏—Å—Ç–æ–≤ ‚Üí –ø–æ–¥–∑–∞–¥–∞—á–∏
- –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–∞–π–¥–∞–º/–∏–¥–µ—è–º/–∫–æ–Ω—Ü–µ–ø—Ç–∞–º
"""

import asyncio
import logging
import json
import re
import os
import tempfile
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any, Union
from dataclasses import dataclass
from urllib.parse import urlparse
import base64
import io
from PIL import Image

import requests
import aiohttp
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, File
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# –ù–∞—Å–ª–µ–¥—É–µ–º –æ—Ç –≥–æ—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
from services.figma_materials_bot import FigmaMaterialsBot, FigmaLink, MaterialRequest
from shared_code.integrations.notion import NotionManager
from shared_code.integrations.yandex_cloud import YandexDiskManager
from shared_code.utils.logging_utils import setup_logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging("universal_materials_bot")

@dataclass
class UniversalRequest:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    content_type: str  # "figma", "screenshot", "file", "text"
    source_url: Optional[str] = None
    file_path: Optional[str] = None
    file_name: Optional[str] = None
    content: Optional[str] = None
    
    # –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    title: str = ""
    description: str = ""
    tags: List[str] = None
    
    # –°–≤—è–∑–∏
    related_task_id: Optional[str] = None
    related_project_id: Optional[str] = None
    assigned_users: List[str] = None
    release_type: str = ""
    
    # –ü—Ä–∞–≤–∫–∏ –∏ —á–µ–∫–ª–∏—Å—Ç—ã
    checklist_items: List[str] = None
    needs_review: bool = True

class UniversalMaterialsBot(FigmaMaterialsBot):
    """üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –±–æ—Ç - –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        super().__init__()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–∑—ã
        self.projects_db = os.getenv("–ü–†–û–ï–ö–¢–´_DB")
        self.concepts_db = os.getenv("–ö–û–ù–¶–ï–ü–¢–´_–°–¶–ï–ù–ê–†–ò–ò_DB")
        self.releases_db = os.getenv("–õ–ò–ù–ï–ô–ö–ò_–ü–†–û–î–£–ö–¢–û–í_DB")
        
        # –ö—ç—à –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Ä–µ–ª–∏–∑–æ–≤
        self.projects_cache = {}
        self.releases_cache = {}
        
        logger.info("üöÄ UniversalMaterialsBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –í–°–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò!")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        welcome_text = """
üéØ **UNIVERSAL MATERIALS BOT** - –í–°–ï –í –û–î–ù–û–ú –ú–ï–°–¢–ï!

üé® **–ß–¢–û –£–ú–ï–Æ:**
‚Ä¢ üîó **Figma —Å—Å—ã–ª–∫–∏** ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø—Ä–µ–≤—å—é + –∞–≤—Ç–æ—Å–≤—è–∑–∏
‚Ä¢ üñºÔ∏è **–°–∫—Ä–∏–Ω—à–æ—Ç—ã** ‚Üí –∞–≤—Ç–æ–∑–∞–¥–∞—á–∏ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
‚Ä¢ üìÅ **–§–∞–π–ª—ã** ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ ‚úçÔ∏è **–¢–µ–∫—Å—Ç** ‚Üí –∏–¥–µ–∏, –∫–æ–Ω—Ü–µ–ø—Ç—ã, –≥–∞–π–¥—ã

üîÑ **–£–ú–ù–û–ï –°–í–Ø–ó–´–í–ê–ù–ò–ï:**
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Üî –ó–∞–¥–∞—á–∏ ‚Üî –ü–æ–¥–∑–∞–¥–∞—á–∏
‚Ä¢ –ó–∞–¥–∞—á–∏ ‚Üî KPI ‚Üî –£—á–∞—Å—Ç–Ω–∏–∫–∏  
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Üî –†–µ–ª–∏–∑—ã ‚Üî –ü—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –ü—Ä–∞–≤–∫–∏ ‚Üí –ß–µ–∫–ª–∏—Å—Ç—ã ‚Üí –ü–æ–¥–∑–∞–¥–∞—á–∏

üè∑Ô∏è **–ê–í–¢–û–¢–ï–ì–ò–†–û–í–ê–ù–ò–ï:**
‚Ä¢ –ë—Ä–µ–Ω–¥ ‚Üí –ì–∞–π–¥—ã
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Üí –ò–¥–µ–∏
‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ç ‚Üí –ö–æ–Ω—Ü–µ–ø—Ç—ã
‚Ä¢ 15+ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª

üì§ **–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å:
‚Ä¢ Figma —Å—Å—ã–ª–∫—É
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
‚Ä¢ –õ—é–±–æ–π —Ñ–∞–π–ª
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ö° **–ö–û–ú–ê–ù–î–´:**
/refresh - –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/tasks - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
/help - —Å–ø—Ä–∞–≤–∫–∞
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    def detect_content_type(self, update: Update) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        message = update.message
        
        # Figma —Å—Å—ã–ª–∫–∞
        if message.text and 'figma.com' in message.text:
            return "figma"
        

        
        # –°–∫—Ä–∏–Ω—à–æ—Ç/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if message.photo or message.document:
            if message.document and message.document.mime_type and message.document.mime_type.startswith('image/'):
                return "screenshot"
            elif message.photo:
                return "screenshot"
            else:
                return "file"
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.text:
            return "text"
        
        return "unknown"

    async def extract_universal_request(self, update: Update) -> UniversalRequest:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        content_type = self.detect_content_type(update)
        message = update.message
        
        request = UniversalRequest(content_type=content_type)
        
        if content_type == "figma":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ—Ç FigmaMaterialsBot
            figma_link = self.parse_figma_url(message.text)
            if figma_link:
                request.source_url = figma_link.url
                request.title = figma_link.title
                request.description = f"–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ Figma: {figma_link.link_type}"
                request.tags = self.generate_smart_tags(figma_link.title, figma_link)
        

        
        elif content_type == "screenshot":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            request.file_name = "screenshot.png"
            request.title = "–°–∫—Ä–∏–Ω—à–æ—Ç " + datetime.now().strftime("%d.%m %H:%M")
            request.description = message.caption or "–°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            request.tags = self.extract_tags_from_screenshot(message.caption or "")
            
        elif content_type == "file":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
            if message.document:
                request.file_name = message.document.file_name
                request.title = message.document.file_name.split('.')[0]
                request.description = message.caption or f"–§–∞–π–ª: {message.document.file_name}"
                request.tags = self.extract_tags_from_filename(message.document.file_name)
        
        elif content_type == "text":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            request.content = message.text
            request.title = message.text[:50] + "..." if len(message.text) > 50 else message.text
            request.description = "–¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–¥–µ—è/–∫–æ–Ω—Ü–µ–ø—Ç"
            request.tags = self.extract_tags_from_text(message.text)
        
        # –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if request.title:
            request.related_task_id = self.find_related_task(request.title, None)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–ª–∏—Å—Ç–∞
        request.checklist_items = self.generate_universal_checklist(request)
        
        return request

    def extract_tags_from_screenshot(self, caption: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É"""
        tags = []
        caption_lower = caption.lower()
        
        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        screenshot_rules = {
            'UI/UX': ['–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', 'ui', 'ux', '–¥–∏–∑–∞–π–Ω', '–º–∞–∫–µ—Ç'],
            '–ë—Ä–µ–Ω–¥': ['–ª–æ–≥–æ—Ç–∏–ø', '–±—Ä–µ–Ω–¥', '—Ñ–∏—Ä–º', '—Å—Ç–∏–ª—å'],
            '–û—à–∏–±–∫–∞': ['–æ—à–∏–±–∫–∞', '–±–∞–≥', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'],
            '–ó–∞–¥–∞—á–∞': ['–∑–∞–¥–∞—á–∞', 'todo', '—Å–¥–µ–ª–∞—Ç—å', '–∏—Å–ø—Ä–∞–≤–∏—Ç—å'],
            '–ò–¥–µ—è': ['–∏–¥–µ—è', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '—É–ª—É—á—à–µ–Ω–∏–µ'],
            '–ü—Ä–æ—Ü–µ—Å—Å': ['–ø—Ä–æ—Ü–µ—Å—Å', 'workflow', '–∞–ª–≥–æ—Ä–∏—Ç–º']
        }
        
        for tag, keywords in screenshot_rules.items():
            if any(keyword in caption_lower for keyword in keywords):
                tags.append(tag)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤ - —Å—Ç–∞–≤–∏–º –°–∫—Ä–∏–Ω—à–æ—Ç
        if not tags:
            tags.append('–°–∫—Ä–∏–Ω—à–æ—Ç')
        
        return tags

    def extract_tags_from_filename(self, filename: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        tags = []
        filename_lower = filename.lower()
        
        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        file_rules = {
            '–î–æ–∫—É–º–µ–Ω—Ç': ['.doc', '.pdf', '.txt'],
            '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è': ['.ppt', '.pptx'],
            '–¢–∞–±–ª–∏—Ü–∞': ['.xls', '.xlsx', '.csv'],
            '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': ['.jpg', '.png', '.gif', '.svg'],
            '–í–∏–¥–µ–æ': ['.mp4', '.mov', '.avi'],
            '–ê—Ä—Ö–∏–≤': ['.zip', '.rar', '.7z'],
            '–ö–æ–¥': ['.py', '.js', '.html', '.css']
        }
        
        for tag, extensions in file_rules.items():
            if any(ext in filename_lower for ext in extensions):
                tags.append(tag)
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        name_rules = {
            '–ë—Ä–µ–Ω–¥': ['logo', 'brand', '–ª–æ–≥–æ—Ç–∏–ø', '–±—Ä–µ–Ω–¥'],
            '–ú–∞–∫–µ—Ç': ['mockup', 'layout', '–º–∞–∫–µ—Ç', '–¥–∏–∑–∞–π–Ω'],
            '–¢–µ—Ö–∑–∞–¥–∞–Ω–∏–µ': ['—Ç–∑', '—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ', 'spec', 'requirements']
        }
        
        for tag, keywords in name_rules.items():
            if any(keyword in filename_lower for keyword in keywords):
                tags.append(tag)
        
        return tags or ['–§–∞–π–ª']

    def extract_tags_from_text(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        tags = []
        text_lower = text.lower()
        
        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_rules = {
            '–ò–¥–µ—è': ['–∏–¥–µ—è', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '–¥—É–º–∞—é'],
            '–ó–∞–¥–∞—á–∞': ['–Ω—É–∂–Ω–æ', '—Å–¥–µ–ª–∞—Ç—å', 'todo', '–∑–∞–¥–∞—á–∞'],
            '–ü—Ä–æ–±–ª–µ–º–∞': ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–±–∞–≥'],
            '–°—Ç—Ä–∞—Ç–µ–≥–∏—è': ['—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ø–ª–∞–Ω', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '—Ü–µ–ª—å'],
            '–ü—Ä–æ—Ü–µ—Å—Å': ['–ø—Ä–æ—Ü–µ—Å—Å', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
            '–ë—Ä–µ–Ω–¥': ['–±—Ä–µ–Ω–¥', '–ª–æ–≥–æ—Ç–∏–ø', '—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π', '–∞–π–¥–µ–Ω—Ç–∏–∫–∞'],
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': ['—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'smm'],
            '–ü—Ä–æ–¥—É–∫—Ç': ['–ø—Ä–æ–¥—É–∫—Ç', '—Ç–æ–≤–∞—Ä', '—Ñ—É–Ω–∫—Ü–∏—è', '—Ñ–∏—á–∞']
        }
        
        for tag, keywords in text_rules.items():
            if any(keyword in text_lower for keyword in keywords):
                tags.append(tag)
        
        return tags or ['–ó–∞–º–µ—Ç–∫–∞']



    def generate_universal_checklist(self, request: UniversalRequest) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞"""
        checklist = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checklist.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏—é")
        checklist.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if request.content_type == "figma":
            checklist.extend([
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—Ä–µ–Ω–¥–±—É–∫—É",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞"
            ])
        elif request.content_type == "screenshot":
            checklist.extend([
                "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É/—Å–∏—Ç—É–∞—Ü–∏—é",
                "–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            ])
        elif request.content_type == "file":
            checklist.extend([
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω–æ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            ])
        elif request.content_type == "text":
            checklist.extend([
                "–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é",
                "–û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å"
            ])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–µ–≥–∞–º
        if '–ë—Ä–µ–Ω–¥' in (request.tags or []):
            checklist.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å")
        if 'UI/UX' in (request.tags or []):
            checklist.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç")
        
        return checklist[:6]  # –ú–∞–∫—Å–∏–º—É–º 6 –ø—É–Ω–∫—Ç–æ–≤

    async def determine_target_databases(self, request: UniversalRequest) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        targets = {
            'primary': self.materials_db  # –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ - –≤—Å–µ–≥–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–∑—ã –ø–æ —Ç–µ–≥–∞–º
        if request.tags:
            for tag in request.tags:
                if tag in ['–ë—Ä–µ–Ω–¥', '–°—Ç–∏–ª—å', '–ì–∞–π–¥—ã']:
                    targets['guides'] = self.guides_db
                elif tag in ['–ò–¥–µ—è', '–ö–æ–Ω—Ü–µ–ø—Ü–∏—è', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è']:
                    targets['ideas'] = self.ideas_db
                elif tag in ['–ö–æ–Ω—Ü–µ–ø—Ç', '–°—Ü–µ–Ω–∞—Ä–∏–π']:
                    targets['concepts'] = self.concepts_db
        
        return targets

    async def create_universal_material(self, request: UniversalRequest, file_url: Optional[str] = None) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            material_data = {
                "Name": {"title": [{"text": {"content": request.title}}]},
                "–û–ø–∏—Å–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": request.description}}]},
                "–¢–µ–≥–∏": {"multi_select": [{"name": tag} for tag in (request.tags or [])]},
                "–°—Ç–∞—Ç—É—Å": {"status": {"name": "In progress"}},
                "Date": {"date": {"start": datetime.now().isoformat()}},
                "–í–µ—Å": {"number": 5}
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –µ—Å–ª–∏ –µ—Å—Ç—å
            if request.source_url:
                material_data["URL"] = {"url": request.source_url}
            elif file_url:
                material_data["URL"] = {"url": file_url}
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if file_url:
                material_data["Files & media"] = {
                    "files": [{"external": {"url": file_url}}]
                }
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
            material_page = self.notion.create_page(
                database_id=self.materials_db,
                properties=material_data
            )
            
            if not material_page:
                return None
            
            material_id = material_page['id']
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cover –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if file_url and request.content_type in ["screenshot", "figma"]:
                try:
                    self.notion.update_page_cover(material_id, file_url)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cover: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞
            if request.checklist_items and request.related_task_id:
                await self.create_universal_subtasks(request.related_task_id, request.checklist_items)
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –¥—Ä—É–≥–∏—Ö –±–∞–∑–∞—Ö
            await self.create_related_records(request, material_id)
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å –∑–∞–¥–∞—á–µ–π –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞
            if request.related_task_id:
                await self.link_material_to_task(material_id, request.related_task_id)
            
            logger.info(f"‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {material_id}")
            return material_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
            return None

    async def create_universal_subtasks(self, parent_task_id: str, checklist_items: List[str]):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á"""
        try:
            for item in checklist_items:
                subtask_data = {
                    "–ü–æ–¥–∑–∞–¥–∞—á–∏": {"title": [{"text": {"content": item}}]},
                    "–ó–∞–¥–∞—á–∏": {"relation": [{"id": parent_task_id}]},
                    " –°—Ç–∞—Ç—É—Å": {"status": {"name": "To do"}},
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": {"multi_select": [{"name": "–î–∏–∑–∞–π–Ω"}]},
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": {"select": {"name": "–°—Ä–µ–¥–Ω–∏–π"}},
                    "–ß–∞—Å—ã": {"number": 0.5}
                }
                
                self.notion.create_page(
                    database_id=self.subtasks_db,
                    properties=subtask_data
                )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(checklist_items)} —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á: {e}")

    async def create_related_records(self, request: UniversalRequest, material_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –¥—Ä—É–≥–∏—Ö –±–∞–∑–∞—Ö"""
        try:
            targets = await self.determine_target_databases(request)
            
            for db_type, db_id in targets.items():
                if db_type == 'primary':
                    continue  # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                related_data = {
                    "Name": {"title": [{"text": {"content": f"{request.title} ({db_type})"}}]},
                    "–û–ø–∏—Å–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. {request.description}"}}]},
                    "–¢–µ–≥–∏": {"multi_select": [{"name": tag} for tag in (request.tags or [])]},
                    "–°—Ç–∞—Ç—É—Å": {"status": {"name": "To do"}},
                    "–í–µ—Å": {"number": 3}
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
                related_data["Date"] = {"date": {"start": datetime.now().isoformat()}}
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                self.notion.create_page(
                    database_id=db_id,
                    properties=related_data
                )
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ {db_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")

    async def link_material_to_task(self, material_id: str, task_id: str):
        """–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –∑–∞–¥–∞—á–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ –∑–∞–¥–∞—á–∏
            task_page = self.notion.get_page(task_id)
            if not task_page:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" –≤ –∑–∞–¥–∞—á–µ
            current_materials = task_page.get('properties', {}).get('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', {}).get('relation', [])
            new_materials = current_materials + [{"id": material_id}]
            
            self.notion.update_page(
                page_id=task_id,
                properties={
                    "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": {
                        "relation": new_materials
                    }
                }
            )
            
            logger.info(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª {material_id} —Å–≤—è–∑–∞–Ω —Å –∑–∞–¥–∞—á–µ–π {task_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –∑–∞–¥–∞—á–µ–π: {e}")

    async def handle_universal_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            await progress_msg.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
            request = await self.extract_universal_request(update)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            file_url = None
            if request.content_type in ["screenshot", "file"]:
                await progress_msg.edit_text("üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
                file_url = await self.process_file(update.message)
            elif request.content_type == "figma":
                await progress_msg.edit_text("üé® –ü–æ–ª—É—á–∞—é –ø—Ä–µ–≤—å—é –∏–∑ Figma...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –ª–æ–≥–∏–∫—É Figma
                figma_link = self.parse_figma_url(update.message.text)
                if figma_link:
                    preview_url = await self.get_figma_preview(figma_link)
                    if preview_url:
                        file_url = await self.upload_to_yandex_disk(preview_url, figma_link.title)
            

            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–¥–∞—á –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.active_tasks_cache:
                await progress_msg.edit_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à –∑–∞–¥–∞—á...")
                await self.refresh_tasks_cache()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏—Ä–º–∞—Ü–∏—é
            await self.show_universal_confirmation(update, progress_msg, request, file_url)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    async def process_file(self, message) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            file_obj = None
            file_name = "file"
            
            if message.photo:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                file_obj = message.photo[-1]
                file_name = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            elif message.document:
                file_obj = message.document
                file_name = message.document.file_name or "document"
            
            if not file_obj:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await file_obj.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                await file.download_to_drive(temp_file.name)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
                disk_path = f"/universal_materials/{file_name}"
                success = self.yandex_disk.upload_file(temp_file.name, disk_path)
                
                if success:
                    public_url = self.yandex_disk.get_public_image_url(disk_path)
                    return public_url
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None

    async def show_universal_confirmation(self, update: Update, progress_msg, request: UniversalRequest, file_url: Optional[str]):
        """–ü–æ–∫–∞–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏—Ä–º–∞—Ü–∏–∏"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        task_info = ""
        if request.related_task_id and request.related_task_id in self.active_tasks_cache:
            task_data = self.active_tasks_cache[request.related_task_id]
            task_info = f"üîó **–°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:** {task_data['title']}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–ª–∏—Å—Ç–µ
        checklist_info = ""
        if request.checklist_items:
            checklist_info = f"‚úÖ **–ß–µ–∫–ª–∏—Å—Ç:** {len(request.checklist_items)} –ø—É–Ω–∫—Ç–æ–≤\n"
        
        # –ò–∫–æ–Ω–∫–∞ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        type_icons = {
            "figma": "üé®",
            "screenshot": "üñºÔ∏è", 
            "file": "üìÅ",
            "text": "‚úçÔ∏è"
        }
        
        confirmation_text = f"""
{type_icons.get(request.content_type, "üìÑ")} **–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ –ì–û–¢–û–í!**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {request.title}
üìã **–¢–∏–ø:** {request.content_type.upper()}
üè∑Ô∏è **–¢–µ–≥–∏:** {', '.join(request.tags or [])}
{task_info}{checklist_info}üìé **–§–∞–π–ª:** {"‚úÖ –î–∞" if file_url else "‚ùå –ù–µ—Ç"}

üöÄ **–ß–¢–û –°–û–ó–î–ê–°–¢–°–Ø:**
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion {f"—Å –æ–±–ª–æ–∂–∫–æ–π" if file_url else ""}
‚Ä¢ {"–ê–≤—Ç–æ—Å–≤—è–∑—å —Å –∑–∞–¥–∞—á–µ–π" if request.related_task_id else "–ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"}
‚Ä¢ {"–ß–µ–∫–ª–∏—Å—Ç ‚Üí –ø–æ–¥–∑–∞–¥–∞—á–∏" if request.checklist_items else "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"}
‚Ä¢ –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–∑–∞–º

–°–æ–∑–¥–∞—ë–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª?
        """
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å", callback_data=f"create_universal_{update.message.message_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_universal")
            ]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.pending_materials = getattr(self, 'pending_materials', {})
        self.pending_materials[update.message.message_id] = {
            'request': request,
            'file_url': file_url
        }
        
        await progress_msg.edit_text(confirmation_text, reply_markup=keyboard, parse_mode='Markdown')

    async def handle_universal_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö callback"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("create_universal_"):
            message_id = int(query.data.split("_")[-1])
            
            if hasattr(self, 'pending_materials') and message_id in self.pending_materials:
                data = self.pending_materials[message_id]
                request = data['request']
                file_url = data['file_url']
                
                await query.edit_message_text("üöÄ –°–æ–∑–¥–∞—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª...")
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                material_id = await self.create_universal_material(request, file_url)
                
                if material_id:
                    notion_url = f"https://www.notion.so/{material_id.replace('-', '')}"
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏
                    created_items = ["–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω"]
                    if request.related_task_id:
                        created_items.append("–°–≤—è–∑–∞–Ω —Å –∑–∞–¥–∞—á–µ–π")
                    if request.checklist_items:
                        created_items.append(f"{len(request.checklist_items)} –ø–æ–¥–∑–∞–¥–∞—á")
                    if len(request.tags or []) > 1:
                        created_items.append("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –±–∞–∑–∞–º")
                    
                    success_text = f"""
üéâ **–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ –°–û–ó–î–ê–ù!**

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Notion]({notion_url})

‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:**
{chr(10).join(f"‚Ä¢ {item}" for item in created_items)}

üè∑Ô∏è **–¢–µ–≥–∏:** {', '.join(request.tags or [])}
üìä **–¢–∏–ø:** {request.content_type.upper()}
                    """
                    await query.edit_message_text(success_text, parse_mode='Markdown')
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                del self.pending_materials[message_id]
            else:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ —É—Å—Ç–∞—Ä–µ–ª–∏")
                
        elif query.data == "cancel_universal":
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if not self.active_tasks_cache:
            await self.refresh_tasks_cache()
        
        if not self.active_tasks_cache:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
        
        tasks_text = "üìã **–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:**\n\n"
        
        for i, (task_id, task_data) in enumerate(list(self.active_tasks_cache.items())[:10], 1):
            status_emoji = {"To do": "‚è≥", "In Progress": "üîÑ", "Review": "üëÄ"}.get(task_data['status'], "üìã")
            tasks_text += f"{i}. {status_emoji} **{task_data['title'][:40]}**\n"
            if task_data['participants']:
                tasks_text += f"   üë• {', '.join(task_data['participants'][:2])}\n"
            tasks_text += "\n"
        
        if len(self.active_tasks_cache) > 10:
            tasks_text += f"... –∏ –µ—â—ë {len(self.active_tasks_cache) - 10} –∑–∞–¥–∞—á"
        
        await update.message.reply_text(tasks_text, parse_mode='Markdown')

    def run(self):
        """–ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if not self.telegram_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(self.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("refresh", self.refresh_command))
        app.add_handler(CommandHandler("stats", self.stats_command))
        app.add_handler(CommandHandler("tasks", self.tasks_command))
        app.add_handler(CommandHandler("help", self.help_command))
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.ALL, self.handle_universal_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ (—Ä–∞—Å—à–∏—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π)
        app.add_handler(CallbackQueryHandler(self.handle_universal_callback))
        
        logger.info("üöÄ Universal Materials Bot –∑–∞–ø—É—â–µ–Ω!")
        print("üéØ UNIVERSAL MATERIALS BOT - –í–°–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í –û–î–ù–û–ú –ú–ï–°–¢–ï!")
        print("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Figma —Å—Å—ã–ª–∫—É, —Å–∫—Ä–∏–Ω—à–æ—Ç, —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = UniversalMaterialsBot()
    bot.run() 