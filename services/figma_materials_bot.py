"""
üéØ FIGMA MATERIALS BOT - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

–ü–†–ò–ù–¶–ò–ü –ü–ê–†–ï–¢–û: 20% –∫–æ–¥–∞ = 80% —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- Figma URL ‚Üí PNG –ø—Ä–µ–≤—å—é ‚Üí Notion –º–∞—Ç–µ—Ä–∏–∞–ª —Å –æ–±–ª–æ–∂–∫–æ–π
- –ê–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏, —Ä–µ–ª–∏–∑–∞–º–∏, KPI, —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
- –£–º–Ω—ã–µ –ø—Ä–∞–≤–∫–∏/—á–µ–∫–ª–∏—Å—Ç—ã ‚Üí –ø–æ–¥–∑–∞–¥–∞—á–∏
- –ê–≤—Ç–æ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí –≥–∞–π–¥—ã, –∏–¥–µ–∏, –∫–æ–Ω—Ü–µ–ø—Ç—ã

WORKFLOW:
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å Figma —Å—Å—ã–ª–∫—É
2. –ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Å –ø—Ä–µ–≤—å—é
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å –∑–∞–¥–∞—á–∞–º–∏
4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–∫–ª–∏—Å—Ç—ã/–ø—Ä–∞–≤–∫–∏
5. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ –±–∞–∑–∞–º —á–µ—Ä–µ–∑ —Ç–µ–≥–∏
"""

import asyncio
import logging
import json
import re
import os
import tempfile
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from urllib.parse import urlparse, parse_qs

import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from shared_code.integrations.notion import NotionClient
from shared_code.integrations.yandex_cloud import YandexDiskManager
from shared_code.utils.logging_utils import setup_logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging("figma_materials_bot")

@dataclass
class FigmaLink:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Figma —Å—Å—ã–ª–∫–∏"""
    url: str
    file_id: str
    node_id: Optional[str] = None
    link_type: str = "file"  # file, proto, design
    title: str = ""

@dataclass
class MaterialRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    figma_link: FigmaLink
    name: str
    description: str = ""
    tags: List[str] = None
    priority: str = "–°—Ä–µ–¥–Ω–∏–π"
    assigned_to: str = ""
    related_task: str = ""
    release_type: str = ""

class FigmaMaterialsBot:
    """üéØ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ Figma"""
    
    def __init__(self):
        # –¢–æ–∫–µ–Ω—ã API
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.figma_token = os.getenv("FIGMA_TOKEN") or os.getenv("FIGMA_ACCESS_TOKEN")  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–µ–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.yandex_token = os.getenv("YANDEX_DISK_TOKEN")
        self.notion = NotionClient()
        self.yandex_disk = YandexDiskManager()
        
        # ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ env
        self.materials_db = os.getenv("MATERIALS_DB")
        self.tasks_db = os.getenv("TASKS_TRACKER_DB")
        self.subtasks_db = os.getenv("NOTION_SUBTASKS_DB_ID")
        self.ideas_db = os.getenv("–ë–ê–ó–ê_–ò–î–ï–ô_–°–û–í–ï–¢–û–í_DB")
        self.guides_db = os.getenv("–ì–ê–ô–î–´_DB")
        self.kpi_db = os.getenv("KPI_DB")
        
        # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.active_tasks_cache = {}
        self.cache_timestamp = None
        
        logger.info("üöÄ FigmaMaterialsBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
üé® **FIGMA MATERIALS BOT** - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è!

üìã **–ß–¢–û –£–ú–ï–Æ:**
‚Ä¢ üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Figma —Å—Å—ã–ª–∫–∏ ‚Üí —Å–æ–∑–¥–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø—Ä–µ–≤—å—é
‚Ä¢ üîÑ –ê–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞—é —Å –∑–∞–¥–∞—á–∞–º–∏, —Ä–µ–ª–∏–∑–∞–º–∏, KPI
‚Ä¢ ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ–∫–ª–∏—Å—Ç—ã/–ø—Ä–∞–≤–∫–∏ ‚Üí –ø–æ–¥–∑–∞–¥–∞—á–∏
‚Ä¢ üè∑Ô∏è –ê–≤—Ç–æ—Ç–µ–≥–∏—Ä—É—é ‚Üí —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –ø–æ –≥–∞–π–¥–∞–º/–∏–¥–µ—è–º/–∫–æ–Ω—Ü–µ–ø—Ç–∞–º

üì§ **–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ Figma —Å—Å—ã–ª–∫—É - —è —Å–¥–µ–ª–∞—é –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ!

üéØ **–ü–†–ò–ú–ï–†–´ –°–°–´–õ–û–ö:**
‚Ä¢ `https://www.figma.com/file/ABC123/My-Design`
‚Ä¢ `https://www.figma.com/proto/ABC123/Prototype`
‚Ä¢ `https://www.figma.com/design/ABC123/Design`

‚ö° **–ö–û–ú–ê–ù–î–´:**
/refresh - –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∑–∞–¥–∞—á
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
/help - —Å–ø—Ä–∞–≤–∫–∞
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    def parse_figma_url(self, url: str) -> Optional[FigmaLink]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Figma URL —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º ID –∏ —Ç–∏–ø–∞"""
        # –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ Figma —Å—Å—ã–ª–æ–∫
        patterns = {
            'file': r'https://www\.figma\.com/file/([a-zA-Z0-9]+)/([^/?]+)',
            'proto': r'https://www\.figma\.com/proto/([a-zA-Z0-9]+)/([^/?]+)',
            'design': r'https://www\.figma\.com/design/([a-zA-Z0-9]+)/([^/?]+)'
        }
        
        for link_type, pattern in patterns.items():
            match = re.match(pattern, url)
            if match:
                file_id = match.group(1)
                title = match.group(2).replace('-', ' ')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º node_id –µ—Å–ª–∏ –µ—Å—Ç—å
                node_id = None
                if 'node-id=' in url:
                    node_match = re.search(r'node-id=([^&]+)', url)
                    if node_match:
                        node_id = node_match.group(1)
                
                return FigmaLink(
                    url=url,
                    file_id=file_id,
                    node_id=node_id,
                    link_type=link_type,
                    title=title
                )
        
        return None

    async def get_figma_preview(self, figma_link: FigmaLink) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Figma"""
        try:
            # API URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            api_url = f"https://api.figma.com/v1/images/{figma_link.file_id}"
            
            params = {
                'ids': figma_link.node_id or 'root',
                'format': 'png',
                'scale': 2
            }
            
            headers = {
                'X-Figma-Token': self.figma_token
            }
            
            response = requests.get(api_url, params=params, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                if 'images' in data and data['images']:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_url = list(data['images'].values())[0]
                    return image_url
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Figma API: {response.status_code} - {response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é Figma: {e}")
        
        return None

    async def upload_to_yandex_disk(self, image_url: str, filename: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = requests.get(image_url)
            if response.status_code != 200:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
                temp_file.write(response.content)
                temp_path = temp_file.name
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
                disk_path = f"/figma_materials/{filename}.png"
                success = self.yandex_disk.upload_file(temp_path, disk_path)
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
                    public_url = self.yandex_disk.get_public_image_url(disk_path)
                    return public_url
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_path)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")
        
        return None

    async def refresh_tasks_cache(self) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ Backlog, –Ω–µ Done, –Ω–µ Canceled)
            filter_data = {
                "and": [
                    {
                        "property": "–°—Ç–∞—Ç—É—Å",
                        "status": {
                            "does_not_equal": "Backlog"
                        }
                    },
                    {
                        "property": "–°—Ç–∞—Ç—É—Å", 
                        "status": {
                            "does_not_equal": "Done"
                        }
                    },
                    {
                        "property": "–°—Ç–∞—Ç—É—Å",
                        "status": {
                            "does_not_equal": "Canceled"
                        }
                    }
                ]
            }
            
            tasks = self.notion.query_database(
                database_id=self.tasks_db,
                filter_data=filter_data
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cache = {}
            for task in tasks.get('results', []):
                task_title = task['properties']['–ó–∞–¥–∞—á–∞']['title'][0]['text']['content'] if task['properties']['–ó–∞–¥–∞—á–∞']['title'] else ""
                cache[task['id']] = {
                    'title': task_title,
                    'status': task['properties']['–°—Ç–∞—Ç—É—Å']['status']['name'] if task['properties']['–°—Ç–∞—Ç—É—Å']['status'] else "",
                    'participants': [p['name'] for p in task['properties']['–£—á–∞—Å—Ç–Ω–∏–∫–∏']['people']] if task['properties']['–£—á–∞—Å—Ç–Ω–∏–∫–∏']['people'] else []
                }
            
            self.active_tasks_cache = cache
            self.cache_timestamp = datetime.now()
            
            logger.info(f"–ö—ç—à –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω: {len(cache)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return cache
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∑–∞–¥–∞—á: {e}")
            return {}

    def find_related_task(self, material_name: str, figma_link: FigmaLink) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞/Figma"""
        if not self.active_tasks_cache:
            return None
        
        search_terms = [
            material_name.lower(),
            figma_link.title.lower(),
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ URL
            *figma_link.title.lower().split()
        ]
        
        best_match = None
        best_score = 0
        
        for task_id, task_data in self.active_tasks_cache.items():
            task_title = task_data['title'].lower()
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            score = 0
            for term in search_terms:
                if term in task_title:
                    score += len(term)
            
            if score > best_score:
                best_score = score
                best_match = task_id
        
        return best_match if best_score > 3 else None  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥

    def generate_smart_tags(self, material_name: str, figma_link: FigmaLink) -> List[str]:
        """–£–º–Ω–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        tags = []
        
        content = f"{material_name} {figma_link.title}".lower()
        
        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (98% —Å–ª—É—á–∞–µ–≤)
        tag_rules = {
            '–î–∏–∑–∞–π–Ω': ['–¥–∏–∑–∞–π–Ω', '–º–∞–∫–µ—Ç', 'ui', 'ux', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', 'layout'],
            '–ë—Ä–µ–Ω–¥': ['–ª–æ–≥–æ—Ç–∏–ø', '–±—Ä–µ–Ω–¥', 'logo', 'brand', '—Ñ–∏—Ä–º', '—Å—Ç–∏–ª—å'],
            '–í–µ–±': ['—Å–∞–π—Ç', 'web', '–ª–µ–Ω–¥–∏–Ω–≥', 'landing', '–≤–µ–±'],
            'SMM': ['–ø–æ—Å—Ç', 'stories', '—Å—Ç–æ—Ä–∏—Å', '–∏–Ω—Å—Ç–∞', '—Å–æ—Ü—Å–µ—Ç'],
            '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è': ['–±–∞–Ω–Ω–µ—Ä', '—Ñ–ª–∞–µ—Ä', '–ª–∏—Å—Ç–æ–≤–∫–∞', '–ø–µ—á–∞—Ç—å', '–ø–æ–ª–∏–≥—Ä–∞—Ñ'],
            '–í–∏–¥–µ–æ': ['–≤–∏–¥–µ–æ', '–∞–Ω–∏–º–∞—Ü–∏—è', 'motion', '—Ä–æ–ª–∏–∫'],
            '–§–æ—Ç–æ': ['—Ñ–æ—Ç–æ', 'photo', '—Å—ä–µ–º–∫–∞', '–æ–±—Ä–∞–±–æ—Ç–∫–∞']
        }
        
        for tag, keywords in tag_rules.items():
            if any(keyword in content for keyword in keywords):
                tags.append(tag)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤ - —Å—Ç–∞–≤–∏–º –î–∏–∑–∞–π–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not tags:
            tags.append('–î–∏–∑–∞–π–Ω')
        
        return tags

    def generate_checklist_items(self, material_name: str, tags: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–ª–∏—Å—Ç–∞/–ø—Ä–∞–≤–æ–∫ –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á"""
        checklist = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        checklist.extend([
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—Ä–µ–Ω–¥–±—É–∫—É",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (min 300 DPI)",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞"
        ])
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–µ–≥–∞–º
        tag_checklists = {
            '–ë—Ä–µ–Ω–¥': [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø–∞",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –±—Ä–µ–Ω–¥–∞",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É"
            ],
            '–í–µ–±': [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å UX/UI –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å accessibility"
            ],
            'SMM': [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Call-to-Action",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å hashtags"
            ],
            '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è': [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ª–µ—Ç—ã –∏ –æ–±—Ä–µ–∑–∫—É",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å CMYK —Ü–≤–µ—Ç–∞",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–∞"
            ]
        }
        
        for tag in tags:
            if tag in tag_checklists:
                checklist.extend(tag_checklists[tag])
        
        return checklist[:6]  # –ú–∞–∫—Å–∏–º—É–º 6 –ø—É–Ω–∫—Ç–æ–≤

    async def create_material_with_relations(self, material_request: MaterialRequest, preview_url: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –∞–≤—Ç–æ—Å–≤—è–∑—è–º–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            material_data = {
                "Name": {"title": [{"text": {"content": material_request.name}}]},
                "URL": {"url": material_request.figma_link.url},
                "–û–ø–∏—Å–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": material_request.description}}]},
                "–¢–µ–≥–∏": {"multi_select": [{"name": tag} for tag in material_request.tags]},
                "–°—Ç–∞—Ç—É—Å": {"status": {"name": "In progress"}},
                "Date": {"date": {"start": datetime.now().isoformat()}},
                "–í–µ—Å": {"number": 5}  # –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º Files & media –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é
            if preview_url:
                material_data["Files & media"] = {
                    "files": [{"external": {"url": preview_url}}]
                }
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            material_page = self.notion.create_page(
                database_id=self.materials_db,
                properties=material_data
            )
            
            if not material_page:
                return None
            
            material_id = material_page['id']
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cover –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é
            if preview_url:
                try:
                    self.notion.update_page_cover(material_id, preview_url)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cover: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞
            checklist = self.generate_checklist_items(material_request.name, material_request.tags)
            await self.create_subtasks_from_checklist(material_request.related_task, checklist)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–∑–∞–º —á–µ—Ä–µ–∑ —Ç–µ–≥–∏
            await self.auto_distribute_by_tags(material_request, material_id)
            
            logger.info(f"–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {material_id}")
            return material_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
            return None

    async def create_subtasks_from_checklist(self, parent_task_id: str, checklist: List[str]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞"""
        if not parent_task_id or not checklist:
            return
        
        try:
            for item in checklist:
                subtask_data = {
                    "–ü–æ–¥–∑–∞–¥–∞—á–∏": {"title": [{"text": {"content": item}}]},
                    "–ó–∞–¥–∞—á–∏": {"relation": [{"id": parent_task_id}]},
                    " –°—Ç–∞—Ç—É—Å": {"status": {"name": "To do"}},
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": {"multi_select": [{"name": "–î–∏–∑–∞–π–Ω"}]},
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": {"select": {"name": "–°—Ä–µ–¥–Ω–∏–π"}},
                    "–ß–∞—Å—ã": {"number": 0.5}  # 30 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
                }
                
                self.notion.create_page(
                    database_id=self.subtasks_db,
                    properties=subtask_data
                )
                
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(checklist)} –ø–æ–¥–∑–∞–¥–∞—á –¥–ª—è –∑–∞–¥–∞—á–∏ {parent_task_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á: {e}")

    async def auto_distribute_by_tags(self, material_request: MaterialRequest, material_id: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –±–∞–∑–∞–º —á–µ—Ä–µ–∑ —Ç–µ–≥–∏"""
        try:
            # –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–µ–≥–∞–º
            distribution_rules = {
                '–ë—Ä–µ–Ω–¥': {'db': self.guides_db, 'reason': '–±—Ä–µ–Ω–¥–∏–Ω–≥'},
                '–°—Ç—Ä–∞—Ç–µ–≥–∏—è': {'db': self.ideas_db, 'reason': '—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–¥–µ—è'},
                '–ö–æ–Ω—Ü–µ–ø—Ç': {'db': self.ideas_db, 'reason': '–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è –∏–¥–µ—è'}
            }
            
            for tag in material_request.tags:
                if tag in distribution_rules:
                    rule = distribution_rules[tag]
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ
                    target_data = {
                        "Name": {"title": [{"text": {"content": f"{material_request.name} ({rule['reason']})"}}]},
                        "–û–ø–∏—Å–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_request.figma_link.url}"}}]},
                        "–¢–µ–≥–∏": {"multi_select": [{"name": tag}]},
                        "–°—Ç–∞—Ç—É—Å": {"status": {"name": "To do"}},
                        "–í–µ—Å": {"number": 3}
                    }
                    
                    self.notion.create_page(
                        database_id=rule['db'],
                        properties=target_data
                    )
                    
                    logger.info(f"–ú–∞—Ç–µ—Ä–∏–∞–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ {rule['db']} –ø–æ —Ç–µ–≥—É {tag}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")

    async def handle_figma_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Figma URL"""
        message_text = update.message.text
        figma_link = self.parse_figma_url(message_text)
        
        if not figma_link:
            await update.message.reply_text(
                "‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å Figma —Å—Å—ã–ª–∫—É.\n"
                "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: https://www.figma.com/file/ABC123/My-Design"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Figma —Å—Å—ã–ª–∫—É...")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é
            await progress_msg.edit_text("üñºÔ∏è –ü–æ–ª—É—á–∞—é –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            preview_url = await self.get_figma_preview(figma_link)
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            if preview_url:
                await progress_msg.edit_text("‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...")
                disk_url = await self.upload_to_yandex_disk(preview_url, figma_link.title)
                preview_url = disk_url or preview_url
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–¥–∞—á
            if not self.active_tasks_cache:
                await progress_msg.edit_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à –∑–∞–¥–∞—á...")
                await self.refresh_tasks_cache()
            
            # 4. –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            related_task = self.find_related_task(figma_link.title, figma_link)
            
            # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
            tags = self.generate_smart_tags(figma_link.title, figma_link)
            
            # –°–æ–∑–¥–∞–µ–º request
            material_request = MaterialRequest(
                figma_link=figma_link,
                name=figma_link.title,
                description=f"–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ Figma: {figma_link.link_type}",
                tags=tags,
                related_task=related_task
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏—Ä–º–∞—Ü–∏—é
            await self.show_confirmation(update, progress_msg, material_request, preview_url)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Figma URL: {e}")
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    async def show_confirmation(self, update: Update, progress_msg, material_request: MaterialRequest, preview_url: str):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ñ–∏—Ä–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        task_info = ""
        if material_request.related_task and material_request.related_task in self.active_tasks_cache:
            task_data = self.active_tasks_cache[material_request.related_task]
            task_info = f"üîó –°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_data['title']}\n"
        
        confirmation_text = f"""
üé® **–ú–ê–¢–ï–†–ò–ê–õ –ì–û–¢–û–í –ö –°–û–ó–î–ê–ù–ò–Æ**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {material_request.name}
üè∑Ô∏è **–¢–µ–≥–∏:** {', '.join(material_request.tags)}
{task_info}
üñºÔ∏è **–ü—Ä–µ–≤—å—é:** {"‚úÖ –î–∞" if preview_url else "‚ùå –ù–µ—Ç"}

‚úÖ **–ß–¢–û –°–û–ó–î–ê–°–¢–°–Ø:**
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion —Å –æ–±–ª–æ–∂–∫–æ–π
‚Ä¢ –ê–≤—Ç–æ—Å–≤—è–∑—å —Å –∑–∞–¥–∞—á–µ–π (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞)
‚Ä¢ –ß–µ–∫–ª–∏—Å—Ç –ø—Ä–∞–≤–æ–∫ ‚Üí –ø–æ–¥–∑–∞–¥–∞—á–∏
‚Ä¢ –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–≥–∞–º

–°–æ–∑–¥–∞–µ–º?
        """
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data=f"create_material_{update.message.message_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_material")
            ]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context
        context = {
            'material_request': material_request,
            'preview_url': preview_url
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/DB)
        self.pending_materials = getattr(self, 'pending_materials', {})
        self.pending_materials[update.message.message_id] = context
        
        await progress_msg.edit_text(confirmation_text, reply_markup=keyboard, parse_mode='Markdown')

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("create_material_"):
            message_id = int(query.data.split("_")[-1])
            
            if hasattr(self, 'pending_materials') and message_id in self.pending_materials:
                material_context = self.pending_materials[message_id]
                material_request = material_context['material_request']
                preview_url = material_context['preview_url']
                
                await query.edit_message_text("üöÄ –°–æ–∑–¥–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª...")
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                material_id = await self.create_material_with_relations(material_request, preview_url)
                
                if material_id:
                    notion_url = f"https://www.notion.so/{material_id.replace('-', '')}"
                    success_text = f"""
‚úÖ **–ú–ê–¢–ï–†–ò–ê–õ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!**

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Notion]({notion_url})

üìä **–ß–¢–û –°–î–ï–õ–ê–ù–û:**
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω
‚Ä¢ {"–°–≤—è–∑–∞–Ω —Å –∑–∞–¥–∞—á–µ–π" if material_request.related_task else "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
‚Ä¢ –°–æ–∑–¥–∞–Ω—ã –ø–æ–¥–∑–∞–¥–∞—á–∏-–ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ç–µ–≥–∞–º
                    """
                    await query.edit_message_text(success_text, parse_mode='Markdown')
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                del self.pending_materials[message_id]
            else:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ —É—Å—Ç–∞—Ä–µ–ª–∏")
                
        elif query.data == "cancel_material":
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    async def refresh_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞"""
        msg = await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à –∑–∞–¥–∞—á...")
        
        cache = await self.refresh_tasks_cache()
        
        await msg.edit_text(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(cache)}")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        stats_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**

üóÇÔ∏è **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {self.materials_db[-8:]}...
‚Ä¢ –ó–∞–¥–∞—á–∏: {self.tasks_db[-8:]}...
‚Ä¢ –ü–æ–¥–∑–∞–¥–∞—á–∏: {self.subtasks_db[-8:] if self.subtasks_db else '–ù/–î'}...

‚ö° **–ö—ç—à:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(self.active_tasks_cache)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.cache_timestamp.strftime('%H:%M:%S') if self.cache_timestamp else '–ù–∏–∫–æ–≥–¥–∞'}

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ Figma —Å—Å—ã–ª–æ–∫
‚Ä¢ –ê–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏  
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–ª–∏—Å—Ç–æ–≤
‚Ä¢ –£–º–Ω–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üÜò **–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£**

üìã **–ö–û–ú–ê–ù–î–´:**
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
‚Ä¢ `/refresh` - –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîó **–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Figma —Å—Å—ã–ª–∫—É, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
1. –ü–æ–ª—É—á–∏—Ç –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
2. –ó–∞–≥—Ä—É–∑–∏—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
3. –°–æ–∑–¥–∞—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion —Å –æ–±–ª–æ–∂–∫–æ–π
4. –°–≤—è–∂–µ—Ç —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∑–∞–¥–∞—á–µ–π
5. –°–æ–∑–¥–∞—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏-–ø—Ä–æ–≤–µ—Ä–∫–∏
6. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ –±–∞–∑–∞–º —á–µ—Ä–µ–∑ —Ç–µ–≥–∏

üéØ **–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –°–°–´–õ–ö–ò:**
‚Ä¢ `figma.com/file/...`
‚Ä¢ `figma.com/proto/...`
‚Ä¢ `figma.com/design/...`
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.telegram_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(self.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("refresh", self.refresh_command))
        app.add_handler(CommandHandler("stats", self.stats_command))
        app.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Figma URL
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_figma_url))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        logger.info("üöÄ Figma Materials Bot –∑–∞–ø—É—â–µ–Ω!")
        print("üé® FIGMA MATERIALS BOT - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è!")
        print("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Figma —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = FigmaMaterialsBot()
    bot.run()