#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–¥–∞—á - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏, –Ω–∞—Ö–æ–¥–∏—Ç —ç–ø–∏–∫–∏, –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
"""

import os
import logging
from typing import List, Dict, Optional, Any, Tuple
from dotenv import load_dotenv
from notion_client import AsyncClient
import asyncio
import re
from difflib import SequenceMatcher

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class SmartTaskProcessor:
    """–£–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –±–µ–∑ –¥—É–±–ª–µ–π"""
    
    def __init__(self):
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.tasks_db_id = os.getenv("TASKS_DB")
        self.subtasks_db_id = os.getenv("SUBTASKS_DB")
        
        if not self.notion_token or not self.tasks_db_id:
            raise ValueError("NOTION_TOKEN –∏ TASKS_DB –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ .env")
            
        self.client = AsyncClient(auth=self.notion_token)
        logger.info("‚úÖ SmartTaskProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏"""
        return SequenceMatcher(None, text1.lower(), text2.lower()).ratio()
    
    def _extract_keywords(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {
            '–¥–µ–ª–∞–µ–º', '–¥–µ–ª–∞–ª', '—É–¥–∞–ª–∏–ª', '–¥–æ–±–∞–≤–∏—Ç—å', '–ø–æ–¥', '–∑–∞–¥–∞—á—É', '–≤—Ä–µ–º—è', '—á–∞—Å–æ–≤', '—á–∞—Å',
            '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '–æ–¥–∏–Ω', '–µ—â–µ', '—Ç–∞–∫–∂–µ', '–ø–æ—Ç–æ–º', '—Å–µ–π—á–∞—Å',
            '–≥–¥–µ', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–∞–∫–æ–π', '–∫–æ—Ç–æ—Ä–æ–π', '–Ω—É–∂–Ω–æ', '–Ω–∞–¥–æ'
        }
        words = re.findall(r'\b[–∞-—è—ë]+\b', text.lower())
        keywords = [word for word in words if word not in stop_words and len(word) > 2]
        return list(set(keywords))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    
    async def get_all_existing_tasks(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π"""
        try:
            logger.info("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π...")
            
            all_tasks = []
            has_more = True
            start_cursor = None
            
            while has_more:
                query_params = {
                    "database_id": self.tasks_db_id,
                    "page_size": 100
                }
                
                if start_cursor:
                    query_params["start_cursor"] = start_cursor
                
                response = await self.client.databases.query(**query_params)
                
                for page in response.get("results", []):
                    properties = page.get("properties", {})
                    task_title = properties.get("–ó–∞–¥–∞—á–∞", {}).get("title", [])
                    if task_title:
                        all_tasks.append({
                            "id": page["id"],
                            "title": task_title[0]["text"]["content"],
                            "status": properties.get("–°—Ç–∞—Ç—É—Å", {}).get("status", {}).get("name", ""),
                            "assignees": properties.get("–£—á–∞—Å—Ç–Ω–∏–∫–∏", {}).get("people", []),
                            "hours": properties.get("–ß–∞—Å—ã", {}).get("number", 0),
                            "keywords": self._extract_keywords(task_title[0]["text"]["content"])
                        })
                
                has_more = response.get("has_more", False)
                start_cursor = response.get("next_cursor")
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_tasks)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á")
            return all_tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á: {e}")
            return []
    
    async def find_duplicate_or_similar(self, new_task: str, existing_tasks: List[Dict[str, Any]]) -> Tuple[Optional[Dict[str, Any]], float]:
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–µ–π –∏–ª–∏ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á"""
        new_keywords = self._extract_keywords(new_task)
        logger.info(f"üîç –ò—â–µ–º –¥—É–±–ª–∏ –¥–ª—è '{new_task}' (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {new_keywords})")
        
        best_match = None
        best_score = 0.0
        
        for existing in existing_tasks:
            # –ü—Ä—è–º–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π
            title_similarity = self._calculate_similarity(new_task, existing["title"])
            
            # –°—Ö–æ–¥—Å—Ç–≤–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            common_keywords = set(new_keywords) & set(existing["keywords"])
            keyword_score = len(common_keywords) / max(len(new_keywords), 1) if new_keywords else 0
            
            # –û–±—â–∏–π –±–∞–ª–ª (60% –Ω–∞–∑–≤–∞–Ω–∏–µ + 40% –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
            total_score = title_similarity * 0.6 + keyword_score * 0.4
            
            logger.debug(f"  üìã '{existing['title']}' - —Å—Ö–æ–¥—Å—Ç–≤–æ: {total_score:.2f} (–Ω–∞–∑–≤–∞–Ω–∏–µ: {title_similarity:.2f}, —Å–ª–æ–≤–∞: {keyword_score:.2f})")
            
            if total_score > best_score:
                best_score = total_score
                best_match = existing
        
        if best_score > 0.7:  # –ü–æ—Ä–æ–≥ –¥–ª—è –¥—É–±–ª—è
            logger.info(f"üéØ –ù–ê–ô–î–ï–ù –î–£–ë–õ–¨: '{best_match['title']}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best_score:.2f})")
            return best_match, best_score
        elif best_score > 0.4:  # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–æ—Ö–æ–∂–µ–π –∑–∞–¥–∞—á–∏
            logger.info(f"üîó –ù–ê–ô–î–ï–ù–ê –ü–û–•–û–ñ–ê–Ø: '{best_match['title']}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best_score:.2f})")
            return best_match, best_score
        
        logger.info(f"‚ú® –ù–æ–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: '{new_task}'")
        return None, 0.0
    
    async def process_task_intelligently(self, task_data: Dict[str, Any], existing_tasks: List[Dict[str, Any]], user_id: int) -> Dict[str, Any]:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á"""
        task_name = task_data.get("task", "")
        subtasks = task_data.get("subtasks", [])
        
        logger.info(f"\nüß† –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: '{task_name}'")
        logger.info(f"   üìã –ü–æ–¥–∑–∞–¥–∞—á: {len(subtasks)}")
        
        # –ò—â–µ–º –¥—É–±–ª–∏ –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏
        duplicate, similarity = await self.find_duplicate_or_similar(task_name, existing_tasks)
        
        if duplicate and similarity > 0.7:
            # –≠—Ç–æ –¥—É–±–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
            logger.info(f"‚ö° –ú–û–õ–ù–ò–ï–ù–û–°–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ '{duplicate['title']}'")
            
            added_subtasks = []
            for subtask in subtasks:
                subtask_id = await self._add_subtask_to_existing(duplicate["id"], subtask)
                if subtask_id:
                    added_subtasks.append(subtask["name"])
            
            return {
                "action": "updated_existing",
                "task_id": duplicate["id"],
                "task_title": duplicate["title"],
                "added_subtasks": added_subtasks,
                "similarity": similarity
            }
        
        elif duplicate and similarity > 0.4:
            # –ü–æ—Ö–æ–∂–∞—è –∑–∞–¥–∞—á–∞ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"‚ùì –¢–†–ï–ë–£–ï–¢ –£–¢–û–ß–ù–ï–ù–ò–Ø: –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –∑–∞–¥–∞—á–∞ '{duplicate['title']}'")
            return {
                "action": "needs_clarification",
                "existing_task": duplicate,
                "similarity": similarity,
                "new_task_data": task_data
            }
        
        else:
            # –ù–æ–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
            logger.info(f"‚ú® –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ: '{task_name}'")
            new_task_id = await self._create_new_task(task_data, user_id)
            return {
                "action": "created_new",
                "task_id": new_task_id,
                "task_title": task_name,
                "subtasks_count": len(subtasks)
            }
    
    async def _add_subtask_to_existing(self, parent_task_id: str, subtask_data: Dict[str, Any]) -> Optional[str]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ"""
        try:
            properties = {
                "–ü–æ–¥–∑–∞–¥–∞—á–∏": {
                    "title": [{"text": {"content": subtask_data["name"]}}]
                },
                "–°—Ç–∞—Ç—É—Å": {
                    "status": {"name": "To Do"}
                },
                "–í—Ä–µ–º—è": {
                    "number": subtask_data.get("time_hours", 0)
                },
                "–ó–∞–¥–∞—á–∏": {
                    "relation": [{"id": parent_task_id}]
                }
            }
            
            if subtask_data.get("description"):
                properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {
                    "rich_text": [{"text": {"content": subtask_data["description"]}}]
                }
            
            new_page = await self.client.pages.create(
                parent={"database_id": self.subtasks_db_id},
                properties=properties
            )
            
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞: {subtask_data['name']} ({subtask_data.get('time_hours', 0)} —á)")
            return new_page["id"]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏: {e}")
            return None
    
    async def _create_new_task(self, task_data: Dict[str, Any], user_id: int) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏"""
        try:
            properties = {
                "–ó–∞–¥–∞—á–∞": {"title": [{"text": {"content": task_data["task"]}}]},
                "–°—Ç–∞—Ç—É—Å": {"status": {"name": "To Do"}},
            }
            
            if task_data.get('time_hours'):
                properties["–ß–∞—Å—ã"] = {"number": task_data['time_hours']}
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
            new_task = await self.client.pages.create(
                parent={"database_id": self.tasks_db_id},
                properties=properties
            )
            
            task_id = new_task["id"]
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_data['task']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
            for subtask in task_data.get("subtasks", []):
                await self._add_subtask_to_existing(task_id, subtask)
            
            return task_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return None

# –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
async def test_smart_processor():
    """–¢–µ—Å—Ç —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    processor = SmartTaskProcessor()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    existing_tasks = await processor.get_all_existing_tasks()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    test_task = {
        "task": "–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞",
        "time_hours": 2,
        "subtasks": [
            {"name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏", "time_hours": 1},
            {"name": "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "time_hours": 1}
        ]
    }
    
    result = await processor.process_task_intelligently(test_task, existing_tasks, 307055142)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")

if __name__ == "__main__":
    asyncio.run(test_smart_processor()) 