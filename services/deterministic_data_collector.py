"""
–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import re

@dataclass
class TestCase:
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª"""
    input_text: str
    expected_output: Dict[str, Any]
    category: str
    description: str
    priority: str = "Medium"

@dataclass
class RuleResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞"""
    rule_name: str
    input_text: str
    output: Dict[str, Any]
    processing_time_ms: float
    success: bool
    error_message: Optional[str] = None

class DeterministicDataCollector:
    """–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª"""
    
    def __init__(self):
        self.test_cases = []
        self.results = []
        self.rules = {
            "title_cleaning": self.clean_title,
            "auto_tagging": self.auto_tag,
            "classification": self.classify_content,
            "validation": self.validate_data,
            "transformation": self.transform_data
        }
    
    def clean_title(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)"""
        # –£–¥–∞–ª—è–µ–º Telegram —ç–º–æ–¥–∑–∏
        text = re.sub(r'^üì±\s*', '', text)
        
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^https://.*?\s', '', text)
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        # –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
        text = re.sub(r'^\s+|\s+$', '', text)
        
        return text
    
    def auto_tag(self, text: str) -> List[str]:
        """–ê–≤—Ç–æ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)"""
        tags = []
        
        # –î–æ–º–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
        domains = {
            "instagram.com": "Social Media",
            "youtube.com": "Video Platform",
            "facebook.com": "Social Media",
            "vk.com": "Social Media",
            "t.me": "Telegram",
            "tiktok.com": "Social Media",
            "twitter.com": "Social Media"
        }
        
        for domain, tag in domains.items():
            if domain in text.lower():
                tags.append(tag)
        
        # –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if any(word in text.lower() for word in ["–¥–∏–∑–∞–π–Ω", "design", "figma", "ui", "ux"]):
            tags.append("Design")
        
        if any(word in text.lower() for word in ["–≤–∏–¥–µ–æ", "video", "youtube", "–º–æ–Ω—Ç–∞–∂"]):
            tags.append("Video")
        
        if any(word in text.lower() for word in ["—Ñ–æ—Ç–æ", "photo", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "image"]):
            tags.append("Photo")
        
        return tags
    
    def classify_content(self, text: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)"""
        cleaned = text.strip()
        
        if len(cleaned) < 3:
            return "Garbage"
        elif len(cleaned) > 100:
            return "Long Content"
        elif any(char.isdigit() for char in cleaned):
            return "Data Entry"
        elif any(ord(char) > 127 for char in cleaned):
            return "Social Content"
        elif cleaned.startswith("http"):
            return "Link"
        else:
            return "Regular Content"
    
    def validate_data(self, text: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)"""
        if not text or len(text.strip()) == 0:
            return False
        
        if len(text) > 1000:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∏—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
        if any(ord(char) < 32 and char not in '\n\r\t' for char in text):
            return False
        
        return True
    
    def transform_data(self, text: str) -> Dict[str, Any]:
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)"""
        result = {
            "cleaned_text": self.clean_title(text),
            "tags": self.auto_tag(text),
            "category": self.classify_content(text),
            "is_valid": self.validate_data(text),
            "word_count": len(text.split()),
            "char_count": len(text),
            "has_links": "http" in text.lower(),
            "has_emoji": any(ord(char) > 127 for char in text)
        }
        
        return result
    
    def add_test_case(self, test_case: TestCase):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π"""
        self.test_cases.append(test_case)
    
    def load_test_cases_from_file(self, filename: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            for item in data:
                test_case = TestCase(
                    input_text=item["input_text"],
                    expected_output=item["expected_output"],
                    category=item["category"],
                    description=item["description"],
                    priority=item.get("priority", "Medium")
                )
                self.add_test_case(test_case)
                
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏–∑ {filename}")
            
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
    
    def generate_test_cases_from_report(self, report_text: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞
        lines = report_text.split('\n')
        
        for line in lines:
            line = line.strip()
            if len(line) > 10:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                test_case = TestCase(
                    input_text=line,
                    expected_output={
                        "cleaned_text": self.clean_title(line),
                        "tags": self.auto_tag(line),
                        "category": self.classify_content(line),
                        "is_valid": self.validate_data(line)
                    },
                    category="report_data",
                    description=f"–î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞: {line[:50]}...",
                    priority="High"
                )
                
                self.add_test_case(test_case)
    
    async def test_rule(self, rule_name: str, input_text: str) -> RuleResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ"""
        start_time = time.time()
        
        try:
            rule_func = self.rules[rule_name]
            output = rule_func(input_text)
            
            processing_time = (time.time() - start_time) * 1000
            
            result = RuleResult(
                rule_name=rule_name,
                input_text=input_text,
                output=output,
                processing_time_ms=processing_time,
                success=True
            )
            
        except Exception as e:
            processing_time = (time.time() - start_time) * 1000
            
            result = RuleResult(
                rule_name=rule_name,
                input_text=input_text,
                output={},
                processing_time_ms=processing_time,
                success=False,
                error_message=str(e)
            )
        
        return result
    
    async def run_all_tests(self) -> List[RuleResult]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        results = []
        
        print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {len(self.test_cases)} —Å–ª—É—á–∞–µ–≤...")
        
        for i, test_case in enumerate(self.test_cases, 1):
            print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {i}/{len(self.test_cases)}: {test_case.description[:50]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
            for rule_name in self.rules.keys():
                result = await self.test_rule(rule_name, test_case.input_text)
                results.append(result)
        
        self.results = results
        return results
    
    def analyze_results(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.results:
            return {"error": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        analysis = {
            "total_tests": len(self.results),
            "successful_tests": len([r for r in self.results if r.success]),
            "failed_tests": len([r for r in self.results if not r.success]),
            "average_processing_time": sum(r.processing_time_ms for r in self.results) / len(self.results),
            "rules_performance": {},
            "error_patterns": []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
        for rule_name in self.rules.keys():
            rule_results = [r for r in self.results if r.rule_name == rule_name]
            if rule_results:
                analysis["rules_performance"][rule_name] = {
                    "total": len(rule_results),
                    "successful": len([r for r in rule_results if r.success]),
                    "average_time": sum(r.processing_time_ms for r in rule_results) / len(rule_results),
                    "success_rate": len([r for r in rule_results if r.success]) / len(rule_results)
                }
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        errors = [r for r in self.results if not r.success]
        for error in errors:
            analysis["error_patterns"].append({
                "rule": error.rule_name,
                "input": error.input_text[:100],
                "error": error.error_message
            })
        
        return analysis
    
    def save_results(self, filename: str = "deterministic_test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        data = {
            "timestamp": datetime.now().isoformat(),
            "test_cases": [
                {
                    "input_text": tc.input_text,
                    "expected_output": tc.expected_output,
                    "category": tc.category,
                    "description": tc.description,
                    "priority": tc.priority
                }
                for tc in self.test_cases
            ],
            "results": [
                {
                    "rule_name": r.rule_name,
                    "input_text": r.input_text,
                    "output": r.output,
                    "processing_time_ms": r.processing_time_ms,
                    "success": r.success,
                    "error_message": r.error_message
                }
                for r in self.results
            ],
            "analysis": self.analyze_results()
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        analysis = self.analyze_results()
        
        print("\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–´–• –ü–†–ê–í–ò–õ")
        print("=" * 60)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {analysis['total_tests']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {analysis['successful_tests']}")
        print(f"–û—à–∏–±–æ–∫: {analysis['failed_tests']}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {analysis['average_processing_time']:.2f}ms")
        
        print("\nüìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û –ü–†–ê–í–ò–õ–ê–ú:")
        for rule_name, stats in analysis["rules_performance"].items():
            print(f"  {rule_name}:")
            print(f"    –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1%}")
            print(f"    –í—Ä–µ–º—è: {stats['average_time']:.2f}ms")
        
        if analysis["error_patterns"]:
            print("\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in analysis["error_patterns"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  {error['rule']}: {error['error']}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    collector = DeterministicDataCollector()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    collector.load_test_cases_from_file("test_cases.json")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è
    report_text = """
    –î–∏—Å—Ç–∏–ª–ª—è—Ç–æ—Ä: 24 –∏—é–ª—è
    –ú–∞—Å–ª–æ–ø—Ä–µ—Å—Å: 1 –∞–≤–≥—É—Å—Ç–∞
    –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞: –≤ —Ç–µ—á–µ–Ω–∏–µ –∞–≤–≥—É—Å—Ç–∞
    –°–∫–æ–≤–æ—Ä–æ–¥—ã –∏ –∫–∞—Å—Ç—Ä—é–ª–∏: –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
    –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∏—Ç–∞ Pro: –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
    –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –¥–µ–≥–∏–¥—Ä–∞—Ç–æ—Ä–∞–º–∏, –∞—ç—Ä–æ–≥—Ä–∏–ª—è–º–∏ –∏ –ø–æ–¥–¥–æ–Ω–∞–º–∏
    –í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∞—ç—Ä–æ—Ñ—Ä–∏—Ç—é—Ä–Ω–∏—Ü–∞–º–∏ (RMA 02) –∏ –Ω–æ–≤—ã–º–∏ –æ–∑–æ–Ω–∞—Ç–æ—Ä–∞–º–∏ (05)
    –°–∫–æ—Ä–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è "–ª–∞–≤–∏–Ω–∞" –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –±–ª–µ–Ω–¥–µ—Ä–∞–º–∏
    –ò–∑ 73 —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏–Ω—è–ª–∏ —Ç–æ–ª—å–∫–æ 25
    –ü—Ä–∏—á–∏–Ω–∞ ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∫–ª–∞–¥–∞ Wildberries –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –Ω–µ —Ç–æ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤: –≠—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    –ó–∞–¥–∞—á–∞ –º–∞–∫—Å–∏–º—É–º ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫ –±–æ–ª—å—à–æ–π —Å–µ–Ω—Ç—è–±—Ä—å—Å–∫–æ–π —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—É–¥–µ—Ç –æ—Ç–¥–∞–Ω —Å–µ–∑–æ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º: —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∫–æ–≤—ã–∂–∏–º–∞–ª–∫–∏ –∏ –¥–µ–≥–∏–¥—Ä–∞—Ç–æ—Ä—ã
    –ó–∞—Ç–µ–º –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (–º–æ–π–∫–∏ –≤–æ–∑–¥—É—Ö–∞, –ø—ã–ª–µ—Å–æ—Å—ã)
    –û—Å–Ω–æ–≤–Ω–æ–π —É–ø–æ—Ä –≤ —Ä–∞–±–æ—Ç–µ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∏ –∞–≤—Ç–æ—Ä–æ–≤
    –ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —Ä–µ–¥–∞–∫—Ü–∏—é
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤
    –ò–¥—É—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π "Duty Box"
    –ü–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è VK Fest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –§–ö "–ó–µ–Ω–∏—Ç"
    –§–µ—Å—Ç–∏–≤–∞–ª—å —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª –∏ –±—ã–ª –æ—Ü–µ–Ω–µ–Ω –∫–∞–∫ —Å–ª–∞–±–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
    """
    
    collector.generate_test_cases_from_report(report_text)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = await collector.run_all_tests()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    collector.print_summary()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    collector.save_results()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 