import os
import asyncio
import re
import requests
from typing import List, Dict, Optional
from dotenv import load_dotenv
from notion_client import AsyncClient
import yadisk

load_dotenv()

class MediaCoverManager:
    def __init__(self):
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.ideas_db_id = os.getenv("IDEAS_DB", "ad92a6e2-1485-428c-84de-8587706b3be1")
        self.yadisk_token = os.getenv("YANDEX_DISK_TOKEN")
        self.figma_token = os.getenv("FIGMA_TOKEN")  # –î–æ–±–∞–≤–ª—è–µ–º Figma —Ç–æ–∫–µ–Ω
        if not self.notion_token:
            raise RuntimeError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env")
        if not self.yadisk_token:
            raise RuntimeError("YANDEX_DISK_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env")
        self.notion = AsyncClient(auth=str(self.notion_token))
        self.yadisk = yadisk.YaDisk(token=str(self.yadisk_token))

    def extract_figma_info(self, figma_url: str) -> Optional[Dict[str, Optional[str]]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç file_key –∏ node_id –∏–∑ Figma —Å—Å—ã–ª–∫–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
        - https://www.figma.com/file/FILE_KEY/...
        - https://www.figma.com/proto/FILE_KEY/...
        - https://www.figma.com/design/FILE_KEY/...
        """
        patterns = [
            r'figma\.com/file/([a-zA-Z0-9]+)',
            r'figma\.com/proto/([a-zA-Z0-9]+)',
            r'figma\.com/design/([a-zA-Z0-9]+)'
        ]

        file_key = None
        for pattern in patterns:
            match = re.search(pattern, figma_url)
            if match:
                file_key = match.group(1)
                break

        if not file_key:
            return None

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: node_id –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ—Ñ–∏—Å—ã –∏ —Ü–∏—Ñ—Ä—ã
        node_match = re.search(r'node-id=([a-zA-Z0-9\-]+)', figma_url)
        node_id = node_match.group(1) if node_match else None
        if node_id:
            node_id = node_id.replace('-', ':')

        return {
            'file_key': file_key,
            'node_id': node_id
        }

    def get_figma_image_url(self, file_key: str, node_id: Optional[str] = None,
                           format: str = "png", scale: int = 2) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Figma API
        """
        if not self.figma_token:
            print("‚ö†Ô∏è FIGMA_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env")
            return None

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            if node_id:
                url = f"https://api.figma.com/v1/images/{file_key}?ids={node_id}&format={format}&scale={scale}"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç node_id, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
                url = f"https://api.figma.com/v1/images/{file_key}?format={format}&scale={scale}"

            headers = {
                'X-Figma-Token': self.figma_token
            }

            response = requests.get(url, headers=headers)
            response.raise_for_status()

            data = response.json()

            if node_id:
                # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–∑–ª–∞
                if 'images' in data and node_id in data['images']:
                    return data['images'][node_id]
            else:
                # –î–ª—è –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É–∑–µ–ª
                if 'images' in data and data['images']:
                    return list(data['images'].values())[0]

            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Figma API")
            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Figma: {e}")
            return None

    async def apply_figma_cover(self, notion_page_id: str, figma_url: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–ª–æ–∂–∫—É Notion –∏–∑ Figma —Å—Å—ã–ª–∫–∏
        """
        print(f"üé® –ü—Ä–∏–º–µ–Ω—è—é Figma cover –¥–ª—è {notion_page_id}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Figma —Å—Å—ã–ª–∫–∏
        figma_info = self.extract_figma_info(figma_url)
        if not figma_info:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Figma —Å—Å—ã–ª–∫–∏: {figma_url}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Figma
        image_url = self.get_figma_image_url(
            file_key=figma_info['file_key'],
            node_id=figma_info['node_id']
        )

        if not image_url:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Figma")
            return False

        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cover –≤ Notion
            await self.notion.pages.update(
                page_id=notion_page_id,
                cover={
                    "type": "external",
                    "external": {"url": image_url}
                }
            )
            print(f"‚úÖ Figma cover –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è {notion_page_id}: {image_url}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Figma cover –¥–ª—è {notion_page_id}: {e}")
            return False

    async def batch_apply_figma_covers(self, limit: int = 20):
        """
        –ú–∞—Å—Å–æ–≤–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç Figma covers –¥–ª—è –∑–∞–ø–∏—Å–µ–π —Å Figma —Å—Å—ã–ª–∫–∞–º–∏
        """
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )

        applied = 0
        for idea in resp.get('results', []):
            props = idea.get('properties', {})
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ URL
            url_field = props.get('URL', {})
            url = url_field.get('url', '') if url_field else ''

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ –§–∞–π–ª—ã
            files_field = props.get('–§–∞–π–ª—ã', {})
            files_url = files_field.get('url', '') if files_field else ''

            # –ò—â–µ–º Figma —Å—Å—ã–ª–∫–∏
            figma_url = None
            if 'figma.com' in url:
                figma_url = url
            elif 'figma.com' in files_url:
                figma_url = files_url

            if not figma_url:
                continue

            print(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {idea['id']} —Å Figma —Å—Å—ã–ª–∫–æ–π ===")
            success = await self.apply_figma_cover(idea['id'], figma_url)
            if success:
                applied += 1

        print(f"\n–ò—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ Figma covers: {applied}/{len(resp.get('results', []))}")

    async def apply_cover_from_url(self, notion_page_id: str, url: str) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cover –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        if 'figma.com' in url:
            return await self.apply_figma_cover(notion_page_id, url)
        elif 'yadi.sk' in url or 'disk.yandex.ru' in url:
            # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            return await self.apply_cover_from_yadisk_url(notion_page_id, url)
        else:
            print(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL –¥–ª—è cover: {url}")
            return False

    async def apply_cover_from_yadisk_url(self, notion_page_id: str, yadisk_url: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cover –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        """
        try:
            meta = self.yadisk.get_meta(yadisk_url)
            if getattr(meta, 'type', None) != 'file':
                print(f"‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞ —Ñ–∞–π–ª: {yadisk_url}")
                return False

            preview_url = getattr(meta, 'preview', None) or getattr(meta, 'public_url', None)
            if not preview_url:
                print(f"‚ùå –ù–µ—Ç preview/public_url –¥–ª—è {yadisk_url}")
                return False

            await self.notion.pages.update(
                page_id=notion_page_id,
                cover={
                    "type": "external",
                    "external": {"url": preview_url}
                }
            )
            print(f"‚úÖ Yandex.Disk cover –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è {notion_page_id}: {preview_url}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Yandex.Disk cover –¥–ª—è {notion_page_id}: {e}")
            return False

    async def get_ideas_with_yadisk(self, limit=100) -> List[Dict]:
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )
        ideas = []
        for idea in resp.get('results', []):
            props = idea.get('properties', {})
            url = props.get('URL', {}).get('url', '') or ''
            files_url = props.get('–§–∞–π–ª—ã', {}).get('url', '') or ''
            if 'yadi.sk' in url or 'yadi.sk' in files_url:
                ideas.append({
                    'id': idea['id'],
                    'url': url,
                    'files_url': files_url,
                    'cover': idea.get('cover'),
                    'title': self._extract_title(props.get('Name', {}))
                })
        return ideas

    def get_preview_url(self, public_url: str) -> str:
        try:
            meta = self.yadisk.get_meta(public_url)
            preview = getattr(meta, 'preview', None)
            if isinstance(preview, str):
                return preview if preview else ''
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å preview –¥–ª—è {public_url}: {e}")
        return ''

    def get_direct_image_url(self, yadisk_path: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        –°–Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫—É–µ—Ç —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        """
        try:
            print(f"üîó –ü–æ–ª—É—á–∞—é –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {yadisk_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ª–∏ —Ñ–∞–π–ª
            if not self.is_published(yadisk_path):
                print(f"üåç –ü—É–±–ª–∏–∫—É—é —Ñ–∞–π–ª: {yadisk_path}")
                self.yadisk.publish(yadisk_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            meta = self.yadisk.get_meta(yadisk_path)
            public_url = getattr(meta, 'public_url', None)
            
            if not public_url:
                print(f"‚ùå –ù–µ—Ç public_url –¥–ª—è {yadisk_path}")
                return ''
            
            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            # –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ /i/ –≤ URL
            if public_url.startswith('https://yadi.sk/d/'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞ –∏–∑ public_url
                file_id = public_url.split('/')[-1]
                direct_url = f"https://yadi.sk/i/{file_id}"
                print(f"‚úÖ –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {direct_url}")
                return direct_url
            elif public_url.startswith('https://disk.yandex.ru/d/'):
                # –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ URL
                file_id = public_url.split('/')[-1]
                direct_url = f"https://disk.yandex.ru/i/{file_id}"
                print(f"‚úÖ –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {direct_url}")
                return direct_url
            elif public_url.startswith('https://yadi.sk/i/'):
                # –£–∂–µ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞
                print(f"‚úÖ –£–∂–µ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {public_url}")
                return public_url
            elif public_url.startswith('https://disk.yandex.ru/i/'):
                # –£–∂–µ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞
                print(f"‚úÖ –£–∂–µ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {public_url}")
                return public_url
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç public_url: {public_url}")
                return public_url
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {yadisk_path}: {e}")
            return ''

    def get_public_image_url(self, yadisk_path: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        try:
            print(f"üåç –ü–æ–ª—É—á–∞—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {yadisk_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ª–∏ —Ñ–∞–π–ª
            if not self.is_published(yadisk_path):
                print(f"üåç –ü—É–±–ª–∏–∫—É—é —Ñ–∞–π–ª: {yadisk_path}")
                self.yadisk.publish(yadisk_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            meta = self.yadisk.get_meta(yadisk_path)
            public_url = getattr(meta, 'public_url', None)
            
            if not public_url:
                print(f"‚ùå –ù–µ—Ç public_url –¥–ª—è {yadisk_path}")
                return ''
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å preview URL (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            preview_url = getattr(meta, 'preview', None)
            if preview_url and isinstance(preview_url, str):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω preview URL: {preview_url}")
                return preview_url
            
            # –ï—Å–ª–∏ preview –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
            if public_url.startswith('https://yadi.sk/d/'):
                file_id = public_url.split('/')[-1]
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                possible_urls = [
                    f"https://yadi.sk/i/{file_id}",
                    f"https://yadi.sk/d/{file_id}",
                    f"https://disk.yandex.ru/i/{file_id}",
                    f"https://disk.yandex.ru/d/{file_id}"
                ]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π URL –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                import requests
                for url in possible_urls:
                    try:
                        response = requests.head(url, timeout=5)
                        if response.status_code == 200:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}")
                            return url
                    except:
                        continue
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞—é: {public_url}")
                return public_url
                
            elif public_url.startswith('https://disk.yandex.ru/d/'):
                file_id = public_url.split('/')[-1]
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                possible_urls = [
                    f"https://disk.yandex.ru/i/{file_id}",
                    f"https://disk.yandex.ru/d/{file_id}",
                    f"https://yadi.sk/i/{file_id}",
                    f"https://yadi.sk/d/{file_id}"
                ]
                
                import requests
                for url in possible_urls:
                    try:
                        response = requests.head(url, timeout=5)
                        if response.status_code == 200:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}")
                            return url
                    except:
                        continue
                
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞—é: {public_url}")
                return public_url
                
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç public_url: {public_url}")
                return public_url
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {yadisk_path}: {e}")
            return ''

    async def apply_covers(self, ideas: List[Dict]):
        applied = 0
        for idea in ideas:
            public_url = idea['url'] if 'yadi.sk' in idea['url'] else idea['files_url']
            preview_url = self.get_preview_url(public_url)
            if not preview_url:
                print(f"‚ùå –ù–µ—Ç preview –¥–ª—è {public_url}")
                continue
            try:
                await self.notion.pages.update(
                    page_id=idea['id'],
                    cover={
                        "type": "external",
                        "external": {"url": preview_url}
                    }
                )
                print(f"‚úÖ –û–±–ª–æ–∂–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {idea['title'][:40]}... -> {preview_url}")
                applied += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cover –¥–ª—è {idea['title']}: {e}")
        print(f"\n–ò—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {applied}/{len(ideas)}")

    def _extract_title(self, prop: dict) -> str:
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç plain_text –∏–∑ –ø–æ–ª—è —Ç–∏–ø–∞ title/rich_text
        if not prop:
            return ''
        if prop.get('type') == 'title' and prop.get('title') and isinstance(prop['title'], list) and len(prop['title']) > 0:
            pt = prop['title'][0].get('plain_text', '')
            if pt is None:
                return ''
            return str(pt)
        if prop.get('type') == 'rich_text' and prop.get('rich_text') and isinstance(prop['rich_text'], list) and len(prop['rich_text']) > 0:
            pt = prop['rich_text'][0].get('plain_text', '')
            if pt is None:
                return ''
            return str(pt)
        return ''

    def is_published(self, yadisk_path: str) -> bool:
        try:
            meta = self.yadisk.get_meta(yadisk_path)
            return bool(getattr(meta, 'public_url', None))
        except Exception:
            return False

    def find_yadisk_path_by_name(self, filename: str, start_folder: str = "/") -> str:
        start_folder = str(start_folder or "/")
        print(f"üîç –ò—â—É —Ñ–∞–π–ª {filename} –≤ {start_folder}")
        try:
            for item in self.yadisk.listdir(start_folder):
                if item.type == "file" and item.name == filename:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {item.path}")
                    return item.path
                elif item.type == "dir":
                    found = self.find_yadisk_path_by_name(filename, str(item.path or "/"))
                    if found:
                        return found
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ {start_folder}: {e}")
        return ""

    def publish_and_get_preview(self, yadisk_path: str) -> str:
        print(f"‚è© –ü—É–±–ª–∏–∫—É—é –∏ –ø–æ–ª—É—á–∞—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {yadisk_path}")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
            public_url = self.get_public_image_url(yadisk_path)
            if public_url:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {public_url}")
                return public_url
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {yadisk_path}")
                return ''
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {yadisk_path}: {e}")
            return ''

    async def apply_cover_from_yadisk_path(self, notion_page_id: str, yadisk_path: str):
        preview_url = self.publish_and_get_preview(yadisk_path)
        if not preview_url:
            print(f"‚ùå –ù–µ—Ç preview/public_url –¥–ª—è {yadisk_path}")
            return False
        try:
            print(f"‚û°Ô∏è –°—Ç–∞–≤–ª—é –æ–±–ª–æ–∂–∫—É –¥–ª—è {notion_page_id}: {preview_url}")
            await self.notion.pages.update(
                page_id=notion_page_id,
                cover={
                    "type": "external",
                    "external": {"url": preview_url}
                }
            )
            print(f"‚úÖ –û–±–ª–æ–∂–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {notion_page_id}: {preview_url}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cover –¥–ª—è {notion_page_id}: {e}")
            return False

    async def batch_apply_covers_from_paths(self, limit=50):
        # –ò—â–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—É—Ç—ë–º –∫ —Ñ–∞–π–ª—É –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≤ –ø–æ–ª–µ '–§–∞–π–ª—ã' (–∏–ª–∏ –¥—Ä.)
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )
        applied = 0
        for idea in resp.get('results', []):
            props = idea.get('properties', {})
            yadisk_path = props.get('–§–∞–π–ª—ã', {}).get('rich_text', [{}])[0].get('plain_text', '')
            if not yadisk_path or not yadisk_path.startswith('/'):
                continue
            ok = await self.apply_cover_from_yadisk_path(idea['id'], yadisk_path)
            if ok:
                applied += 1
        print(f"\n–ò—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫ –ø–æ –ø—É—Ç—è–º: {applied}/{len(resp.get('results', []))}")

    async def apply_cover_by_filename(self, notion_page_id: str, filename: str):
        yadisk_path = self.find_yadisk_path_by_name(filename)
        if not yadisk_path:
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ")
            return False
        return await self.apply_cover_from_yadisk_path(notion_page_id, yadisk_path)

    async def batch_apply_covers_by_filename(self, limit=50):
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )
        applied = 0
        for idea in resp.get('results', []):
            props = idea.get('properties', {})
            name_field = self._extract_title(props.get('Name', {}))
            if name_field and any(ext in name_field for ext in ['.jpg', '.jpeg', '.png']):
                filename = name_field.strip()
                print(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {idea['id']} —Å —Ñ–∞–π–ª–æ–º {filename} ===")
                ok = await self.apply_cover_by_filename(idea['id'], filename)
                if ok:
                    applied += 1
        print(f"\n–ò—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {applied}/{len(resp.get('results', []))}")

    def get_first_jpeg_in_yadisk_folder(self, folder_url: str) -> str:
        # –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –ø–µ—Ä–≤–æ–≥–æ jpeg-—Ñ–∞–π–ª–∞
        try:
            meta = self.yadisk.get_meta(folder_url)
            if getattr(meta, 'type', None) == 'dir':
                folder_path = getattr(meta, 'path', None)
                if not folder_path:
                    return ""
                for item in self.yadisk.listdir(folder_path):
                    name = str(getattr(item, 'name', '') or "")
                    if getattr(item, 'type', None) == "file" and name.lower().endswith(('.jpg', '.jpeg', '.png')):
                        print(f"‚úÖ –ü–µ—Ä–≤—ã–π jpeg –≤ –ø–∞–ø–∫–µ {folder_path}: {getattr(item, 'path', '')}")
                        return str(getattr(item, 'path', '') or "")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è jpeg –∏–∑ –ø–∞–ø–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ {folder_url}: {e}")
        return ""

    async def batch_apply_yadisk_jpeg_to_file_field(self, limit=20):
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )
        applied = 0
        for idea in resp.get('results', []):
            props = idea.get('properties', {})
            file_url = self._extract_url(props.get('–§–∞–π–ª', {})) or self._extract_url(props.get('URL', {}))
            yadisk_path = ""
            if file_url and (file_url.startswith("https://yadi.sk/d/") or file_url.startswith("https://disk.yandex.ru/d/")):
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å jpeg –∏–∑ –ø–∞–ø–∫–∏ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ
                yadisk_path = self.get_first_jpeg_in_yadisk_folder(file_url)
            else:
                filename = self._extract_filename_from_url(file_url)
                if filename and filename.lower().endswith('.jpg'):
                    yadisk_path = self.find_yadisk_path_by_name(filename)
            if not yadisk_path:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω jpeg –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {idea['id']}")
                continue
            preview_url = self.publish_and_get_preview(yadisk_path)
            if not preview_url:
                print(f"‚ùå –ù–µ—Ç preview/public_url –¥–ª—è {yadisk_path}")
                continue
            try:
                print(f"‚û°Ô∏è –û–±–Ω–æ–≤–ª—è—é –ø–æ–ª–µ '–§–∞–π–ª' –¥–ª—è {idea['id']}: {preview_url}")
                await self.notion.pages.update(
                    page_id=idea['id'],
                    properties={
                        '–§–∞–π–ª': {
                            'type': 'files',
                            'files': [
                                {'type': 'external', 'name': yadisk_path.split('/')[-1], 'external': {'url': preview_url}}
                            ]
                        }
                    }
                )
                print(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {idea['id']}: {preview_url}")
                applied += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {idea['id']}: {e}")
        print(f"\n–ò—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {applied}/{len(resp.get('results', []))}")

    def _extract_url(self, prop: dict) -> str:
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç url –∏–∑ –ø–æ–ª—è —Ç–∏–ø–∞ files/url/text
        if not prop:
            return ''
        if prop.get('type') == 'files' and prop.get('files'):
            for f in prop['files']:
                if f.get('type') == 'external':
                    return str(f['external'].get('url', '') or '')
                if f.get('type') == 'file':
                    return str(f['file'].get('url', '') or '')
        if prop.get('type') == 'url':
            return str(prop.get('url', '') or '')
        if prop.get('type') == 'rich_text':
            rich = prop.get('rich_text')
            if not rich or not isinstance(rich, list) or not rich:
                return ''
            plain = rich[0].get('plain_text', '')
            if plain is None:
                return ''
            return str(plain)
        return ''

    def _extract_filename_from_url(self, url: str) -> str:
        import urllib.parse
        path = urllib.parse.urlparse(url).path
        if not path:
            return ""
        fname = path.split("/")[-1]
        return str(fname or "")

    def find_yadisk_path_by_basename(self, basename: str, start_folder: str = "/") -> str:
        start_folder = str(start_folder or "/")
        basename = str(basename or "")
        exts = [".jpg", ".jpeg", ".png"]
        print(f"üîç –ò—â—É —Ñ–∞–π–ª –ø–æ basename {basename} –≤ {start_folder}")
        try:
            for item in self.yadisk.listdir(start_folder):
                name = str(item.name or "")
                if item.type == "file" and any(name.startswith(basename) and name.lower().endswith(ext) for ext in exts):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {item.path}")
                    return str(item.path or "")
                elif item.type == "dir":
                    found = self.find_yadisk_path_by_basename(basename, str(item.path or "/"))
                    if found:
                        return str(found or "")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ {start_folder}: {e}")
        return ""

    async def batch_apply_yadisk_jpeg_by_name_field(self, limit=20):
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )
        applied = 0
        for idea in resp.get('results', []):
            props = idea.get('properties', {})
            name_field = self._extract_title(props.get('Name', {}))
            if not name_field:
                continue
            basename = name_field.strip().split()[0]
            print(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {idea['id']} —Å basename {basename} ===")
            yadisk_path = self.find_yadisk_path_by_basename(basename)
            if not yadisk_path:
                print(f"‚ùå –§–∞–π–ª —Å basename {basename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ")
                continue
            preview_url = self.publish_and_get_preview(yadisk_path)
            if not preview_url:
                print(f"‚ùå –ù–µ—Ç preview/public_url –¥–ª—è {yadisk_path}")
                continue
            try:
                print(f"‚û°Ô∏è –û–±–Ω–æ–≤–ª—è—é –ø–æ–ª–µ '–§–∞–π–ª' –¥–ª—è {idea['id']}: {preview_url}")
                await self.notion.pages.update(
                    page_id=idea['id'],
                    properties={
                        '–§–∞–π–ª': {
                            'type': 'files',
                            'files': [
                                {'type': 'external', 'name': basename, 'external': {'url': preview_url}}
                            ]
                        }
                    }
                )
                print(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {idea['id']}: {preview_url}")
                applied += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {idea['id']}: {e}")
        print(f"\n–ò—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {applied}/{len(resp.get('results', []))}")

    async def set_test_cover_for_ideas(self, test_image_url: str, limit: int = 1):
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )
        applied = 0
        for idea in resp.get('results', []):
            try:
                print(f"‚û°Ô∏è –°—Ç–∞–≤–ª—é —Ç–µ—Å—Ç–æ–≤—É—é –æ–±–ª–æ–∂–∫—É –¥–ª—è {idea['id']}: {test_image_url}")
                await self.notion.pages.update(
                    page_id=idea['id'],
                    cover={
                        "type": "external",
                        "external": {"url": test_image_url}
                    }
                )
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±–ª–æ–∂–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {idea['id']}")
                applied += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–±–ª–æ–∂–∫–∏ –¥–ª—è {idea['id']}: {e}")
        print(f"\n–ò—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫: {applied}/{len(resp.get('results', []))}")

    async def set_yadisk_image_as_cover_or_file(self, yadisk_public_url: str, limit: int = 1):
        # –ü–æ–ª—É—á–∞–µ—Ç preview/public_url –∏ —Å—Ç–∞–≤–∏—Ç –∫–∞–∫ cover, –≤ –ø–æ–ª–µ '–§–∞–π–ª' –∏ –≤ rich_text (–æ–ø–∏—Å–∞–Ω–∏–µ)
        try:
            meta = self.yadisk.get_meta(yadisk_public_url)
            if getattr(meta, 'type', None) != 'file':
                print(f"‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞ —Ñ–∞–π–ª: {yadisk_public_url}")
                return
            preview_url = getattr(meta, 'preview', None) or getattr(meta, 'public_url', None)
            if not preview_url:
                print(f"‚ùå –ù–µ—Ç preview/public_url –¥–ª—è {yadisk_public_url}")
                return
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {yadisk_public_url}: {e}")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ N –∫–∞—Ä—Ç–æ—á–µ–∫ –±–∞–∑—ã –∏–¥–µ–π
        resp = await self.notion.databases.query(
            database_id=str(self.ideas_db_id),
            page_size=limit,
            sorts=[{"property": "Created time", "direction": "descending"}]
        )
        applied = 0
        for idea in resp.get('results', []):
            try:
                print(f"‚û°Ô∏è –°—Ç–∞–≤–ª—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –¥–ª—è {idea['id']}: {preview_url}")
                await self.notion.pages.update(
                    page_id=idea['id'],
                    cover={
                        "type": "external",
                        "external": {"url": preview_url}
                    },
                    properties={
                        '–§–∞–π–ª': {
                            'type': 'files',
                            'files': [
                                {'type': 'external', 'name': getattr(meta, 'name', 'image'), 'external': {'url': preview_url}}
                            ]
                        },
                        '–û–ø–∏—Å–∞–Ω–∏–µ': {
                            'type': 'rich_text',
                            'rich_text': [
                                {"type": "text", "text": {"content": preview_url}}
                            ]
                        }
                    }
                )
                print(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {idea['id']}")
                applied += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {idea['id']}: {e}")
        print(f"\n–ò—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {applied}/{len(resp.get('results', []))}")

    # ===== BRANDING SYSTEM METHODS =====
    
    async def process_branding_materials(self, limit: int = 20):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–±–ª–æ–∂–∫–∞–º–∏"""
        print("üé® –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–¢–ï–†–ò–ê–õ–û–í –ë–†–ï–ù–î–ò–ù–ì–ê")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–º
        materials = await self._get_branding_materials(limit)
        
        if not materials:
            print("‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞")
        
        processed = 0
        for material in materials:
            success = await self._process_single_branding_material(material)
            if success:
                processed += 1
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {processed}/{len(materials)}")
    
    async def _get_branding_materials(self, limit: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å —Ç–µ–≥–∞–º–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤–º–µ—Å—Ç–æ –∏–¥–µ–π
            materials_db = os.getenv("MATERIALS_DB", "1d9ace03-d9ff-8041-91a4-d35aeedcbbd4")
            
            # –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å —Ç–µ–≥–∞–º–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
            response = await self.notion.databases.query(
                database_id=materials_db,
                page_size=limit,
                filter={
                    "or": [
                        {
                            "property": "–¢–µ–≥–∏",
                            "multi_select": {
                                "contains": "–±—Ä–µ–Ω–¥–∏–Ω–≥"
                            }
                        },
                        {
                            "property": "–¢–µ–≥–∏", 
                            "multi_select": {
                                "contains": "branding"
                            }
                        },
                        {
                            "property": "–¢–µ–≥–∏",
                            "multi_select": {
                                "contains": "–ª–æ–≥–æ—Ç–∏–ø"
                            }
                        },
                        {
                            "property": "–¢–µ–≥–∏",
                            "multi_select": {
                                "contains": "–¥–∏–∑–∞–π–Ω"
                            }
                        }
                    ]
                },
                sorts=[{"property": "Created time", "direction": "descending"}]
            )
            
            return response.get("results", [])
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            return []
    
    async def _process_single_branding_material(self, material: Dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –±—Ä–µ–Ω–¥–∏–Ω–≥–∞"""
        try:
            material_id = material.get("id")
            properties = material.get("properties", {})
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            name_prop = properties.get("Name", {})
            title = ""
            if "title" in name_prop and name_prop["title"]:
                title = name_prop["title"][0]["text"]["content"]
            
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {title}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–æ–ª—è
            url_prop = properties.get("URL", {})
            url = url_prop.get("url", "") if "url" in url_prop else ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Files & media
            files_prop = properties.get("Files & media", {})
            files_url = ""
            if "files" in files_prop and files_prop["files"]:
                for file in files_prop["files"]:
                    if file.get("type") == "external":
                        files_url = file["external"]["url"]
                        break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ–±–ª–æ–∂–∫–∏
            cover_url = None
            source_type = "unknown"
            
            if url:
                if "figma.com" in url:
                    cover_url = url
                    source_type = "figma"
                    print(f"üé® –ù–∞–π–¥–µ–Ω Figma URL: {url}")
                elif "yadi.sk" in url or "disk.yandex.ru" in url:
                    cover_url = url
                    source_type = "yandex_disk"
                    print(f"‚òÅÔ∏è –ù–∞–π–¥–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ URL: {url}")
                elif "prnt.sc" in url or "lightshot.cc" in url:
                    cover_url = url
                    source_type = "screenshot"
                    print(f"üì∏ –ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç URL: {url}")
                elif any(ext in url.lower() for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp']):
                    cover_url = url
                    source_type = "direct_image"
                    print(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {url}")
            
            elif files_url:
                if "figma.com" in files_url:
                    cover_url = files_url
                    source_type = "figma"
                    print(f"üé® –ù–∞–π–¥–µ–Ω Figma URL –≤ Files: {files_url}")
                elif "yadi.sk" in files_url or "disk.yandex.ru" in files_url:
                    cover_url = files_url
                    source_type = "yandex_disk"
                    print(f"‚òÅÔ∏è –ù–∞–π–¥–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ URL –≤ Files: {files_url}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É
            if cover_url and material_id:
                success = await self._apply_cover_by_type(material_id, cover_url, source_type)
                if success:
                    print(f"‚úÖ –û–±–ª–æ–∂–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {title}")
                    return True
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É –¥–ª—è {title}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π URL –¥–ª—è {title}")
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
            return False
    
    async def _apply_cover_by_type(self, page_id: str, url: str, source_type: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±–ª–æ–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            if source_type == "figma":
                return await self.apply_figma_cover(page_id, url)
            elif source_type == "yandex_disk":
                return await self.apply_cover_from_yadisk_url(page_id, url)
            elif source_type == "screenshot":
                # –î–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                return await self.apply_cover_from_url(page_id, url)
            elif source_type == "direct_image":
                # –î–ª—è –ø—Ä—è–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                return await self.apply_cover_from_url(page_id, url)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_type}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏: {e}")
            return False

if __name__ == "__main__":
    manager = MediaCoverManager()
    async def main():
        await manager.batch_apply_covers_by_filename(limit=20)
    asyncio.run(main()) 