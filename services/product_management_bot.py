#!/usr/bin/env python3
"""
üéØ PRODUCT MANAGEMENT BOT
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ RAMIT

–ö–û–ú–ê–ù–î–´:
/products - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
/product [–∞—Ä—Ç–∏–∫—É–ª] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
/materials [–∞—Ä—Ç–∏–∫—É–ª] - –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞
/status [–∞—Ä—Ç–∏–∫—É–ª] [—Å—Ç–∞—Ç—É—Å] - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
/analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
/lifecycle - –æ—Ç—á–µ—Ç –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É
/overdue - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
/attention - –ø—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
"""

import os
import json
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from notion_client import AsyncClient
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
from product_lifecycle_manager import ProductLifecycleManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/product_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ProductManagementBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.telegram_token = os.getenv("TELEGRAM_BOT_TOKEN", "")
        self.notion = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
        self.product_lines_db = os.getenv("PRODUCT_LINES_DB", "")
        self.lifecycle_manager = ProductLifecycleManager()
        
        # –ö—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        self.products_cache = []
        self.cache_timestamp = None
        self.cache_duration = 300  # 5 –º–∏–Ω—É—Ç
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_stats = {
            "commands_used": {},
            "total_requests": 0,
            "last_activity": None
        }

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üéØ **PRODUCT MANAGEMENT BOT**
–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ RAMIT

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üìã `/products` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
üîç `/product [–∞—Ä—Ç–∏–∫—É–ª]` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
üìÅ `/materials [–∞—Ä—Ç–∏–∫—É–ª]` - –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞
üîÑ `/status [–∞—Ä—Ç–∏–∫—É–ª] [—Å—Ç–∞—Ç—É—Å]` - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
üìä `/analytics` - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
üìà `/lifecycle` - –æ—Ç—á–µ—Ç –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É
‚ö†Ô∏è `/overdue` - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
üëÄ `/attention` - –ø—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è

**–ü—Ä–∏–º–µ—Ä—ã:**
`/product RMA-03` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ RMA-03
`/status RMA-03 –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ` - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
`/materials BDM-07` - –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞ BDM-07
        """
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
        self._update_stats("start")

    async def products_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /products - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        await update.message.reply_text("üì¶ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        try:
            products = await self._get_products()
            
            if not products:
                await update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            products_by_status = {}
            for product in products:
                status = product.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                if status not in products_by_status:
                    products_by_status[status] = []
                products_by_status[status].append(product)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üì¶ **–í–°–ï–ì–û –ü–†–û–î–£–ö–¢–û–í: {len(products)}**\n\n"
            
            for status, status_products in products_by_status.items():
                message += f"**{status}** ({len(status_products)}):\n"
                for product in status_products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    article = product.get("article", "")
                    name = product.get("name", "")
                    message += f"‚Ä¢ {article} - {name}\n"
                
                if len(status_products) > 10:
                    message += f"‚Ä¢ ... –∏ –µ—â–µ {len(status_products) - 10}\n"
                message += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            keyboard = [
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ", callback_data="overdue")],
                [InlineKeyboardButton("üëÄ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è", callback_data="attention")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            self._update_stats("products")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def product_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /product [–∞—Ä—Ç–∏–∫—É–ª] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥—É–∫—Ç–∞\n–ü—Ä–∏–º–µ—Ä: `/product RMA-03`", parse_mode='Markdown')
            return
        
        article = context.args[0].upper()
        await update.message.reply_text(f"üîç –ò—â—É –ø—Ä–æ–¥—É–∫—Ç {article}...")
        
        try:
            products = await self._get_products()
            product = None
            
            for p in products:
                if p.get("article", "").upper() == article:
                    product = p
                    break
            
            if not product:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            message = f"""
üîç **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–î–£–ö–¢–ï**

**–ê—Ä—Ç–∏–∫—É–ª:** {product.get('article', '')}
**–ù–∞–∑–≤–∞–Ω–∏–µ:** {product.get('name', '')}
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product.get('category', '')}
**–°—Ç–∞—Ç—É—Å:** {product.get('status', '')}
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {self._format_date(product.get('created_time', ''))}

**–î–µ–π—Å—Ç–≤–∏—è:**
            """
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"materials_{article}")],
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{article}")],
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data=f"details_{article}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            self._update_stats("product")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status [–∞—Ä—Ç–∏–∫—É–ª] [—Å—Ç–∞—Ç—É—Å] - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å\n"
                "–ü—Ä–∏–º–µ—Ä: `/status RMA-03 –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ`\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:**\n"
                "‚Ä¢ –ü—Ä–µ–¥–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n"
                "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n"
                "‚Ä¢ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                "‚Ä¢ –ê—Ä—Ö–∏–≤",
                parse_mode='Markdown'
            )
            return
        
        article = context.args[0].upper()
        new_status = " ".join(context.args[1:])
        
        await update.message.reply_text(f"üîÑ –ò–∑–º–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {article} –Ω–∞ '{new_status}'...")
        
        try:
            products = await self._get_products()
            product = None
            
            for p in products:
                if p.get("article", "").upper() == article:
                    product = p
                    break
            
            if not product:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
            valid_statuses = list(self.lifecycle_manager.lifecycle_statuses.keys())
            if new_status not in valid_statuses:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{new_status}'\n\n"
                    f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:**\n" + "\n".join([f"‚Ä¢ {s}" for s in valid_statuses]),
                    parse_mode='Markdown'
                )
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            success = await self.lifecycle_manager.update_product_status(
                product["id"],
                new_status,
                f"–ò–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.username}",
                "manual"
            )
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {article} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'"
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
            self._update_stats("status")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        
        try:
            analytics = await self.lifecycle_manager.get_lifecycle_analytics()
            
            message = f"""
üìä **–ê–ù–ê–õ–ò–¢–ò–ö–ê –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê**

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {analytics['total_products']}

**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**
            """
            
            for status, count in analytics['status_distribution'].items():
                percentage = (count / analytics['total_products'] * 100) if analytics['total_products'] > 0 else 0
                message += f"‚Ä¢ {status}: {count} ({percentage:.1f}%)\n"
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = analytics.get('lifecycle_efficiency', {})
            if efficiency:
                message += f"""
**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
üéØ –¢–æ—á–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤: {efficiency.get('status_accuracy', 0):.1f}%
‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency.get('timeline_efficiency', 0):.1f}%
üìà –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency.get('overall_efficiency', 0):.1f}%
                """
            
            # –ü—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
            attention_needed = analytics.get('attention_needed', [])
            if attention_needed:
                message += f"\n‚ö†Ô∏è **–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:** {len(attention_needed)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            keyboard = [
                [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="detailed_analytics")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ", callback_data="overdue")],
                [InlineKeyboardButton("üëÄ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è", callback_data="attention")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            self._update_stats("analytics")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def overdue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /overdue - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã...")
        
        try:
            transitions_result = await self.lifecycle_manager.check_auto_transitions()
            overdue_products = transitions_result.get('overdue_products', [])
            
            if not overdue_products:
                await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç!")
                return
            
            message = f"‚ö†Ô∏è **–ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –ü–†–û–î–£–ö–¢–´: {len(overdue_products)}**\n\n"
            
            for item in overdue_products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                product = item['product']
                days_overdue = item['days_overdue']
                message += f"‚Ä¢ {product.get('article', '')} - {product.get('name', '')}\n"
                message += f"  –°—Ç–∞—Ç—É—Å: {product.get('status', '')}\n"
                message += f"  –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: {days_overdue} –¥–Ω–µ–π\n\n"
            
            if len(overdue_products) > 10:
                message += f"... –∏ –µ—â–µ {len(overdue_products) - 10} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            self._update_stats("overdue")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def attention_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /attention - –ø—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è"""
        await update.message.reply_text("üëÄ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è...")
        
        try:
            analytics = await self.lifecycle_manager.get_lifecycle_analytics()
            attention_needed = analytics.get('attention_needed', [])
            
            if not attention_needed:
                await update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω–æ—Ä–º–µ!")
                return
            
            message = f"üëÄ **–¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø: {len(attention_needed)}**\n\n"
            
            for item in attention_needed[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                product = item['product']
                days_in_status = item['days_in_status']
                max_days = item['max_days']
                percentage = (days_in_status / max_days * 100) if max_days > 0 else 0
                
                message += f"‚Ä¢ {product.get('article', '')} - {product.get('name', '')}\n"
                message += f"  –°—Ç–∞—Ç—É—Å: {product.get('status', '')}\n"
                message += f"  –í —Å—Ç–∞—Ç—É—Å–µ: {days_in_status} –¥–Ω–µ–π ({percentage:.1f}% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)\n\n"
            
            if len(attention_needed) > 10:
                message += f"... –∏ –µ—â–µ {len(attention_needed) - 10} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            self._update_stats("attention")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–∏–º–∞–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def lifecycle_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lifecycle - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É"""
        await update.message.reply_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É...")
        
        try:
            report = await self.lifecycle_manager.generate_lifecycle_report()
            
            message = f"""
üìà **–û–¢–ß–ï–¢ –ü–û –ñ–ò–ó–ù–ï–ù–ù–û–ú–£ –¶–ò–ö–õ–£**
üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}

**–°–≤–æ–¥–∫–∞:**
üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {report['summary']['total_products']}

**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**
            """
            
            for status, count in report['summary']['products_by_status'].items():
                percentage = (count / report['summary']['total_products'] * 100) if report['summary']['total_products'] > 0 else 0
                message += f"‚Ä¢ {status}: {count} ({percentage:.1f}%)\n"
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = report['summary'].get('efficiency_metrics', {})
            if efficiency:
                message += f"""
**–ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**
üéØ –¢–æ—á–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤: {efficiency.get('status_accuracy', 0):.1f}%
‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency.get('timeline_efficiency', 0):.1f}%
üìà –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency.get('overall_efficiency', 0):.1f}%
                """
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = report.get('recommendations', [])
            if recommendations:
                message += "\n**üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
                for rec in recommendations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    message += f"‚Ä¢ {rec}\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            self._update_stats("lifecycle")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "analytics":
            await self.analytics_command(update, context)
        elif data == "overdue":
            await self.overdue_command(update, context)
        elif data == "attention":
            await self.attention_command(update, context)
        elif data == "detailed_analytics":
            await self.lifecycle_command(update, context)
        elif data.startswith("materials_"):
            article = data.split("_", 1)[1]
            await self._show_materials(query, article)
        elif data.startswith("change_status_"):
            article = data.split("_", 2)[2]
            await self._show_status_options(query, article)
        elif data.startswith("status_"):
            parts = data.split("_", 2)
            article = parts[1]
            status = parts[2]
            await self._change_product_status(query, article, status)

    async def _show_materials(self, query, article: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            message = f"üìÅ **–ú–ê–¢–ï–†–ò–ê–õ–´ –ü–†–û–î–£–ö–¢–ê {article}**\n\n"
            message += "üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
            message += "‚Ä¢ –í–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (2+ —Ñ–∞–π–ª–∞)\n"
            message += "‚Ä¢ –§–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            message += "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã\n"
            message += "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n\n"
            message += "üìã –°–∏—Å—Ç–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            
            await query.edit_message_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _show_status_options(self, query, article: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        try:
            valid_statuses = list(self.lifecycle_manager.lifecycle_statuses.keys())
            
            keyboard = []
            for status in valid_statuses:
                keyboard.append([InlineKeyboardButton(status, callback_data=f"status_{article}_{status}")])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"üîÑ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ü–†–û–î–£–ö–¢–ê {article}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
            
            await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _change_product_status(self, query, article: str, new_status: str):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            products = await self._get_products()
            product = None
            
            for p in products:
                if p.get("article", "").upper() == article:
                    product = p
                    break
            
            if not product:
                await query.edit_message_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            success = await self.lifecycle_manager.update_product_status(
                product["id"],
                new_status,
                f"–ò–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç",
                "manual"
            )
            
            if success:
                await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {article} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _get_products(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self.cache_timestamp and 
            (current_time - self.cache_timestamp).total_seconds() < self.cache_duration and 
            self.products_cache):
            return self.products_cache
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        self.products_cache = await self.lifecycle_manager.get_all_products()
        self.cache_timestamp = current_time
        
        return self.products_cache

    def _format_date(self, date_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        try:
            if not date_str:
                return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            dt = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
            return dt.strftime("%d.%m.%Y")
        except:
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"

    def _update_stats(self, command: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.usage_stats["commands_used"][command] = self.usage_stats["commands_used"].get(command, 0) + 1
        self.usage_stats["total_requests"] += 1
        self.usage_stats["last_activity"] = datetime.now().isoformat()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.telegram_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.telegram_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("products", self.products_command))
        application.add_handler(CommandHandler("product", self.product_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("analytics", self.analytics_command))
        application.add_handler(CommandHandler("overdue", self.overdue_command))
        application.add_handler(CommandHandler("attention", self.attention_command))
        application.add_handler(CommandHandler("lifecycle", self.lifecycle_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        logger.info("üöÄ Product Management Bot –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = ProductManagementBot()
    bot.run()

if __name__ == "__main__":
    main() 