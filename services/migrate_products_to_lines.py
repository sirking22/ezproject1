#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–û–í –í –ë–ê–ó–£ –õ–ò–ù–ï–ï–ö –ü–†–û–î–£–ö–¢–û–í

–¶–µ–ª—å: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã —Å —Ç–µ–≥–æ–º "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤" –∏–∑ –±–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ 
–≤ –±–∞–∑—É –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–∞—Ä—Ç–∏–∫—É–ª + –∫–∞—Ç–µ–≥–æ—Ä–∏—è).

–õ–æ–≥–∏–∫–∞:
1. –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Ç–µ–≥–æ–º "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤" –∑–∞ 2025 –≥–æ–¥
2. –ò–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (3 –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ (–±–ª–µ–Ω–¥–µ—Ä, —Å–æ–∫–æ–≤—ã–∂–∏–º–∞–ª–∫–∞ –∏ —Ç.–¥.)
4. –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
5. –°–≤—è–∑–∞—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º —á–µ—Ä–µ–∑ relation
"""

import os
import re
import asyncio
import json
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

class ProductsMigrationService:
    """–°–µ—Ä–≤–∏—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ª–∏–Ω–µ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.projects_db_id = os.getenv('PROJECTS_DB')  # 342f18c6-7a5e-41fe-ad73-dcec00770f4e
        self.product_lines_db_id = os.getenv('PRODUCT_LINES_DB')  # ebaf801e-b212-465e-8b3f-e888eb583081
        
        if not self.notion_token:
            raise ValueError("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        if not self.projects_db_id:
            raise ValueError("‚ùå PROJECTS_DB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        if not self.product_lines_db_id:
            raise ValueError("‚ùå PRODUCT_LINES_DB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ ID –±–∞–∑ –Ω–µ None
        if not self.projects_db_id or not self.product_lines_db_id:
            raise ValueError("‚ùå ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å None")
        
        self.client = AsyncClient(auth=self.notion_token)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
        self.article_patterns = [
            r'([A-Z]{3}-\d{2})',    # RGJ-04, BDM-07, ODM-01, RMD-02, RAP-01, RMC-01, RMJ-03
            r'([A-Z]{3}\d{2})',     # RGJ04, BDM07
            r'([A-Z]{2,3}\d{1,2})', # RG4, BD7
            r'([A-Z]{4}-\d{2})',    # –ù–æ–≤—ã–µ 4-–±—É–∫–≤–µ–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
            r'([A-Z]{2}-\d{3})',    # –ö–æ—Ä–æ—Ç–∫–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Å 3 —Ü–∏—Ñ—Ä–∞–º–∏
            r'([A-Z]{3}-\d{1})',    # 3 –±—É–∫–≤—ã + 1 —Ü–∏—Ñ—Ä–∞
            r'([A-Z]{2}\d{2})',     # 2 –±—É–∫–≤—ã + 2 —Ü–∏—Ñ—Ä—ã
            r'([A-Z]{3}-\d{2})',    # RMA-03, RMA-04, RMO-05, RPB-05, RPP-01, RPC-02, RGC-01, RMB-03, RMB-04, RFC-01, RAB-01, RMA-02
            r'([A-Z]{3}\d{2})',     # BDS-04, BDM-06, BDL-09
            r'([A-Z]{3}-\d{1})',    # RMP-04
            r'([A-Z]{3}\d{1})',     # IDF
        ]
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ RAMIT)
        self.product_categories = {
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'RGJ': '–°–æ–∫–æ–≤—ã–∂–∏–º–∞–ª–∫–∞', 'JDM': '–°–æ–∫–æ–≤—ã–∂–∏–º–∞–ª–∫–∞', 'RVJ': '–°–æ–∫–æ–≤—ã–∂–∏–º–∞–ª–∫–∞',
            'RMJ': '–°–æ–∫–æ–≤—ã–∂–∏–º–∞–ª–∫–∞', 'RMS': '–°–æ–∫–æ–≤—ã–∂–∏–º–∞–ª–∫–∞',
            'RMG': '–ú–µ–ª—å–Ω–∏—Ü–∞',
            'BDM': '–ë–ª–µ–Ω–¥–µ—Ä', 'BDG': '–ë–ª–µ–Ω–¥–µ—Ä', 'RVB': '–í–∞–∫—É—É–º–Ω—ã–π –±–ª–µ–Ω–¥–µ—Ä',
            'MIX': '–ú–∏–∫—Å–µ—Ä',
            'COF': '–ö–æ—Ñ–µ–º–æ–ª–∫–∞', 'RMK': '–ö–æ—Ñ–µ–º–æ–ª–∫–∞',
            'TEA': '–ß–∞–π–Ω–∏–∫',
            'TOA': '–¢–æ—Å—Ç–µ—Ä',
            'OVN': '–î—É—Ö–æ–≤–∫–∞',
            'MIC': '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞',
            'WAS': '–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞', 'DISH': '–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞',
            'REF': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
            'COOK': '–ü–ª–∏—Ç–∞',
            'GRIL': '–ì—Ä–∏–ª—å', 'RAR': '–ê—ç—Ä–æ–≥—Ä–∏–ª—å',
            'STEAM': '–ü–∞—Ä–æ–≤–∞—Ä–∫–∞', 'RMP': '–ü–∞—Ä–æ–≤–∞—Ä–∫–∞',
            'SLOW': '–ú—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞',
            'PRES': '–°–∫–æ—Ä–æ–≤–∞—Ä–∫–∞',
            
            # –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'ODM': '–ú–∞—Å–ª–æ–ø—Ä–µ—Å—Å',
            'RMD': '–î–∏—Å—Ç–∏–ª–ª—è—Ç–æ—Ä',
            'RAP': '–ö–∞—Å—Ç—Ä—é–ª–∏',
            'RMC': '–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞',
            'RMF': '–§–∏–ª—å—Ç—Ä',
            'RMV': '–í–∞–∫—É—É–º–Ω—ã–π –ø–∞–∫–µ—Ä', 'RPV': '–í–∞–∫—É—É–º–Ω—ã–π –ø–∞–∫–µ—Ä', 'RFV': '–í–∞–∫—É—É–º–Ω—ã–π –ø–∞–∫–µ—Ä',
            'RCK': '–ù–æ–∂',
            'RPI': '–ü–∏–ª–∞',
            'RMH': '–•–ª–µ–±–æ–ø–µ—á–∫–∞',
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'AIR': '–û—á–∏—Å—Ç–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞',
            'HUM': '–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å',
            'VAC': '–ü—ã–ª–µ—Å–æ—Å',
            'IRR': '–ò—Ä—Ä–∏–≥–∞—Ç–æ—Ä',
            'MAS': '–ú–∞—Å—Å–∞–∂–µ—Ä',
            'LIG': '–õ–∞–º–ø–∞',
            'FAN': '–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä',
            'HEA': '–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å',
            'COO': '–ö—É–ª–µ—Ä',
            'WAT': '–í–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å',
            
            # –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤
            'RMA': '–ê—ç—Ä–æ–≥—Ä–∏–ª—å',
            'RMO': '–û–∑–æ–Ω–∞—Ç–æ—Ä',
            'RPB': '–ë–ª–µ–Ω–¥–µ—Ä',
            'RPP': '–ö–æ–º–±–∞–π–Ω',
            'RPC': '–ü–ª–∏—Ç–∞',
            'RGC': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
            'RMB': '–ë—É—Ç—ã–ª–∫–∞',
            'RFC': '–ú—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞',
            'RAB': '–î–æ—Å–∫–∞',
            'IDF': '–¢—É—Ä–º–∞–ª–∏–Ω–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è',
            'BDS': '–ë–ª–µ–Ω–¥–µ—Ä',
            'BDL': '–ë–ª–µ–Ω–¥–µ—Ä'
        }
    
    async def get_polygraphy_projects(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Ç–µ–≥–æ–º '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤' –∑–∞ 2024-2025 –≥–æ–¥—ã"""
        
        print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ç–µ–≥–æ–º '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤' –∑–∞ 2024-2025 –≥–æ–¥—ã...")
        
        # –§–∏–ª—å—Ç—Ä: —Ç–µ–≥ "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤" + –¥–∞—Ç–∞ –≤ 2024-2025 –≥–æ–¥–∞—Ö
        filter_params = {
            "and": [
                {
                    "or": [
                        {
                            "property": " –¢–µ–≥–∏",
                            "multi_select": {
                                "contains": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
                            }
                        },
                        {
                            "property": " –¢–µ–≥–∏",
                            "multi_select": {
                                "contains": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
                            }
                        }
                    ]
                },
                {
                    "property": "–î–∞—Ç–∞",
                    "date": {
                        "on_or_after": "2024-01-01"
                    }
                }
            ]
        }
        
        try:
            response = await self.client.databases.query(
                database_id=str(self.projects_db_id),
                filter=filter_params
            )
            
            projects = response.get("results", [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ç–µ–≥–æ–º '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤'")
            
            return projects
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return []
    
    def extract_article_and_category(self, project_name: str) -> Tuple[Optional[str], Optional[str]]:
        """–ò–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        
        # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for pattern in self.article_patterns:
            match = re.search(pattern, project_name.upper())
            if match:
                article = match.group(1)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∞—Ä—Ç–∏–∫—É–ª–∞
                for prefix, category in self.product_categories.items():
                    if article.startswith(prefix):
                        return article, category
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º
                for prefix, category in self.product_categories.items():
                    if article[:len(prefix)] == prefix:
                        return article, category
        
        return None, None
    
    def generate_product_line_name(self, article: str, category: str) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return f"{category} {article}"
    
    async def check_existing_product_line(self, article: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º"""
        
        try:
            response = await self.client.databases.query(
                database_id=str(self.product_lines_db_id),
                filter={
                    "property": "–ê—Ä—Ç–∏–∫—É–ª",
                    "select": {
                        "equals": article
                    }
                }
            )
            
            results = response.get("results", [])
            if results:
                return results[0]["id"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–∏–Ω–µ–π–∫–∏: {e}")
            return None
    
    async def create_product_line(self, project_data: Dict, article: str, category: str) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        
        product_line_name = self.generate_product_line_name(article, category)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_properties = project_data.get("properties", {})
        project_name = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        name_property = project_properties.get("–ü—Ä–æ–µ–∫—Ç", {})
        if name_property.get("type") == "title":
            title_content = name_property.get("title", [])
            if title_content:
                project_name = title_content[0].get("plain_text", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        description = ""
        desc_property = project_properties.get("–û–ø–∏—Å–∞–Ω–∏–µ", {})
        if desc_property.get("type") == "rich_text":
            rich_text_content = desc_property.get("rich_text", [])
            if rich_text_content:
                description = rich_text_content[0].get("plain_text", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ–µ–∫—Ç–∞
        project_date = None
        date_property = project_properties.get("–î–∞—Ç–∞", {})
        if date_property.get("type") == "date":
            project_date = date_property.get("date", {}).get("start")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –ª–∏–Ω–µ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            page_data = {
                "parent": {"database_id": self.product_lines_db_id},
                "properties": {
                    "Name": {
                        "title": [
                            {
                                "text": {
                                    "content": product_line_name
                                }
                            }
                        ]
                    },
                    "–ê—Ä—Ç–∏–∫—É–ª": {
                        "select": {
                            "name": article
                        }
                    },
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {
                        "select": {
                            "name": category
                        }
                    },
                    "–°—Ç–∞—Ç—É—Å": {
                        "status": {
                            "name": "Backlog"
                        }
                    },
                    "–ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤": {
                        "relation": [
                            {
                                "id": project_data["id"]
                            }
                        ]
                    }
                }
            }
            
            response = await self.client.pages.create(**page_data)
            created_page_id = response["id"]
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–∏–Ω–µ–π–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_line_name} (ID: {created_page_id})")
            return created_page_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–Ω–µ–π–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return None
    
    async def update_project_with_relation(self, project_id: str, product_line_id: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç, –¥–æ–±–∞–≤–∏–≤ —Å–≤—è–∑—å —Å –ª–∏–Ω–µ–π–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ª–∏–Ω–µ–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            project_response = await self.client.pages.retrieve(project_id)
            project_properties = project_response.get("properties", {})
            
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ª–∏–Ω–µ–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            relation_field = None
            for field_name, field_data in project_properties.items():
                if "–ª–∏–Ω–µ–π–∫" in field_name.lower() or "–ø—Ä–æ–¥—É–∫—Ç" in field_name.lower():
                    if field_data.get("type") == "relation":
                        relation_field = field_name
                        break
            
            if relation_field:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å
                await self.client.pages.update(
                    page_id=project_id,
                    properties={
                        relation_field: {
                            "relation": [
                                {
                                    "id": product_line_id
                                }
                            ]
                        }
                    }
                )
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –ø—Ä–æ–µ–∫—Ç–∞ —Å –ª–∏–Ω–µ–π–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–∞")
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ª–∏–Ω–µ–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
    
    async def migrate_projects_to_product_lines(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        
        print("üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –ü–†–û–ï–ö–¢–û–í –í –õ–ò–ù–ï–ô–ö–ò –ü–†–û–î–£–ö–¢–û–í")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Ç–µ–≥–æ–º "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
        projects = await self.get_polygraphy_projects()
        
        if not projects:
            print("‚ùå –ü—Ä–æ–µ–∫—Ç—ã —Å —Ç–µ–≥–æ–º '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–æ–≤' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        migrated_count = 0
        skipped_count = 0
        error_count = 0
        
        for project in projects:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                project_properties = project.get("properties", {})
                name_property = project_properties.get("–ü—Ä–æ–µ–∫—Ç", {})
                
                if name_property.get("type") != "title":
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
                    skipped_count += 1
                    continue
                
                title_content = name_property.get("title", [])
                if not title_content:
                    print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
                    skipped_count += 1
                    continue
                
                project_name = title_content[0].get("plain_text", "")
                
                print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                article, category = self.extract_article_and_category(project_name)
                
                if not article or not category:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ '{project_name}'")
                    skipped_count += 1
                    continue
                
                print(f"   –ê—Ä—Ç–∏–∫—É–ª: {article}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                existing_id = await self.check_existing_product_line(article)
                
                if existing_id:
                    print(f"   ‚úÖ –õ–∏–Ω–µ–π–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º
                    await self.update_project_with_relation(project["id"], existing_id)
                    migrated_count += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–∏–Ω–µ–π–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞
                    product_line_id = await self.create_product_line(project, article, category)
                    
                    if product_line_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º
                        await self.update_project_with_relation(project["id"], product_line_id)
                        migrated_count += 1
                    else:
                        error_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
                error_count += 1
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(projects)}")
        print("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        service = ProductsMigrationService()
        await service.migrate_projects_to_product_lines()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 