#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π Notion
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
"""

from typing import Dict, List, Set, Optional
from dataclasses import dataclass
from datetime import datetime

@dataclass
class Assignee:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ"""
    name: str
    role: str
    notion_id: Optional[str] = None
    email: Optional[str] = None
    avatar_url: Optional[str] = None
    is_designer: bool = True
    is_active: bool = True
    last_updated: Optional[datetime] = None

class AssigneesRegistry:
    """–†–µ–µ—Å—Ç—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π Notion"""
    
    def __init__(self):
        self.assignees: Dict[str, Assignee] = {}
        self._load_default_assignees()
    
    def _load_default_assignees(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_assignees = [
            Assignee(
                name="Arsentiy",
                role="–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä",
                is_designer=True,
                is_active=True
            ),
            Assignee(
                name="–ê–Ω–Ω–∞ –ö–æ–≥—É—Ç",
                role="–¥–∏–∑–∞–π–Ω–µ—Ä",
                notion_id="46239144-3373-45cb-9cdd-b9157fc950b3",
                email="a.n.n.69.m.a.y@gmail.com",
                is_designer=True,
                is_active=True
            ),
            Assignee(
                name="–ú–∞—Ä–∏—è –ë–µ–∑—Ä–æ–¥–Ω–∞—è",
                role="–¥–∏–∑–∞–π–Ω–µ—Ä",
                notion_id="96461d82-0b5b-4460-b129-c733a814586a",
                email="masha.bezrodnaia@gmail.com",
                is_designer=True,
                is_active=True
            ),
            Assignee(
                name="Account",
                role="–∞–∫–∫–∞—É–Ω—Ç",
                is_designer=False,
                is_active=True
            )
        ]
        
        for assignee in default_assignees:
            self.add_assignee(assignee)
    
    def add_assignee(self, assignee: Assignee):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        self.assignees[assignee.name] = assignee
    
    def get_assignee(self, name: str) -> Optional[Assignee]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏"""
        return self.assignees.get(name)
    
    def get_all_designers(self) -> List[Assignee]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
        return [a for a in self.assignees.values() if a.is_designer and a.is_active]
    
    def get_all_active(self) -> List[Assignee]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        return [a for a in self.assignees.values() if a.is_active]
    
    def get_assignee_names(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        return list(self.assignees.keys())
    
    def get_designer_names(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
        return [a.name for a in self.get_all_designers()]
    
    def is_designer(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º"""
        assignee = self.get_assignee(name)
        return assignee.is_designer if assignee else False
    
    def is_known_assignee(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–≤–µ—Å—Ç–µ–Ω –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"""
        return name in self.assignees
    
    def update_from_notion_data(self, notion_assignees: List[Dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion"""
        for person in notion_assignees:
            if "name" in person:
                name = person["name"]
                existing = self.get_assignee(name)
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                    if "id" in person:
                        existing.notion_id = person["id"]
                    if "avatar_url" in person:
                        existing.avatar_url = person["avatar_url"]
                    if "person" in person and "email" in person["person"]:
                        existing.email = person["person"]["email"]
                    existing.last_updated = datetime.now()
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                    new_assignee = Assignee(
                        name=name,
                        role="–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                        notion_id=person.get("id"),
                        avatar_url=person.get("avatar_url"),
                        email=person.get("person", {}).get("email"),
                        is_designer=True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º
                        is_active=True,
                        last_updated=datetime.now()
                    )
                    self.add_assignee(new_assignee)
    
    def get_unknown_assignees(self, found_names: Set[str]) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        known_names = set(self.assignees.keys())
        return list(found_names - known_names)
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º"""
        print("\nüë• –†–ï–ï–°–¢–† –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô")
        print("=" * 50)
        
        designers = self.get_all_designers()
        others = [a for a in self.assignees.values() if not a.is_designer]
        
        print(f"üé® –î–∏–∑–∞–π–Ω–µ—Ä—ã ({len(designers)}):")
        for designer in designers:
            status = "‚úÖ" if designer.is_active else "‚ùå"
            print(f"  {status} {designer.name} - {designer.role}")
            if designer.notion_id:
                print(f"    ID: {designer.notion_id}")
        
        if others:
            print(f"\nüë§ –û—Å—Ç–∞–ª—å–Ω—ã–µ ({len(others)}):")
            for other in others:
                status = "‚úÖ" if other.is_active else "‚ùå"
                print(f"  {status} {other.name} - {other.role}")
        
        print(f"\nüìä –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(self.assignees)}")
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤: {len(designers)}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞
assignees_registry = AssigneesRegistry()

def get_assignees_registry() -> AssigneesRegistry:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    return assignees_registry

def is_known_designer(name: str) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º"""
    return assignees_registry.is_designer(name)

def get_all_designer_names() -> List[str]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–º–µ–Ω –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
    return assignees_registry.get_designer_names()

def update_assignees_from_notion(notion_assignees: List[Dict]):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö Notion"""
    assignees_registry.update_from_notion_data(notion_assignees)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞
    registry = get_assignees_registry()
    registry.print_summary()
    
    print(f"\nüîç –¢–ï–°–¢–´:")
    print(f"Arsentiy - –¥–∏–∑–∞–π–Ω–µ—Ä: {is_known_designer('Arsentiy')}")
    print(f"Account - –¥–∏–∑–∞–π–Ω–µ—Ä: {is_known_designer('Account')}")
    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π - –∏–∑–≤–µ—Å—Ç–µ–Ω: {registry.is_known_assignee('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
    
    print(f"\nüìã –í—Å–µ –¥–∏–∑–∞–π–Ω–µ—Ä—ã: {get_all_designer_names()}") 