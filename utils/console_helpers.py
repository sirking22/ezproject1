import logging
import time
import sys
from typing import Dict, Any, Optional, List, Callable
from datetime import datetime, timedelta
from contextlib import contextmanager
import threading
import requests
from functools import wraps

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
SUCCESS = "‚úÖ"
ERROR = "‚ùå"
INFO = "‚ÑπÔ∏è"
WARNING = "‚ö†Ô∏è"
PROCESS = "‚öôÔ∏è"
TIMER = "‚è±Ô∏è"
DATABASE = "üìö"
FIELD = "üìù"
RECORD = "üìÑ"
PROGRESS = "üìä"
LINK = "üîó"

class ColorFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    COLORS = {
        'DEBUG': '\033[0;36m',  # Cyan
        'INFO': '\033[0;32m',   # Green
        'WARNING': '\033[0;33m', # Yellow
        'ERROR': '\033[0;31m',  # Red
        'CRITICAL': '\033[0;35m',# Magenta
        'RESET': '\033[0m'      # Reset
    }
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if record.levelname in self.COLORS:
            record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['RESET']}"
        return super().format(record)

def setup_logging(level: int = logging.INFO, log_file: Optional[str] = None) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    logger = logging.getLogger('notion_tools')
    logger.setLevel(level)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers = []
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Å —Ü–≤–µ—Ç–∞–º–∏)
    console_formatter = ColorFormatter(
        fmt='%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%H:%M:%S'
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if log_file:
        file_formatter = logging.Formatter(
            fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(file_formatter)
        logger.addHandler(file_handler)
    
    return logger

def print_header(title: str) -> None:
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
    print("\n" + "="*50)
    print(title.upper())
    print("="*50 + "\n")

def print_footer(total_time: float) -> None:
    """–ü–µ—á–∞—Ç—å –ø–æ–¥–≤–∞–ª–∞ —Å –æ–±—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print("\n" + "="*50)
    print(f"–ò–¢–û–ì–ò (–æ–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫)")
    print("="*50)

class ProcessTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.processes: Dict[str, datetime] = {}
    
    def start_process(self, name: str):
        """–ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.processes[name] = datetime.now()
        self.logger.info(f"{PROCESS} –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {name}")
    
    def end_process(self, name: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if name in self.processes:
            duration = datetime.now() - self.processes[name]
            self.logger.info(f"{SUCCESS} –ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {name} ({duration.total_seconds():.2f} —Å–µ–∫)")
            del self.processes[name]
    
    def get_active_processes(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        return list(self.processes.keys())
    
    @contextmanager
    def track(self, name: str):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.start_process(name)
        try:
            yield
        finally:
            self.end_process(name)

class Timer:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    def __init__(self, operation_name: str, logger: Optional[logging.Logger] = None):
        self.operation_name = operation_name
        self.start_time = None
        self.logger = logger or logging.getLogger('notion_tools')
        
    def __enter__(self):
        self.start_time = time.time()
        self.logger.info(f"{TIMER} –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {self.operation_name}")
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        duration = time.time() - self.start_time
        if exc_type is None:
            self.logger.info(f"{SUCCESS} {self.operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫")
        else:
            self.logger.error(f"{ERROR} {self.operation_name} –ø—Ä–µ—Ä–≤–∞–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {str(exc_val)} ({duration:.2f} —Å–µ–∫)")

class ProgressBar:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    def __init__(self, total: int, prefix: str = '', suffix: str = '', decimals: int = 1, length: int = 50):
        self.total = total
        self.prefix = prefix
        self.suffix = suffix
        self.decimals = decimals
        self.length = length
        self.current = 0
        self.start_time = time.time()
    
    def update(self, current: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        self.current = current
        percent = ("{0:." + str(self.decimals) + "f}").format(100 * (current / float(self.total)))
        filled_length = int(self.length * current // self.total)
        bar = '‚ñà' * filled_length + '-' * (self.length - filled_length)
        elapsed_time = time.time() - self.start_time
        
        sys.stdout.write(f'\r{self.prefix} |{bar}| {percent}% {self.suffix} ({elapsed_time:.1f}s)')
        sys.stdout.flush()
        
        if current == self.total:
            sys.stdout.write('\n')
            sys.stdout.flush()

def with_timeout(timeout_seconds: int):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    def decorator(func: Callable):
        @wraps(func)
        def wrapper(*args, **kwargs):
            result = [None]
            error = [None]
            
            def target():
                try:
                    result[0] = func(*args, **kwargs)
                except Exception as e:
                    error[0] = e
            
            thread = threading.Thread(target=target)
            thread.daemon = True
            thread.start()
            thread.join(timeout_seconds)
            
            if thread.is_alive():
                raise TimeoutError(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout_seconds} —Å–µ–∫")
            
            if error[0] is not None:
                raise error[0]
            
            return result[0]
        return wrapper
    return decorator

def safe_request(url: str, method: str = 'GET', timeout: int = 30, **kwargs) -> requests.Response:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        response = requests.request(method, url, timeout=timeout, **kwargs)
        response.raise_for_status()
        return response
    except requests.Timeout:
        logger.error(f"{ERROR} –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ ({timeout} —Å–µ–∫): {url}")
        raise
    except requests.RequestException as e:
        logger.error(f"{ERROR} –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        raise

def print_results(results: Dict[str, bool], logger: Optional[logging.Logger] = None) -> None:
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger = logger or logging.getLogger('notion_tools')
    for name, success in results.items():
        status = SUCCESS if success else ERROR
        logger.info(f"{status} {name}")

def format_error(error: Exception, duration: Optional[float] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    time_info = f" ({duration:.2f} —Å–µ–∫)" if duration is not None else ""
    return f"{ERROR} –û—à–∏–±–∫–∞: {str(error)}{time_info}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –∏ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
logger = setup_logging()
process_tracker = ProcessTracker(logger)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Ö–µ–ª–ø–µ—Ä–æ–≤")
    
    start_time = time.time()
    
    # –ü—Ä–∏–º–µ—Ä —Å —Ç–∞–π–º–µ—Ä–æ–º
    with Timer("–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"):
        time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
    try:
        raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    except Exception as e:
        print(format_error(e, time.time() - start_time))
    
    # –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        "–û–ø–µ—Ä–∞—Ü–∏—è 1": True,
        "–û–ø–µ—Ä–∞—Ü–∏—è 2": False,
        "–û–ø–µ—Ä–∞—Ü–∏—è 3": True
    }
    
    print_footer(time.time() - start_time)
    print_results(results) 