#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–∞—Ö
"""

import re
import os

def fix_file_quick(file_path: str):
    """–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    print(f"üîß –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {file_path}...")
    
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logging –µ—Å–ª–∏ –Ω–µ—Ç
    if 'import logging' not in content:
        content = content.replace(
            'import requests',
            'import requests\nimport logging\n\nlogger = logging.getLogger(__name__)'
        )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
    patterns = [
        # requests.get –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        (r'response\s*=\s*requests\.get\(([^)]+)\)', 
         r'try:\n        response = requests.get(\1)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        logger.error(f"Error in GET request: {{e}}")\n        return None\n    \n    response'),
        
        # requests.post –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        (r'response\s*=\s*requests\.post\(([^)]+)\)',
         r'try:\n        response = requests.post(\1)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        logger.error(f"Error in POST request: {{e}}")\n        return None\n    \n    response'),
        
        # requests.patch –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        (r'response\s*=\s*requests\.patch\(([^)]+)\)',
         r'try:\n        response = requests.patch(\1)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        logger.error(f"Error in PATCH request: {{e}}")\n        return None\n    \n    response'),
    ]
    
    for pattern, replacement in patterns:
        content = re.sub(pattern, replacement, content)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ status_code == 200
    content = re.sub(r'if response\.status_code == 200:', '', content)
    content = re.sub(r'else:\s*\n\s*print\(f"‚ùå –û—à–∏–±–∫–∞: \{response\.status_code\}"\)\s*\n\s*return None', '', content)
    content = re.sub(r'else:\s*\n\s*print\(f"‚ùå –û—à–∏–±–∫–∞: \{response\.status_code\}"\)\s*\n\s*return \{\}', '', content)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ {file_path} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï HTTP –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)
    
    files_to_fix = [
        'link_guides_to_templates.py',
        'kpi_migration_full.py',
        'kpi_simple_migration.py',
        'fix_kpi_relations.py',
        'fix_kpi_api.py',
        'dual_level_analytics.py',
        'daily_telegram_monitor.py'
    ]
    
    for file_path in files_to_fix:
        fix_file_quick(file_path)
    
    print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")

if __name__ == "__main__":
    main() 