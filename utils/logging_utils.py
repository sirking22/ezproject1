#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional

def setup_logger(
    name: str,
    log_file: Optional[str] = None,
    level: int = logging.DEBUG,
    format: str = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Ñ–∞–π–ª–æ–≤—ã–º –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        format: –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(name)
    logger.setLevel(level)
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    formatter = logging.Formatter(format)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    console_handler.setStream(open(sys.stdout.fileno(), mode='w', encoding='utf-8', errors='replace'))
    logger.addHandler(console_handler)
    
    # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    if log_file:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        log_dir = os.path.dirname(log_file)
        if log_dir:
            os.makedirs(log_dir, exist_ok=True)
            
        file_handler = logging.FileHandler(log_file, encoding='utf-8', errors='replace')
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    
    return logger

def log_error_with_context(logger: logging.Logger, error: Exception, context: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    error_type = type(error).__name__
    error_msg = str(error)
    
    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = f"‚ùå {error_type}: {error_msg}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if context:
        msg += "\nüîç –ö–æ–Ω—Ç–µ–∫—Å—Ç:"
        for key, value in context.items():
            msg += f"\n  ‚Ä¢ {key}: {value}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
    import traceback
    stack = traceback.format_exc()
    msg += f"\nüìö –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n{stack}"
    
    logger.error(msg)

def log_function_call(logger: logging.Logger, func_name: str, args: tuple = None, kwargs: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        func_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    """
    msg = f"üì° –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}"
    
    if args:
        msg += f"\nüì• –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}"
    if kwargs:
        msg += f"\nüîë –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs}"
        
    logger.debug(msg)

def log_api_request(logger: logging.Logger, method: str, url: str, params: dict = None, data: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        method: HTTP –º–µ—Ç–æ–¥
        url: URL –∑–∞–ø—Ä–æ—Å–∞
        params: Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        data: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    msg = f"üåê API –∑–∞–ø—Ä–æ—Å: {method} {url}"
    
    if params:
        msg += f"\nüìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}"
    if data:
        msg += f"\nüì¶ –î–∞–Ω–Ω—ã–µ: {data}"
        
    logger.debug(msg)

def log_api_response(logger: logging.Logger, status_code: int, response_data: dict = None, error: Exception = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        status_code: HTTP —Å—Ç–∞—Ç—É—Å
        response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        error: –û—à–∏–±–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    """
    if 200 <= status_code < 300:
        msg = f"‚úÖ API –æ—Ç–≤–µ—Ç: {status_code}"
        if response_data:
            msg += f"\nüì¶ –î–∞–Ω–Ω—ã–µ: {response_data}"
        logger.debug(msg)
    else:
        msg = f"‚ùå API –æ—à–∏–±–∫–∞: {status_code}"
        if error:
            msg += f"\nüí• –û—à–∏–±–∫–∞: {error}"
        if response_data:
            msg += f"\nüì¶ –î–∞–Ω–Ω—ã–µ: {response_data}"
        logger.error(msg)

def log_bot_command(logger: logging.Logger, command: str, user_id: int, username: str = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        command: –ö–æ–º–∞–Ω–¥–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    msg = f"ü§ñ –ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞: {command}"
    msg += f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {user_id})"
    logger.info(msg)

def log_notion_operation(logger: logging.Logger, operation: str, database_id: str, data: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Notion
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        database_id: ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        data: –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    msg = f"üìö Notion –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
    msg += f"\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_id}"
    
    if data:
        msg += f"\nüì¶ –î–∞–Ω–Ω—ã–µ: {data}"
        
    logger.debug(msg)

def log_mcp_operation(logger: logging.Logger, method: str, params: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ MCP
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        method: –ú–µ—Ç–æ–¥ MCP
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
    """
    msg = f"üîÑ MCP –æ–ø–µ—Ä–∞—Ü–∏—è: {method}"
    
    if params:
        msg += f"\nüì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}"
        
    logger.debug(msg)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)

# –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
date_str = datetime.now().strftime("%Y%m%d")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
bot_logger = setup_logger(
    "bot",
    log_file=f"logs/bot_{date_str}.log"
)

notion_logger = setup_logger(
    "notion",
    log_file=f"logs/notion_{date_str}.log"
)

mcp_logger = setup_logger(
    "mcp",
    log_file=f"logs/mcp_{date_str}.log"
)

llm_logger = setup_logger(
    "llm",
    log_file=f"logs/llm_{date_str}.log"
) 