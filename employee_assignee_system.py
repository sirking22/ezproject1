#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –∑–∞–¥–∞—á
–ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
"""

import os
import json
import requests
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class EmployeeAssigneeSystem:
    def __init__(self):
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")  # –ó–∞–¥–∞—á–∏
        self.subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")   # –ü–æ–¥–∑–∞–¥–∞—á–∏
        self.teams_db_id = os.getenv("NOTION_TEAMS_DB_ID")         # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        self.projects_db_id = os.getenv("NOTION_PROJECTS_DB_ID")   # –ü—Ä–æ–µ–∫—Ç—ã
        
        if not all([self.notion_token, self.tasks_db_id, self.subtasks_db_id, self.teams_db_id]):
            raise ValueError("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        self.headers = {
            "Authorization": f"Bearer {self.notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        
        # –ö—ç—à –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        self.employees_cache = {}
        self.employees_by_name = {}
        
    def get_database_schema(self, db_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        url = f"https://api.notion.com/v1/databases/{db_id}"
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()
    
    def query_database(self, db_id: str, filter_dict: Optional[Dict] = None) -> List[Dict]:
        """–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        url = f"https://api.notion.com/v1/databases/{db_id}/query"
        payload = {"page_size": 100}
        
        if filter_dict:
            payload["filter"] = filter_dict
            
        all_results = []
        has_more = True
        
        while has_more:
            response = requests.post(url, headers=self.headers, json=payload)
            response.raise_for_status()
            data = response.json()
            
            all_results.extend(data.get("results", []))
            has_more = data.get("has_more", False)
            
            if has_more:
                payload["start_cursor"] = data.get("next_cursor")
        
        return all_results
    
    def analyze_employees_database(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        
        schema = self.get_database_schema(self.teams_db_id)
        logger.info(f"üìã –°—Ö–µ–º–∞ –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {list(schema['properties'].keys())}")
        
        employees = self.query_database(self.teams_db_id)
        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        employee_data = []
        for emp in employees:
            props = emp.get("properties", {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            name = self.extract_title(props, "Name") or self.extract_title(props, "–ò–º—è") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            role = self.extract_select(props, "Role") or self.extract_select(props, "–†–æ–ª—å") or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            status = self.extract_select(props, "Status") or self.extract_select(props, "–°—Ç–∞—Ç—É—Å") or "–ê–∫—Ç–∏–≤–µ–Ω"
            email = self.extract_email(props, "Email") or self.extract_email(props, "–ü–æ—á—Ç–∞") or ""
            
            employee_info = {
                "id": emp["id"],
                "name": name,
                "role": role,
                "status": status,
                "email": email,
                "created_time": emp.get("created_time"),
                "last_edited_time": emp.get("last_edited_time")
            }
            
            employee_data.append(employee_info)
            
            # –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            self.employees_cache[emp["id"]] = employee_info
            self.employees_by_name[name.lower()] = employee_info
        
        return {
            "total_employees": len(employees),
            "employees": employee_data,
            "schema_fields": list(schema['properties'].keys())
        }
    
    def analyze_tasks_assignee_fields(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö...")
        
        schema = self.get_database_schema(self.tasks_db_id)
        logger.info(f"üìã –°—Ö–µ–º–∞ –∑–∞–¥–∞—á: {list(schema['properties'].keys())}")
        
        tasks = self.query_database(self.tasks_db_id)
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        assignee_fields = {}
        people_field_data = []
        relation_field_data = []
        
        for task in tasks:
            props = task.get("properties", {})
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è "–£—á–∞—Å—Ç–Ω–∏–∫–∏" (people)
            if "–£—á–∞—Å—Ç–Ω–∏–∫–∏" in props:
                people = props["–£—á–∞—Å—Ç–Ω–∏–∫–∏"].get("people", [])
                if people:
                    people_field_data.append({
                        "task_id": task["id"],
                        "task_name": self.extract_title(props, "–ó–∞–¥–∞—á–∞") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "assignees": [p.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for p in people],
                        "assignee_ids": [p.get("id") for p in people]
                    })
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" (relation)
            if "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" in props:
                relations = props["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"].get("relation", [])
                if relations:
                    relation_field_data.append({
                        "task_id": task["id"],
                        "task_name": self.extract_title(props, "–ó–∞–¥–∞—á–∞") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "assignee_ids": [r.get("id") for r in relations]
                    })
        
        return {
            "total_tasks": len(tasks),
            "tasks_with_people": len(people_field_data),
            "tasks_with_relation": len(relation_field_data),
            "people_field_data": people_field_data,
            "relation_field_data": relation_field_data,
            "schema_fields": list(schema['properties'].keys())
        }
    
    def analyze_subtasks_assignee_fields(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö...")
        
        schema = self.get_database_schema(self.subtasks_db_id)
        logger.info(f"üìã –°—Ö–µ–º–∞ –ø–æ–¥–∑–∞–¥–∞—á: {list(schema['properties'].keys())}")
        
        subtasks = self.query_database(self.subtasks_db_id)
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(subtasks)}")
        
        assignee_fields = {}
        people_field_data = []
        relation_field_data = []
        
        for subtask in subtasks:
            props = subtask.get("properties", {})
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" (people)
            if "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" in props:
                people = props["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"].get("people", [])
                if people:
                    people_field_data.append({
                        "subtask_id": subtask["id"],
                        "subtask_name": self.extract_title(props, "–ü–æ–¥–∑–∞–¥–∞—á–∏") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "assignees": [p.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for p in people],
                        "assignee_ids": [p.get("id") for p in people]
                    })
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" (relation)
            if "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" in props:
                relations = props["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"].get("relation", [])
                if relations:
                    relation_field_data.append({
                        "subtask_id": subtask["id"],
                        "subtask_name": self.extract_title(props, "–ü–æ–¥–∑–∞–¥–∞—á–∏") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "assignee_ids": [r.get("id") for r in relations]
                    })
        
        return {
            "total_subtasks": len(subtasks),
            "subtasks_with_people": len(people_field_data),
            "subtasks_with_relation": len(relation_field_data),
            "people_field_data": people_field_data,
            "relation_field_data": relation_field_data,
            "schema_fields": list(schema['properties'].keys())
        }
    
    def find_arsentiy_in_employees(self) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –ê—Ä—Å–µ–Ω—Ç–∏—è –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        logger.info("üîç –ü–æ–∏—Å–∫ –ê—Ä—Å–µ–Ω—Ç–∏—è –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        search_variants = ["–∞—Ä—Å–µ–Ω—Ç–∏–π", "arsentiy", "–∞—Ä—Å–µ–Ω–∏–π", "arseniy"]
        
        for variant in search_variants:
            if variant in self.employees_by_name:
                employee = self.employees_by_name[variant]
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ê—Ä—Å–µ–Ω—Ç–∏–π: {employee}")
                return employee
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for name, employee in self.employees_by_name.items():
            if any(variant in name for variant in search_variants):
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ê—Ä—Å–µ–Ω—Ç–∏–π (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {employee}")
                return employee
        
        logger.warning("‚ùå –ê—Ä—Å–µ–Ω—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return None
    
    def sync_assignee_fields(self, use_relation: bool = True) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å relation: {use_relation})")
        
        if use_relation:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º relation –∫ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            return self.sync_to_relation_field()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º people –ø–æ–ª–µ
            return self.sync_to_people_field()
    
    def sync_to_relation_field(self) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ relation –ø–æ–ª–µ"""
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ relation –ø–æ–ª–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å people –ø–æ–ª–µ–º
        tasks = self.query_database(self.tasks_db_id)
        updated_count = 0
        errors = []
        
        for task in tasks:
            props = task.get("properties", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º people –ø–æ–ª–µ
            if "–£—á–∞—Å—Ç–Ω–∏–∫–∏" in props:
                people = props["–£—á–∞—Å—Ç–Ω–∏–∫–∏"].get("people", [])
                if people:
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                    relation_ids = []
                    for person in people:
                        person_name = person.get("name", "").lower()
                        if person_name in self.employees_by_name:
                            relation_ids.append({"id": self.employees_by_name[person_name]["id"]})
                    
                    if relation_ids:
                        # –û–±–Ω–æ–≤–ª—è–µ–º relation –ø–æ–ª–µ
                        try:
                            self.update_task_assignee(task["id"], relation_ids)
                            updated_count += 1
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task['id']}")
                        except Exception as e:
                            errors.append(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task['id']}: {e}")
        
        return {
            "updated_tasks": updated_count,
            "errors": errors
        }
    
    def sync_to_people_field(self) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ people –ø–æ–ª–µ"""
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ people –ø–æ–ª–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å relation –ø–æ–ª–µ–º
        tasks = self.query_database(self.tasks_db_id)
        updated_count = 0
        errors = []
        
        for task in tasks:
            props = task.get("properties", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º relation –ø–æ–ª–µ
            if "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" in props:
                relations = props["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"].get("relation", [])
                if relations:
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ª—é–¥–µ–π
                    people_ids = []
                    for relation in relations:
                        emp_id = relation.get("id")
                        if emp_id in self.employees_cache:
                            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Notion
                            # –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            pass
                    
                    if people_ids:
                        # –û–±–Ω–æ–≤–ª—è–µ–º people –ø–æ–ª–µ
                        try:
                            self.update_task_people(task["id"], people_ids)
                            updated_count += 1
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task['id']}")
                        except Exception as e:
                            errors.append(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task['id']}: {e}")
        
        return {
            "updated_tasks": updated_count,
            "errors": errors
        }
    
    def update_task_assignee(self, task_id: str, relation_ids: List[Dict]) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∑–∞–¥–∞—á–µ"""
        url = f"https://api.notion.com/v1/pages/{task_id}"
        payload = {
            "properties": {
                "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": {
                    "relation": relation_ids
                }
            }
        }
        
        response = requests.patch(url, headers=self.headers, json=payload)
        response.raise_for_status()
    
    def update_task_people(self, task_id: str, people_ids: List[Dict]) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–¥–∞—á–µ"""
        url = f"https://api.notion.com/v1/pages/{task_id}"
        payload = {
            "properties": {
                "–£—á–∞—Å—Ç–Ω–∏–∫–∏": {
                    "people": people_ids
                }
            }
        }
        
        response = requests.patch(url, headers=self.headers, json=payload)
        response.raise_for_status()
    
    def extract_title(self, props: Dict, field_name: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ title –ø–æ–ª—è"""
        if field_name in props and props[field_name].get("type") == "title":
            title_array = props[field_name].get("title", [])
            if title_array:
                return title_array[0].get("plain_text", "")
        return None
    
    def extract_select(self, props: Dict, field_name: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ select –ø–æ–ª—è"""
        if field_name in props and props[field_name].get("type") == "select":
            select_obj = props[field_name].get("select")
            if select_obj:
                return select_obj.get("name", "")
        return None
    
    def extract_email(self, props: Dict, field_name: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ email –ø–æ–ª—è"""
        if field_name in props and props[field_name].get("type") == "email":
            return props[field_name].get("email", "")
        return None
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –±–∞–∑
        employees_analysis = self.analyze_employees_database()
        tasks_analysis = self.analyze_tasks_assignee_fields()
        subtasks_analysis = self.analyze_subtasks_assignee_fields()
        arsentiy_info = self.find_arsentiy_in_employees()
        
        report = f"""
# üìä –û–¢–ß–ï–¢ –ü–û –°–ò–°–¢–ï–ú–ï –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô
**–î–∞—Ç–∞**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üë• –ë–ê–ó–ê –°–û–¢–†–£–î–ù–ò–ö–û–í
- **–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤**: {employees_analysis['total_employees']}
- **–ü–æ–ª—è —Å—Ö–µ–º—ã**: {', '.join(employees_analysis['schema_fields'])}

### –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:
"""
        
        for emp in employees_analysis['employees']:
            report += f"- **{emp['name']}** ({emp['role']}) - {emp['status']}\n"
        
        report += f"""
## üìù –ó–ê–î–ê–ß–ò
- **–í—Å–µ–≥–æ –∑–∞–¥–∞—á**: {tasks_analysis['total_tasks']}
- **–° –ø–æ–ª–µ–º '–£—á–∞—Å—Ç–Ω–∏–∫–∏' (people)**: {tasks_analysis['tasks_with_people']}
- **–° –ø–æ–ª–µ–º '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' (relation)**: {tasks_analysis['tasks_with_relation']}
- **–ü–æ–ª—è —Å—Ö–µ–º—ã**: {', '.join(tasks_analysis['schema_fields'])}

## üìã –ü–û–î–ó–ê–î–ê–ß–ò
- **–í—Å–µ–≥–æ –ø–æ–¥–∑–∞–¥–∞—á**: {subtasks_analysis['total_subtasks']}
- **–° –ø–æ–ª–µ–º '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' (people)**: {subtasks_analysis['subtasks_with_people']}
- **–° –ø–æ–ª–µ–º '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' (relation)**: {subtasks_analysis['subtasks_with_relation']}
- **–ü–æ–ª—è —Å—Ö–µ–º—ã**: {', '.join(subtasks_analysis['schema_fields'])}

## üîç –ü–û–ò–°–ö –ê–†–°–ï–ù–¢–ò–Ø
"""
        
        if arsentiy_info:
            report += f"‚úÖ **–ù–∞–π–¥–µ–Ω**: {arsentiy_info['name']} ({arsentiy_info['role']})\n"
        else:
            report += "‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω** –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        
        report += """
## üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

### –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å relation –∫ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
**–ü–ª—é—Å—ã:**
- –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–æ–ª—è–º, —Å—Ç–∞—Ç—É—Å–∞–º
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

**–ú–∏–Ω—É—Å—ã:**
- –ù—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å relation –ø–æ–ª–µ
- –°–ª–æ–∂–Ω–µ–µ –¥–ª—è –≥–æ—Å—Ç–µ–π (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –±–∞–∑—É)

### –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å people –ø–æ–ª–µ
**–ü–ª—é—Å—ã:**
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Å—Ç–µ–π
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ Notion

**–ú–∏–Ω—É—Å—ã:**
- –ù–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏
- –°–ª–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–æ–ª—è–º
- –ì–æ—Å—Ç–∏ –Ω–µ –≤–∏–¥–Ω—ã —á–µ—Ä–µ–∑ API

## üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò

1. **–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥** (relation vs people)
2. **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É** –ø–æ–ª–µ–π
3. **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ**
4. **–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏**
5. **–î–æ–±–∞–≤–∏—Ç—å –ê—Ä—Å–µ–Ω—Ç–∏—è –≤ –±–∞–∑—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤** (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)
"""
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        system = EmployeeAssigneeSystem()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = system.generate_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_filename = f"reports/EMPLOYEE_ASSIGNEE_REPORT_{timestamp}.md"
        
        os.makedirs("reports", exist_ok=True)
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(report)
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ relation –ø–æ–ª–µ (–∫ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)")
        print("2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ people –ø–æ–ª–µ")
        print("3. –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            result = system.sync_assignee_fields(use_relation=True)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {result['updated_tasks']}")
            if result['errors']:
                print(f"‚ùå –û—à–∏–±–∫–∏: {result['errors']}")
        
        elif choice == "2":
            result = system.sync_assignee_fields(use_relation=False)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {result['updated_tasks']}")
            if result['errors']:
                print(f"‚ùå –û—à–∏–±–∫–∏: {result['errors']}")
        
        else:
            print("üìä –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main() 