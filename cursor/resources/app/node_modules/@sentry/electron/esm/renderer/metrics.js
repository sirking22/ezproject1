import { metrics as metrics$1 } from '@sentry/core';
import { getIPC } from './ipc.js';

/**
 * Sends metrics to the Electron main process where they can be aggregated in a single process
 */
class ElectronRendererMetricsAggregator {
    constructor() {
        this._ipc = getIPC();
    }
    /** @inheritdoc */
    add(metricType, name, value, unit, tags, timestamp) {
        this._ipc.sendAddMetric({ metricType, name, value, unit, tags, timestamp });
    }
    /** @inheritdoc */
    flush() {
        // do nothing
    }
    /** @inheritdoc */
    close() {
        // do nothing
    }
    /** @inheritdoc */
    toString() {
        return '';
    }
}
/**
 * Adds a value to a counter metric
 *
 * @experimental This API is experimental and might have breaking changes in the future.
 */
function increment(name, value = 1, data) {
    metrics$1.increment(ElectronRendererMetricsAggregator, name, value, data);
}
/**
 * Adds a value to a distribution metric
 *
 * @experimental This API is experimental and might have breaking changes in the future.
 */
function distribution(name, value, data) {
    metrics$1.distribution(ElectronRendererMetricsAggregator, name, value, data);
}
/**
 * Adds a value to a set metric. Value must be a string or integer.
 *
 * @experimental This API is experimental and might have breaking changes in the future.
 */
function set(name, value, data) {
    metrics$1.set(ElectronRendererMetricsAggregator, name, value, data);
}
/**
 * Adds a value to a gauge metric
 *
 * @experimental This API is experimental and might have breaking changes in the future.
 */
function gauge(name, value, data) {
    metrics$1.gauge(ElectronRendererMetricsAggregator, name, value, data);
}
function timing(name, value, unit = 'second', data) {
    metrics$1.timing(ElectronRendererMetricsAggregator, name, value, unit, data);
}
const metrics = {
    increment,
    distribution,
    set,
    gauge,
    timing,
};

export { metrics };//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/esm/renderer/metrics.js.map
