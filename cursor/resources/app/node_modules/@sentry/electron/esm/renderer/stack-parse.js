import { chromeStackLineParser } from '@sentry/browser';
import { nodeStackLineParser, dropUndefinedKeys, stripSentryFramesAndReverse } from '@sentry/utils';

const STACKTRACE_FRAME_LIMIT = 50;
const [, chrome] = chromeStackLineParser;
const [, node] = nodeStackLineParser();
/**
 * A stack parser than combines Chrome and node.js parsers to give the best results even when nodeIntegration = true
 */
const electronRendererStackParser = (stack, skipFirst = 0) => {
    const frames = [];
    for (const line of stack.split('\n').slice(skipFirst)) {
        const chromeFrame = chrome(line);
        const nodeFrame = node(line);
        // We favour the chrome parser unless in_app == false
        if (chromeFrame && nodeFrame?.in_app !== false) {
            frames.push(chromeFrame);
        }
        else if (nodeFrame) {
            frames.push(dropUndefinedKeys(nodeFrame));
        }
        if (frames.length >= STACKTRACE_FRAME_LIMIT) {
            break;
        }
    }
    return stripSentryFramesAndReverse(frames);
};

export { electronRendererStackParser };//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/esm/renderer/stack-parse.js.map
