import { getIntegrationsToSetup } from '@sentry/core';
import { inboundFiltersIntegration, functionToStringIntegration, linkedErrorsIntegration, consoleIntegration, nativeNodeFetchIntegration, onUnhandledRejectionIntegration, contextLinesIntegration, localVariablesIntegration, nodeContextIntegration, setNodeAsyncContextStrategy, getCurrentScope, NodeClient, initOpenTelemetry } from '@sentry/node';
import { stackParserFromStackParserOptions, logger } from '@sentry/utils';
import { session } from 'electron';
import { IPCMode } from '../common/ipc.js';
import { getSdkInfo, getDefaultReleaseName, getDefaultEnvironment } from './context.js';
import { additionalContextIntegration } from './integrations/additional-context.js';
import { childProcessIntegration } from './integrations/child-process.js';
import { electronBreadcrumbsIntegration } from './integrations/electron-breadcrumbs.js';
import { electronContextIntegration } from './integrations/electron-context.js';
import { mainProcessSessionIntegration } from './integrations/main-process-session.js';
import { electronNetIntegration } from './integrations/net-breadcrumbs.js';
import { normalizePathsIntegration } from './integrations/normalize-paths.js';
import { onUncaughtExceptionIntegration } from './integrations/onuncaughtexception.js';
import { preloadInjectionIntegration } from './integrations/preload-injection.js';
import { rendererProfilingIntegration } from './integrations/renderer-profiling.js';
import { screenshotsIntegration } from './integrations/screenshots.js';
import { sentryMinidumpIntegration } from './integrations/sentry-minidump/index.js';
import { configureIPC } from './ipc.js';
import { defaultStackParser } from './stack-parse.js';
import { makeElectronOfflineTransport } from './transports/electron-offline-net.js';
import { configureUtilityProcessIPC } from './utility-processes.js';

/** Get the default integrations for the main process SDK. */
function getDefaultIntegrations(options) {
    const integrations = [
        // Electron integrations
        sentryMinidumpIntegration(),
        electronBreadcrumbsIntegration(),
        electronNetIntegration(),
        electronContextIntegration(),
        childProcessIntegration(),
        normalizePathsIntegration(),
        onUncaughtExceptionIntegration(),
        preloadInjectionIntegration(),
        additionalContextIntegration(),
        screenshotsIntegration(),
        // Node integrations
        inboundFiltersIntegration(),
        functionToStringIntegration(),
        linkedErrorsIntegration(),
        consoleIntegration(),
        nativeNodeFetchIntegration(),
        onUnhandledRejectionIntegration(),
        contextLinesIntegration(),
        localVariablesIntegration(),
        nodeContextIntegration({ cloudResource: false }),
    ];
    if (options.autoSessionTracking !== false) {
        integrations.push(mainProcessSessionIntegration());
    }
    if (options.attachScreenshot) {
        integrations.push(screenshotsIntegration());
    }
    if (options.enableRendererProfiling) {
        integrations.push(rendererProfilingIntegration());
    }
    return integrations;
}
/**
 * Initialize Sentry in the Electron main process
 */
function init(userOptions) {
    const optionsWithDefaults = {
        _metadata: { sdk: getSdkInfo() },
        ipcMode: IPCMode.Both,
        release: getDefaultReleaseName(),
        environment: getDefaultEnvironment(),
        defaultIntegrations: getDefaultIntegrations(userOptions),
        transport: makeElectronOfflineTransport(),
        transportOptions: {},
        getSessions: () => [session.defaultSession],
        ...userOptions,
        stackParser: stackParserFromStackParserOptions(userOptions.stackParser || defaultStackParser),
    };
    const options = {
        ...optionsWithDefaults,
        integrations: getIntegrationsToSetup(optionsWithDefaults),
    };
    if (options.debug) {
        logger.enable();
    }
    removeRedundantIntegrations(options);
    // configureIPC(options);
    // configureUtilityProcessIPC();
    setNodeAsyncContextStrategy();
    const scope = getCurrentScope();
    scope.update(options.initialScope);
    const client = new NodeClient(options);
    scope.setClient(client);
    client.init();
    // If users opt-out of this, they _have_ to set up OpenTelemetry themselves
    // There is no way to use this SDK without OpenTelemetry!
    if (!options.skipOpenTelemetrySetup) {
        initOpenTelemetry(client);
    }
}
/** A list of integrations which cause default integrations to be removed */
const INTEGRATION_OVERRIDES = [
    { userAdded: 'ElectronMinidump', toRemove: 'SentryMinidump' },
    { userAdded: 'BrowserWindowSession', toRemove: 'MainProcessSession' },
];
/** Sets the default integrations and ensures that multiple minidump or session integrations are not enabled */
function removeRedundantIntegrations(
// At this point we know that the integrations are an array
options) {
    for (const { userAdded, toRemove } of INTEGRATION_OVERRIDES) {
        if (options.integrations.some((i) => i.name === userAdded)) {
            options.integrations = options.integrations.filter((i) => i.name !== toRemove);
        }
    }
}

export { getDefaultIntegrations, init };//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/esm/main/sdk.js.map
