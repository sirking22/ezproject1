import { defineIntegration } from '@sentry/core';
import { app, screen } from 'electron';
import { mergeEvents } from '../merge.js';

const DEFAULT_OPTIONS = {
    screen: true,
};
/**
 * Adds additional Electron context to events
 */
const additionalContextIntegration = defineIntegration((userOptions = {}) => {
    const _lazyDeviceContext = {};
    const options = {
        ...DEFAULT_OPTIONS,
        ...userOptions,
    };
    function _setPrimaryDisplayInfo() {
        const display = screen.getPrimaryDisplay();
        const width = Math.floor(display.size.width * display.scaleFactor);
        const height = Math.floor(display.size.height * display.scaleFactor);
        _lazyDeviceContext.screen_density = display.scaleFactor;
        _lazyDeviceContext.screen_resolution = `${width}x${height}`;
    }
    return {
        name: 'AdditionalContext',
        setup() {
            // Some metrics are only available after app ready so we lazily load them
            app.whenReady().then(() => {
                const { screen: screen$1 } = options;
                if (screen$1) {
                    _setPrimaryDisplayInfo();
                    screen.on('display-metrics-changed', () => {
                        _setPrimaryDisplayInfo();
                    });
                }
            }, () => {
                // ignore
            });
        },
        processEvent(event) {
            const device = _lazyDeviceContext;
            return mergeEvents(event, { contexts: { device } });
        },
    };
});

export { additionalContextIntegration };//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/esm/main/integrations/additional-context.js.map
