import { defineIntegration, captureMessage, addBreadcrumb } from '@sentry/core';
import { app } from 'electron';
import { EXIT_REASONS } from '../electron-normalize.js';

const DEFAULT_OPTIONS = {
    breadcrumbs: EXIT_REASONS,
    events: ['abnormal-exit', 'launch-failed', 'integrity-failure'],
};
/** Gets message and severity */
function getMessageAndSeverity(reason, proc) {
    const message = `'${proc}' process exited with '${reason}'`;
    switch (reason) {
        case 'abnormal-exit':
        case 'killed':
            return { message, level: 'warning' };
        case 'crashed':
        case 'oom':
        case 'launch-failed':
        case 'integrity-failure':
            return { message, level: 'fatal' };
        default:
            return { message, level: 'debug' };
    }
}
/**
 * Adds breadcrumbs for Electron child process events.
 */
const childProcessIntegration = defineIntegration((userOptions = {}) => {
    const { breadcrumbs, events } = userOptions;
    const options = {
        breadcrumbs: Array.isArray(breadcrumbs) ? breadcrumbs : breadcrumbs === false ? [] : DEFAULT_OPTIONS.breadcrumbs,
        events: Array.isArray(events) ? events : events === false ? [] : DEFAULT_OPTIONS.events,
    };
    return {
        name: 'ChildProcess',
        setup(client) {
            const { breadcrumbs, events } = options;
            const allReasons = Array.from(new Set([...breadcrumbs, ...events]));
            // only hook these events if we're after more than just the unresponsive event
            if (allReasons.length > 0) {
                const clientOptions = client.getOptions();
                app.on('child-process-gone', (_, details) => {
                    const { reason } = details;
                    // Capture message first
                    if (events.includes(reason)) {
                        const { message, level } = getMessageAndSeverity(details.reason, details.type);
                        captureMessage(message, { level, tags: { 'event.process': details.type } });
                    }
                    // And then add breadcrumbs for subsequent events
                    if (breadcrumbs.includes(reason)) {
                        addBreadcrumb({
                            type: 'process',
                            category: 'child-process',
                            ...getMessageAndSeverity(details.reason, details.type),
                            data: details,
                        });
                    }
                });
                app.on('render-process-gone', (_, contents, details) => {
                    const { reason } = details;
                    const name = clientOptions?.getRendererName?.(contents) || 'renderer';
                    // Capture message first
                    if (events.includes(reason)) {
                        const { message, level } = getMessageAndSeverity(details.reason, name);
                        captureMessage(message, level);
                    }
                    // And then add breadcrumbs for subsequent events
                    if (breadcrumbs.includes(reason)) {
                        addBreadcrumb({
                            type: 'process',
                            category: 'child-process',
                            ...getMessageAndSeverity(details.reason, name),
                            data: details,
                        });
                    }
                });
            }
        },
    };
});

export { childProcessIntegration };//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/esm/main/integrations/child-process.js.map
