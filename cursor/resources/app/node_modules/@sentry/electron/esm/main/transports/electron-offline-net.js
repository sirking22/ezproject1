import { makeOfflineTransport } from '@sentry/core';
import { makeElectronTransport } from './electron-net.js';
import { createOfflineStore } from './offline-store.js';

// Transport that throws if the `shouldSend` callback returns false
function makeShouldSendTransport(baseTransport) {
    return (options) => {
        const transport = baseTransport(options);
        return {
            ...transport,
            send: async (envelope) => {
                const shouldAttemptSend = options.shouldSend === undefined || (await options.shouldSend(envelope));
                if (shouldAttemptSend) {
                    return transport.send(envelope);
                }
                throw new Error("'shouldSend' callback returned false. Skipped sending.");
            },
        };
    };
}
/**
 * Creates a Transport that uses Electrons net module to send events to Sentry. When they fail to send they are
 * persisted to disk and sent later
 */
function makeElectronOfflineTransport(baseTransport = makeElectronTransport) {
    return (userOptions) => {
        // `makeElectronOfflineTransport` is a combination of three transports.
        //
        // The base Electron transport (`makeElectronTransport`) is first wrapped by `makeShouldSendTransport` which skips
        // sending events and throws when the `shouldSend` callback returns false.
        //
        // This is then wrapped again by `makeOfflineTransport` which stores events to disk when they fail to send.
        return makeOfflineTransport(makeShouldSendTransport(baseTransport))({
            flushAtStartup: true,
            createStore: createOfflineStore,
            ...userOptions,
        });
    };
}

export { makeElectronOfflineTransport };//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/esm/main/transports/electron-offline-net.js.map
