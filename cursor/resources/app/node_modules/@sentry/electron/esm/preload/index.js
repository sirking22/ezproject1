import { contextBridge, ipcRenderer } from 'electron';

/** Ways to communicate between the renderer and main process  */
var IPCMode;
(function (IPCMode) {
    /** Configures Electron IPC to receive messages from renderers */
    IPCMode[IPCMode["Classic"] = 1] = "Classic";
    /** Configures Electron protocol module to receive messages from renderers */
    IPCMode[IPCMode["Protocol"] = 2] = "Protocol";
    /**
     * Configures both methods for best compatibility.
     *
     * Renderers favour IPC but fall back to protocol if IPC has not
     * been configured in a preload script
     */
    IPCMode[IPCMode["Both"] = 3] = "Both";
})(IPCMode || (IPCMode = {}));
var IPCChannel;
(function (IPCChannel) {
    /** IPC to check main process is listening */
    IPCChannel["RENDERER_START"] = "sentry-electron.renderer-start";
    /** IPC to send a captured event to Sentry. */
    IPCChannel["EVENT"] = "sentry-electron.event";
    /** IPC to pass scope changes to main process. */
    IPCChannel["SCOPE"] = "sentry-electron.scope";
    /** IPC to pass envelopes to the main process. */
    IPCChannel["ENVELOPE"] = "sentry-electron.envelope";
    /** IPC to pass renderer status updates */
    IPCChannel["STATUS"] = "sentry-electron.status";
    /** IPC to pass renderer metric additions to the main process */
    IPCChannel["ADD_METRIC"] = "sentry-electron.add-metric";
})(IPCChannel || (IPCChannel = {}));

/**
 * This preload script may be used with sandbox mode enabled which means regular require is not available.
 */
// eslint-disable-next-line no-restricted-globals
if (window.__SENTRY_IPC__) {
    // eslint-disable-next-line no-console
    console.log('Sentry Electron preload has already been run');
}
else {
    const ipcObject = {
        sendRendererStart: () => ipcRenderer.send(IPCChannel.RENDERER_START),
        sendScope: (scopeJson) => ipcRenderer.send(IPCChannel.SCOPE, scopeJson),
        sendEvent: (eventJson) => ipcRenderer.send(IPCChannel.EVENT, eventJson),
        sendEnvelope: (envelope) => ipcRenderer.send(IPCChannel.ENVELOPE, envelope),
        sendStatus: (status) => ipcRenderer.send(IPCChannel.STATUS, status),
        sendAddMetric: (metric) => ipcRenderer.send(IPCChannel.ADD_METRIC, metric),
    };
    // eslint-disable-next-line no-restricted-globals
    window.__SENTRY_IPC__ = ipcObject;
    // We attempt to use contextBridge if it's available
    if (contextBridge) {
        // This will fail if contextIsolation is not enabled
        try {
            contextBridge.exposeInMainWorld('__SENTRY_IPC__', ipcObject);
        }
        catch (e) {
            //
        }
    }
}//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/esm/preload/index.js.map
