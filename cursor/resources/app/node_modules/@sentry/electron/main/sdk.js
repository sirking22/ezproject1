const core = require('@sentry/core');
const node = require('@sentry/node');
const utils = require('@sentry/utils');
const electron = require('electron');
const ipc = require('../common/ipc.js');
const context = require('./context.js');
const additionalContext = require('./integrations/additional-context.js');
const childProcess = require('./integrations/child-process.js');
const electronBreadcrumbs = require('./integrations/electron-breadcrumbs.js');
const electronContext = require('./integrations/electron-context.js');
const mainProcessSession = require('./integrations/main-process-session.js');
const netBreadcrumbs = require('./integrations/net-breadcrumbs.js');
const normalizePaths = require('./integrations/normalize-paths.js');
const onuncaughtexception = require('./integrations/onuncaughtexception.js');
const preloadInjection = require('./integrations/preload-injection.js');
const rendererProfiling = require('./integrations/renderer-profiling.js');
const screenshots = require('./integrations/screenshots.js');
const index = require('./integrations/sentry-minidump/index.js');
const ipc$1 = require('./ipc.js');
const stackParse = require('./stack-parse.js');
const electronOfflineNet = require('./transports/electron-offline-net.js');
const utilityProcesses = require('./utility-processes.js');

/** Get the default integrations for the main process SDK. */
function getDefaultIntegrations(options) {
    const integrations = [
        // Electron integrations
        index.sentryMinidumpIntegration(),
        electronBreadcrumbs.electronBreadcrumbsIntegration(),
        netBreadcrumbs.electronNetIntegration(),
        electronContext.electronContextIntegration(),
        childProcess.childProcessIntegration(),
        normalizePaths.normalizePathsIntegration(),
        onuncaughtexception.onUncaughtExceptionIntegration(),
        preloadInjection.preloadInjectionIntegration(),
        additionalContext.additionalContextIntegration(),
        screenshots.screenshotsIntegration(),
        // Node integrations
        node.inboundFiltersIntegration(),
        node.functionToStringIntegration(),
        node.linkedErrorsIntegration(),
        node.consoleIntegration(),
        node.nativeNodeFetchIntegration(),
        node.onUnhandledRejectionIntegration(),
        node.contextLinesIntegration(),
        node.localVariablesIntegration(),
        node.nodeContextIntegration({ cloudResource: false }),
    ];
    if (options.autoSessionTracking !== false) {
        integrations.push(mainProcessSession.mainProcessSessionIntegration());
    }
    if (options.attachScreenshot) {
        integrations.push(screenshots.screenshotsIntegration());
    }
    if (options.enableRendererProfiling) {
        integrations.push(rendererProfiling.rendererProfilingIntegration());
    }
    return integrations;
}
/**
 * Initialize Sentry in the Electron main process
 */
function init(userOptions) {
    const optionsWithDefaults = {
        _metadata: { sdk: context.getSdkInfo() },
        ipcMode: ipc.IPCMode.Both,
        release: context.getDefaultReleaseName(),
        environment: context.getDefaultEnvironment(),
        defaultIntegrations: getDefaultIntegrations(userOptions),
        transport: electronOfflineNet.makeElectronOfflineTransport(),
        transportOptions: {},
        getSessions: () => [electron.session.defaultSession],
        ...userOptions,
        stackParser: utils.stackParserFromStackParserOptions(userOptions.stackParser || stackParse.defaultStackParser),
    };
    const options = {
        ...optionsWithDefaults,
        integrations: core.getIntegrationsToSetup(optionsWithDefaults),
    };
    if (options.debug) {
        utils.logger.enable();
    }
    removeRedundantIntegrations(options);
    // ipc$1.configureIPC(options);
    // utilityProcesses.configureUtilityProcessIPC();
    node.setNodeAsyncContextStrategy();
    const scope = node.getCurrentScope();
    scope.update(options.initialScope);
    const client = new node.NodeClient(options);
    scope.setClient(client);
    client.init();
    // If users opt-out of this, they _have_ to set up OpenTelemetry themselves
    // There is no way to use this SDK without OpenTelemetry!
    if (!options.skipOpenTelemetrySetup) {
        node.initOpenTelemetry(client);
    }
}
/** A list of integrations which cause default integrations to be removed */
const INTEGRATION_OVERRIDES = [
    { userAdded: 'ElectronMinidump', toRemove: 'SentryMinidump' },
    { userAdded: 'BrowserWindowSession', toRemove: 'MainProcessSession' },
];
/** Sets the default integrations and ensures that multiple minidump or session integrations are not enabled */
function removeRedundantIntegrations(
// At this point we know that the integrations are an array
options) {
    for (const { userAdded, toRemove } of INTEGRATION_OVERRIDES) {
        if (options.integrations.some((i) => i.name === userAdded)) {
            options.integrations = options.integrations.filter((i) => i.name !== toRemove);
        }
    }
}

exports.getDefaultIntegrations = getDefaultIntegrations;
exports.init = init;//# sourceMappingURL=http://go/sourcemap/sourcemaps/5b19bac7a947f54e4caa3eb7e4c5fbf832389850/node_modules/@sentry/electron/main/sdk.js.map
