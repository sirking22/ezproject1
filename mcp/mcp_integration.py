#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è MCP —Å –ø—Ä–æ–µ–∫—Ç–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–æ–∂–∫–∞–º–∏ Notion
"""

import asyncio
import logging
import os
from typing import List, Dict, Any, Optional
from datetime import datetime
from dotenv import load_dotenv

from notion_mcp_client import NotionMCPClient, NotionCoverManager
from smart_cover_applier import SmartCoverApplier

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MCPNotionIntegration:
    def __init__(self):
        self.mcp_client = NotionMCPClient()
        self.cover_manager = NotionCoverManager(self.mcp_client)
        self.smart_applier = SmartCoverApplier()
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        await self.mcp_client.start_server()
        logger.info("üöÄ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        await self.mcp_client.stop_server()
        logger.info("üõë MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    async def get_database_status(self, database_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            info = await self.mcp_client.get_database_info(database_id)
            pages = await self.mcp_client.get_pages(database_id, limit=10)
            
            status = f"üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n{info}\n\n"
            status += f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n{pages}"
            
            return status
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    async def apply_covers_with_mcp(self, database_id: str) -> str:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫–∏ —á–µ—Ä–µ–∑ MCP"""
        try:
            logger.info("üé® –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ —á–µ—Ä–µ–∑ MCP")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –æ–±–ª–æ–∂–µ–∫
            pages_result = await self.mcp_client.get_pages(database_id, limit=100)
            logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {pages_result}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º smart_applier –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–æ–∂–µ–∫
            # –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É Telegram –∏–º–ø–æ—Ä—Ç–∞
            file_mapping = self.smart_applier.scan_telegram_import_folder()
            
            if not file_mapping:
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ Telegram –∏–º–ø–æ—Ä—Ç–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å—Å—ã–ª–∫–∞–º–∏
            ideas = await self.smart_applier.get_ideas_with_yandex_links(limit=50)
            
            if not ideas:
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–¥–µ–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å—Å—ã–ª–∫–∞–º–∏"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –º–∞–ø–ø–∏–Ω–≥–∞
            await self.smart_applier.show_mapping_preview(ideas, file_mapping, limit=5)
            
            return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ideas)} –∏–¥–µ–π –∏ {len(file_mapping)} –≥—Ä—É–ø–ø —Ñ–∞–π–ª–æ–≤"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–æ–∂–µ–∫: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    async def search_and_update_pages(self, database_id: str, query: str) -> str:
        """–ü–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
            search_result = await self.mcp_client.search_pages(query, database_id, limit=20)
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}': {search_result}")
            
            return search_result
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"
    
    async def create_test_page(self, database_id: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            test_title = f"–¢–µ—Å—Ç MCP {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            result = await self.mcp_client.create_page(
                database_id=database_id,
                title=test_title,
                description="–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                tags=["MCP", "–¢–µ—Å—Ç"],
                importance=7
            )
            
            return f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:\n{result}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}"

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    integration = MCPNotionIntegration()
    
    try:
        await integration.start()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –±–∞–∑—ã IDEAS
        database_id = "ad92a6e2-1485-428c-84de-8587706b3be1"
        
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion")
        print("=" * 50)
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É IDEAS: {database_id}")
        
        # 1. –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\n1Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        status = await integration.get_database_status(database_id)
        print(status)
        
        # 2. –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
        print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å '–¥–∏–∑–∞–π–Ω':")
        search = await integration.search_and_update_pages(database_id, "–¥–∏–∑–∞–π–Ω")
        print(search)
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
        test_page = await integration.create_test_page(database_id)
        print(test_page)
        
        # 4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫
        print("\n4Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫:")
        covers = await integration.apply_covers_with_mcp(database_id)
        print(covers)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        await integration.stop()

if __name__ == "__main__":
    asyncio.run(main()) 