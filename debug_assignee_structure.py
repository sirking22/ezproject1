#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
"""

import os
import sys
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env_vars():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")
    subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")
    
    if not token or not tasks_db_id or not subtasks_db_id:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    return {
        "token": token,
        "tasks_db_id": tasks_db_id,
        "subtasks_db_id": subtasks_db_id
    }

def debug_tasks_assignees():
    """–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ Tasks Database"""
    print("\nüîç –û–¢–õ–ê–î–ö–ê TASKS DATABASE")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á
        response = client.databases.query(
            database_id=env_vars["tasks_db_id"],
            page_size=5
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response['results'])} –∑–∞–¥–∞—á")
        
        for i, task in enumerate(response["results"], 1):
            print(f"\n--- –ó–∞–¥–∞—á–∞ {i} ---")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title = task["properties"]["–ó–∞–¥–∞—á–∞"]["title"][0]["plain_text"] if task["properties"]["–ó–∞–¥–∞—á–∞"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
            
            # –°—Ç–∞—Ç—É—Å
            status = task["properties"]["–°—Ç–∞—Ç—É—Å"]["status"]["name"] if task["properties"]["–°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏ - –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            assignees_prop = task["properties"]["–£—á–∞—Å—Ç–Ω–∏–∫–∏"]
            print(f"–¢–∏–ø –ø–æ–ª—è –£—á–∞—Å—Ç–Ω–∏–∫–∏: {type(assignees_prop)}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –£—á–∞—Å—Ç–Ω–∏–∫–∏: {json.dumps(assignees_prop, indent=2, ensure_ascii=False)}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞
            if "people" in assignees_prop:
                people = assignees_prop["people"]
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {len(people)}")
                
                for j, person in enumerate(people):
                    print(f"  –ß–µ–ª–æ–≤–µ–∫ {j+1}: {json.dumps(person, indent=4, ensure_ascii=False)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
                    if "name" in person:
                        print(f"    –ò–º—è: {person['name']}")
                    if "id" in person:
                        print(f"    ID: {person['id']}")
                    if "type" in person:
                        print(f"    –¢–∏–ø: {person['type']}")
                    if "avatar_url" in person:
                        print(f"    –ê–≤–∞—Ç–∞—Ä: {person['avatar_url']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def debug_subtasks_assignees():
    """–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ Subtasks Database"""
    print("\nüîç –û–¢–õ–ê–î–ö–ê SUBTASKS DATABASE")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–¥–∑–∞–¥–∞—á
        response = client.databases.query(
            database_id=env_vars["subtasks_db_id"],
            page_size=5
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response['results'])} –ø–æ–¥–∑–∞–¥–∞—á")
        
        for i, subtask in enumerate(response["results"], 1):
            print(f"\n--- –ü–æ–¥–∑–∞–¥–∞—á–∞ {i} ---")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title = subtask["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"][0]["plain_text"] if subtask["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
            
            # –°—Ç–∞—Ç—É—Å (—Å –ø—Ä–æ–±–µ–ª–æ–º!)
            status = subtask["properties"][" –°—Ç–∞—Ç—É—Å"]["status"]["name"] if subtask["properties"][" –°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            
            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            assignees_prop = subtask["properties"]["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]
            print(f"–¢–∏–ø –ø–æ–ª—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {type(assignees_prop)}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {json.dumps(assignees_prop, indent=2, ensure_ascii=False)}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞
            if "people" in assignees_prop:
                people = assignees_prop["people"]
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {len(people)}")
                
                for j, person in enumerate(people):
                    print(f"  –ß–µ–ª–æ–≤–µ–∫ {j+1}: {json.dumps(person, indent=4, ensure_ascii=False)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
                    if "name" in person:
                        print(f"    –ò–º—è: {person['name']}")
                    if "id" in person:
                        print(f"    ID: {person['id']}")
                    if "type" in person:
                        print(f"    –¢–∏–ø: {person['type']}")
                    if "avatar_url" in person:
                        print(f"    –ê–≤–∞—Ç–∞—Ä: {person['avatar_url']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô")
    print("=" * 50)
    
    debug_tasks_assignees()
    debug_subtasks_assignees()
    
    print(f"\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main() 