#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé® AI –ü–†–û–í–ï–†–ö–ê –î–ò–ó–ê–ô–ù-–ú–ê–ö–ï–¢–û–í
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∏–∑–∞–π–Ω–∞ —Å –ø–æ–º–æ—â—å—é AI
"""

import os
import logging
from typing import Dict, List, Any
import httpx
from dotenv import load_dotenv
import json
from datetime import datetime

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-DzPhbaSCgP7_YPxOuPvMOA')
DEEPSEEK_BASE_URL = os.getenv('DEEPSEEK_BASE_URL', 'https://hubai.loe.gg/v1')

class DesignChecker:
    def __init__(self):
        self.api_key = DEEPSEEK_API_KEY
        self.base_url = DEEPSEEK_BASE_URL
        self.total_tokens_used = 0
    
    async def analyze_design(self, image_url: str, context: str = "") -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
        
        try:
            # –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (100 —Ç–æ–∫–µ–Ω–æ–≤)
            prompt = f"""
            –ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç–∞: {image_url}
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ 1-10:
            - –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –±–∞–ª–∞–Ω—Å
            - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞  
            - –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
            - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å
            - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            
            –í–µ—Ä–Ω–∏ JSON: {{"composition": 8, "colors": 7, "typography": 9, "modernity": 8, "functionality": 7, "overall": 8, "issues": ["–ø—Ä–æ–±–ª–µ–º–∞1", "–ø—Ä–æ–±–ª–µ–º–∞2"], "suggestions": ["—Å–æ–≤–µ—Ç1", "—Å–æ–≤–µ—Ç2"]}}
            """
            
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "deepseek-chat",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.1,
                        "max_tokens": 300
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    content = result['choices'][0]['message']['content']
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
                    usage = result.get('usage', {})
                    total_tokens = usage.get('total_tokens', 0)
                    self.total_tokens_used += total_tokens
                    
                    logger.info(f"üí∞ –¢–æ–∫–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω–∞: {total_tokens} | –í—Å–µ–≥–æ: {self.total_tokens_used}")
                    
                    # –ü–∞—Ä—Å–∏–º JSON
                    try:
                        start = content.find('{')
                        end = content.rfind('}') + 1
                        if start != -1 and end != 0:
                            analysis = json.loads(content[start:end])
                            return analysis
                    except json.JSONDecodeError:
                        pass
                    
                    # Fallback
                    return self._default_analysis()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                    return self._default_analysis()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∑–∞–π–Ω–∞: {e}")
            return self._default_analysis()
    
    def _default_analysis(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "composition": 5,
            "colors": 5,
            "typography": 5,
            "modernity": 5,
            "functionality": 5,
            "overall": 5,
            "issues": ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"],
            "suggestions": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
        }
    
    async def batch_analyze(self, designs: List[Dict[str, str]]) -> List[Dict[str, Any]]:
        """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞–∫–µ—Ç–æ–≤"""
        results = []
        
        for design in designs:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {design.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            analysis = await self.analyze_design(
                design.get('url', ''),
                design.get('context', '')
            )
            analysis['design_name'] = design.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            results.append(analysis)
        
        return results
    
    def generate_report(self, analyses: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É"""
        if not analyses:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        report = f"""
# üé® –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –î–ò–ó–ê–ô–ù-–ú–ê–ö–ï–¢–û–í
**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M')}
**–í—Å–µ–≥–æ –º–∞–∫–µ—Ç–æ–≤:** {len(analyses)}
**–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {self.total_tokens_used}

## üìä –°–†–ï–î–ù–ò–ï –û–¶–ï–ù–ö–ò
"""
        
        # –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        avg_scores = {}
        for key in ['composition', 'colors', 'typography', 'modernity', 'functionality', 'overall']:
            scores = [a.get(key, 0) for a in analyses if a.get(key)]
            if scores:
                avg_scores[key] = sum(scores) / len(scores)
        
        for key, value in avg_scores.items():
            report += f"- **{key.title()}:** {value:.1f}/10\n"
        
        report += "\n## üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó\n"
        
        for analysis in analyses:
            name = analysis.get('design_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            overall = analysis.get('overall', 0)
            
            report += f"\n### {name} (–û—Ü–µ–Ω–∫–∞: {overall}/10)\n"
            report += f"- –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {analysis.get('composition', 0)}/10\n"
            report += f"- –¶–≤–µ—Ç–∞: {analysis.get('colors', 0)}/10\n"
            report += f"- –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞: {analysis.get('typography', 0)}/10\n"
            report += f"- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('modernity', 0)}/10\n"
            report += f"- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {analysis.get('functionality', 0)}/10\n"
            
            issues = analysis.get('issues', [])
            if issues:
                report += f"- **–ü—Ä–æ–±–ª–µ–º—ã:** {', '.join(issues)}\n"
            
            suggestions = analysis.get('suggestions', [])
            if suggestions:
                report += f"- **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {', '.join(suggestions)}\n"
        
        return report

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    checker = DesignChecker()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞–∫–µ—Ç—ã
    designs = [
        {
            "name": "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–π—Ç–∞",
            "url": "https://example.com/design1.jpg",
            "context": "–õ–µ–Ω–¥–∏–Ω–≥ –¥–ª—è IT-–∫–æ–º–ø–∞–Ω–∏–∏"
        },
        {
            "name": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "url": "https://example.com/design2.jpg", 
            "context": "UI –¥–ª—è —Ñ–∏–Ω—Ç–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        }
    ]
    
    # –ê–Ω–∞–ª–∏–∑
    analyses = await checker.batch_analyze(designs)
    
    # –û—Ç—á–µ—Ç
    report = checker.generate_report(analyses)
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(f"design_analysis_{datetime.now().strftime('%Y%m%d_%H%M')}.md", "w", encoding="utf-8") as f:
        f.write(report)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 