#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
"""

import asyncio
from collections import defaultdict
from mcp_notion_server import NotionMCPServer

async def analyze_all_designers():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        server = NotionMCPServer()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        tasks_db_id = server.tasks_db_id or "d09df250ce7e4e0d9fbe4e036d320def"
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã: {tasks_db_id}")
        
        tasks_response = await server.get_database_pages(tasks_db_id)
        
        if not tasks_response.get('success'):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {tasks_response.get('error')}")
            return
        
        all_tasks = tasks_response.get('pages', [])
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ: {len(all_tasks)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        designer_stats = {}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        for task in all_tasks:
            properties = task.get('properties', {})
            participants = properties.get('–£—á–∞—Å—Ç–Ω–∏–∫–∏', [])
            status = properties.get('–°—Ç–∞—Ç—É—Å', {})
            title = properties.get('–ó–∞–¥–∞—á–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞  
            participant_names = []
            if isinstance(participants, list):
                participant_names = [p for p in participants if isinstance(p, str) and p.strip()]
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å –∏–∑ —Å—Ç—Ä–æ–∫–∏ (MCP –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤)
            status_name = 'unknown'
            if isinstance(status, str):
                try:
                    import json
                    status_data = json.loads(status.replace("'", '"'))
                    if 'status' in status_data:
                        status_name = status_data['status'].get('name', 'unknown').lower()
                except:
                    pass
            
            for participant in participant_names:
                if participant:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if participant not in designer_stats:
                        designer_stats[participant] = {
                            'total': 0,
                            'to_do': 0,
                            'in_progress': 0,
                            'done': 0,
                            'backlog': 0,
                            'tasks': []
                        }
                    
                    designer_stats[participant]['total'] += 1
                    designer_stats[participant]['tasks'].append({
                        'title': title,
                        'status': status_name,
                        'id': task['id']
                    })
                    
                    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                    if 'to do' in status_name:
                        designer_stats[participant]['to_do'] += 1
                    elif 'progress' in status_name:
                        designer_stats[participant]['in_progress'] += 1
                    elif 'done' in status_name:
                        designer_stats[participant]['done'] += 1
                    elif 'backlog' in status_name:
                        designer_stats[participant]['backlog'] += 1
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*80)
        print("üë• –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ò–ó–ê–ô–ù–ï–†–ê–ú")
        print("="*80)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
        sorted_designers = sorted(designer_stats.items(), 
                                key=lambda x: x[1]['total'], reverse=True)
        
        for designer, stats in sorted_designers:
            if stats['total'] > 0:  # –¢–æ–ª—å–∫–æ –¥–∏–∑–∞–π–Ω–µ—Ä—ã —Å –∑–∞–¥–∞—á–∞–º–∏
                print(f"\nüé® {designer}")
                print(f"   üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total']}")
                print(f"   ‚ö´ –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {stats['to_do']}")
                print(f"   üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['in_progress']}")
                print(f"   üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['done']}")
                print(f"   üü§ –í –æ—á–µ—Ä–µ–¥–∏: {stats['backlog']}")
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏)
                active_tasks = stats['to_do'] + stats['in_progress']
                if stats['total'] > 0:
                    load_percent = (active_tasks / stats['total']) * 100
                    print(f"   üî• –ó–∞–≥—Ä—É–∑–∫–∞: {active_tasks}/{stats['total']} ({load_percent:.1f}%)")
                
                # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ / –æ–±—â–∏–µ)
                if stats['total'] > 0:
                    efficiency = (stats['done'] / stats['total']) * 100
                    print(f"   ‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*80)
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î–´")
        print("="*80)
        
        total_designers = len([d for d, s in designer_stats.items() if s['total'] > 0])
        total_tasks = sum(s['total'] for s in designer_stats.values())
        total_active = sum(s['to_do'] + s['in_progress'] for s in designer_stats.values())
        total_done = sum(s['done'] for s in designer_stats.values())
        
        print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤: {total_designers}")
        print(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}")
        print(f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {total_active}")
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {total_done}")
        
        if total_tasks > 0:
            team_efficiency = (total_done / total_tasks) * 100
            print(f"‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã: {team_efficiency:.1f}%")
        
        # –¢–æ–ø-3 —Å–∞–º—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
        print(f"\nüèÜ –¢–û–ü-3 –°–ê–ú–´–• –ó–ê–ì–†–£–ñ–ï–ù–ù–´–•:")
        for i, (designer, stats) in enumerate(sorted_designers[:3], 1):
            if stats['total'] > 0:
                active = stats['to_do'] + stats['in_progress']
                print(f"   {i}. {designer}: {active} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        return designer_stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {}

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤")
    print("="*50)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    stats = await analyze_all_designers()
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(stats) if stats else 0} –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤")

if __name__ == "__main__":
    asyncio.run(main()) 