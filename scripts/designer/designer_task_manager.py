import os
import sys
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
TASKS_DB_ID = os.getenv("NOTION_TASKS_DB_ID")
TEAMS_DB_ID = os.getenv("NOTION_TEAMS_DB_ID")

if not NOTION_TOKEN or not TASKS_DB_ID:
    raise RuntimeError("NOTION_TOKEN –∏ NOTION_TASKS_DB_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class DesignerTaskManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.headers = {
            "Authorization": f"Bearer {NOTION_TOKEN}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        self.designers = {}
        self.tasks = {}
        self.week_start = datetime.now().date() - timedelta(days=datetime.now().weekday())
        self.week_end = self.week_start + timedelta(days=6)
        
    def show_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\nüé® –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–î–ê–ß –î–ò–ó–ê–ô–ù–ï–†–û–í")
        print("=" * 50)
        print("1. üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        print("2. üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ToDo –Ω–∞ –Ω–µ–¥–µ–ª—é")
        print("3. üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á")
        print("4. üìà –û—Ç—á–µ—Ç –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º")
        print("5. ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä")
        print("6. üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("-" * 50)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-6): ").strip()
        return choice
    
    def quick_overview(self):
        """–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏"""
        print("\n‚ö° –ë–´–°–¢–†–´–ô –û–ë–ó–û–†")
        print("=" * 40)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_designers()
        self.load_tasks()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        todo_tasks = [t for t in self.tasks.values() if t["status"].lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]]
        assigned_tasks = [t for t in todo_tasks if t["assignees"]]
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –î–∏–∑–∞–π–Ω–µ—Ä–æ–≤: {len(self.designers)}")
        print(f"   ‚Ä¢ –ó–∞–¥–∞—á ToDo: {len(todo_tasks)}")
        print(f"   ‚Ä¢ –° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏: {len(assigned_tasks)}")
        print(f"   ‚Ä¢ –ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(todo_tasks) - len(assigned_tasks)}")
        
        # –ù–∞–≥—Ä—É–∑–∫–∞ –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        workload = defaultdict(int)
        for task in assigned_tasks:
            for assignee in task["assignees"]:
                for designer in self.designers.values():
                    if designer["name"].lower() == assignee.lower():
                        workload[designer["name"]] += 1
                        break
        
        if workload:
            print(f"\nüë• –ù–ê–ì–†–£–ó–ö–ê:")
            for designer, count in sorted(workload.items(), key=lambda x: x[1], reverse=True):
                print(f"   ‚Ä¢ {designer}: {count} –∑–∞–¥–∞—á")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        issues = []
        if len(todo_tasks) - len(assigned_tasks) > 0:
            issues.append(f"‚ùå {len(todo_tasks) - len(assigned_tasks)} –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        
        if workload:
            max_load = max(workload.values())
            min_load = min(workload.values())
            if max_load - min_load > 3:
                issues.append(f"‚ö†Ô∏è –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ({max_load} vs {min_load})")
        
        if issues:
            print(f"\nüö® –ü–†–û–ë–õ–ï–ú–´:")
            for issue in issues:
                print(f"   {issue}")
        else:
            print(f"\n‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ!")
    
    def load_designers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
        if self.designers:  # –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            return
            
        print("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤...")
        url = f"https://api.notion.com/v1/databases/{TEAMS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for emp in results:
            props = emp.get("properties", {})
            name = None
            for field in ["Name", "–ò–º—è", "–§–ò–û", "Title"]:
                if field in props and props[field].get("title"):
                    name = props[field]["title"][0]["plain_text"]
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º
            is_designer = False
            for field in ["–î–æ–ª–∂–Ω–æ—Å—Ç—å", "Position", "–†–æ–ª—å"]:
                if field in props:
                    role_obj = props[field]
                    if role_obj.get("select") and "–¥–∏–∑–∞–π–Ω" in role_obj["select"]["name"].lower():
                        is_designer = True
                        break
                    elif role_obj.get("rich_text"):
                        role_text = " ".join([t["plain_text"] for t in role_obj["rich_text"]])
                        if "–¥–∏–∑–∞–π–Ω" in role_text.lower():
                            is_designer = True
                            break
            
            if name and is_designer:
                self.designers[emp["id"]] = {
                    "name": name,
                    "id": emp["id"],
                    "tasks_count": 0,
                    "tasks": []
                }
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.designers)} –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤")
    
    def load_tasks(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏"""
        if self.tasks:  # –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            return
            
        print("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...")
        url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for task in results:
            props = task.get("properties", {})
            task_info = self._extract_task_info(task, props)
            self.tasks[task["id"]] = task_info
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tasks)} –∑–∞–¥–∞—á")
    
    def _extract_task_info(self, task, props):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
        title = ""
        for field in ["–ó–∞–¥–∞—á–∞", "Name", "Title", "–ù–∞–∑–≤–∞–Ω–∏–µ"]:
            if field in props and props[field].get("title"):
                title = props[field]["title"][0]["plain_text"]
                break
        
        status = ""
        for field in ["–°—Ç–∞—Ç—É—Å", "Status"]:
            if field in props:
                s = props[field]
                if s.get("status"):
                    status = s["status"]["name"]
                elif s.get("select"):
                    status = s["select"]["name"]
                break
        
        assignees = []
        for field in ["–£—á–∞—Å—Ç–Ω–∏–∫–∏", "Assignee", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "Responsible"]:
            if field in props and props[field].get("people"):
                assignees = [p.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") for p in props[field]["people"]]
                break
        
        deadline = ""
        for field in ["–î–µ–¥–ª–∞–π–Ω", "Due Date", "–î–∞—Ç–∞", "Deadline"]:
            if field in props and props[field].get("date"):
                deadline = props[field]["date"]["start"]
                break
        
        priority = ""
        for field in ["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "Priority"]:
            if field in props:
                p = props[field]
                if p.get("select"):
                    priority = p["select"]["name"]
                break
        
        return {
            "id": task["id"],
            "title": title,
            "status": status,
            "assignees": assignees,
            "deadline": deadline,
            "priority": priority,
            "properties": props
        }
    
    def analyze_workload(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –ù–ê–ì–†–£–ó–ö–ò")
        print("=" * 50)
        
        self.load_designers()
        self.load_tasks()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ ToDo
        todo_tasks = [t for t in self.tasks.values() if t["status"].lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        for task in todo_tasks:
            for assignee in task["assignees"]:
                for designer in self.designers.values():
                    if designer["name"].lower() == assignee.lower():
                        designer["tasks_count"] += 1
                        designer["tasks"].append(task)
                        break
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüë• –ù–ê–ì–†–£–ó–ö–ê –ü–û –î–ò–ó–ê–ô–ù–ï–†–ê–ú:")
        total_assigned = 0
        for designer in self.designers.values():
            print(f"\nüé® {designer['name']}: {designer['tasks_count']} –∑–∞–¥–∞—á")
            total_assigned += designer["tasks_count"]
            
            if designer["tasks"]:
                print("   –ó–∞–¥–∞—á–∏:")
                for task in designer["tasks"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    deadline_info = f" (–¥–æ {task['deadline']})" if task['deadline'] else ""
                    priority_info = f" [{task['priority']}]" if task['priority'] else ""
                    print(f"   ‚Ä¢ {task['title'][:40]}{deadline_info}{priority_info}")
                if len(designer["tasks"]) > 3:
                    print(f"   ... –∏ –µ—â–µ {len(designer['tasks']) - 3} –∑–∞–¥–∞—á")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        unassigned = len([t for t in todo_tasks if not t["assignees"]])
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á ToDo: {len(todo_tasks)}")
        print(f"   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º: {total_assigned}")
        print(f"   ‚Ä¢ –ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {unassigned}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if unassigned > 0:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   ‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è {unassigned} –∑–∞–¥–∞—á")
        
        if self.designers:
            avg_load = total_assigned / len(self.designers)
            max_load = max(d["tasks_count"] for d in self.designers.values())
            if max_load > avg_load * 1.5:
                print(f"   ‚Ä¢ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É (–º–∞–∫—Å–∏–º—É–º: {max_load}, —Å—Ä–µ–¥–Ω–µ–µ: {avg_load:.1f})")
    
    def show_todo_list(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ToDo –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        print(f"\nüìã –ó–ê–î–ê–ß–ò TODO –ù–ê –ù–ï–î–ï–õ–Æ {self.week_start} - {self.week_end}")
        print("=" * 70)
        
        self.load_tasks()
        
        todo_tasks = [t for t in self.tasks.values() if t["status"].lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]]
        
        if not todo_tasks:
            print("‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ ToDo")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
        by_assignee = defaultdict(list)
        for task in todo_tasks:
            if task["assignees"]:
                for assignee in task["assignees"]:
                    by_assignee[assignee].append(task)
            else:
                by_assignee["–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"].append(task)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
        for assignee, tasks in by_assignee.items():
            print(f"\nüë§ {assignee} ({len(tasks)} –∑–∞–¥–∞—á):")
            for task in tasks:
                deadline_info = f" (–¥–æ {task['deadline']})" if task['deadline'] else ""
                priority_info = f" [{task['priority']}]" if task['priority'] else ""
                print(f"   ‚Ä¢ {task['title'][:50]}{deadline_info}{priority_info}")
    
    def redistribute_tasks(self):
        """–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
        print("\nüîÑ –ü–ï–†–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß")
        print("=" * 40)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        try:
            import redistribute_tasks
            redistributor = redistribute_tasks.TaskRedistributor()
            redistributor.fetch_designers()
            redistributor.fetch_todo_tasks()
            target_avg = redistributor.analyze_current_distribution()
            redistributor.plan_redistribution(target_avg)
            redistributor.execute_redistribution(dry_run=True)
            
            print(f"\nüí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print(f"   python redistribute_tasks.py --execute")
            
        except ImportError:
            print("‚ùå –ú–æ–¥—É–ª—å redistribute_tasks –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º"""
        print(f"\nüìà –û–¢–ß–ï–¢ –ü–û –î–ò–ó–ê–ô–ù–ï–†–ê–ú")
        print("=" * 40)
        
        self.load_designers()
        self.load_tasks()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
        designer_stats = defaultdict(lambda: {
            "todo": 0, "in_progress": 0, "done": 0, "overdue": 0, "total": 0
        })
        
        now = datetime.now().date()
        
        for task in self.tasks.values():
            for assignee in task["assignees"]:
                for designer in self.designers.values():
                    if designer["name"].lower() == assignee.lower():
                        stats = designer_stats[designer["name"]]
                        stats["total"] += 1
                        
                        status = task["status"].lower()
                        if status in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]:
                            stats["todo"] += 1
                        elif status in ["in progress", "–≤ —Ä–∞–±–æ—Ç–µ"]:
                            stats["in_progress"] += 1
                        elif status in ["done", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"]:
                            stats["done"] += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
                        if task["deadline"]:
                            try:
                                deadline = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                                if deadline < now and status not in ["done", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"]:
                                    stats["overdue"] += 1
                            except:
                                pass
                        break
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        for designer_name, stats in designer_stats.items():
            print(f"\nüé® {designer_name}:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total']}")
            print(f"   ‚Ä¢ ToDo: {stats['todo']}")
            print(f"   ‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}")
            print(f"   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['done']}")
            if stats['overdue'] > 0:
                print(f"   ‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['overdue']} ‚ö†Ô∏è")
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if stats['total'] > 0:
                efficiency = (stats['done'] / stats['total']) * 100
                print(f"   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
    
    def settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\nüîß –ù–ê–°–¢–†–û–ô–ö–ò")
        print("=" * 30)
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ (0-2): ").strip()
        
        if choice == "1":
            self.check_environment()
        elif choice == "2":
            self.designers = {}  # –°–±—Ä–æ—Å –∫—ç—à–∞
            self.tasks = {}
            print("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–Ω–æ–≤–æ")
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
        print("=" * 40)
        
        env_vars = {
            "NOTION_TOKEN": NOTION_TOKEN,
            "NOTION_TASKS_DB_ID": TASKS_DB_ID,
            "NOTION_TEAMS_DB_ID": TEAMS_DB_ID,
        }
        
        for var, value in env_vars.items():
            status = "‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù–ê" if value else "‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢"
            print(f"   {var}: {status}")
            if value:
                print(f"      –ó–Ω–∞—á–µ–Ω–∏–µ: {value[:20]}..." if len(value) > 20 else f"      –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–î–ê–ß –î–ò–ó–ê–ô–ù–ï–†–û–í")
    print("=" * 50)
    
    manager = DesignerTaskManager()
    
    while True:
        try:
            choice = manager.show_menu()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                manager.analyze_workload()
            elif choice == "2":
                manager.show_todo_list()
            elif choice == "3":
                manager.redistribute_tasks()
            elif choice == "4":
                manager.generate_report()
            elif choice == "5":
                manager.quick_overview()
            elif choice == "6":
                manager.settings()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    return 0

if __name__ == "__main__":
    exit(main()) 