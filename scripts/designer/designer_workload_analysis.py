import os
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
TASKS_DB_ID = os.getenv("NOTION_TASKS_DB_ID", "9c5f4269d61449b6a7485579a3c21da3")
TEAMS_DB_ID = os.getenv("NOTION_TEAMS_DB_ID", "1d6ace03d9ff805787b9")

if not NOTION_TOKEN:
    raise RuntimeError("NOTION_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class DesignerWorkloadAnalyzer:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.headers = {
            "Authorization": f"Bearer {NOTION_TOKEN}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        self.designers = {}
        self.todo_tasks = []
        self.other_assignees = defaultdict(list)
        self.week_start = datetime.now().date() - timedelta(days=datetime.now().weekday())
        self.week_end = self.week_start + timedelta(days=6)
        
    def load_designers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
        print("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤...")
        url = f"https://api.notion.com/v1/databases/{TEAMS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for emp in results:
            props = emp.get("properties", {})
            if "Name" in props and props["Name"].get("select"):
                name = props["Name"]["select"]["name"]
                name_lower = name.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º
                if "–¥–∏–∑–∞–π–Ω" in name_lower:
                    self.designers[emp["id"]] = {
                        "name": name,
                        "id": emp["id"],
                        "tasks_count": 0,
                        "tasks": []
                    }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ú–∞—Ä–∏—é –ë–µ–∑—Ä–æ–¥–Ω—É—é
        maria_found = any("–º–∞—Ä–∏—è" in d["name"].lower() for d in self.designers.values())
        if not maria_found:
            self.designers["maria_bezrodnaya"] = {
                "name": "–ú–∞—Ä–∏—è –ë–µ–∑—Ä–æ–¥–Ω–∞—è",
                "id": "maria_bezrodnaya",
                "tasks_count": 0,
                "tasks": []
            }
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.designers)} –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤")
        for designer in self.designers.values():
            print(f"   ‚Ä¢ {designer['name']}")
    
    def load_todo_tasks(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ ToDo"""
        print(f"\nüìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ ToDo –Ω–∞ –Ω–µ–¥–µ–ª—é {self.week_start} - {self.week_end}...")
        url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for task in results:
            props = task.get("properties", {})
            task_info = self._extract_task_info(task, props)
            
            if task_info["status"].lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]:
                self.todo_tasks.append(task_info)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.todo_tasks)} –∑–∞–¥–∞—á ToDo")
    
    def _extract_task_info(self, task, props):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
        title = ""
        for field in ["–ó–∞–¥–∞—á–∏", "–ó–∞–¥–∞—á–∞", "Name", "Title", "–ù–∞–∑–≤–∞–Ω–∏–µ"]:
            if field in props and props[field].get("title"):
                title = props[field]["title"][0]["plain_text"]
                break
        
        status = ""
        for field in [" –°—Ç–∞—Ç—É—Å", "–°—Ç–∞—Ç—É—Å", "Status"]:
            if field in props:
                s = props[field]
                if s.get("status"):
                    status = s["status"]["name"]
                elif s.get("select"):
                    status = s["select"]["name"]
                break
        
        assignees = []
        for field in ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "Assignee", "Responsible"]:
            if field in props and props[field].get("people"):
                assignees = [p.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") for p in props[field]["people"]]
                break
        
        deadline = ""
        for field in ["–î–µ–¥–ª–∞–π–Ω", "Due Date", "–î–∞—Ç–∞", "Deadline"]:
            if field in props and props[field].get("date"):
                deadline = props[field]["date"]["start"]
                break
        
        priority = ""
        for field in ["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "Priority"]:
            if field in props:
                p = props[field]
                if p.get("select"):
                    priority = p["select"]["name"]
                break
        
        return {
            "id": task["id"],
            "title": title,
            "status": status,
            "assignees": assignees,
            "deadline": deadline,
            "priority": priority,
            "properties": props
        }
    
    def analyze_workload(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É"""
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò")
        print("=" * 60)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏
        for task in self.todo_tasks:
            assigned_to_designer = False
            
            for assignee_name in task["assignees"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞
                for designer in self.designers.values():
                    if designer["name"].lower() == assignee_name.lower():
                        designer["tasks_count"] += 1
                        designer["tasks"].append(task)
                        assigned_to_designer = True
                        break
                
                if not assigned_to_designer:
                    # –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–∞
                    self.other_assignees[assignee_name].append(task)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        print(f"\nüé® –ù–ê–ì–†–£–ó–ö–ê –î–ò–ó–ê–ô–ù–ï–†–û–í:")
        total_designer_tasks = 0
        for designer in self.designers.values():
            print(f"\nüë§ {designer['name']}: {designer['tasks_count']} –∑–∞–¥–∞—á")
            total_designer_tasks += designer["tasks_count"]
            
            if designer["tasks"]:
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
                priorities = defaultdict(int)
                for task in designer["tasks"]:
                    priorities[task["priority"] or "–ù–µ —É–∫–∞–∑–∞–Ω"] += 1
                
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:")
                for priority, count in priorities.items():
                    print(f"     ‚Ä¢ {priority}: {count}")
                
                # –ê–Ω–∞–ª–∏–∑ –¥–µ–¥–ª–∞–π–Ω–æ–≤
                deadlines = defaultdict(int)
                for task in designer["tasks"]:
                    if task["deadline"]:
                        try:
                            deadline_date = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                            if deadline_date <= self.week_end:
                                deadlines["–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"] += 1
                            else:
                                deadlines["–ü–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏"] += 1
                        except:
                            deadlines["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"] += 1
                    else:
                        deadlines["–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"] += 1
                
                print(f"   –î–µ–¥–ª–∞–π–Ω—ã:")
                for deadline_type, count in deadlines.items():
                    print(f"     ‚Ä¢ {deadline_type}: {count}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        print(f"\nüë• –ó–ê–î–ê–ß–ò –ù–ï-–î–ò–ó–ê–ô–ù–ï–†–û–í:")
        total_other_tasks = 0
        for assignee, tasks in sorted(self.other_assignees.items(), key=lambda x: len(x[1]), reverse=True):
            print(f"   ‚Ä¢ {assignee}: {len(tasks)} –∑–∞–¥–∞—á")
            total_other_tasks += len(tasks)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á ToDo: {len(self.todo_tasks)}")
        print(f"   ‚Ä¢ –£ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤: {total_designer_tasks}")
        print(f"   ‚Ä¢ –£ –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤: {total_other_tasks}")
        print(f"   ‚Ä¢ –ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {len(self.todo_tasks) - total_designer_tasks - total_other_tasks}")
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Æ")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É
        if self.designers:
            max_tasks = max(d["tasks_count"] for d in self.designers.values())
            avg_tasks = sum(d["tasks_count"] for d in self.designers.values()) / len(self.designers)
            
            print(f"üìä –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò:")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {max_tasks} –∑–∞–¥–∞—á")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {avg_tasks:.1f} –∑–∞–¥–∞—á")
            print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {max_tasks - avg_tasks:.1f} –∑–∞–¥–∞—á")
            
            if max_tasks > avg_tasks * 2:
                print(f"   ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–ï–†–ï–ì–†–£–ó–ö–ê!")
            elif max_tasks > avg_tasks * 1.5:
                print(f"   ‚ö†Ô∏è –°–ò–õ–¨–ù–ê–Ø –ü–ï–†–ï–ì–†–£–ó–ö–ê!")
            elif max_tasks > avg_tasks * 1.2:
                print(f"   ‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–ê–Ø –ü–ï–†–ï–ì–†–£–ó–ö–ê!")
            else:
                print(f"   ‚úÖ –ù–ê–ì–†–£–ó–ö–ê –†–ê–í–ù–û–ú–ï–†–ù–ê–Ø")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
        print(f"\nüîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        # 1. –ó–∞–¥–∞—á–∏ –æ—Ç –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∫ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        design_related_tasks = []
        for assignee, tasks in self.other_assignees.items():
            for task in tasks:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —Å –¥–∏–∑–∞–π–Ω–æ–º
                title_lower = task["title"].lower()
                design_keywords = ["–¥–∏–∑–∞–π–Ω", "–º–∞–∫–µ—Ç", "–≥—Ä–∞—Ñ–∏–∫–∞", "–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–≤–∏–∑—É–∞–ª"]
                if any(keyword in title_lower for keyword in design_keywords):
                    design_related_tasks.append((task, assignee))
        
        if design_related_tasks:
            print(f"   1. üé® –î–∏–∑–∞–π–Ω-–∑–∞–¥–∞—á–∏ —É –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ ({len(design_related_tasks)}):")
            for task, assignee in design_related_tasks[:5]:
                print(f"      ‚Ä¢ {task['title'][:40]} ‚Üí {assignee}")
            if len(design_related_tasks) > 5:
                print(f"      ... –∏ –µ—â–µ {len(design_related_tasks) - 5} –∑–∞–¥–∞—á")
        
        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏
        if len(self.designers) > 1:
            designers_list = list(self.designers.values())
            designers_list.sort(key=lambda x: x["tasks_count"], reverse=True)
            
            overloaded = designers_list[0]
            underloaded = designers_list[-1]
            
            if overloaded["tasks_count"] - underloaded["tasks_count"] > 10:
                print(f"   2. ‚öñÔ∏è –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏:")
                print(f"      ‚Ä¢ {overloaded['name']} ‚Üí {underloaded['name']}")
                print(f"      ‚Ä¢ –ü–µ—Ä–µ–¥–∞—Ç—å {min(20, overloaded['tasks_count'] - underloaded['tasks_count'])} –∑–∞–¥–∞—á")
        
        # 3. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
        low_priority_tasks = []
        for designer in self.designers.values():
            for task in designer["tasks"]:
                if not task["priority"] or task["priority"] == "–ù–µ —É–∫–∞–∑–∞–Ω":
                    low_priority_tasks.append((task, designer["name"]))
        
        if low_priority_tasks:
            print(f"   3. üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è:")
            print(f"      ‚Ä¢ {len(low_priority_tasks)} –∑–∞–¥–∞—á –±–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            print(f"      ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")
        
        # 4. –î–µ–¥–ª–∞–π–Ω—ã
        overdue_tasks = []
        today = datetime.now().date()
        for designer in self.designers.values():
            for task in designer["tasks"]:
                if task["deadline"]:
                    try:
                        deadline_date = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                        if deadline_date < today:
                            overdue_tasks.append((task, designer["name"]))
                    except:
                        pass
        
        if overdue_tasks:
            print(f"   4. ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            print(f"      ‚Ä¢ {len(overdue_tasks)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            for task, designer in overdue_tasks[:3]:
                print(f"      ‚Ä¢ {task['title'][:40]} ‚Üí {designer}")
    
    def create_action_plan(self):
        """–°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
        print(f"\nüìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô –ù–ê –ù–ï–î–ï–õ–Æ")
        print("=" * 50)
        
        print(f"üéØ –¶–ï–õ–ò:")
        print(f"   ‚Ä¢ –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å {len(self.todo_tasks)} –∑–∞–¥–∞—á")
        print(f"   ‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤")
        print(f"   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á")
        
        print(f"\nüìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï:")
        print(f"   –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print(f"   –í—Ç–æ—Ä–Ω–∏–∫-–°—Ä–µ–¥–∞: –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á")
        print(f"   –ß–µ—Ç–≤–µ—Ä–≥: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
        print(f"   –ü—è—Ç–Ω–∏—Ü–∞: –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞")
        
        print(f"\n‚úÖ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
        print(f"   ‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ ¬±20% –º–µ–∂–¥—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏")
        print(f"   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        print(f"   ‚Ä¢ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò –î–ò–ó–ê–ô–ù–ï–†–û–í")
    print("=" * 60)
    
    analyzer = DesignerWorkloadAnalyzer()
    
    try:
        analyzer.load_designers()
        analyzer.load_todo_tasks()
        analyzer.analyze_workload()
        analyzer.generate_recommendations()
        analyzer.create_action_plan()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 