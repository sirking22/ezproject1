#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —á–∞—Ç—É
"""
import os
import sys
import subprocess
import argparse
from datetime import datetime
from pathlib import Path
from typing import List, Dict

class ContextManager:
    def __init__(self):
        self.project_root = Path.cwd()
        self.context_files = {
            'ai_context': 'AI_CONTEXT.md',
            'daily': 'DAILY.md',
            'status': 'STATUS.md',
            'mistakes': 'MISTAKES.md',
            'quick_commands': 'quick_commands.md',
            'bot_template': 'bot_template.py',
            'features': 'docs/FEATURES.md',
            'structure': 'docs/PROJECT_STRUCTURE.md',
            'env_management': 'docs/ENV_MANAGEMENT.md'
        }
        
    def check_file_exists(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        return (self.project_root / filename).exists()
    
    def get_file_info(self, filename: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        file_path = self.project_root / filename
        if file_path.exists():
            size = file_path.stat().st_size
            modified = datetime.fromtimestamp(file_path.stat().st_mtime)
            return {
                'exists': True,
                'size': size,
                'modified': modified,
                'path': str(file_path)
            }
        return {'exists': False}
    
    def check_python_processes(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python"""
        try:
            result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq python.exe'], 
                                  capture_output=True, text=True)
            lines = result.stdout.strip().split('\n')
            python_processes = [line for line in lines if 'python.exe' in line]
            return len(python_processes) - 1  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        except:
            return 0
    
    def check_env_vars(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        critical_vars = ['TELEGRAM_BOT_TOKEN', 'NOTION_TOKEN', 'YA_ACCESS_TOKEN']
        missing = []
        
        for var in critical_vars:
            if not os.getenv(var):
                missing.append(var)
        
        return missing
    
    def morning_routine(self):
        """–£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞"""
        print("üåÖ –£–¢–†–ï–ù–ù–Ø–Ø –†–£–¢–ò–ù–ê")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        python_count = self.check_python_processes()
        missing_vars = self.check_env_vars()
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
        if python_count > 0:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {python_count} Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: taskkill /F /IM python.exe")
        else:
            print("‚úÖ –ù–µ—Ç –ª–∏—à–Ω–∏—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        else:
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        print(f"\nüìã –§–ê–ô–õ–´ –î–õ–Ø –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–Ø –ö –ß–ê–¢–£:")
        print("-" * 40)
        
        essential_files = ['ai_context', 'daily', 'status']
        for file_key in essential_files:
            filename = self.context_files[file_key]
            info = self.get_file_info(filename)
            if info['exists']:
                print(f"‚úÖ {filename}")
            else:
                print(f"‚ùå {filename} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–´ –°–ï–ì–û–î–ù–Ø:")
        print("-" * 40)
        
        # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        status_file = self.context_files['status']
        if self.check_file_exists(status_file):
            try:
                with open(status_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if '–í —Ä–∞–±–æ—Ç–µ' in content:
                        print("üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã_bot_with_queue.py")
                    if '–ü–ª–∞–Ω—ã' in content:
                        print("üìã –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            except:
                print("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å STATUS.md –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
        
        print(f"\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("-" * 40)
        print("1. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —á–∞—Ç—É")
        print("2. –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω –≤ DAILY.md")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python simple_bot.py")
    
    def problem_solver(self, problem_type: str):
        """–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã"""
        print(f"üö® –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´: {problem_type.upper()}")
        print("=" * 50)
        
        problem_files = {
            'event_loop': ['mistakes', 'quick_commands'],
            'telegram': ['mistakes', 'quick_commands'],
            'notion': ['mistakes', 'env_management'],
            'yandex': ['mistakes', 'env_management'],
            'bot': ['mistakes', 'quick_commands', 'bot_template'],
            'env': ['env_management', 'mistakes'],
            'default': ['mistakes', 'quick_commands']
        }
        
        files_to_show = problem_files.get(problem_type.lower(), problem_files['default'])
        
        print(f"üìã –§–ê–ô–õ–´ –î–õ–Ø –†–ï–®–ï–ù–ò–Ø:")
        print("-" * 40)
        for file_key in files_to_show:
            filename = self.context_files[file_key]
            info = self.get_file_info(filename)
            if info['exists']:
                print(f"‚úÖ {filename}")
            else:
                print(f"‚ùå {filename} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        
        print(f"\nüîß –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("-" * 40)
        
        if problem_type.lower() in ['event_loop', 'telegram', 'bot']:
            print("1. taskkill /F /IM python.exe")
            print("2. python daily_setup.py")
            print("3. python simple_bot.py")
        elif problem_type.lower() in ['notion', 'yandex', 'env']:
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("2. –û–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª")
            print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        else:
            print("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å MISTAKES.md")
            print("2. –°–ª–µ–¥–æ–≤–∞—Ç—å quick_commands.md")
            print("3. –û–±–Ω–æ–≤–∏—Ç—å DAILY.md —Å –ø—Ä–æ–±–ª–µ–º–æ–π")
    
    def new_feature(self, feature_name: str = ""):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: {feature_name.upper() if feature_name else 'GENERAL'}")
        print("=" * 50)
        
        print(f"üìã –§–ê–ô–õ–´ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò:")
        print("-" * 40)
        
        feature_files = ['features', 'structure', 'bot_template']
        for file_key in feature_files:
            filename = self.context_files[file_key]
            info = self.get_file_info(filename)
            if info['exists']:
                print(f"‚úÖ {filename}")
            else:
                print(f"‚ùå {filename} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        
        print(f"\nüîß –ü–û–î–ì–û–¢–û–í–ö–ê:")
        print("-" * 40)
        print("1. –ò–∑—É—á–∏—Ç—å FEATURES.md")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å PROJECT_STRUCTURE.md")
        print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bot_template.py")
        print("4. –û–±–Ω–æ–≤–∏—Ç—å STATUS.md")
        
        if feature_name:
            print(f"\nüìù –î–õ–Ø –§–£–ù–ö–¶–ò–ò '{feature_name}':")
            print("-" * 40)
            print(f"1. –°–æ–∑–¥–∞—Ç—å: copy bot_template.py {feature_name}_bot.py")
            print(f"2. –û–±–Ω–æ–≤–∏—Ç—å DAILY.md —Å –ø–ª–∞–Ω–æ–º")
            print(f"3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ STATUS.md")
    
    def check_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        print("üìä –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê")
        print("=" * 50)
        
        print(f"üìÅ –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê:")
        print("-" * 40)
        
        all_files = list(self.context_files.values())
        existing_files = []
        missing_files = []
        
        for filename in all_files:
            if self.check_file_exists(filename):
                existing_files.append(filename)
            else:
                missing_files.append(filename)
        
        print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ({len(existing_files)}):")
        for filename in existing_files:
            print(f"   - {filename}")
        
        if missing_files:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ({len(missing_files)}):")
            for filename in missing_files:
                print(f"   - {filename}")
        
        print(f"\nüîç –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
        print("-" * 40)
        
        python_count = self.check_python_processes()
        missing_vars = self.check_env_vars()
        
        print(f"Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {python_count}")
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(missing_vars)}")
        
        if python_count > 0:
            print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: taskkill /F /IM python.exe")
        
        if missing_vars:
            print(f"‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {', '.join(missing_vars)}")
        
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 40)
        if missing_files:
            print("1. –°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
        if python_count > 0:
            print("2. –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Python")
        if missing_vars:
            print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("4. –û–±–Ω–æ–≤–∏—Ç—å DAILY.md")

def main():
    parser = argparse.ArgumentParser(description='–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--morning', action='store_true', help='–£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞')
    parser.add_argument('--problem', type=str, help='–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (event_loop, telegram, notion, yandex, bot, env)')
    parser.add_argument('--new-feature', type=str, nargs='?', const='', help='–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è')
    parser.add_argument('--check', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞')
    
    args = parser.parse_args()
    
    manager = ContextManager()
    
    if args.morning:
        manager.morning_routine()
    elif args.problem:
        manager.problem_solver(args.problem)
    elif args.new_feature is not None:
        manager.new_feature(args.new_feature)
    elif args.check:
        manager.check_status()
    else:
        print("ü§ñ –£–ú–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ö–û–ù–¢–ï–ö–°–¢–ê")
        print("=" * 50)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  --morning     - –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞")
        print("  --problem X   - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (event_loop, telegram, notion, yandex, bot, env)")
        print("  --new-feature - –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
        print("  --check       - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python context_manager.py --morning")
        print("  python context_manager.py --problem event_loop")
        print("  python context_manager.py --new-feature queue")

if __name__ == "__main__":
    main() 