#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CI/CD –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Notion-Telegram-LLM Integration
"""

import os
import subprocess
import sys
from pathlib import Path

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞:")
        print(e.stderr)
        return False

def check_file_exists(filepath):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return Path(filepath).exists()

def setup_ci():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD"""
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê CI/CD –î–õ–Ø NOTION-TELEGRAM-LLM INTEGRATION")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "notion_database_schemas.py",
        "test_schemas_integration.py",
        "requirements.txt",
        ".pre-commit-config.yaml"
    ]
    
    missing_files = []
    for file in required_files:
        if not check_file_exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not run_command("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pre-commit
    if not run_command("pre-commit install", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit hooks"):
        print("‚ö†Ô∏è Pre-commit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º
    if not run_command("python test_schemas_integration.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"):
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if not run_command("black .", "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
    if not run_command("flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if not run_command("mypy notion_database_schemas.py test_schemas_integration.py --ignore-missing-imports", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤"):
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∞, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
    
    print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("\nüìã –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:")
    print("‚úÖ GitHub Actions CI/CD")
    print("‚úÖ Pre-commit hooks")
    print("‚úÖ –°—Ö–µ–º—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    print("‚úÖ –¢–µ—Å—Ç—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("- CI Setup: docs/CI_SETUP.md")
    print("- Schemas: notion_schemas_documentation.json")
    print("- Workflows: .github/workflows/")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–∫–æ–º–º–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print("2. –ó–∞–ø—É—à—å –≤ GitHub")
    print("3. –ü—Ä–æ–≤–µ—Ä—å Actions –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    print("4. –ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    return True

def check_ci_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å CI"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê CI/CD")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ CI
    ci_files = [
        ".github/workflows/schema-validation.yml",
        ".github/workflows/code-quality.yml"
    ]
    
    for file in ci_files:
        if check_file_exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º
    try:
        from notion_database_schemas import get_all_schemas
        schemas = get_all_schemas()
        print(f"‚úÖ –°—Ö–µ–º—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(schemas)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
    if check_file_exists("test_schemas_integration.py"):
        print("‚úÖ –¢–µ—Å—Ç—ã —Å—Ö–µ–º")
    else:
        print("‚ùå –¢–µ—Å—Ç—ã —Å—Ö–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if check_file_exists("docs/CI_SETUP.md"):
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è CI")
    else:
        print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è CI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        if command == "check":
            check_ci_status()
        elif command == "setup":
            setup_ci()
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python setup_ci.py [setup|check]")
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python setup_ci.py [setup|check]")
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("  setup - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD")
        print("  check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å CI/CD")

if __name__ == "__main__":
    main() 