#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–õ–ï–ô

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã:
- src/services/notion/service.py (NotionService)
- src/config.py (Settings)
- notion_client –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å API
"""

import asyncio
import os
import sys
from typing import Dict, Any, List
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.services.notion.service import NotionService
from src.config import Settings

load_dotenv()

class IntegratedFieldSetup:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings = Settings()
        self.notion_service = NotionService()
        
        # ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.databases = {
            'concepts': '6fc4322e6d0c45a6b37ac49b818a063a',
            'guides': '47c6086858d442ebaeceb4fad1b23ba3',
            'tasks': 'd09df250ce7e4e0d9fbe4e036d320def',
            'materials': '1d9ace03d9ff804191a4d35aeedcbbd4',
            'kpi': '1d6ace03d9ff80bfb809ed21dfd2150c'
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        await self.notion_service.initialize()
        print("‚úÖ NotionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.notion_service.cleanup()
    
    def create_property_schema(self, field_name: str, field_type: str, options: List[str] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ö–µ–º—É —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è Notion API"""
        
        if field_type == 'select':
            return {
                "name": field_name,
                "type": "select",
                "select": {
                    "options": [{"name": option} for option in options]
                }
            }
        elif field_type == 'rich_text':
            return {
                "name": field_name,
                "type": "rich_text"
            }
        elif field_type == 'number':
            return {
                "name": field_name,
                "type": "number"
            }
        elif field_type == 'date':
            return {
                "name": field_name,
                "type": "date"
            }
        elif field_type == 'people':
            return {
                "name": field_name,
                "type": "people"
            }
        elif field_type == 'relation':
            return {
                "name": field_name,
                "type": "relation",
                "relation": {
                    "database_id": options  # options —Å–æ–¥–µ—Ä–∂–∏—Ç target_db_id
                }
            }
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è: {field_type}")
    
    async def add_fields_to_database(self, database_name: str, fields: List[Dict[str, Any]]) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—è NotionService"""
        
        database_id = self.databases[database_name]
        print(f"\nüéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–ï–ô –í {database_name.upper()}")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Å–≤–æ–π—Å—Ç–≤
        properties = {}
        for field in fields:
            property_schema = self.create_property_schema(
                field['name'], 
                field['type'], 
                field.get('options')
            )
            properties[field['name']] = property_schema
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ update_database
            await self.notion_service.update_database(database_id, properties)
            print(f"‚úÖ –í—Å–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {database_name.upper()}")
            return len(fields)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ {database_name.upper()}: {e}")
            return 0
    
    async def setup_concepts_testing_fields(self) -> int:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤"""
        
        fields = [
            {
                'name': 'Test Status',
                'type': 'select',
                'options': ['Not Tested', 'In Testing', 'Success', 'Failed']
            },
            {
                'name': 'Test Results',
                'type': 'rich_text'
            },
            {
                'name': 'Recommendation',
                'type': 'select',
                'options': ['Implement', 'Improve', 'Reject']
            },
            {
                'name': 'Test Start Date',
                'type': 'date'
            },
            {
                'name': 'Test End Date',
                'type': 'date'
            },
            {
                'name': 'Success Metrics',
                'type': 'rich_text'
            }
        ]
        
        return await self.add_fields_to_database('concepts', fields)
    
    async def setup_guides_activity_fields(self) -> int:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–∞–π–¥–æ–≤"""
        
        fields = [
            {
                'name': 'Usage Count',
                'type': 'number'
            },
            {
                'name': 'Relevance Status',
                'type': 'select',
                'options': ['Relevant', 'Needs Update', 'Outdated']
            },
            {
                'name': 'Last Update Date',
                'type': 'date'
            },
            {
                'name': 'Update Author',
                'type': 'people'
            },
            {
                'name': 'Guide Status',
                'type': 'select',
                'options': ['Active', 'In Progress', 'Archived']
            },
            {
                'name': 'Archive Reason',
                'type': 'rich_text'
            }
        ]
        
        return await self.add_fields_to_database('guides', fields)
    
    async def setup_additional_relations(self) -> int:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"""
        
        print("\nüéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô")
        print("=" * 60)
        
        relations = [
            {
                'database': 'guides',
                'name': 'Replacing Guide',
                'target': 'guides'  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–≤—è–∑—å
            }
        ]
        
        total_added = 0
        for relation in relations:
            database_id = self.databases[relation['database']]
            target_db_id = self.databases[relation['target']]
            
            properties = {
                relation['name']: self.create_property_schema(
                    relation['name'], 
                    'relation', 
                    target_db_id
                )
            }
            
            try:
                await self.notion_service.update_database(database_id, properties)
                print(f"‚úÖ –°–≤—è–∑—å '{relation['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {relation['database'].upper()}")
                total_added += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ '{relation['name']}': {e}")
        
        return total_added
    
    async def verify_fields_added(self) -> Dict[str, int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –ø–æ–ª—è –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã"""
        
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –î–û–ë–ê–í–õ–ï–ù–ù–´–• –ü–û–õ–ï–ô")
        print("=" * 60)
        
        verification_results = {}
        
        for db_name, db_id in self.databases.items():
            try:
                database = await self.notion_service.get_database(db_id)
                properties = database.properties
                
                # –ò—â–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                new_fields = [
                    'Test Status', 'Test Results', 'Recommendation', 
                    'Test Start Date', 'Test End Date', 'Success Metrics',
                    'Usage Count', 'Relevance Status', 'Last Update Date',
                    'Update Author', 'Guide Status', 'Archive Reason'
                ]
                
                found_count = 0
                for field_name in new_fields:
                    if field_name in properties:
                        found_count += 1
                
                verification_results[db_name] = found_count
                print(f"üìä {db_name.upper()}: {found_count} –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {db_name.upper()}: {e}")
                verification_results[db_name] = 0
        
        return verification_results
    
    async def run_setup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª–µ–π"""
        
        print("üöÄ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–õ–ï–ô")
        print("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã")
        print("=" * 80)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.initialize()
            
            # –≠—Ç–∞–ø 1: –ü–æ–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ–ø—Ç–∞—Ö
            concepts_success = await self.setup_concepts_testing_fields()
            
            # –≠—Ç–∞–ø 2: –ü–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥–∞–π–¥–∞—Ö
            guides_success = await self.setup_guides_activity_fields()
            
            # –≠—Ç–∞–ø 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
            relations_success = await self.setup_additional_relations()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            verification = await self.verify_fields_added()
            
            # –ò—Ç–æ–≥–∏
            print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò")
            print("=" * 50)
            print(f"‚úÖ CONCEPTS: {concepts_success} –ø–æ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            print(f"‚úÖ GUIDES: {guides_success} –ø–æ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            print(f"‚úÖ –°–≤—è–∑–∏: {relations_success} —Å–≤—è–∑–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            
            total_verified = sum(verification.values())
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª–µ–π: {total_verified}")
            
            if total_verified > 0:
                print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ö†Ô∏è –ü–æ–ª—è –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await self.cleanup()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    setup = IntegratedFieldSetup()
    await setup.run_setup()

if __name__ == "__main__":
    asyncio.run(main()) 