#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ù–ê–°–¢–†–û–ô–ö–ê –ë–ò–ó–ù–ï–°-–¶–ï–ü–û–ß–ï–ö

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–æ–∫:
1. –ö–û–ù–¶–ï–ü–¢/–°–¶–ï–ù–ê–†–ò–ô + –ò–î–ï–ò = –¢–ï–°–¢–´
2. –ó–ê–î–ê–ß–ò = –ú–ê–¢–ï–†–ò–ê–õ–´ + –ü–û–ö–ê–ó–ê–¢–ï–õ–ò + –ì–ê–ô–î–´  
3. –ì–ê–ô–î–´ = –ü–û–í–¢–û–†–ù–´–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò + –ü–û–ö–ê–ó–ê–¢–ï–õ–ò + –î–û–†–ê–ë–û–¢–ö–ê/–ê–†–•–ò–í
"""

import os
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

class BusinessChainSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–µ–∫ –≤ Notion"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        if not self.notion_token:
            raise ValueError("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        self.headers = {
            "Authorization": f"Bearer {self.notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        # ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.databases = {
            'concepts': '6fc4322e6d0c45a6b37ac49b818a063a',
            'ideas': 'ad92a6e21485428c84de8587706b3be1',
            'tasks': 'd09df250ce7e4e0d9fbe4e036d320def',
            'materials': '1d9ace03d9ff804191a4d35aeedcbbd4',
            'guides': '47c6086858d442ebaeceb4fad1b23ba3',
            'kpi': '1d6ace03d9ff80bfb809ed21dfd2150c'
        }
    
    def analyze_current_relations(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –±–∞–∑–∞–º–∏"""
        
        print("üìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –°–í–Ø–ó–ï–ô")
        print("=" * 50)
        
        relations_map = {}
        
        for db_name, db_id in self.databases.items():
            try:
                response = requests.get(
                    f"https://api.notion.com/v1/databases/{db_id}",
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    db_data = response.json()
                    properties = db_data.get('properties', {})
                    
                    relations = []
                    for prop_name, prop_data in properties.items():
                        if prop_data.get('type') == 'relation':
                            target_db = prop_data.get('relation', {}).get('database_id')
                            if target_db:
                                relations.append({
                                    'property': prop_name,
                                    'target_db': target_db
                                })
                    
                    relations_map[db_name] = relations
                    print(f"‚úÖ {db_name.upper()}: {len(relations)} —Å–≤—è–∑–µ–π")
                    
                    for rel in relations:
                        target_name = self._get_db_name_by_id(rel['target_db'])
                        print(f"   ‚Ä¢ {rel['property']} ‚Üí {target_name}")
                        
                else:
                    print(f"‚ùå {db_name.upper()}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå {db_name.upper()}: {e}")
        
        return relations_map
    
    def _get_db_name_by_id(self, db_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –ø–æ ID"""
        for name, id_val in self.databases.items():
            if id_val == db_id:
                return name.upper()
        return f"UNKNOWN ({db_id[:8]}...)"
    
    def create_relation_property(self, database_id, property_name, target_db_id):
        """–°–æ–∑–¥–∞–µ—Ç relation property –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        property_data = {
            "name": property_name,
            "type": "relation",
            "relation": {
                "database_id": target_db_id
            }
        }
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/databases/{database_id}",
                headers=self.headers,
                json={
                    "properties": {
                        property_name: property_data
                    }
                }
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å: {property_name}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {property_name}: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def setup_concept_testing_chain(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –ö–û–ù–¶–ï–ü–¢ + –ò–î–ï–ò = –¢–ï–°–¢–´"""
        
        print(f"\nüéØ –≠–¢–ê–ü 1: –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–¶–ï–ü–¢–´ + –¢–ï–°–¢–´")
        print("=" * 60)
        
        # 1. –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å CONCEPTS ‚Üí TASKS
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ CONCEPTS ‚Üí TASKS...")
        success1 = self.create_relation_property(
            self.databases['concepts'],
            "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏",
            self.databases['tasks']
        )
        
        # 2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CONCEPTS
        print("2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CONCEPTS...")
        
        # –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        success2 = self._add_select_property(
            self.databases['concepts'],
            "–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            ["–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è", "–í —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", "–£—Å–ø–µ—à–µ–Ω", "–ü—Ä–æ–≤–∞–ª–µ–Ω"]
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        success3 = self._add_rich_text_property(
            self.databases['concepts'],
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"
        )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        success4 = self._add_select_property(
            self.databases['concepts'],
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
            ["–í–Ω–µ–¥—Ä—è—Ç—å", "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"]
        )
        
        return success1 and success2 and success3 and success4
    
    def setup_tasks_integration_chain(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –ó–ê–î–ê–ß–ò = –ú–ê–¢–ï–†–ò–ê–õ–´ + –ì–ê–ô–î–´ + KPI"""
        
        print(f"\nüéØ –≠–¢–ê–ü 2: –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–î–ê–ß–ò + –ú–ê–¢–ï–†–ò–ê–õ–´ + –ì–ê–ô–î–´")
        print("=" * 60)
        
        # 1. TASKS ‚Üí MATERIALS
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ TASKS ‚Üí MATERIALS...")
        success1 = self.create_relation_property(
            self.databases['tasks'],
            "–°–≤—è–∑–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            self.databases['materials']
        )
        
        # 2. TASKS ‚Üí GUIDES
        print("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ TASKS ‚Üí GUIDES...")
        success2 = self.create_relation_property(
            self.databases['tasks'],
            "–°–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∞–π–¥—ã",
            self.databases['guides']
        )
        
        # 3. TASKS ‚Üí KPI
        print("3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ TASKS ‚Üí KPI...")
        success3 = self.create_relation_property(
            self.databases['tasks'],
            "KPI –º–µ—Ç—Ä–∏–∫–∏",
            self.databases['kpi']
        )
        
        # 4. MATERIALS ‚Üí TASKS
        print("4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ MATERIALS ‚Üí TASKS...")
        success4 = self.create_relation_property(
            self.databases['materials'],
            "–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            self.databases['tasks']
        )
        
        # 5. GUIDES ‚Üí TASKS
        print("5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ GUIDES ‚Üí TASKS...")
        success5 = self.create_relation_property(
            self.databases['guides'],
            "–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            self.databases['guides']
        )
        
        return success1 and success2 and success3 and success4 and success5
    
    def setup_guides_activity_chain(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –ì–ê–ô–î–´ = –ê–ö–¢–ò–í–ù–û–°–¢–ò + –ú–ï–¢–†–ò–ö–ò + –ê–†–•–ò–í"""
        
        print(f"\nüéØ –≠–¢–ê–ü 3: –ù–ê–°–¢–†–û–ô–ö–ê –ì–ê–ô–î–´ + –ê–ö–¢–ò–í–ù–û–°–¢–ò + –ê–†–•–ò–í")
        print("=" * 60)
        
        # 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        print("1Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π'...")
        success1 = self._add_number_property(
            self.databases['guides'],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
        )
        
        # 2. –°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        print("2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è '–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏'...")
        success2 = self._add_select_property(
            self.databases['guides'],
            "–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏",
            ["–ê–∫—Ç—É–∞–ª—å–Ω—ã–π", "–¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–£—Å—Ç–∞—Ä–µ–ª"]
        )
        
        # 3. –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'...")
        success3 = self._add_date_property(
            self.databases['guides'],
            "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
        
        # 4. –ê–≤—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("4Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è '–ê–≤—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'...")
        success4 = self._add_person_property(
            self.databases['guides'],
            "–ê–≤—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
        
        # 5. –°—Ç–∞—Ç—É—Å –≥–∞–π–¥–∞
        print("5Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è '–°—Ç–∞—Ç—É—Å –≥–∞–π–¥–∞'...")
        success5 = self._add_select_property(
            self.databases['guides'],
            "–°—Ç–∞—Ç—É—Å –≥–∞–π–¥–∞",
            ["–ê–∫—Ç–∏–≤–Ω—ã–π", "–í –¥–æ—Ä–∞–±–æ—Ç–∫–µ", "–ê—Ä—Ö–∏–≤–Ω—ã–π"]
        )
        
        # 6. –ü—Ä–∏—á–∏–Ω–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        print("6Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è '–ü—Ä–∏—á–∏–Ω–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è'...")
        success6 = self._add_rich_text_property(
            self.databases['guides'],
            "–ü—Ä–∏—á–∏–Ω–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
        
        # 7. –ó–∞–º–µ–Ω—è—é—â–∏–π –≥–∞–π–¥
        print("7Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ '–ó–∞–º–µ–Ω—è—é—â–∏–π –≥–∞–π–¥'...")
        success7 = self.create_relation_property(
            self.databases['guides'],
            "–ó–∞–º–µ–Ω—è—é—â–∏–π –≥–∞–π–¥",
            self.databases['guides']  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–≤—è–∑—å
        )
        
        return success1 and success2 and success3 and success4 and success5 and success6 and success7
    
    def _add_select_property(self, database_id, property_name, options):
        """–î–æ–±–∞–≤–ª—è–µ—Ç select property"""
        
        property_data = {
            "name": property_name,
            "type": "select",
            "select": {
                "options": [{"name": option} for option in options]
            }
        }
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/databases/{database_id}",
                headers=self.headers,
                json={
                    "properties": {
                        property_name: property_data
                    }
                }
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ {property_name}")
                return True
            else:
                print(f"   ‚ùå {property_name}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå {property_name}: {e}")
            return False
    
    def _add_rich_text_property(self, database_id, property_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç rich_text property"""
        
        property_data = {
            "name": property_name,
            "type": "rich_text"
        }
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/databases/{database_id}",
                headers=self.headers,
                json={
                    "properties": {
                        property_name: property_data
                    }
                }
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ {property_name}")
                return True
            else:
                print(f"   ‚ùå {property_name}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå {property_name}: {e}")
            return False
    
    def _add_number_property(self, database_id, property_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç number property"""
        
        property_data = {
            "name": property_name,
            "type": "number"
        }
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/databases/{database_id}",
                headers=self.headers,
                json={
                    "properties": {
                        property_name: property_data
                    }
                }
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ {property_name}")
                return True
            else:
                print(f"   ‚ùå {property_name}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå {property_name}: {e}")
            return False
    
    def _add_date_property(self, database_id, property_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç date property"""
        
        property_data = {
            "name": property_name,
            "type": "date"
        }
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/databases/{database_id}",
                headers=self.headers,
                json={
                    "properties": {
                        property_name: property_data
                    }
                }
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ {property_name}")
                return True
            else:
                print(f"   ‚ùå {property_name}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå {property_name}: {e}")
            return False
    
    def _add_person_property(self, database_id, property_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç person property"""
        
        property_data = {
            "name": property_name,
            "type": "people"
        }
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/databases/{database_id}",
                headers=self.headers,
                json={
                    "properties": {
                        property_name: property_data
                    }
                }
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ {property_name}")
                return True
            else:
                print(f"   ‚ùå {property_name}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå {property_name}: {e}")
            return False
    
    def run_full_setup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Å–µ—Ö —Ü–µ–ø–æ—á–µ–∫"""
        
        print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ë–ò–ó–ù–ï–°-–¶–ï–ü–û–ß–ï–ö")
        print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–æ–∫ –º–µ–∂–¥—É –±–∞–∑–∞–º–∏")
        print("=" * 80)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        relations_map = self.analyze_current_relations()
        
        # –≠—Ç–∞–ø 1: –ö–æ–Ω—Ü–µ–ø—Ç—ã + –¢–µ—Å—Ç—ã
        print(f"\nüìã –≠–¢–ê–ü 1: –ö–û–ù–¶–ï–ü–¢–´ + –¢–ï–°–¢–´")
        concept_success = self.setup_concept_testing_chain()
        
        # –≠—Ç–∞–ø 2: –ó–∞–¥–∞—á–∏ + –ú–∞—Ç–µ—Ä–∏–∞–ª—ã + –ì–∞–π–¥—ã
        print(f"\nüìã –≠–¢–ê–ü 2: –ó–ê–î–ê–ß–ò + –ú–ê–¢–ï–†–ò–ê–õ–´ + –ì–ê–ô–î–´")
        tasks_success = self.setup_tasks_integration_chain()
        
        # –≠—Ç–∞–ø 3: –ì–∞–π–¥—ã + –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ + –ê—Ä—Ö–∏–≤
        print(f"\nüìã –≠–¢–ê–ü 3: –ì–ê–ô–î–´ + –ê–ö–¢–ò–í–ù–û–°–¢–ò + –ê–†–•–ò–í")
        guides_success = self.setup_guides_activity_chain()
        
        # –ò—Ç–æ–≥–∏
        print(f"\nüìä –ò–¢–û–ì–ò –ù–ê–°–¢–†–û–ô–ö–ò")
        print("=" * 50)
        
        if concept_success:
            print("‚úÖ –≠–¢–ê–ü 1: –ö–æ–Ω—Ü–µ–ø—Ç—ã + –¢–µ—Å—Ç—ã - –£–°–ü–ï–®–ù–û")
        else:
            print("‚ùå –≠–¢–ê–ü 1: –ö–æ–Ω—Ü–µ–ø—Ç—ã + –¢–µ—Å—Ç—ã - –û–®–ò–ë–ö–ò")
        
        if tasks_success:
            print("‚úÖ –≠–¢–ê–ü 2: –ó–∞–¥–∞—á–∏ + –ú–∞—Ç–µ—Ä–∏–∞–ª—ã + –ì–∞–π–¥—ã - –£–°–ü–ï–®–ù–û")
        else:
            print("‚ùå –≠–¢–ê–ü 2: –ó–∞–¥–∞—á–∏ + –ú–∞—Ç–µ—Ä–∏–∞–ª—ã + –ì–∞–π–¥—ã - –û–®–ò–ë–ö–ò")
        
        if guides_success:
            print("‚úÖ –≠–¢–ê–ü 3: –ì–∞–π–¥—ã + –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ + –ê—Ä—Ö–∏–≤ - –£–°–ü–ï–®–ù–û")
        else:
            print("‚ùå –≠–¢–ê–ü 3: –ì–∞–π–¥—ã + –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ + –ê—Ä—Ö–∏–≤ - –û–®–ò–ë–ö–ò")
        
        if concept_success and tasks_success and guides_success:
            print(f"\nüéâ –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –ë–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –ù–ê–°–¢–†–û–ô–ö–ï")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —ç—Ç–∞–ø—ã")
        
        return concept_success and tasks_success and guides_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        setup = BusinessChainSetup()
        success = setup.run_full_setup()
        
        if success:
            print(f"\n‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("üìñ –°–º–æ—Ç—Ä–∏—Ç–µ BUSINESS_CHAIN_SETUP.md –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        else:
            print(f"\n‚ùå –ù–ê–°–¢–†–û–ô–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 