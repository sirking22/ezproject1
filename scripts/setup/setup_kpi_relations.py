#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π KPI —Å RDT –∏ TASKS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
"""

import os
import requests
import json
import logging
from typing import Dict, Any
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_BASE_URL = "https://api.notion.com/v1"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json", 
    "Notion-Version": "2022-06-28"
}

# ID –±–∞–∑
KPI_DB = "1d6ace03d9ff80bfb809ed21dfd2150c"
RDT_DB = "195ace03d9ff80c1a1b0d236ec3564d2"
TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"

def analyze_kpi_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É KPI –±–∞–∑—ã"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã KPI –±–∞–∑—ã...")
    
    try:
        response = requests.get(f"{NOTION_BASE_URL}/databases/{KPI_DB}", headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {e}")
        return None
    
    data = response.json()
    properties = data.get('properties', {})
    
    print(f"üìä KPI –±–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(properties)} –ø–æ–ª–µ–π:")
    
    for prop_name, prop_data in properties.items():
        prop_type = prop_data.get('type')
        print(f"  ‚Ä¢ {prop_name}: {prop_type}")
        
        if prop_type == 'relation':
            target_db = prop_data.get('relation', {}).get('database_id')
            print(f"    ‚Üí —Å–≤—è–∑—å —Å: {target_db}")
    
    return properties

def analyze_rdt_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É RDT –±–∞–∑—ã"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã RDT –±–∞–∑—ã...")
    
    try:
        response = requests.get(f"{NOTION_BASE_URL}/databases/{RDT_DB}", headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {e}")
        return None
    
    data = response.json()
    properties = data.get('properties', {})
    
    print(f"üìä RDT –±–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(properties)} –ø–æ–ª–µ–π:")
    
    for prop_name, prop_data in properties.items():
        prop_type = prop_data.get('type')
        print(f"  ‚Ä¢ {prop_name}: {prop_type}")
        
        if prop_type == 'relation':
            target_db = prop_data.get('relation', {}).get('database_id')
            print(f"    ‚Üí —Å–≤—è–∑—å —Å: {target_db}")
    
    return properties

def get_sample_records(db_id, db_name, limit=3):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã"""
    print(f"\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ {db_name}...")
    
    response = requests.post(
        f"{NOTION_BASE_URL}/databases/{db_id}/query",
        headers=HEADERS,
        json={"page_size": limit}
    )
    
    if response.status_code == 200:
        data = response.json()
        results = data.get('results', [])
        
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π:")
        
        for i, record in enumerate(results, 1):
            properties = record.get('properties', {})
            title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for prop_name, prop_data in properties.items():
                if prop_data.get('type') == 'title':
                    title_list = prop_data.get('title', [])
                    if title_list:
                        title = title_list[0].get('plain_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    break
                    
            print(f"  {i}. {title}")
        
        return results
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        return []

def create_optimization_plan(kpi_props, rdt_props, rdt_kpi_fields):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ KPI"""
    print("\nüéØ –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò KPI:")
    print("=" * 50)
    
    plan = {
        "immediate_actions": [],
        "relations_to_create": [],
        "formulas_to_update": [],
        "new_properties": []
    }
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–≤—è–∑–µ–π
    print("üìä –¢–ï–ö–£–©–ò–ï –°–í–Ø–ó–ò:")
    for prop_name, prop_data in kpi_props.items():
        if prop_data.get('type') == 'relation':
            target_db = prop_data.get('relation', {}).get('database_id')
            print(f"  ‚Ä¢ {prop_name} ‚Üí {target_db}")
            
            if target_db == RDT_DB:
                plan["immediate_actions"].append(f"‚úÖ –°–≤—è–∑—å —Å RDT —É–∂–µ –µ—Å—Ç—å: {prop_name}")
            elif target_db == TASKS_DB:
                plan["immediate_actions"].append(f"‚úÖ –°–≤—è–∑—å —Å TASKS —É–∂–µ –µ—Å—Ç—å: {prop_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ —Å–≤—è–∑–∏
    if not any(prop.get('relation', {}).get('database_id') == RDT_DB for prop in kpi_props.values()):
        plan["relations_to_create"].append("üîó –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å KPI ‚Üî RDT")
        
    if not any(prop.get('relation', {}).get('database_id') == TASKS_DB for prop in kpi_props.values()):
        plan["relations_to_create"].append("üîó –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å KPI ‚Üî TASKS")
    
    # RDT KPI –ø–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print(f"\nüìà RDT KPI –ü–û–õ–Ø –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    for field in rdt_kpi_fields:
        print(f"  ‚Ä¢ {field}")
        plan["formulas_to_update"].append(f"üìä –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å {field} –≤ KPI –±–∞–∑—É")
    
    # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    plan["new_properties"].extend([
        "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫ (–∞–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç)",
        "‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω vs —Ñ–∞–∫—Ç)", 
        "üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á",
        "üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ —à–∞–±–ª–æ–Ω–∞–º"
    ])
    
    return plan

def main():
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê KPI RELATIONS")
    print("=" * 40)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã
    kpi_props = analyze_kpi_structure()
    rdt_props, rdt_kpi_fields = analyze_rdt_structure()
    
    if not kpi_props or not rdt_props:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
    kpi_records = get_sample_records(KPI_DB, "KPI")
    rdt_records = get_sample_records(RDT_DB, "RDT") 
    tasks_records = get_sample_records(TASKS_DB, "TASKS")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
    plan = create_optimization_plan(kpi_props, rdt_props, rdt_kpi_fields)
    
    # –í—ã–≤–æ–¥–∏–º –ø–ª–∞–Ω
    print("\nüéØ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
    print("-" * 30)
    
    if plan["immediate_actions"]:
        print("\n‚úÖ –ì–û–¢–û–í–û:")
        for action in plan["immediate_actions"]:
            print(f"  {action}")
    
    if plan["relations_to_create"]:
        print("\nüîó –°–û–ó–î–ê–¢–¨ –°–í–Ø–ó–ò:")
        for relation in plan["relations_to_create"]:
            print(f"  {relation}")
    
    if plan["formulas_to_update"]:
        print("\nüìä –û–ë–ù–û–í–ò–¢–¨ –§–û–†–ú–£–õ–´:")
        for formula in plan["formulas_to_update"]:
            print(f"  {formula}")
    
    if plan["new_properties"]:
        print("\n‚ûï –î–û–ë–ê–í–ò–¢–¨ –°–í–û–ô–°–¢–í–ê:")
        for prop in plan["new_properties"]:
            print(f"  {prop}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
    with open("kpi_optimization_plan.json", 'w', encoding='utf-8') as f:
        json.dump({
            "kpi_structure": kpi_props,
            "rdt_structure": rdt_props, 
            "rdt_kpi_fields": rdt_kpi_fields,
            "optimization_plan": plan,
            "next_steps": [
                "1. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ relations",
                "2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫",
                "3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å RDT KPI –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É",
                "4. –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"
            ]
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: kpi_optimization_plan.json")
    print("\nüöÄ –ì–û–¢–û–í–û! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.")

if __name__ == "__main__":
    main() 