#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ø–æ—á–∫–∏ TASKS_TEMPLATES ‚Üí TASKS ‚Üí GUIDES
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≥–∞–π–¥–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import requests
import json
import logging
from typing import Dict, Any, List
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_BASE_URL = "https://api.notion.com/v1"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# ID –±–∞–∑
TEMPLATES_DB = "1f2ace03d9ff806db364e869f27d83de"
TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
GUIDES_DB = "47c6086858d442ebaeceb4fad1b23ba3"

def analyze_templates_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã TASKS_TEMPLATES...")
    
    try:
    response = requests.get(f"{NOTION_BASE_URL}/databases/{TEMPLATES_DB}", headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {e}")
        return None
    
        data = response.json()
        properties = data.get('properties', {})
        
        print(f"üìä TEMPLATES –±–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(properties)} –ø–æ–ª–µ–π:")
        
        for prop_name, prop_data in properties.items():
            prop_type = prop_data.get('type')
            print(f"  ‚Ä¢ {prop_name}: {prop_type}")
            
            if prop_type == 'relation':
                target_db = prop_data.get('relation', {}).get('database_id')
                print(f"    ‚Üí —Å–≤—è–∑—å —Å: {target_db}")
        
        return properties

def get_templates_records():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    
    try:
    response = requests.post(
        f"{NOTION_BASE_URL}/databases/{TEMPLATES_DB}/query",
        headers=HEADERS,
        json={"page_size": 100}
    )
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {e}")
        return []
    
        data = response.json()
        results = data.get('results', [])
        
        templates = []
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á:")
        
        for i, record in enumerate(results, 1):
            properties = record.get('properties', {})
            template_data = {"id": record.get('id')}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for prop_name, prop_data in properties.items():
                prop_type = prop_data.get('type')
                
                if prop_type == 'title':
                    title_list = prop_data.get('title', [])
                    if title_list:
                        template_data['title'] = title_list[0].get('plain_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                elif prop_type == 'select':
                    select_data = prop_data.get('select')
                    if select_data:
                        template_data[prop_name] = select_data.get('name')
                elif prop_type == 'number':
                    template_data[prop_name] = prop_data.get('number')
                elif prop_type == 'relation':
                    relations = prop_data.get('relation', [])
                    template_data[prop_name] = [rel.get('id') for rel in relations]
            
            templates.append(template_data)
            title = template_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"  {i}. {title}")
        
        return templates

def analyze_polygraphy_templates(templates):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏"""
    print("\nüé® –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏...")
    
    polygraphy_templates = []
    polygraphy_keywords = ['–ø–æ–ª–∏–≥—Ä–∞—Ñ', '–ø–µ—á–∞—Ç', '–ª–∏—Å—Ç–æ–≤–∫', '—Ñ–ª–∞–µ—Ä', '–±—É–∫–ª–µ—Ç', '–¥–∏–∑–∞–π–Ω']
    
    for template in templates:
        title = template.get('title', '').lower()
        
        # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(keyword in title for keyword in polygraphy_keywords):
            polygraphy_templates.append(template)
            print(f"  üéØ –ù–ê–ô–î–ï–ù–û: {template.get('title')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–µ–≥–∏
        for key, value in template.items():
            if isinstance(value, str) and any(keyword in value.lower() for keyword in polygraphy_keywords):
                if template not in polygraphy_templates:
                    polygraphy_templates.append(template)
                    print(f"  üéØ –ù–ê–ô–î–ï–ù–û (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏): {template.get('title')}")
    
    print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤: {len(polygraphy_templates)}")
    return polygraphy_templates

def check_tasks_connection(templates):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑—å —Å –æ–±—ã—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –∑–∞–¥–∞—á–∞–º–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É TASKS
    try:
    response = requests.get(f"{NOTION_BASE_URL}/databases/{TASKS_DB}", headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {e}")
        return False
    
    data = response.json()
    properties = data.get('properties', {})
    
    # –ò—â–µ–º —Å–≤—è–∑—å —Å templates
    template_relation = None
    for prop_name, prop_data in properties.items():
        if prop_data.get('type') == 'relation':
            target_db = prop_data.get('relation', {}).get('database_id')
            if target_db == TEMPLATES_DB:
                template_relation = prop_name
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å: {prop_name} ‚Üí TEMPLATES")
                break
    
    if not template_relation:
        print("‚ùå –°–≤—è–∑—å TASKS ‚Üí TEMPLATES –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    try:
    query_response = requests.post(
        f"{NOTION_BASE_URL}/databases/{TASKS_DB}/query",
        headers=HEADERS,
        json={
            "filter": {
                "property": template_relation,
                "relation": {
                    "is_not_empty": True
                }
            },
            "page_size": 5
        }
    )
        query_response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {e}")
        return False
    
        query_data = query_response.json()
        linked_tasks = len(query_data.get('results', []))
        print(f"üìä –ó–∞–¥–∞—á —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏: {linked_tasks}")
        return linked_tasks > 0

def create_template_optimization_plan(templates, polygraphy_templates, has_tasks_connection):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüéØ –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –®–ê–ë–õ–û–ù–û–í:")
    print("=" * 50)
    
    plan = {
        "current_status": {
            "total_templates": len(templates),
            "polygraphy_templates": len(polygraphy_templates), 
            "tasks_connection": has_tasks_connection
        },
        "immediate_actions": [],
        "polygraphy_focus": [],
        "guides_integration": [],
        "metrics_setup": []
    }
    
    # –°—Ç–∞—Ç—É—Å —Å–≤—è–∑–µ–π
    if has_tasks_connection:
        plan["immediate_actions"].append("‚úÖ –°–≤—è–∑—å TASKS ‚Üî TEMPLATES —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        plan["immediate_actions"].append("‚ùå –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å TASKS ‚Üî TEMPLATES")
    
    # –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è —Ñ–æ–∫—É—Å
    plan["polygraphy_focus"].extend([
        f"üé® {len(polygraphy_templates)} –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ",
        "üìã –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏",
        "üîó –°–≤—è–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å –≥–∞–π–¥–∞–º–∏",
        "‚è±Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'"
    ])
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–∞–π–¥–∞–º–∏
    plan["guides_integration"].extend([
        "üìö –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å TEMPLATES ‚Üí GUIDES",
        "ü§ñ –ê–≤—Ç–æ–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≥–∞–π–¥–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
        "üìñ –°–æ–∑–¥–∞—Ç—å –≥–∞–π–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏",
        "‚úÖ –ß–µ–∫–ª–∏—Å—Ç—ã –≤ –≥–∞–π–¥–∞—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"
    ])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫
    plan["metrics_setup"].extend([
        "‚è±Ô∏è –ê–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —à–∞–±–ª–æ–Ω—É",
        "üìä –°–≤—è–∑—å —Å KPI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "üéØ –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫)",
        "üìà Dashboard –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"
    ])
    
    return plan

def main():
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê TEMPLATES CHAIN")
    print("=" * 40)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    templates_props = analyze_templates_structure()
    if not templates_props:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
    templates = get_templates_records()
    if not templates:
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é
    polygraphy_templates = analyze_polygraphy_templates(templates)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –∑–∞–¥–∞—á–∞–º–∏
    has_tasks_connection = check_tasks_connection(templates)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
    plan = create_template_optimization_plan(templates, polygraphy_templates, has_tasks_connection)
    
    # –í—ã–≤–æ–¥–∏–º –ø–ª–∞–Ω
    print("\nüéØ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
    print("-" * 30)
    
    print(f"\nüìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {plan['current_status']['total_templates']}")
    print(f"  ‚Ä¢ –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è: {plan['current_status']['polygraphy_templates']}")
    print(f"  ‚Ä¢ –°–≤—è–∑—å —Å –∑–∞–¥–∞—á–∞–º–∏: {'‚úÖ' if plan['current_status']['tasks_connection'] else '‚ùå'}")
    
    print(f"\nüé® –§–û–ö–£–° –ù–ê –ü–û–õ–ò–ì–†–ê–§–ò–ò:")
    for action in plan["polygraphy_focus"]:
        print(f"  {action}")
    
    print(f"\nüìö –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ì–ê–ô–î–ê–ú–ò:")
    for action in plan["guides_integration"]:
        print(f"  {action}")
    
    print(f"\nüìä –ù–ê–°–¢–†–û–ô–ö–ê –ú–ï–¢–†–ò–ö:")
    for action in plan["metrics_setup"]:
        print(f"  {action}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
    result_data = {
        "templates_structure": templates_props,
        "all_templates": templates,
        "polygraphy_templates": polygraphy_templates,
        "optimization_plan": plan,
        "next_steps": [
            "1. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤—è–∑–∏",
            "2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã", 
            "3. –°–≤—è–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Å –≥–∞–π–¥–∞–º–∏",
            "4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫",
            "5. –°–æ–∑–¥–∞—Ç—å dashboard –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏"
        ]
    }
    
    with open("templates_optimization_plan.json", 'w', encoding='utf-8') as f:
        json.dump(result_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: templates_optimization_plan.json")
    print("\nüöÄ –ì–û–¢–û–í–û! –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1")

if __name__ == "__main__":
    main() 