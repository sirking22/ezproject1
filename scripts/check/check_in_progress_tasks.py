#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress
"""

import asyncio
import json
import logging
from notion_mcp_server import NotionMCPServer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_in_progress_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞
    server = NotionMCPServer()
    
    logger.info("üîç –ò—â–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress
    tasks_result = await server.get_pages({
        "database_id": "d09df250ce7e4e0d9fbe4e036d320def",
        "filter": {
            "property": "–°—Ç–∞—Ç—É—Å",
            "status": {
                "equals": "In Progress"
            }
        }
    })
    
    if not tasks_result:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    tasks_data = json.loads(tasks_result[0].text)
    tasks = tasks_data.get("results", [])
    
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress: {len(tasks)}")
    
    for i, task in enumerate(tasks, 1):
        task_id = task["id"]
        task_title = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        for prop_name, prop_value in task["properties"].items():
            if prop_value.get("type") == "title" and prop_value.get("title"):
                task_title = prop_value["title"][0]["plain_text"]
                break
        
        logger.info(f"{i}. {task_title}")
        logger.info(f"   ID: {task_id}")
        logger.info(f"   URL: https://notion.so/{task_id.replace('-', '')}")
        logger.info("")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await check_in_progress_tasks()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 