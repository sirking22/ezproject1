#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ Teams –≤ Notion
"""

import json
import os
import sys
from notion_client import Client

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    notion_token = os.getenv("NOTION_TOKEN")
    if not notion_token:
        raise ValueError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    return notion_token

def get_all_teams_members():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã Teams"""
    notion_token = load_env()
    client = Client(auth=notion_token)
    
    # ID –±–∞–∑—ã Teams
    teams_db_id = "1d6ace03d9ff805787b9ec31f5b4dde7"
    
    try:
        response = client.databases.query(
            database_id=teams_db_id,
            page_size=100
        )
        
        return response["results"]
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return []

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –°–û–¢–†–£–î–ù–ò–ö–û–í (TEAMS)")
    print("=" * 50)
    
    teams_members = get_all_teams_members()
    
    if not teams_members:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return
    
    print(f"üìä –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(teams_members)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    for i, member in enumerate(teams_members, 1):
        print(f"\nüë§ –°–û–¢–†–£–î–ù–ò–ö {i}:")
        print(f"ID: {member['id']}")
        
        properties = member.get("properties", {})
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        name_prop = properties.get("Name", {})
        if name_prop.get("title"):
            name = name_prop["title"][0]["plain_text"]
            print(f"–ò–º—è: {name}")
        
        # Email
        email_prop = properties.get("Email", {})
        if email_prop.get("email"):
            email = email_prop["email"]
            print(f"Email: {email}")
        
        # –†–æ–ª—å
        role_prop = properties.get("Role", {})
        if role_prop.get("select"):
            role = role_prop["select"]["name"]
            print(f"–†–æ–ª—å: {role}")
        
        # –°—Ç–∞—Ç—É—Å
        status_prop = properties.get("Status", {})
        if status_prop.get("status"):
            status = status_prop["status"]["name"]
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
        
        # –î—Ä—É–≥–∏–µ –ø–æ–ª—è
        print("üìã –í—Å–µ –ø–æ–ª—è:")
        for prop_name, prop_value in properties.items():
            print(f"  {prop_name}: {prop_value.get('type', 'unknown')}")
            if prop_value.get('type') == 'people':
                people = prop_value.get('people', [])
                for person in people:
                    print(f"    - {person.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {person.get('id')})")
            elif prop_value.get('type') == 'select' and prop_value.get('select'):
                print(f"    - {prop_value['select']['name']}")
            elif prop_value.get('type') == 'status' and prop_value.get('status'):
                print(f"    - {prop_value['status']['name']}")
        
        print("-" * 40)

if __name__ == "__main__":
    main() 