#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ì–ê–ô–î ‚Üí –ó–ê–î–ê–ß–ê + –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –ü–û–î–ó–ê–î–ê–ß–ò
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
CHECKLISTS_DB = "47c6086858d442ebaeceb4fad1b23ba3"  # –ë–∞–∑–∞ –≥–∞–π–¥–æ–≤/—á–µ–∫–ª–∏—Å—Ç–æ–≤

async def create_task_from_guide(guide_id: str, task_title: str, task_url: str = None):
    """
    –ü–†–ê–í–ò–õ–¨–ù–û: –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    Args:
        guide_id: ID –≥–∞–π–¥–∞ –≤ Notion
        task_title: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        task_url: URL –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≥–∞–π–¥
        guide = await client.pages.retrieve(page_id=guide_id)
        guide_title = guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–∞–π–¥')
        
        # 2. –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –≥–∞–π–¥–µ
        guide_blocks = await client.blocks.children.list(block_id=guide_id)
        blocks = guide_blocks.get('results', [])
        
        subtasks = []
        for block in blocks:
            if block.get('type') == 'to_do':
                content = block['to_do']['rich_text'][0]['text']['content'] if block['to_do']['rich_text'] else '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'
                checked = block['to_do']['checked']
                subtasks.append({
                    'content': content,
                    'checked': checked
                })
        
        if not subtasks:
            print("‚ùå –ü–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≥–∞–π–¥–µ")
            return None
        
        # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_data = {
            "parent": {"database_id": TASKS_DB},
            "properties": {
                "–ó–∞–¥–∞—á–∞": {
                    "title": [{
                        "type": "text",
                        "text": {"content": task_title}
                    }]
                },
                "üì¨ –ì–∞–π–¥—ã": {
                    "relation": [{"id": guide_id}]
                },
                "–°—Ç–∞—Ç—É—Å": {
                    "status": {"name": "In Progress"}
                }
            }
        }
        
        if task_url:
            task_data["properties"]["–§ –∑–∞–¥–∞—á–∏"] = {"url": task_url}
        
        new_task = await client.pages.create(**task_data)
        task_id = new_task['id']
        
        # 4. –î–£–ë–õ–ò–†–£–ï–ú –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑–µ –≥–∞–π–¥–æ–≤
        checklist_pages = []
        for i, subtask in enumerate(subtasks, 1):
            checklist_data = {
                "parent": {"database_id": CHECKLISTS_DB},
                "properties": {
                    "Name": {
                        "title": [{
                            "type": "text",
                            "text": {"content": f"{i}. {subtask['content']}"}
                        }]
                    },
                    "–°—Ç–∞—Ç—É—Å": {
                        "status": {"name": "–ì–æ—Ç–æ–≤" if subtask['checked'] else "–°—Ç–∞—Ä—Ç"}
                    },
                    "–î–∏–∑–∞–π–Ω –∑–∞–¥–∞—á–∏": {
                        "relation": [{"id": task_id}]
                    }
                }
            }
            
            checklist_page = await client.pages.create(**checklist_data)
            checklist_pages.append(checklist_page['id'])
        
        task_url = f"https://www.notion.so/dreamclub22/{task_id.replace('-', '')}"
        guide_url = f"https://www.notion.so/dreamclub22/{guide_id.replace('-', '')}"
        
        return {
            'task_id': task_id,
            'task_url': task_url,
            'guide_url': guide_url,
            'guide_title': guide_title,
            'checklist_pages': checklist_pages,
            'subtasks_count': len(subtasks)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ì–∞–π–¥ —É–ø–∞–∫–æ–≤–∫–∏
    guide_id = "20face03-d9ff-8176-9357-ee1f5c52e5a5"
    
    result = asyncio.run(create_task_from_guide(
        guide_id=guide_id,
        task_title="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ –≥–∞–π–¥–∞ —É–ø–∞–∫–æ–≤–∫–∏",
        task_url="https://example.com/task"
    ))
    
    if result:
        print(f"‚úÖ –£–°–ü–ï–•!")
        print(f"üìã –ó–∞–¥–∞—á–∞: {result['task_url']}")
        print(f"üìö –ì–∞–π–¥: {result['guide_url']}")
        print(f"üìã –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á: {result['subtasks_count']}")
        print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞: {result['guide_title']}")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê!") 