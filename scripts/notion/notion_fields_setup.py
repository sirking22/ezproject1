#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ Notion –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
"""

import os
import json
import time
from typing import Dict, Any
import requests
from dotenv import load_dotenv
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

load_dotenv()

class NotionFieldsManager:
    def __init__(self):
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.platforms_db_id = os.getenv("NOTION_PLATFORMS_DB_ID")
        self.headers = {
            "Authorization": f"Bearer {self.notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
    def load_fields_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π –∏–∑ JSON"""
        with open("notion_fields_templates.json", "r", encoding="utf-8") as f:
            return json.load(f)
    
    def get_current_properties(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        url = f"https://api.notion.com/v1/databases/{self.platforms_db_id}"
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
        except requests.RequestException as e:
            logger.error(f"Error in GET request: {e}")
            return {}
        
        return response.json().get("properties", {})
    
    def add_property(self, property_name: str, property_config: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        url = f"https://api.notion.com/v1/databases/{self.platforms_db_id}"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {
            "properties": {
                property_name: property_config
            }
        }
        
        try:
            response = requests.post(url, headers=self.headers, json={})
            response.raise_for_status()
        except requests.RequestException as e:
            logger.error(f"Error in POST request: {e}")
            return False
        
        return True
    
    def setup_all_fields(self) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª–µ–π –≤ Notion...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.load_fields_config()
        fields_config = config["database_fields_config"]["fields"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        current_properties = self.get_current_properties()
        
        print(f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è –≤ –±–∞–∑–µ: {len(current_properties)}")
        print(f"üéØ –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: {len(fields_config)} –ø–æ–ª–µ–π")
        
        success_count = 0
        skip_count = 0
        
        for field_name, field_config in fields_config.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ
            if field_name in current_properties:
                print(f"‚è≠Ô∏è  –ü–æ–ª–µ '{field_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                skip_count += 1
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ
            if self.add_property(field_name, field_config):
                success_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
        
        print(f"\nüìà –ò–¢–û–ì–ò –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {success_count}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skip_count}")
        print(f"üéØ –í—Å–µ–≥–æ –ø–æ–ª–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(fields_config)}")
        
    def fill_default_values(self) -> None:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        print("\nüéØ –ó–∞–ø–æ–ª–Ω—è—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è...")
        
        config = self.load_fields_config()
        default_values = config["default_values"]["platforms"]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        url = f"https://api.notion.com/v1/databases/{self.platforms_db_id}/query"
        response = requests.post(url, headers=self.headers, json={})
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {response.status_code}")
            return
        
        platforms = response.json().get("results", [])
        
        for platform in platforms:
            platform_id = platform["id"]
            
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platform_name = None
            if "Platforms" in platform["properties"]:
                title_prop = platform["properties"]["Platforms"]
                if title_prop["type"] == "title" and title_prop["title"]:
                    platform_name = title_prop["title"][0]["text"]["content"]
            
            if not platform_name or platform_name not in default_values:
                print(f"‚è≠Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '{platform_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–µ—Ñ–æ–ª—Ç–∞—Ö")
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = {}
            defaults = default_values[platform_name]
            
            for field, value in defaults.items():
                if isinstance(value, (int, float)):
                    updates[field] = {"number": value}
                elif isinstance(value, str):
                    if field.endswith("Rate") or field == "vs Industry":
                        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–ª—è
                        updates[field] = {"number": float(value) if value else 0}
                    else:
                        # Select –ø–æ–ª—è
                        updates[field] = {"select": {"name": value}}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            update_url = f"https://api.notion.com/v1/pages/{platform_id}"
            update_data = {"properties": updates}
            
            response = requests.patch(update_url, headers=self.headers, json=update_data)
            
            if response.status_code == 200:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è '{platform_name}'")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è '{platform_name}': {response.status_code}")
            
            time.sleep(0.5)
    
    def validate_setup(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É...")
        
        current_properties = self.get_current_properties()
        config = self.load_fields_config()
        expected_fields = config["database_fields_config"]["fields"]
        
        missing_fields = []
        for field_name in expected_fields:
            if field_name not in current_properties:
                missing_fields.append(field_name)
        
        if missing_fields:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        else:
            print("‚úÖ –í—Å–µ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
        formula_fields = []
        select_fields = []
        number_fields = []
        
        for field_name, field_data in current_properties.items():
            if field_data["type"] == "formula":
                formula_fields.append(field_name)
            elif field_data["type"] == "select":
                select_fields.append(field_name)
            elif field_data["type"] == "number":
                number_fields.append(field_name)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–ï–ô:")
        print(f"üî¢ Number –ø–æ–ª–µ–π: {len(number_fields)}")
        print(f"üìã Select –ø–æ–ª–µ–π: {len(select_fields)}")
        print(f"‚ö° Formula –ø–æ–ª–µ–π: {len(formula_fields)}")
        print(f"üìÖ –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(current_properties)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ù–ê–°–¢–†–û–ô–ö–ê NOTION ANALYTICS DASHBOARD")
    print("=" * 50)
    
    manager = NotionFieldsManager()
    
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è
        manager.setup_all_fields()
        
        # 2. –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è  
        manager.fill_default_values()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        manager.validate_setup()
        
        print(f"\nüöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è Notion –±–∞–∑–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 