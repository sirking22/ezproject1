#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
CHECKLISTS_DB = "9c5f4269d61449b6a7485579a3c21da3"

async def find_and_fix_tasks_with_checklists():
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print("üîç –ü–û–ò–°–ö –ó–ê–î–ê–ß –° –ß–ï–ö–õ–ò–°–¢–ê–ú–ò –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø")
    print("=" * 60)
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–ª–∏—Å—Ç—ã
        print("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤...")
        
        checklists_response = await client.databases.query(
            database_id=CHECKLISTS_DB,
            page_size=100
        )
        
        checklists = checklists_response.get('results', [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklists)}")
        
        # 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–µ–∫–ª–∏—Å—Ç—ã –ø–æ –∑–∞–¥–∞—á–∞–º
        tasks_with_checklists = {}
        
        for checklist in checklists:
            task_relations = checklist['properties'].get('–ó–∞–¥–∞—á–∏', {}).get('relation', [])
            for task_relation in task_relations:
                task_id = task_relation['id']
                if task_id not in tasks_with_checklists:
                    tasks_with_checklists[task_id] = []
                tasks_with_checklists[task_id].append(checklist)
        
        print(f"‚úÖ –ó–∞–¥–∞—á —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏: {len(tasks_with_checklists)}")
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
        for task_id, task_checklists in tasks_with_checklists.items():
            print(f"\nüéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {task_id}")
            print(f"   üìã –ß–µ–∫–ª–∏—Å—Ç–æ–≤: {len(task_checklists)}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                task = await client.pages.retrieve(page_id=task_id)
                task_title = task['properties'].get('–§ –∑–∞–¥–∞—á–∏', {}).get('url', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–µ–∫–ª–∏—Å—Ç—ã –≤ –∑–∞–¥–∞—á–µ
                task_blocks = await client.blocks.children.list(block_id=task_id)
                existing_checklists = [block for block in task_blocks.get('results', []) 
                                     if block['type'] == 'heading_2' and 
                                     'üìã' in block['heading_2'].get('rich_text', [{}])[0].get('text', {}).get('content', '')]
                
                if existing_checklists:
                    print(f"   ‚ö†Ô∏è –ß–µ–∫–ª–∏—Å—Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ –∑–∞–¥–∞—á–µ ({len(existing_checklists)})")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç—ã –≤ –∑–∞–¥–∞—á—É
                print(f"   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤...")
                
                for checklist in task_checklists:
                    checklist_title = checklist['properties'].get('–ü–æ–¥–∑–∞–¥–∞—á–∏', {}).get('title', [{}])[0].get('text', {}).get('content', '–ß–µ–∫–ª–∏—Å—Ç')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ–∫–ª–∏—Å—Ç–∞
                    checklist_blocks = await client.blocks.children.list(block_id=checklist['id'])
                    
                    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
                    task_blocks = [
                        {
                            "type": "heading_2",
                            "heading_2": {
                                "rich_text": [{"type": "text", "text": {"content": f"üìã {checklist_title}"}}]
                            }
                        }
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞
                    for block in checklist_blocks.get('results', []):
                        if block['type'] == 'to_do':
                            rich_text = block['to_do'].get('rich_text', [])
                            checked = block['to_do'].get('checked', False)
                            if rich_text:
                                task_blocks.append({
                                    "type": "to_do",
                                    "to_do": {
                                        "rich_text": [{"type": "text", "text": {"content": rich_text[0]['text']['content']}}],
                                        "checked": checked
                                    }
                                })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    task_blocks.append({
                        "type": "divider",
                        "divider": {}
                    })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –≤ –∑–∞–¥–∞—á—É
                    await client.blocks.children.append(
                        block_id=task_id,
                        children=task_blocks
                    )
                
                print(f"   ‚úÖ –ß–µ–∫–ª–∏—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–¥–∞—á—É")
                print(f"   üîó –°—Å—ã–ª–∫–∞: https://www.notion.so/dreamclub22/{task_id.replace('-', '')}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
        
        print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {len(tasks_with_checklists)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(find_and_fix_tasks_with_checklists()) 