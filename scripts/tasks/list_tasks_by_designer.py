#!/usr/bin/env python3
"""
–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä—É —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
"""

import asyncio
import sys
import json
from notion_mcp_server import NotionMCPServer
import os
from typing import Optional

async def get_user_uuid(server, designer_name: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏"""
    try:
        users = await server.get_users()
        for user in users:
            name = user.get('name', '')
            if designer_name in name:
                user_id = user.get('id')
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (UUID: {user_id})")
                return user_id
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{designer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return None

async def get_all_users_with_uuid(server):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö UUID"""
    try:
        users = await server.get_users()
        user_map = {}
        for user in users:
            name = user.get('name', '')
            user_id = user.get('id')
            user_map[name] = user_id
            print(f"üë§ {name} (UUID: {user_id})")
        return user_map
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}

async def get_designer_uuid_from_tasks(server, tasks_db_id, designer_name):
    """–ü–æ–ª—É—á–∏—Ç—å UUID –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∏–∑ –∑–∞–¥–∞—á"""
    try:
        # –ü–æ–ª—É—á–∞—é –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–∏—Å–∫–∞ UUID
        filter_dict = {
            "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
            "people": {
                "is_not_empty": True
            }
        }
        
        tasks = await server.get_pages(tasks_db_id, filter_dict)
        
        # –ò—â—É UUID –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –≤ –∑–∞–¥–∞—á–∞—Ö
        for task in tasks[:50]:  # –ü—Ä–æ–≤–µ—Ä—è—é –ø–µ—Ä–≤—ã–µ 50 –∑–∞–¥–∞—á
            properties = task.get('properties', {})
            participants = properties.get('–£—á–∞—Å—Ç–Ω–∏–∫–∏', {})
            people = participants.get('people', []) if isinstance(participants, dict) else []
            
            for person in people:
                name = person.get('name', '')
                if designer_name.lower() in name.lower():
                    user_id = person.get('id')
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–∏–∑–∞–π–Ω–µ—Ä: {name} (UUID: {user_id})")
                    return user_id
        
        print(f"‚ùå –î–∏–∑–∞–π–Ω–µ—Ä '{designer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–¥–∞—á–∞—Ö")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ UUID –¥–∏–∑–∞–π–Ω–µ—Ä–∞: {e}")
        return None

async def list_tasks_by_designer(designer_name: str):
    server = NotionMCPServer()
    
    tasks_db_id = getattr(server, 'TASKS_DB', None) or os.getenv('NOTION_TASKS_DB_ID')
    if not tasks_db_id:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –±–∞–∑—ã –∑–∞–¥–∞—á")
        return
        
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è {designer_name} –∏–∑ –±–∞–∑—ã: {tasks_db_id}")
    
    # –ü–æ–ª—É—á–∞—é UUID –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∏–∑ –∑–∞–¥–∞—á
    designer_uuid = await get_designer_uuid_from_tasks(server, tasks_db_id, designer_name)
    
    if not designer_uuid:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ UUID –¥–ª—è '{designer_name}'")
        return
    
    # –°–æ–∑–¥–∞—é —Ñ–∏–ª—å—Ç—Ä –ø–æ UUID
    filter_dict = {
        "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
        "people": {
            "contains": designer_uuid
        }
    }
    
    result = await server.get_pages(tasks_db_id, filter_dict)
    tasks = result  # result ‚Äî —ç—Ç–æ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è {designer_name}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {}
    for task in tasks:
        properties = task.get('properties', {})
        status = properties.get('–°—Ç–∞—Ç—É—Å', '')
        status_name = 'unknown'
        if isinstance(status, dict) and 'status' in status:
            status_name = status['status'].get('name', 'unknown')
        elif isinstance(status, str):
            try:
                status_data = json.loads(status.replace("'", '"'))
                if 'status' in status_data:
                    status_name = status_data['status'].get('name', 'unknown')
            except:
                status_name = 'unknown'
        status_counts[status_name] = status_counts.get(status_name, 0) + 1
    
    print("\n–°—É–º–º–∞—Ä–Ω–æ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    for status, count in sorted(status_counts.items()):
        print(f"{status}: {count}")

if __name__ == "__main__":
    designer = sys.argv[1] if len(sys.argv) > 1 else "–ê–Ω–Ω–∞ –ö–æ–≥—É—Ç"
    asyncio.run(list_tasks_by_designer(designer)) 