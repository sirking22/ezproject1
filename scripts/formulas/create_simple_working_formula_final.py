#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –†–ê–ë–û–ß–ï–ô –§–û–†–ú–£–õ–´
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

async def create_simple_working_formula():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ä–∞–±–æ—á—É—é —Ñ–æ—Ä–º—É–ª—É —á–µ—Ä–µ–∑ API"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"üîß –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–û–ô –†–ê–ë–û–ß–ï–ô –§–û–†–ú–£–õ–´")
    print("=" * 50)
    
    TYPICAL_PROJECTS_DB = "21dace03-d9ff-8086-a520-c5eef064fe3b"
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É–ª—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ API
        simple_formula = "prop(\"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è\")"
        
        print(f"üìù –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø –§–û–†–ú–£–õ–ê:")
        print(f"```")
        print(simple_formula)
        print(f"```")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
        updated_property = {
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ": {
                "type": "formula",
                "formula": {
                    "expression": simple_formula
                }
            }
        }
        
        print(f"\nüîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–Ø '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ'...")
        
        await client.databases.update(
            database_id=TYPICAL_PROJECTS_DB,
            properties=updated_property
        )
        
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        return {
            "success": True,
            "simple_formula": simple_formula
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"success": False, "error": str(e)}

async def test_simple_formula():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É–ª—É"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ô –§–û–†–ú–£–õ–´")
    print("=" * 40)
    
    TYPICAL_PROJECTS_DB = "21dace03-d9ff-8086-a520-c5eef064fe3b"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
        query = await client.databases.query(database_id=TYPICAL_PROJECTS_DB)
        records = query.get('results', [])
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
        
        for i, record in enumerate(records, 1):
            name = record['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
            avg_time = record['properties'].get('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ', {}).get('formula', {}).get('number', 0)
            avg_all_time = record['properties'].get('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', {}).get('rollup', {}).get('number', 0)
            total_projects = len(record['properties'].get('–ü—Ä–æ–µ–∫—Ç—ã', {}).get('relation', []))
            
            print(f"{i}. {name}:")
            print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {avg_time} —á–∞—Å–æ–≤")
            print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {avg_all_time} —á–∞—Å–æ–≤")
            print(f"   üìã –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {total_projects}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def create_final_manual_guide():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"""
    
    print(f"\nüìã –§–ò–ù–ê–õ–¨–ù–û–ï –†–£–ö–û–í–û–î–°–¢–í–û –î–õ–Ø –†–£–ß–ù–û–ì–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø")
    print("=" * 55)
    
    print(f"üîß –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–û–ô –§–û–†–ú–£–õ–´ –°–†–ï–î–ù–ï–ì–û –í–†–ï–ú–ï–ù–ò –í–´–ü–û–õ–ù–ï–ù–ù–´–• –ü–†–û–ï–ö–¢–û–í:")
    print(f"")
    print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É '–¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã' –≤ Notion")
    print(f"2. –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ'")
    print(f"3. –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –Ω–∞:")
    print(f"```")
    print(f"if(")
    print(f"  prop(\"–ü—Ä–æ–µ–∫—Ç—ã\").filter(current.prop(\"–°—Ç–∞—Ç—É—Å\") == \"Done\" or current.prop(\"–°—Ç–∞—Ç—É—Å\") == \"In Production\").length() > 0,")
    print(f"  prop(\"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è\") * ")
    print(f"  (prop(\"–ü—Ä–æ–µ–∫—Ç—ã\").filter(current.prop(\"–°—Ç–∞—Ç—É—Å\") == \"Done\" or current.prop(\"–°—Ç–∞—Ç—É—Å\") == \"In Production\").length() / prop(\"–ü—Ä–æ–µ–∫—Ç—ã\").length()),")
    print(f"  0")
    print(f")")
    print(f"```")
    print(f"4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    print(f"\nüìä –û–ë–™–Ø–°–ù–ï–ù–ò–ï –§–û–†–ú–£–õ–´:")
    print(f"‚Ä¢ prop('–ü—Ä–æ–µ–∫—Ç—ã') - –ø–æ–ª–µ —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π '–î–∏–∑–∞–π–Ω'")
    print(f"‚Ä¢ current.prop('–°—Ç–∞—Ç—É—Å') - –ø–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏")
    print(f"‚Ä¢ 'Done' –∏–ª–∏ 'In Production' - —Å—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚Ä¢ prop('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è') - rollup –ø–æ–ª–µ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚Ä¢ –§–æ—Ä–º—É–ª–∞ —Å—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    print(f"\nüìä –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"- –ü–æ–ª–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"- –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–æ–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'Done' –∏ 'In Production'")
    print(f"- –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç 0")
    print(f"- –ó–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º –≤ –ø–æ–ª–µ '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è' (–∫–æ—Ç–æ—Ä–æ–µ —Å—á–∏—Ç–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã)")
    
    print(f"\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
    print(f"- –°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Å relation —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ API")
    print(f"- –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ")
    print(f"- –°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ Notion UI")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –†–ê–ë–û–ß–ï–ô –§–û–†–ú–£–õ–´")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É–ª—É
    result = await create_simple_working_formula()
    
    if result.get('success'):
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìù –§–æ—Ä–º—É–ª–∞: {result['simple_formula']}")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É
        await test_simple_formula()
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        await create_final_manual_guide()
        
        print(f"\nüìã –ò–¢–û–ì:")
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API")
        print(f"üìù –°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤ Notion UI")
        print(f"üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"üìù –§–æ—Ä–º—É–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

if __name__ == "__main__":
    asyncio.run(main()) 