#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì± Instagram Analytics Integration
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ Instagram Business API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Notion
"""

import os
import logging
import aiohttp
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass
from dotenv import load_dotenv

load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

@dataclass
class InstagramPost:
    """–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ Instagram"""
    id: str
    caption: str
    media_type: str  # IMAGE, VIDEO, CAROUSEL_ALBUM
    media_url: str
    timestamp: str
    permalink: str
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    impressions: int = 0
    reach: int = 0
    likes_count: int = 0
    comments_count: int = 0
    saves_count: int = 0
    shares_count: int = 0
    
    # Engagement
    engagement_rate: float = 0.0
    ctr: float = 0.0

@dataclass
class InstagramAccount:
    """–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
    id: str
    username: str
    name: str
    profile_picture_url: str
    followers_count: int = 0
    follows_count: int = 0
    media_count: int = 0

class InstagramAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è Instagram Business API"""
    
    def __init__(self):
        self.access_token = os.getenv('INSTAGRAM_ACCESS_TOKEN')
        self.business_account_id = os.getenv('INSTAGRAM_BUSINESS_ACCOUNT_ID')
        self.base_url = 'https://graph.facebook.com/v18.0'
        
        if not self.access_token:
            logger.warning("Instagram Access Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        if not self.business_account_id:
            logger.warning("Instagram Business Account ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    async def get_account_info(self) -> Optional[InstagramAccount]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        if not self.access_token or not self.business_account_id:
            return None
            
        url = f"{self.base_url}/{self.business_account_id}"
        params = {
            'fields': 'id,username,name,profile_picture_url,followers_count,follows_count,media_count',
            'access_token': self.access_token
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return InstagramAccount(
                            id=data.get('id', ''),
                            username=data.get('username', ''),
                            name=data.get('name', ''),
                            profile_picture_url=data.get('profile_picture_url', ''),
                            followers_count=data.get('followers_count', 0),
                            follows_count=data.get('follows_count', 0),
                            media_count=data.get('media_count', 0)
                        )
                    else:
                        logger.error(f"Instagram API error: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return None
    
    async def get_recent_posts(self, limit: int = 25) -> List[InstagramPost]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã"""
        if not self.access_token or not self.business_account_id:
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞
        url = f"{self.base_url}/{self.business_account_id}/media"
        params = {
            'fields': 'id,caption,media_type,media_url,timestamp,permalink',
            'limit': limit,
            'access_token': self.access_token
        }
        
        posts = []
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
                        for media in data.get('data', []):
                            post = InstagramPost(
                                id=media.get('id', ''),
                                caption=media.get('caption', ''),
                                media_type=media.get('media_type', 'IMAGE'),
                                media_url=media.get('media_url', ''),
                                timestamp=media.get('timestamp', ''),
                                permalink=media.get('permalink', '')
                            )
                            
                            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞
                            metrics = await self.get_post_metrics(post.id)
                            if metrics:
                                post.impressions = metrics.get('impressions', 0)
                                post.reach = metrics.get('reach', 0)
                                post.likes_count = metrics.get('likes', 0)
                                post.comments_count = metrics.get('comments', 0)
                                post.saves_count = metrics.get('saved', 0)
                                post.shares_count = metrics.get('shares', 0)
                                
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º engagement rate
                                if post.reach > 0:
                                    total_engagement = post.likes_count + post.comments_count + post.saves_count + post.shares_count
                                    post.engagement_rate = (total_engagement / post.reach) * 100
                            
                            posts.append(post)
                            
                    else:
                        logger.error(f"Instagram media API error: {response.status}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            
        return posts
    
    async def get_post_metrics(self, media_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        if not self.access_token:
            return None
            
        url = f"{self.base_url}/{media_id}/insights"
        params = {
            'metric': 'impressions,reach,likes,comments,saved,shares',
            'access_token': self.access_token
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        metrics = {}
                        for insight in data.get('data', []):
                            metric_name = insight.get('name')
                            metric_value = insight.get('values', [{}])[0].get('value', 0)
                            metrics[metric_name] = metric_value
                            
                        return metrics
                    else:
                        logger.debug(f"Metrics API error for {media_id}: {response.status}")
                        return {}
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è {media_id}: {e}")
            return {}

class InstagramNotionSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Instagram –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å Notion"""
    
    def __init__(self, notion_token: str, metrics_db_id: str):
        self.notion_token = notion_token
        self.metrics_db_id = metrics_db_id
        self.notion_headers = {
            'Authorization': f'Bearer {notion_token}',
            'Notion-Version': '2022-06-28',
            'Content-Type': 'application/json'
        }
        self.instagram = InstagramAPI()
    
    async def sync_posts_to_notion(self, days_back: int = 7) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã Instagram –≤ Notion"""
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Instagram –ø–æ—Å—Ç–æ–≤ –∑–∞ {days_back} –¥–Ω–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
        posts = await self.instagram.get_recent_posts(limit=50)
        
        if not posts:
            logger.warning("–ü–æ—Å—Ç—ã Instagram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        cutoff_date = datetime.now() - timedelta(days=days_back)
        recent_posts = []
        
        for post in posts:
            try:
                post_date = datetime.fromisoformat(post.timestamp.replace('Z', '+00:00'))
                if post_date.replace(tzinfo=None) >= cutoff_date:
                    recent_posts.append(post)
            except:
                continue
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(recent_posts)} –ø–æ—Å—Ç–æ–≤ –∑–∞ {days_back} –¥–Ω–µ–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Notion
        saved_count = 0
        for post in recent_posts:
            success = await self.save_post_to_notion(post)
            if success:
                saved_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–æ—Å—Ç–æ–≤ –≤ Notion")
        return saved_count
    
    async def save_post_to_notion(self, post: InstagramPost) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç –≤ Notion"""
        url = 'https://api.notion.com/v1/pages'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º caption –¥–ª—è –ø–æ—Å—Ç–∞
        caption_text = post.caption[:100] + "..." if len(post.caption) > 100 else post.caption
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–∏–ø—É –º–µ–¥–∏–∞
        category = {
            'IMAGE': 'üì∏ Instagram Photo',
            'VIDEO': 'üé• Instagram Video', 
            'CAROUSEL_ALBUM': 'üìö Instagram Carousel'
        }.get(post.media_type, 'üì± Instagram Post')
        
        properties = {
            "–ú–µ—Ç—Ä–∏–∫–∞": {
                "title": [{"text": {"content": f"Instagram: {caption_text}"}}]
            },
            "–ó–Ω–∞—á–µ–Ω–∏–µ": {
                "rich_text": [{"text": {"content": f"ER: {post.engagement_rate:.2f}%"}}]
            },
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {
                "select": {"name": "üìà Marketing"}
            },
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {
                "rich_text": [{
                    "text": {
                        "content": (
                            f"üëÄ Impressions: {post.impressions:,}\n"
                            f"üéØ Reach: {post.reach:,}\n"
                            f"‚ù§Ô∏è Likes: {post.likes_count:,}\n"
                            f"üí¨ Comments: {post.comments_count:,}\n"
                            f"üíæ Saves: {post.saves_count:,}\n"
                            f"üì§ Shares: {post.shares_count:,}\n"
                            f"üìä ER: {post.engagement_rate:.2f}%\n"
                            f"üîó {post.permalink}"
                        )
                    }
                }]
            },
            "–î–∞—Ç–∞": {
                "date": {"start": post.timestamp[:10]}  # YYYY-MM-DD
            },
            "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": {
                "select": {"name": "Instagram"}
            },
            "–¢–∏–ø": {
                "select": {"name": category}
            }
        }
        
        data = {
            'parent': {'database_id': self.metrics_db_id},
            'properties': properties
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=self.notion_headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.debug(f"–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['id']}")
                        return True
                    else:
                        error = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ Notion: {response.status} - {error}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    async def get_account_summary(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É"""
        account = await self.instagram.get_account_info()
        if not account:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        posts = await self.instagram.get_recent_posts(limit=100)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_impressions = sum(p.impressions for p in posts)
        total_reach = sum(p.reach for p in posts)
        total_engagement = sum(p.likes_count + p.comments_count + p.saves_count + p.shares_count for p in posts)
        avg_engagement_rate = sum(p.engagement_rate for p in posts) / len(posts) if posts else 0
        
        return {
            'account': account,
            'stats': {
                'posts_count': len(posts),
                'total_impressions': total_impressions,
                'total_reach': total_reach,
                'total_engagement': total_engagement,
                'avg_engagement_rate': avg_engagement_rate,
                'followers': account.followers_count
            }
        }

class InstagramScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, sync_manager: InstagramNotionSync):
        self.sync_manager = sync_manager
        self.is_running = False
    
    async def start_hourly_sync(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—á–∞—Å–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Instagram (–∫–∞–∂–¥—ã–π —á–∞—Å)")
        
        while self.is_running:
            try:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
                count = await self.sync_manager.sync_posts_to_notion(days_back=3)
                logger.info(f"‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –ø–æ—Å—Ç–æ–≤")
                
                # –ñ–¥–µ–º —á–∞—Å
                await asyncio.sleep(3600)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        self.is_running = False
        logger.info("‚èπ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Instagram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
async def quick_instagram_sync(notion_token: str, metrics_db_id: str) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞"""
    sync_manager = InstagramNotionSync(notion_token, metrics_db_id)
    
    try:
        count = await sync_manager.sync_posts_to_notion(days_back=1)
        return f"üì± Instagram: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {count} –ø–æ—Å—Ç–æ–≤ –∑–∞ —Å—É—Ç–∫–∏"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Instagram: {e}"

async def get_instagram_summary(notion_token: str, metrics_db_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É Instagram –¥–ª—è –±–æ—Ç–∞"""
    sync_manager = InstagramNotionSync(notion_token, metrics_db_id)
    
    try:
        summary = await sync_manager.get_account_summary()
        if not summary:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Instagram"
        
        account = summary['account']
        stats = summary['stats']
        
        return (
            f"üì± **INSTAGRAM –ê–ù–ê–õ–ò–¢–ò–ö–ê**\n\n"
            f"**@{account.username}**\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {account.followers_count:,}\n"
            f"üì∏ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {account.media_count:,}\n\n"
            f"**–ó–∞ –º–µ—Å—è—Ü:**\n"
            f"üìä –ü–æ—Å—Ç–æ–≤: {stats['posts_count']}\n"
            f"üëÄ Impressions: {stats['total_impressions']:,}\n"
            f"üéØ Reach: {stats['total_reach']:,}\n"
            f"‚ù§Ô∏è Engagement: {stats['total_engagement']:,}\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–π ER: {stats['avg_engagement_rate']:.2f}%"
        )
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}"

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    async def test_instagram():
        notion_token = os.getenv('NOTION_TOKEN')
        metrics_db_id = os.getenv('NOTION_METRICS_DB_ID', '1d9ace03d9ff804191a4d35aeedcbbd4')
        
        if not notion_token:
            print("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram Analytics...")
        
        sync_manager = InstagramNotionSync(notion_token, metrics_db_id)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account = await sync_manager.instagram.get_account_info()
        if account:
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç: @{account.username} ({account.followers_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
        
        # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        result = await quick_instagram_sync(notion_token, metrics_db_id)
        print(result)
    
    asyncio.run(test_instagram()) 