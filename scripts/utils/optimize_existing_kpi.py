#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö KPI —Å–≤—è–∑–µ–π —á–µ—Ä–µ–∑ RDT
"""

import os
import requests
import json
from datetime import datetime

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_BASE_URL = "https://api.notion.com/v1"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
KPI_DB = "1d6ace03d9ff80bfb809ed21dfd2150c"
RDT_DB = "195ace03d9ff80c1a1b0d236ec3564d2"

def create_kpi_records_for_team():
    """–°–æ–∑–¥–∞–µ—Ç KPI –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ RDT"""
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ KPI –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ RDT
    rdt_response = requests.post(
        f"{NOTION_BASE_URL}/databases/{RDT_DB}/query",
        headers=HEADERS,
        json={"page_size": 50}
    )
    
    if rdt_response.status_code != 200:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {rdt_response.status_code}")
        return []
    
    rdt_data = rdt_response.json()
    employees = rdt_data.get('results', [])
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ RDT")
    
    created_kpis = []
    current_month = datetime.now().strftime("%B %Y")
    
    # KPI —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    kpi_templates = [
        {
            "name_template": "% –∑–∞–¥–∞—á –≤ —Å—Ä–æ–∫ - {} - {}",
            "category": "–°—Ä–æ–∫–∏",
            "target": "85"
        },
        {
            "name_template": "% –∑–∞–¥–∞—á –±–µ–∑ –ø—Ä–∞–≤–æ–∫ - {} - {}",
            "category": "–ö–∞—á–µ—Å—Ç–≤–æ", 
            "target": "70"
        },
        {
            "name_template": "–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã - {} - {}",
            "category": "–ö–∞—á–µ—Å—Ç–≤–æ",
            "target": "4.5"
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º KPI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    for employee in employees:
        employee_id = employee.get('id')
        employee_props = employee.get('properties', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
        for prop_name, prop_data in employee_props.items():
            if prop_data.get('type') == 'title':
                title_list = prop_data.get('title', [])
                if title_list:
                    employee_name = title_list[0].get('plain_text', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                break
        
        print(f"\nüë§ –°–æ–∑–¥–∞—é KPI –¥–ª—è: {employee_name}")
        
        # –°–æ–∑–¥–∞–µ–º KPI –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        for template in kpi_templates:
            kpi_name = template["name_template"].format(employee_name, current_month)
            
            kpi_data = {
                "parent": {"database_id": KPI_DB},
                "properties": {
                    "Name": {
                        "title": [{"text": {"content": kpi_name}}]
                    },
                    "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": {
                        "rich_text": [{"text": {"content": template["target"]}}]
                    },
                    "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ / –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": {
                        "rich_text": [{"text": {"content": template["category"]}}]
                    },
                    "RDT": {
                        "relation": [{"id": employee_id}]
                    },
                    "–î–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞": {
                        "date": {"start": datetime.now().strftime("%Y-%m-01")}
                    },
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {
                        "rich_text": [{"text": {"content": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π KPI –¥–ª—è {employee_name}"}}]
                    }
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            create_response = requests.post(
                f"{NOTION_BASE_URL}/pages",
                headers=HEADERS,
                json=kpi_data
            )
            
            if create_response.status_code == 200:
                print(f"  ‚úÖ {template['category']}: {template['target']}")
                created_kpis.append(kpi_name)
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {template['category']}: {create_response.status_code}")
    
    return created_kpis

def test_kpi_rollup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É rollup –ø–æ–ª–µ–π –∏–∑ RDT"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rollup –∏–∑ RDT...")
    
    # –ü–æ–ª—É—á–∞–µ–º KPI –∑–∞–ø–∏—Å–∏
    kpi_response = requests.post(
        f"{NOTION_BASE_URL}/databases/{KPI_DB}/query",
        headers=HEADERS,
        json={"page_size": 10}
    )
    
    if kpi_response.status_code != 200:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å KPI: {kpi_response.status_code}")
        return
    
    kpi_data = kpi_response.json()
    kpi_records = kpi_data.get('results', [])
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(kpi_records)} KPI –∑–∞–ø–∏—Å–µ–π:")
    
    for i, record in enumerate(kpi_records[:5], 1):
        properties = record.get('properties', {})
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ KPI
        kpi_name = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        if 'Name' in properties:
            title_list = properties['Name'].get('title', [])
            if title_list:
                kpi_name = title_list[0].get('plain_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        # –§–∞–∫—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        fact_value = "–ù–µ –∑–∞–¥–∞–Ω–æ"
        if '–§–∞–∫—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)' in properties:
            fact_number = properties['–§–∞–∫—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)'].get('number')
            if fact_number is not None:
                fact_value = str(fact_number)
        
        # –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        target_value = "–ù–µ –∑–∞–¥–∞–Ω–æ"
        if '–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' in properties:
            target_list = properties['–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'].get('rich_text', [])
            if target_list:
                target_value = target_list[0].get('plain_text', '–ù–µ –∑–∞–¥–∞–Ω–æ')
        
        print(f"  {i}. {kpi_name}")
        print(f"     –¶–µ–ª—å: {target_value} | –§–∞–∫—Ç: {fact_value}")

def main():
    print("üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• KPI")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º KPI –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    created_kpis = create_kpi_records_for_team()
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ KPI –∑–∞–ø–∏—Å–µ–π: {len(created_kpis)}")
    
    if created_kpis:
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ KPI:")
        for kpi in created_kpis[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  ‚Ä¢ {kpi}")
        
        if len(created_kpis) > 10:
            print(f"  ... –∏ –µ—â–µ {len(created_kpis) - 10}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º rollup
    test_kpi_rollup()
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã –∞–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç–∞ –∏–∑ RDT")
    print("2. –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ KPI")
    print("3. –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 