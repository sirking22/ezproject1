#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞—á–µ
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TASK_ID = "21dace03d9ff813e8926de1ce4ecde41"  # ID –∑–∞–¥–∞—á–∏ –∏–∑ —Å—Å—ã–ª–∫–∏
CHECKLISTS_DB = "9c5f4269d61449b6a7485579a3c21da3"

async def fix_checklist_display():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–∫–ª–∏—Å—Ç—ã –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏ –≤ –∑–∞–¥–∞—á—É"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ß–ï–ö–õ–ò–°–¢–û–í –í –ó–ê–î–ê–ß–ï")
    print("=" * 60)
    print(f"üÜî ID –∑–∞–¥–∞—á–∏: {TASK_ID}")
    
    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–ª–∏—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π
        print("1Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤...")
        
        response = await client.databases.query(
            database_id=CHECKLISTS_DB,
            filter={
                "property": "–ó–∞–¥–∞—á–∏",
                "relation": {
                    "contains": TASK_ID
                }
            }
        )
        
        checklists = response.get('results', [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklists)}")
        
        if not checklists:
            print("‚ùå –ß–µ–∫–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç—ã –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏ –≤ –∑–∞–¥–∞—á—É
        print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞—á—É...")
        
        for i, checklist in enumerate(checklists):
            checklist_title = checklist['properties'].get('–ü–æ–¥–∑–∞–¥–∞—á–∏', {}).get('title', [{}])[0].get('text', {}).get('content', '–ß–µ–∫–ª–∏—Å—Ç')
            
            print(f"   üìã –î–æ–±–∞–≤–ª—è–µ–º: {checklist_title}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ–∫–ª–∏—Å—Ç–∞
            checklist_blocks = await client.blocks.children.list(block_id=checklist['id'])
            
            # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
            task_blocks = [
                {
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [{"type": "text", "text": {"content": f"üìã {checklist_title}"}}]
                    }
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞
            for block in checklist_blocks.get('results', []):
                if block['type'] == 'to_do':
                    rich_text = block['to_do'].get('rich_text', [])
                    checked = block['to_do'].get('checked', False)
                    if rich_text:
                        task_blocks.append({
                            "type": "to_do",
                            "to_do": {
                                "rich_text": [{"type": "text", "text": {"content": rich_text[0]['text']['content']}}],
                                "checked": checked
                            }
                        })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            task_blocks.append({
                "type": "divider",
                "divider": {}
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –≤ –∑–∞–¥–∞—á—É
            await client.blocks.children.append(
                block_id=TASK_ID,
                children=task_blocks
            )
            
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–µ–∫–ª–∏—Å—Ç {i+1}")
        
        print(f"\nüéâ –ì–û–¢–û–í–û! –î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklists)}")
        print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É: https://www.notion.so/dreamclub22/{TASK_ID.replace('-', '')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(fix_checklist_display()) 