#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîÑ –°–ò–°–¢–ï–ú–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ü–û–î–ó–ê–î–ê–ß
–ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –≥–∞–π–¥–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –¥—É–±–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
GUIDES_DB = "47c6086858d442ebaeceb4fad1b23ba3"
CHECKLISTS_DB = "9c5f4269d61449b6a7485579a3c21da3"

class DuplicateSubtasksSystem:
    """–°–∏—Å—Ç–µ–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á"""
    
    def __init__(self):
        token = os.getenv("NOTION_TOKEN")
        if not token:
            raise ValueError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        self.client = AsyncClient(auth=token)
    
    async def create_task_with_duplicated_subtasks(self, guide_id: str, task_title: str, task_url: str = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –¥—É–±–ª–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ –≥–∞–π–¥–∞
        
        Args:
            guide_id: ID –≥–∞–π–¥–∞
            task_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task_url: URL –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        
        print(f"üîÑ –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –° –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ú–ò –ü–û–î–ó–ê–î–ê–ß–ê–ú–ò")
        print("=" * 70)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞–π–¥–µ
            print(f"1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∞–π–¥–µ...")
            guide = await self.client.pages.retrieve(page_id=guide_id)
            guide_title = guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–∞–π–¥')
            
            print(f"‚úÖ –ì–∞–π–¥: {guide_title}")
            print(f"   üÜî {guide_id}")
            
            # 2. –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –≥–∞–π–¥–µ
            print(f"\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–∑–∞–¥–∞—á –≤ –≥–∞–π–¥–µ...")
            existing_subtasks = await self._find_existing_subtasks(guide_id)
            
            if not existing_subtasks:
                print("‚ö†Ô∏è –ü–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≥–∞–π–¥–µ")
                return None
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(existing_subtasks)}")
            for subtask in existing_subtasks:
                status = "‚úÖ" if subtask.get('checked', False) else "‚ùå"
                print(f"   {status} {subtask['content']} (ID: {subtask['block_id']})")
            
            # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            print(f"\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            task_data = {
                "parent": {"database_id": TASKS_DB},
                "properties": {
                    "–ó–∞–¥–∞—á–∞": {
                        "title": [{
                            "type": "text",
                            "text": {"content": task_title}
                        }]
                    },
                    "üì¨ –ì–∞–π–¥—ã": {
                        "relation": [{"id": guide_id}]
                    },
                    "–°—Ç–∞—Ç—É—Å": {
                        "status": {"name": "In Progress"}
                    }
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if task_url:
                task_data["properties"]["–§ –∑–∞–¥–∞—á–∏"] = {"url": task_url}
            
            new_task = await self.client.pages.create(**task_data)
            task_id = new_task['id']
            
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:")
            print(f"   üÜî {task_id}")
            print(f"   üîó https://www.notion.so/dreamclub22/{task_id.replace('-', '')}")
            
            # 4. –î—É–±–ª–∏—Ä—É–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∑–∞–¥–∞—á–µ
            print(f"\n4Ô∏è‚É£ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á...")
            duplicated_subtasks = await self._duplicate_and_attach_subtasks(task_id, existing_subtasks)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            print(f"‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(duplicated_subtasks)}")
            print(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∑–∞–¥–∞—á–µ: {len(duplicated_subtasks)}")
            print(f"üéØ –ó–∞–¥–∞—á–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ –≥–æ—Ç–æ–≤–∞!")
            
            return {
                'task_id': task_id,
                'guide_id': guide_id,
                'guide_title': guide_title,
                'subtasks_count': len(duplicated_subtasks),
                'subtask_ids': [s['id'] for s in duplicated_subtasks],
                'original_subtasks': existing_subtasks,
                'task_url': f"https://www.notion.so/dreamclub22/{task_id.replace('-', '')}",
                'guide_url': f"https://www.notion.so/dreamclub22/{guide_id.replace('-', '')}"
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def _find_existing_subtasks(self, guide_id: str):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –≥–∞–π–¥–µ"""
        
        guide_blocks = await self.client.blocks.children.list(block_id=guide_id)
        blocks = guide_blocks.get('results', [])
        
        subtasks = []
        for block in blocks:
            if block.get('type') == 'to_do':
                content = block['to_do']['rich_text'][0]['text']['content'] if block['to_do']['rich_text'] else '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'
                checked = block['to_do']['checked']
                subtasks.append({
                    'content': content,
                    'checked': checked,
                    'block_id': block['id']
                })
        
        return subtasks
    
    async def _duplicate_and_attach_subtasks(self, task_id: str, existing_subtasks: list):
        """–î—É–±–ª–∏—Ä—É–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫ –∑–∞–¥–∞—á–µ"""
        
        duplicated_subtasks = []
        
        for subtask in existing_subtasks:
            # –°–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤
            subtask_data = {
                "parent": {"database_id": CHECKLISTS_DB},
                "properties": {
                    "–ü–æ–¥–∑–∞–¥–∞—á–∏": {
                        "title": [{
                            "type": "text",
                            "text": {"content": subtask['content']}
                        }]
                    },
                    "–ó–∞–¥–∞—á–∏": {
                        "relation": [{"id": task_id}]
                    }
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            new_subtask = await self.client.pages.create(**subtask_data)
            subtask_id = new_subtask['id']
            
            duplicated_subtasks.append({
                'id': subtask_id,
                'content': subtask['content'],
                'checked': subtask.get('checked', False),
                'original_block_id': subtask['block_id']
            })
            
            status = "‚úÖ" if subtask.get('checked', False) else "‚ùå"
            print(f"   üìã {status} {subtask['content']}")
            print(f"      üÜî –î—É–±–ª–∏–∫–∞—Ç: {subtask_id}")
            print(f"      üîó –û—Ä–∏–≥–∏–Ω–∞–ª: {subtask['block_id']}")
        
        return duplicated_subtasks
    
    async def batch_create_tasks_with_duplicated_subtasks(self, tasks_data: list):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
        
        Args:
            tasks_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á
                       [{'guide_id': '...', 'task_title': '...', 'task_url': '...'}]
        """
        
        print(f"üöÄ –ú–ê–°–°–û–í–û–ï –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß –° –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ú–ò –ü–û–î–ó–ê–î–ê–ß–ê–ú–ò")
        print("=" * 70)
        print(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {len(tasks_data)}")
        
        results = []
        
        for i, task_data in enumerate(tasks_data, 1):
            print(f"\nüìã –ó–∞–¥–∞—á–∞ {i}/{len(tasks_data)}")
            print("-" * 50)
            
            result = await self.create_task_with_duplicated_subtasks(
                guide_id=task_data['guide_id'],
                task_title=task_data['task_title'],
                task_url=task_data.get('task_url')
            )
            
            if result:
                results.append(result)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å {result['subtasks_count']} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        print(f"\nüéØ –ò–¢–û–ì–ò:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {len(results)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(tasks_data) - len(results)}")
        
        return results

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def create_task_with_duplicated_subtasks(guide_id: str, task_title: str, task_url: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏"""
    system = DuplicateSubtasksSystem()
    return await system.create_task_with_duplicated_subtasks(guide_id, task_title, task_url)

async def batch_create_tasks_with_duplicated_subtasks(tasks_data: list):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏"""
    system = DuplicateSubtasksSystem()
    return await system.batch_create_tasks_with_duplicated_subtasks(tasks_data)

# –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
if __name__ == "__main__":
    async def test_example():
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
        result = await create_task_with_duplicated_subtasks(
            guide_id="20face03-d9ff-8176-9357-ee1f5c52e5a5",
            task_title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏",
            task_url="https://example.com/test"
        )
        
        if result:
            print(f"\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!")
            print(f"üìã –ó–∞–¥–∞—á–∞: {result['task_url']}")
            print(f"üìö –ì–∞–π–¥: {result['guide_url']}")
            print(f"üìã –ü–æ–¥–∑–∞–¥–∞—á –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ: {result['subtasks_count']}")
            print(f"üÜî ID –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result['subtask_ids']}")
            
            print(f"\nüìã –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ü–û–î–ó–ê–î–ê–ß–ò:")
            for subtask in result['original_subtasks']:
                status = "‚úÖ" if subtask.get('checked', False) else "‚ùå"
                print(f"   {status} {subtask['content']} (ID: {subtask['block_id']})")
    
    asyncio.run(test_example()) 