import os
import requests
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
TASKS_DB_ID = "d09df250ce7e4e0d9fbe4e036d320def"  # –ë–∞–∑–∞ –∑–∞–¥–∞—á
SUBTASKS_DB_ID = "9c5f4269d61449b6a7485579a3c21da3"  # –ë–∞–∑–∞ –ø–æ–¥–∑–∞–¥–∞—á

if not NOTION_TOKEN:
    raise RuntimeError("NOTION_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def find_task_by_title_and_status(title, status):
    """–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å—Ç–∞—Ç—É—Å—É"""
    url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json"
    }
    
    payload = {
        "filter": {
            "and": [
                {
                    "property": "–ó–∞–¥–∞—á–∞",
                    "title": {
                        "contains": title
                    }
                },
                {
                    "property": "–°—Ç–∞—Ç—É—Å",
                    "status": {
                        "equals": status
                    }
                }
            ]
        }
    }
    
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏: {response.status_code}")
        return None
    
    data = response.json()
    results = data.get('results', [])
    
    if results:
        return results[0]
    return None

def create_subtask_with_hours(task_id, title, hours):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Å–æ–≤"""
    url = "https://api.notion.com/v1/pages"
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json"
    }
    
    payload = {
        "parent": {"database_id": SUBTASKS_DB_ID},
        "properties": {
            "–ü–æ–¥–∑–∞–¥–∞—á–∏": {
                "title": [
                    {
                        "text": {
                            "content": title
                        }
                    }
                ]
            },
            " –°—Ç–∞—Ç—É—Å": {
                "status": {
                    "name": "To do"
                }
            },
            "–ó–∞–¥–∞—á–∏": {
                "relation": [
                    {
                        "id": task_id
                    }
                ]
            }
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —á–∞—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ —Å—Ö–µ–º–µ
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª—è
    hours_field_names = ["–ß–∞—Å—ã", "–í—Ä–µ–º—è", "Hours", "Time", "–û—Ä–∏–µ–Ω—Ç–∏—Ä"]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ö–µ–º—É –±–∞–∑—ã –ø–æ–¥–∑–∞–¥–∞—á
    schema_url = f"https://api.notion.com/v1/databases/{SUBTASKS_DB_ID}"
    schema_response = requests.get(schema_url, headers=headers)
    
    if schema_response.status_code == 200:
        schema = schema_response.json()
        properties = schema.get('properties', {})
        
        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è —á–∞—Å–æ–≤
        hours_field = None
        for field_name, field_info in properties.items():
            if field_info.get('type') == 'number':
                hours_field = field_name
                break
        
        if hours_field:
            payload["properties"][hours_field] = {
                "number": hours
            }
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ '{hours_field}' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º {hours}")
        else:
            print("‚ö†Ô∏è –ü–æ–ª–µ –¥–ª—è —á–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ö–µ–º–µ")
    
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        return None
    
    return response.json()

def main():
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ô –ü–û–î–ó–ê–î–ê–ß–ò")
    print("=" * 50)
    
    # 1. –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É "–õ–æ–≥–æ –∏ –∏–∫–æ–Ω–∫–∞" –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress
    print("üîç –ò—â–µ–º –∑–∞–¥–∞—á—É '–õ–æ–≥–æ –∏ –∏–∫–æ–Ω–∫–∞' –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress...")
    task = find_task_by_title_and_status("–õ–æ–≥–æ –∏ –∏–∫–æ–Ω–∫–∞", "In Progress")
    
    if not task:
        print("‚ùå –ó–∞–¥–∞—á–∞ '–õ–æ–≥–æ –∏ –∏–∫–æ–Ω–∫–∞' –≤ —Å—Ç–∞—Ç—É—Å–µ In Progress –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("üîç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è...")
        task = find_task_by_title_and_status("–õ–æ–≥–æ", "In Progress")
        
        if not task:
            print("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
    
    task_id = task['id']
    task_title = task['properties']['–ó–∞–¥–∞—á–∞']['title'][0]['plain_text']
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_title} (ID: {task_id})")
    
    # 2. –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É
    print("\nüìù –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É...")
    subtask_title = "–î–æ–¥–µ–ª–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø"
    hours = 0.5  # 30 –º–∏–Ω—É—Ç = 0.5 —á–∞—Å–∞
    
    subtask = create_subtask_with_hours(task_id, subtask_title, hours)
    
    if not subtask:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É")
        return
    
    subtask_id = subtask['id']
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞: {subtask_title}")
    print(f"   ID –ø–æ–¥–∑–∞–¥–∞—á–∏: {subtask_id}")
    print(f"   –ß–∞—Å—ã: {hours}")
    
    # 3. –í—ã–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
    print("\nüîó –°–°–´–õ–ö–ò:")
    task_url = f"https://notion.so/{task_id.replace('-', '')}"
    subtask_url = f"https://notion.so/{subtask_id.replace('-', '')}"
    
    print(f"   üìã –ó–∞–¥–∞—á–∞: {task_url}")
    print(f"   üìù –ü–æ–¥–∑–∞–¥–∞—á–∞: {subtask_url}")
    
    print("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á—É")
    print("   2. –í –ø–æ–ª–µ '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' –¥–æ–±–∞–≤—å—Ç–µ 'Arsentiy'")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –ø–æ–ª–µ '–ß–∞—Å—ã' —É–∫–∞–∑–∞–Ω–æ 0.5")
    print("   4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

if __name__ == "__main__":
    main() 