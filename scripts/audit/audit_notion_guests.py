#!/usr/bin/env python3
"""
–ê—É–¥–∏—Ç –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ Notion
–í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ API
"""

import os
import sys
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - [%(name)s] %(message)s"
)
logger = logging.getLogger(__name__)

@dataclass
class GuestUser:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç–µ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    name: str
    email: Optional[str]
    role: str
    databases: List[str]
    tasks_count: int = 0
    subtasks_count: int = 0
    status: str = "guest"
    uuid: Optional[str] = None

class NotionGuestAuditor:
    """–ê—É–¥–∏—Ç–æ—Ä –≥–æ—Å—Ç–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ Notion"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∞"""
        self.guests: Dict[str, GuestUser] = {}
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.critical_databases = {
            "tasks": "d09df250ce7e4e0d9fbe4e036d320def",
            "subtasks": "9c5f4269d61449b6a7485579a3c21da3",
            "projects": "342f18c67a5e41fead73dcec00770f4e",
            "materials": "1d9ace03d9ff804191a4d35aeedcbbd4"
        }
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–æ—Å—Ç–∏ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
        self.known_guests = {
            "arsentiy": {
                "name": "–ê—Ä—Å–µ–Ω—Ç–∏–π",
                "role": "–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä",
                "email": None
            }
        }
    
    def audit_all_guests(self) -> Dict[str, GuestUser]:
        """–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≥–æ—Å—Ç–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ Notion")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Å—Ç–µ–π
        for guest_id, guest_info in self.known_guests.items():
            self._audit_known_guest(guest_id, guest_info)
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self._generate_report()
        
        return self.guests
    
    def _audit_known_guest(self, guest_id: str, guest_info: Dict):
        """–ê—É–¥–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≥–æ—Å—Ç—è"""
        logger.info(f"üîç –ê—É–¥–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≥–æ—Å—Ç—è: {guest_info['name']}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–æ—Å—Ç—è
        guest = GuestUser(
            name=guest_info["name"],
            email=guest_info.get("email"),
            role=guest_info["role"],
            databases=[],
            status="guest"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ—Å—Ç—å
        )
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º MCP)
        guest.tasks_count = self._count_tasks_for_user_mcp(guest_info["name"])
        guest.subtasks_count = self._count_subtasks_for_user_mcp(guest_info["name"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if guest.tasks_count > 0:
            guest.databases.append("tasks")
        if guest.subtasks_count > 0:
            guest.databases.append("subtasks")
        
        self.guests[guest_id] = guest
        
        logger.info(f"üìä {guest.name}: {guest.tasks_count} –∑–∞–¥–∞—á, {guest.subtasks_count} –ø–æ–¥–∑–∞–¥–∞—á, —Å—Ç–∞—Ç—É—Å: {guest.status}")
    
    def _count_tasks_for_user_mcp(self, user_name: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ MCP"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á
            import subprocess
            import json
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è MCP
            mcp_script = f"""
import sys
sys.path.append('.')

from notion_mcp_server import NotionMCPServer

server = NotionMCPServer()
result = server.query_database(
    database_id="d09df250ce7e4e0d9fbe4e036d320def",
    filter_condition={{
        "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
        "people": {{
            "contains": "{user_name}"
        }}
    }}
)

print(len(result.get("results", [])))
"""
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(
                [sys.executable, "-c", mcp_script],
                capture_output=True,
                text=True,
                cwd=os.getcwd()
            )
            
            if result.returncode == 0:
                return int(result.stdout.strip())
            else:
                logger.error(f"–û—à–∏–±–∫–∞ MCP –¥–ª—è {user_name}: {result.stderr}")
                return 0
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–¥–∞—á –¥–ª—è {user_name}: {e}")
            return 0
    
    def _count_subtasks_for_user_mcp(self, user_name: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ MCP"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–¥–∑–∞–¥–∞—á
            import subprocess
            import json
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è MCP
            mcp_script = f"""
import sys
sys.path.append('.')

from notion_mcp_server import NotionMCPServer

server = NotionMCPServer()
result = server.query_database(
    database_id="9c5f4269d61449b6a7485579a3c21da3",
    filter_condition={{
        "property": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
        "people": {{
            "contains": "{user_name}"
        }}
    }}
)

print(len(result.get("results", [])))
"""
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(
                [sys.executable, "-c", mcp_script],
                capture_output=True,
                text=True,
                cwd=os.getcwd()
            )
            
            if result.returncode == 0:
                return int(result.stdout.strip())
            else:
                logger.error(f"–û—à–∏–±–∫–∞ MCP –¥–ª—è {user_name}: {result.stderr}")
                return 0
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–¥–∑–∞–¥–∞—á –¥–ª—è {user_name}: {e}")
            return 0
    
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç—É"""
        logger.info("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –ü–û –ê–£–î–ò–¢–£ –ì–û–°–¢–ï–ô")
        
        total_guests = len(self.guests)
        full_users = sum(1 for g in self.guests.values() if g.status == "full_user")
        guests_only = sum(1 for g in self.guests.values() if g.status == "guest")
        
        logger.info(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_guests}")
        logger.info(f"   –ü–æ–ª–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {full_users}")
        logger.info(f"   –¢–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π: {guests_only}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –≥–æ—Å—Ç—é
        logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
        for guest_id, guest in self.guests.items():
            logger.info(f"   {guest.name} ({guest.role}):")
            logger.info(f"     –°—Ç–∞—Ç—É—Å: {guest.status}")
            logger.info(f"     –ó–∞–¥–∞—á–∏: {guest.tasks_count}")
            logger.info(f"     –ü–æ–¥–∑–∞–¥–∞—á–∏: {guest.subtasks_count}")
            logger.info(f"     –ë–∞–∑—ã: {', '.join(guest.databases)}")
            logger.info(f"     UUID: {guest.uuid or '–ù–ï –ù–ê–ô–î–ï–ù'}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        self._save_report_to_file()
    
    def _save_report_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"reports/notion_guests_audit_{timestamp}.md"
        
        os.makedirs("reports", exist_ok=True)
        
        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"# –ê—É–¥–∏—Ç –≥–æ—Å—Ç–µ–π Notion - {timestamp}\n\n")
            
            f.write("## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n")
            total_guests = len(self.guests)
            full_users = sum(1 for g in self.guests.values() if g.status == "full_user")
            guests_only = sum(1 for g in self.guests.values() if g.status == "guest")
            
            f.write(f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_guests}\n")
            f.write(f"- –ü–æ–ª–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {full_users}\n")
            f.write(f"- –¢–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π: {guests_only}\n\n")
            
            f.write("## –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n\n")
            for guest_id, guest in self.guests.items():
                f.write(f"### {guest.name}\n")
                f.write(f"- **–†–æ–ª—å**: {guest.role}\n")
                f.write(f"- **–°—Ç–∞—Ç—É—Å**: {guest.status}\n")
                f.write(f"- **Email**: {guest.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n")
                f.write(f"- **–ó–∞–¥–∞—á–∏**: {guest.tasks_count}\n")
                f.write(f"- **–ü–æ–¥–∑–∞–¥–∞—á–∏**: {guest.subtasks_count}\n")
                f.write(f"- **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**: {', '.join(guest.databases)}\n")
                f.write(f"- **UUID**: {guest.uuid or '–ù–µ –Ω–∞–π–¥–µ–Ω'}\n\n")
            
            f.write("## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
            if guests_only > 0:
                f.write("### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n")
                f.write("1. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π –≤ –∫–æ–º–∞–Ω–¥—É Notion\n")
                f.write("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Å—Ç—è\n")
                f.write("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏\n")
                f.write("4. –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ UUID\n\n")
            
            f.write("### –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã:\n")
            f.write("1. –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n")
            f.write("2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π\n")
            f.write("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç—è—Ö\n")
        
        logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –≥–æ—Å—Ç–µ–π Notion")
    
    try:
        auditor = NotionGuestAuditor()
        guests = auditor.audit_all_guests()
        
        logger.info("‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return guests
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ: {e}")
        return {}

if __name__ == "__main__":
    main() 