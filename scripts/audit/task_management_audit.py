import json
import os
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List, Any
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN", "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")
TASKS_DB_ID = os.getenv("NOTION_TASKS_DB_ID", "9c5f4269d61449b6a7485579a3c21da3")
TEAMS_DB_ID = os.getenv("NOTION_TEAMS_DB_ID", "d09df250ce7e4e0d9fbe4e036d320def")

if not NOTION_TOKEN:
    raise RuntimeError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

class TaskManagementAudit:
    """–ê—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self):
        self.headers = {
            "Authorization": f"Bearer {NOTION_TOKEN}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        self.employees = {}
        self.tasks = []
        self.issues = defaultdict(list)
        
    def fetch_employees(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        print("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        url = f"https://api.notion.com/v1/databases/{TEAMS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for emp in results:
            props = emp.get("properties", {})
            # –ò—â–µ–º –∏–º—è –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
            name = None
            for field in ["Name", "–ò–º—è", "–§–ò–û", "–§–∞–º–∏–ª–∏—è –ò–º—è", "Title"]:
                if field in props and props[field].get("title"):
                    name = props[field]["title"][0]["plain_text"]
                    break
            
            if name:
                self.employees[emp["id"]] = {
                    "name": name,
                    "id": emp["id"],
                    "properties": props
                }
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
    def fetch_tasks(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏"""
        print("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...")
        url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for task in results:
            props = task.get("properties", {})
            task_info = {
                "id": task["id"],
                "title": self._extract_title(props),
                "status": self._extract_status(props),
                "assignees": self._extract_assignees(props),
                "deadline": self._extract_deadline(props),
                "created": self._extract_created(props),
                "properties": props
            }
            self.tasks.append(task_info)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tasks)} –∑–∞–¥–∞—á")
    
    def _extract_title(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        for field in ["–ó–∞–¥–∞—á–∞", "Name", "Title", "–ù–∞–∑–≤–∞–Ω–∏–µ"]:
            if field in props and props[field].get("title"):
                return props[field]["title"][0]["plain_text"]
        return "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    
    def _extract_status(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å"""
        for field in ["–°—Ç–∞—Ç—É—Å", "Status"]:
            if field in props:
                status_obj = props[field]
                if status_obj.get("status"):
                    return status_obj["status"]["name"]
                elif status_obj.get("select"):
                    return status_obj["select"]["name"]
        return "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    def _extract_assignees(self, props: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        for field in ["–£—á–∞—Å—Ç–Ω–∏–∫–∏", "Assignee", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "Responsible"]:
            if field in props and props[field].get("people"):
                return [p.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") for p in props[field]["people"]]
        return []
    
    def _extract_deadline(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–¥–ª–∞–π–Ω"""
        for field in ["–î–µ–¥–ª–∞–π–Ω", "Due Date", "–î–∞—Ç–∞", "Deadline"]:
            if field in props and props[field].get("date"):
                return props[field]["date"]["start"]
        return ""
    
    def _extract_created(self, props: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è"""
        if "Created time" in props:
            return props["Created time"]["created_time"]
        return ""
    
    def analyze_issues(self) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã...")
        
        now = datetime.now().date()
        
        for task in self.tasks:
            # –ü—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
            if not task["assignees"]:
                self.issues["no_assignee"].append(task)
            
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
            for assignee in task["assignees"]:
                if assignee not in [emp["name"] for emp in self.employees.values()]:
                    self.issues["unknown_assignee"].append((task, assignee))
            
            # –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            if task["status"] in ["–ù–µ —É–∫–∞–∑–∞–Ω", ""]:
                self.issues["no_status"].append(task)
            
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if task["deadline"]:
                try:
                    deadline = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                    if deadline < now and task["status"].lower() not in ["done", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"]:
                        self.issues["overdue"].append((task, deadline))
                except:
                    self.issues["invalid_deadline"].append(task)
            
            # –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
            if not task["deadline"]:
                self.issues["no_deadline"].append(task)
            
            # –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –≤ ToDo
            if task["status"].lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]:
                if task["created"]:
                    try:
                        created = datetime.fromisoformat(task["created"].split("T")[0]).date()
                        if created < now - timedelta(days=7):
                            self.issues["old_todo"].append((task, created))
                    except:
                        pass
    
    def generate_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç"""
        print("\nüìä –û–¢–ß–ï–¢ –ü–û –ê–£–î–ò–¢–£ –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò")
        print("=" * 60)
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(self.tasks)}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(self.employees)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = defaultdict(int)
        for task in self.tasks:
            status_counts[task["status"]] += 1
        
        print(f"\nüìã –°–¢–ê–¢–£–°–´ –ó–ê–î–ê–ß:")
        for status, count in sorted(status_counts.items()):
            print(f"   ‚Ä¢ {status}: {count}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        print(f"\nüö® –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        
        if self.issues["no_assignee"]:
            print(f"   ‚ùå –ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {len(self.issues['no_assignee'])}")
            for task in self.issues["no_assignee"][:3]:
                print(f"      - {task['title']}")
        
        if self.issues["unknown_assignee"]:
            print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {len(self.issues['unknown_assignee'])}")
            unknown_names = set(assignee for _, assignee in self.issues["unknown_assignee"])
            for name in list(unknown_names)[:5]:
                print(f"      - {name}")
        
        if self.issues["no_status"]:
            print(f"   ‚ùå –ó–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞: {len(self.issues['no_status'])}")
        
        if self.issues["overdue"]:
            print(f"   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(self.issues['overdue'])}")
            for task, deadline in self.issues["overdue"][:3]:
                print(f"      - {task['title']} (–¥–æ {deadline})")
        
        if self.issues["no_deadline"]:
            print(f"   ‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞: {len(self.issues['no_deadline'])}")
        
        if self.issues["old_todo"]:
            print(f"   ‚è∞ –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –≤ ToDo: {len(self.issues['old_todo'])}")
            for task, created in self.issues["old_todo"][:3]:
                print(f"      - {task['title']} (—Å–æ–∑–¥–∞–Ω–∞ {created})")
        
        if self.issues["invalid_deadline"]:
            print(f"   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã: {len(self.issues['invalid_deadline'])}")
    
    def suggest_actions(self) -> None:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        
        if self.issues["no_assignee"]:
            print("   1. –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
        
        if self.issues["unknown_assignee"]:
            print("   2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
        if self.issues["no_status"]:
            print("   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∑–∞–¥–∞—á –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞")
        
        if self.issues["overdue"]:
            print("   4. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        if self.issues["old_todo"]:
            print("   5. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ ToDo –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã")
        
        print("\n   6. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:")
        print("      - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        print("      - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö")
        print("      - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
    
    def save_detailed_report(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tasks": len(self.tasks),
                "total_employees": len(self.employees),
                "issues_count": {k: len(v) for k, v in self.issues.items()}
            },
            "employees": list(self.employees.values()),
            "issues": {
                k: [{"id": t["id"], "title": t["title"]} for t in v] if v and isinstance(v[0], dict) else v
                for k, v in self.issues.items()
            }
        }
        
        with open("task_audit_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ task_audit_report.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò")
    print("=" * 50)
    
    audit = TaskManagementAudit()
    
    try:
        audit.fetch_employees()
        audit.fetch_tasks()
        audit.analyze_issues()
        audit.generate_report()
        audit.suggest_actions()
        audit.save_detailed_report()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 