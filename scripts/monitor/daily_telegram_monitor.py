#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì TELEGRAM –ö–ê–ù–ê–õ–ê

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞:
‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚úÖ –ê–ª–µ—Ä—Ç—ã –ø–æ KPI  
‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Notion
‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
"""

import requests
import logging

logger = logging.getLogger(__name__)
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional

class TelegramDailyMonitor:
    """–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.platforms_db_id = os.getenv('NOTION_PLATFORMS_DB_ID')
        self.content_db_id = os.getenv('NOTION_CONTENT_PLAN_DB_ID')
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        
        self.headers = {
            'Authorization': f'Bearer {self.notion_token}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }
        
        # KPI Thresholds –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.kpi_thresholds = {
            'view_rate_min': 12.0,        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º
            'view_rate_target': 15.0,     # –¶–µ–ª–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
            'viral_post_threshold': 1500,  # "–í–∏—Ä—É—Å–Ω—ã–π" –ø–æ—Å—Ç
            'low_performance_threshold': 500,  # –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            'subscriber_growth_weekly': 50,    # –ú–∏–Ω. —Ä–æ—Å—Ç –≤ –Ω–µ–¥–µ–ª—é
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.history_file = 'telegram_daily_history.json'
    
    def run_daily_monitoring(self, channel="rawmid") -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        print("üîÑ –ó–ê–ü–£–°–ö –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("=" * 50)
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        current_metrics = self.collect_current_metrics(channel)
        
        # 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        trend_analysis = self.analyze_trends(current_metrics)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        alerts = self.check_alerts(current_metrics, trend_analysis)
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º Notion
        self.update_notion_dashboard(current_metrics)
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.save_daily_history(current_metrics)
        
        # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        daily_report = self.generate_daily_report(current_metrics, trend_analysis, alerts)
        
        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if alerts:
            self.send_alerts(alerts, daily_report)
        
        print("‚úÖ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
        return {
            'metrics': current_metrics,
            'trends': trend_analysis,
            'alerts': alerts,
            'report': daily_report
        }
    
    def collect_current_metrics(self, channel: str) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        
        print("üìä –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫...")
        
        metrics = {
            'date': datetime.now().isoformat(),
            'subscribers': 0,
            'posts_today': 0,
            'total_posts': 0,
            'avg_views': 0,
            'today_best_post': 0,
            'view_rate': 0,
            'new_posts_performance': []
        }
        
        try:
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
            count_url = f"https://api.telegram.org/bot{self.bot_token}/getChatMemberCount"
            count_try:
        response = requests.get(count_url, params={'chat_id': f'@{channel}'}, timeout=10)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {{e}}")
        return None
    
    response
            
            if count_response.status_code == 200:
                count_data = count_response.json()
                if count_data.get('ok'):
                    metrics['subscribers'] = count_data['result']
                    print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics['subscribers']:,}")
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤
            posts_data = self.get_recent_posts(channel)
            if posts_data:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                metrics['total_posts'] = len(posts_data)
                total_views = sum(p.get('views', 0) for p in posts_data)
                metrics['avg_views'] = total_views / len(posts_data) if len(posts_data) > 0 else 0
                
                # –ü–æ—Å—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today = datetime.now().date()
                today_posts = [p for p in posts_data if p.get('date') and p['date'].date() == today]
                metrics['posts_today'] = len(today_posts)
                
                if today_posts:
                    metrics['today_best_post'] = max(p.get('views', 0) for p in today_posts)
                    metrics['new_posts_performance'] = [
                        {'views': p.get('views', 0), 'url': p.get('url', '')} 
                        for p in today_posts
                    ]
                
                # View Rate
                if metrics['subscribers'] > 0 and metrics['avg_views'] > 0:
                    metrics['view_rate'] = (metrics['avg_views'] / metrics['subscribers']) * 100
                
                print(f"   üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {metrics['total_posts']}")
                print(f"   üìÖ –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {metrics['posts_today']}")
                print(f"   üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['avg_views']:.0f}")
                print(f"   üéØ View Rate: {metrics['view_rate']:.1f}%")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        
        return metrics
    
    def analyze_trends(self, current_metrics: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        
        print("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤...")
        
        trends = {
            'subscriber_change': 0,
            'view_rate_change': 0,
            'performance_trend': 'stable',
            'weekly_growth': 0,
            'recommendation': ''
        }
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = self.load_history()
            
            if len(history) > 1:
                yesterday = history[-1] if history else {}
                week_ago = history[-7] if len(history) >= 7 else {}
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if yesterday.get('subscribers'):
                    trends['subscriber_change'] = current_metrics['subscribers'] - yesterday['subscribers']
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ View Rate
                if yesterday.get('view_rate'):
                    trends['view_rate_change'] = current_metrics['view_rate'] - yesterday['view_rate']
                
                # –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç
                if week_ago.get('subscribers'):
                    trends['weekly_growth'] = current_metrics['subscribers'] - week_ago['subscribers']
                
                # –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                recent_view_rates = [d.get('view_rate', 0) for d in history[-7:] if d.get('view_rate')]
                if len(recent_view_rates) >= 3:
                    if recent_view_rates[-1] > recent_view_rates[0]:
                        trends['performance_trend'] = 'improving'
                    elif recent_view_rates[-1] < recent_view_rates[0]:
                        trends['performance_trend'] = 'declining'
                
                print(f"   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {trends['subscriber_change']:+d}")
                print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ View Rate: {trends['view_rate_change']:+.1f}%")
                print(f"   üìÖ –†–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {trends['weekly_growth']:+d}")
                print(f"   üéØ –¢—Ä–µ–Ω–¥: {trends['performance_trend']}")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        
        return trends
    
    def check_alerts(self, metrics: Dict, trends: Dict) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        
        print("üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤...")
        
        alerts = []
        
        # 1. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ View Rate
        if metrics['view_rate'] < self.kpi_thresholds['view_rate_min']:
            alerts.append({
                'type': 'critical',
                'metric': 'view_rate',
                'message': f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ View Rate: {metrics['view_rate']:.1f}% < {self.kpi_thresholds['view_rate_min']}%",
                'action': '–°—Ä–æ—á–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
            })
        
        # 2. –ü–∞–¥–µ–Ω–∏–µ View Rate –¥–≤–∞ –¥–Ω—è –ø–æ–¥—Ä—è–¥
        if trends['view_rate_change'] < -2:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2%
            alerts.append({
                'type': 'warning',
                'metric': 'view_rate_trend',
                'message': f"‚ö†Ô∏è View Rate –ø–∞–¥–∞–µ—Ç: {trends['view_rate_change']:+.1f}%",
                'action': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤'
            })
        
        # 3. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if trends['weekly_growth'] < self.kpi_thresholds['subscriber_growth_weekly']:
            alerts.append({
                'type': 'info',
                'metric': 'subscriber_growth',
                'message': f"üìä –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {trends['weekly_growth']} –∑–∞ –Ω–µ–¥–µ–ª—é",
                'action': '–ê–∫—Ç–∏–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–æ—Å—Ç–∞'
            })
        
        # 4. –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç)
        if metrics['today_best_post'] > self.kpi_thresholds['viral_post_threshold']:
            alerts.append({
                'type': 'success',
                'metric': 'viral_post',
                'message': f"üöÄ –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç —Å–µ–≥–æ–¥–Ω—è: {metrics['today_best_post']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤!",
                'action': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
            })
        
        # 5. –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤
        low_performance_posts = [p for p in metrics['new_posts_performance'] 
                               if p['views'] < self.kpi_thresholds['low_performance_threshold']]
        if low_performance_posts:
            alerts.append({
                'type': 'warning',
                'metric': 'post_performance',
                'message': f"‚ö†Ô∏è {len(low_performance_posts)} –ø–æ—Å—Ç–æ–≤ —Å –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ (<{self.kpi_thresholds['low_performance_threshold']})",
                'action': '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
            })
        
        if alerts:
            print(f"   üö® –ù–∞–π–¥–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
            for alert in alerts:
                print(f"   {alert['message']}")
        else:
            print("   ‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ")
        
        return alerts
    
    def update_notion_dashboard(self, metrics: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—à–±–æ—Ä–¥ –≤ Notion"""
        
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Notion...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º Platform Database
            platforms_query = {
                "filter": {
                    "property": "Platforms",
                    "title": {
                        "equals": "Telegram"
                    }
                }
            }
            
            query_url = f"https://api.notion.so/v1/databases/{self.platforms_db_id}/query"
            try:
        response = requests.post(query_url, headers=self.headers, json=platforms_query)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {{e}}")
        return None
    
    response
            
            
                data = response.json()
                if data['results']:
                    page_id = data['results'][0]['id']
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    update_data = {
                        "properties": {
                            "Followers": {"number": metrics['subscribers']},
                            "Posts": {"number": metrics['total_posts']},
                            "Avg Views": {"number": int(metrics['avg_views'])},
                            "Last Updated": {
                                "date": {
                                    "start": datetime.now().isoformat()
                                }
                            }
                        }
                    }
                    
                    update_url = f"https://api.notion.so/v1/pages/{page_id}"
                    update_try:
        response = requests.patch(update_url, headers=self.headers, json=update_data)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
                    
                    if update_response.status_code == 200:
                        print("   ‚úÖ Notion –æ–±–Ω–æ–≤–ª–µ–Ω")
                        return True
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response.status_code}")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Notion: {e}")
        
        return False
    
    def generate_daily_report(self, metrics: Dict, trends: Dict, alerts: List) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        
        report = f"""
üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ TELEGRAM
{'='*40}
üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}

üéØ –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics['subscribers']:,} ({trends['subscriber_change']:+d})
   üìù –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {metrics['posts_today']}
   üìä View Rate: {metrics['view_rate']:.1f}% ({trends['view_rate_change']:+.1f}%)
   üìà –†–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {trends['weekly_growth']:+d} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

üìù –ö–û–ù–¢–ï–ù–¢ –°–ï–ì–û–î–ù–Ø:
   üèÜ –õ—É—á—à–∏–π –ø–æ—Å—Ç: {metrics['today_best_post']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['avg_views']:.0f}
   üéØ –¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {trends['performance_trend']}
"""
        
        if alerts:
            report += f"\nüö® –ê–õ–ï–†–¢–´ ({len(alerts)}):\n"
            for alert in alerts:
                icon = {"critical": "üö®", "warning": "‚ö†Ô∏è", "info": "üìä", "success": "üöÄ"}
                report += f"   {icon.get(alert['type'], 'üìä')} {alert['message']}\n"
                report += f"      ‚Üí {alert['action']}\n"
        else:
            report += "\n‚úÖ –í–°–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –í –ù–û–†–ú–ï\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        report += f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –ó–ê–í–¢–†–ê:\n"
        
        if metrics['view_rate'] < 15:
            report += "   üìà –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
        
        if metrics['posts_today'] == 0:
            report += "   üìù –°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –ø–æ—Å—Ç–æ–≤ - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å\n"
        elif metrics['posts_today'] > 3:
            report += "   ‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è - —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º\n"
        
        if trends['weekly_growth'] < 50:
            report += "   üë• –ê–∫—Ç–∏–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–æ—Å—Ç–∞\n"
        
        if any(alert['type'] == 'success' for alert in alerts):
            report += "   üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞\n"
        
        return report
    
    def save_daily_history(self, metrics: Dict) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        
        try:
            history = self.load_history()
            history.append(metrics)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            if len(history) > 30:
                history = history[-30:]
            
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=2, default=str)
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def load_history(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def get_recent_posts(self, channel: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        
        try:
            url = f"https://t.me/s/{channel}"
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            try:
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {{e}}")
        return None
    
    response
            
            
                from bs4 import BeautifulSoup
                soup = BeautifulSoup(response.content, 'html.parser')
                posts_elements = soup.find_all('div', class_='tgme_widget_message')
                
                posts_data = []
                for post_elem in posts_elements:
                    views_elem = post_elem.find('span', class_='tgme_widget_message_views')
                    if views_elem:
                        views_text = views_elem.text.strip()
                        views = self.convert_count_to_number(views_text)
                        
                        date_elem = post_elem.find('time', class_='datetime')
                        post_date = None
                        if date_elem:
                            datetime_attr = date_elem.get('datetime', '')
                            if datetime_attr:
                                try:
                                    post_date = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                                except:
                                    pass
                        
                        posts_data.append({
                            'views': views,
                            'date': post_date,
                            'url': f"https://t.me/{channel}/{post_elem.get('data-post', '').split('/')[-1]}"
                        })
                
                return posts_data
            
            return []
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return []
    
    def convert_count_to_number(self, count_str: str) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—á–µ—Ç—á–∏–∫–∞ –≤ —á–∏—Å–ª–æ"""
        
        if not count_str:
            return 0
        
        count_str = str(count_str).replace(' ', '').replace(',', '').lower()
        
        import re
        match = re.search(r'([\d.,]+[km]?)', count_str)
        if not match:
            return 0
        
        number_str = match.group(1)
        
        try:
            if 'k' in number_str:
                return int(float(number_str.replace('k', '')) * 1000)
            elif 'm' in number_str:
                return int(float(number_str.replace('m', '')) * 1000000)
            else:
                return int(float(number_str))
        except:
            return 0
    
    def send_alerts(self, alerts: List[Dict], report: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã (–≤ –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ —Ñ–∞–π–ª)"""
        
        critical_alerts = [a for a in alerts if a['type'] == 'critical']
        
        if critical_alerts:
            print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´!")
            for alert in critical_alerts:
                print(f"   {alert['message']}")
                print(f"   ‚Üí {alert['action']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç—ã –≤ —Ñ–∞–π–ª
            alert_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            alert_filename = f"telegram_alerts_{alert_timestamp}.txt"
            
            with open(alert_filename, 'w', encoding='utf-8') as f:
                f.write(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´ - {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
                f.write("=" * 50 + "\n\n")
                for alert in critical_alerts:
                    f.write(f"{alert['message']}\n")
                    f.write(f"–î–µ–π—Å—Ç–≤–∏–µ: {alert['action']}\n\n")
            
            print(f"   üìÑ –ê–ª–µ—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {alert_filename}")
    
    def run_weekly_analysis(self) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        
        print("\nüìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 40)
        
        history = self.load_history()
        
        if len(history) < 7:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        
        week_data = history[-7:]
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏
        weekly_summary = {
            'avg_view_rate': sum(d.get('view_rate', 0) for d in week_data) / len(week_data),
            'total_new_subscribers': week_data[-1]['subscribers'] - week_data[0]['subscribers'],
            'total_posts': sum(d.get('posts_today', 0) for d in week_data),
            'best_day_view_rate': max(d.get('view_rate', 0) for d in week_data),
            'worst_day_view_rate': min(d.get('view_rate', 0) for d in week_data)
        }
        
        report = f"""
üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢
{'='*50}
üìÖ –ü–µ—Ä–∏–æ–¥: {week_data[0]['date'][:10]} - {week_data[-1]['date'][:10]}

üìà –ò–¢–û–ì–ò –ù–ï–î–ï–õ–ò:
   üë• –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {weekly_summary['total_new_subscribers']:+d}
   üìù –ü–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {weekly_summary['total_posts']}
   üìä –°—Ä–µ–¥–Ω–∏–π View Rate: {weekly_summary['avg_view_rate']:.1f}%
   üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: {weekly_summary['best_day_view_rate']:.1f}%
   üìâ –•—É–¥—à–∏–π –¥–µ–Ω—å: {weekly_summary['worst_day_view_rate']:.1f}%

üí° –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if weekly_summary['avg_view_rate'] > 17:
            report += "   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        elif weekly_summary['avg_view_rate'] < 15:
            report += "   ‚ö†Ô∏è View Rate –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        
        if weekly_summary['total_new_subscribers'] < 50:
            report += "   üìà –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç. –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        
        if weekly_summary['total_posts'] < 7:
            report += "   üìù –ú–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
        
        print(report)
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê TELEGRAM")
    print("=" * 60)
    
    monitor = TelegramDailyMonitor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    is_monday = datetime.now().weekday() == 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    result = monitor.run_daily_monitoring("rawmid")
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print(result['report'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"telegram_daily_report_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(result['report'])
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º
    if is_monday:
        weekly_report = monitor.run_weekly_analysis()
        weekly_filename = f"telegram_weekly_report_{timestamp}.txt"
        
        with open(weekly_filename, 'w', encoding='utf-8') as f:
            f.write(weekly_report)
        
        print(f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {weekly_filename}")

if __name__ == "__main__":
    main() 