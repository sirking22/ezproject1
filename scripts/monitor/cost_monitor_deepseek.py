#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—Ç—Ä–∞—Ç DeepSeek API
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
"""

import os
import json
import time
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class CostRecord:
    """–ó–∞–ø–∏—Å—å –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö"""
    timestamp: str
    model: str
    input_tokens: int
    output_tokens: int
    cost: float
    request_id: str
    success: bool
    error: Optional[str] = None

@dataclass
class CostLimits:
    """–õ–∏–º–∏—Ç—ã –∑–∞—Ç—Ä–∞—Ç"""
    daily_limit: float = 10.0  # $10 –≤ –¥–µ–Ω—å
    hourly_limit: float = 2.0  # $2 –≤ —á–∞—Å
    request_limit: float = 0.1  # $0.1 –∑–∞ –∑–∞–ø—Ä–æ—Å
    warning_threshold: float = 0.8  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞

class DeepSeekCostMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∑–∞—Ç—Ä–∞—Ç –¥–ª—è DeepSeek API"""
    
    def __init__(self, data_file: str = "deepseek_costs.json"):
        self.data_file = Path(data_file)
        self.costs_file = Path("costs_history.json")
        self.limits = CostLimits()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞—Ç—Ä–∞—Ç
        self.cost_history: List[CostRecord] = self._load_cost_history()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_cost": 0.0,
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "daily_cost": 0.0,
            "hourly_cost": 0.0
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats()
        
        logger.info(f"üí∞ –ú–æ–Ω–∏—Ç–æ—Ä –∑–∞—Ç—Ä–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –õ–∏–º–∏—Ç: ${self.limits.daily_limit}/–¥–µ–Ω—å")
    
    def _load_cost_history(self) -> List[CostRecord]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç"""
        if self.costs_file.exists():
            try:
                with open(self.costs_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return [CostRecord(**record) for record in data]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç: {e}")
        return []
    
    def _save_cost_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç"""
        try:
            with open(self.costs_file, 'w', encoding='utf-8') as f:
                json.dump([asdict(record) for record in self.cost_history], f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç: {e}")
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        now = datetime.now()
        today = now.date()
        current_hour = now.replace(minute=0, second=0, microsecond=0)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        today_costs = [c for c in self.cost_history if datetime.fromisoformat(c.timestamp).date() == today]
        hour_costs = [c for c in self.cost_history if datetime.fromisoformat(c.timestamp) >= current_hour]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["total_cost"] = sum(c.cost for c in self.cost_history)
        self.stats["total_requests"] = len(self.cost_history)
        self.stats["successful_requests"] = len([c for c in self.cost_history if c.success])
        self.stats["failed_requests"] = len([c for c in self.cost_history if not c.success])
        self.stats["daily_cost"] = sum(c.cost for c in today_costs)
        self.stats["hourly_cost"] = sum(c.cost for c in hour_costs)
    
    def add_cost_record(self, record: CostRecord):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö"""
        self.cost_history.append(record)
        self._update_stats()
        self._save_cost_history()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        self._check_limits()
    
    def _check_limits(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        daily_usage = self.stats["daily_cost"] / self.limits.daily_limit
        hourly_usage = self.stats["hourly_cost"] / self.limits.hourly_limit
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if daily_usage >= self.limits.warning_threshold:
            logger.warning(f"‚ö†Ô∏è –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω: ${self.stats['daily_cost']:.2f}/${self.limits.daily_limit:.2f} ({daily_usage:.1%})")
        
        if hourly_usage >= self.limits.warning_threshold:
            logger.warning(f"‚ö†Ô∏è –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω: ${self.stats['hourly_cost']:.2f}/${self.limits.hourly_limit:.2f} ({hourly_usage:.1%})")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è
        if daily_usage >= 1.0:
            logger.error(f"üö® –î–ù–ï–í–ù–û–ô –õ–ò–ú–ò–¢ –ü–†–ï–í–´–®–ï–ù! ${self.stats['daily_cost']:.2f}/${self.limits.daily_limit:.2f}")
            raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞—Ç—Ä–∞—Ç!")
        
        if hourly_usage >= 1.0:
            logger.error(f"üö® –ß–ê–°–û–í–û–ô –õ–ò–ú–ò–¢ –ü–†–ï–í–´–®–ï–ù! ${self.stats['hourly_cost']:.2f}/${self.limits.hourly_limit:.2f}")
            raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –∑–∞—Ç—Ä–∞—Ç!")
    
    def get_cost_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            "total_cost": self.stats["total_cost"],
            "daily_cost": self.stats["daily_cost"],
            "hourly_cost": self.stats["hourly_cost"],
            "total_requests": self.stats["total_requests"],
            "success_rate": self.stats["successful_requests"] / max(self.stats["total_requests"], 1),
            "daily_limit_usage": self.stats["daily_cost"] / self.limits.daily_limit,
            "hourly_limit_usage": self.stats["hourly_cost"] / self.limits.hourly_limit,
            "limits": asdict(self.limits)
        }
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –∑–∞—Ç—Ä–∞—Ç"""
        summary = self.get_cost_summary()
        
        print("üí∞ –°–í–û–î–ö–ê –ó–ê–¢–†–ê–¢ DEEPSEEK API")
        print("=" * 50)
        print(f"üìä –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: ${summary['total_cost']:.4f}")
        print(f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${summary['daily_cost']:.4f} ({summary['daily_limit_usage']:.1%} –æ—Ç –ª–∏–º–∏—Ç–∞)")
        print(f"‚è∞ –ó–∞ —á–∞—Å: ${summary['hourly_cost']:.4f} ({summary['hourly_limit_usage']:.1%} –æ—Ç –ª–∏–º–∏—Ç–∞)")
        print(f"üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['total_requests']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1%}")
        print(f"üéØ –õ–∏–º–∏—Ç—ã: ${self.limits.daily_limit}/–¥–µ–Ω—å, ${self.limits.hourly_limit}/—á–∞—Å")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if summary['daily_limit_usage'] >= 0.8:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω!")
        if summary['hourly_limit_usage'] >= 0.8:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω!")
    
    def get_daily_chart(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII –≥—Ä–∞—Ñ–∏–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç"""
        summary = self.get_cost_summary()
        usage = summary['daily_limit_usage']
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        bar_length = 20
        filled_length = int(bar_length * usage)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
        
        return f"[{bar}] {usage:.1%}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
cost_monitor = DeepSeekCostMonitor()

def track_cost(model: str, input_tokens: int, output_tokens: int, cost: float, 
               request_id: str, success: bool = True, error: str = None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç"""
    record = CostRecord(
        timestamp=datetime.now().isoformat(),
        model=model,
        input_tokens=input_tokens,
        output_tokens=output_tokens,
        cost=cost,
        request_id=request_id,
        success=success,
        error=error
    )
    
    cost_monitor.add_cost_record(record)
    return record

async def test_cost_monitoring():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—Ç—Ä–∞—Ç"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–ê–¢–†–ê–¢")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    test_records = [
        ("deepseek-chat", 100, 50, 0.001, "test_1", True),
        ("deepseek-chat", 200, 100, 0.002, "test_2", True),
        ("deepseek-reasoner", 500, 200, 0.005, "test_3", False, "Timeout"),
        ("deepseek-chat", 150, 75, 0.0015, "test_4", True),
    ]
    
    for record in test_records:
        track_cost(*record)
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {record[0]} - ${record[3]:.4f}")
        time.sleep(0.1)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print("\n" + "=" * 50)
    cost_monitor.print_summary()
    
    # ASCII –≥—Ä–∞—Ñ–∏–∫
    print(f"\nüìä –î–Ω–µ–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {cost_monitor.get_daily_chart()}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí∞ DEEPSEEK COST MONITOR")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–æ–¥–∫—É
    cost_monitor.print_summary()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    asyncio.run(test_cost_monitoring())

if __name__ == "__main__":
    main() 