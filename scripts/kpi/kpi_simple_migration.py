#!/usr/bin/env python3
"""
üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø KPI
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –±–∞–∑–∞–º–∏: TASKS, KPI, RDT
"""

import os
import requests
import logging

logger = logging.getLogger(__name__)
import json
from datetime import datetime

NOTION_TOKEN = os.getenv('NOTION_TOKEN', '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')
HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json", 
    "Notion-Version": "2022-06-28"
}

# –†–ê–ë–û–ß–ò–ï ID –ë–ê–ó
TASKS_DB = "9c5f4269d61449b6a7485579a3c21da3"
KPI_DB = "1d6ace03d9ff80bfb809ed21dfd2150c"
RDT_DB = "195ace03d9ff80c1a1b0d236ec3564d2"

def create_kpi_properties():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ KPI –ø–æ–ª—è"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ KPI –ø–æ–ª–µ–π...")
    
    properties = {
        # –ü–†–û–°–¢–´–ï –§–û–†–ú–£–õ–´ (–±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö rollup)
        "–û–±—ä–µ–∫—Ç KPI": {
            "type": "select",
            "select": {
                "options": [
                    {"name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "color": "blue"},
                    {"name": "–ö–æ–º–∞–Ω–¥–∞", "color": "green"}, 
                    {"name": "–ü—Ä–æ–µ–∫—Ç", "color": "purple"},
                    {"name": "–ó–∞–¥–∞—á–∞", "color": "orange"}
                ]
            }
        },
        
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫–∏": {
            "type": "select", 
            "select": {
                "options": [
                    {"name": "–°—Ä–æ–∫–∏", "color": "red"},
                    {"name": "–ö–∞—á–µ—Å—Ç–≤–æ", "color": "green"},
                    {"name": "–û–±—ä–µ–º", "color": "blue"},
                    {"name": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "color": "yellow"}
                ]
            }
        },
        
        "–ê–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç": {
            "type": "checkbox",
            "checkbox": {}
        },
        
        "–°—Ç–∞—Ç—É—Å KPI": {
            "type": "select",
            "select": {
                "options": [
                    {"name": "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ", "color": "green"},
                    {"name": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "color": "blue"},
                    {"name": "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ", "color": "red"},
                    {"name": "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "color": "gray"}
                ]
            }
        },
        
        "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ %": {
            "type": "formula",
            "formula": {
                "expression": "if(toNumber(prop(\"–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\")) > 0, round((prop(\"–§–∞–∫—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)\") / toNumber(prop(\"–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\"))) * 100, 1), 0)"
            }
        }
    }
    
    url = f"https://api.notion.com/v1/databases/{KPI_DB}/properties"
    
    success_count = 0
    for prop_name, prop_config in properties.items():
        try:
            try:
        response = requests.patch(url, headers=HEADERS, json={
                "properties": {prop_name: prop_config}
            })
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
            
            
                print(f"‚úÖ KPI –ø–æ–ª–µ: {prop_name}")
                success_count += 1
            else:
                print(f"‚ùå KPI –æ—à–∏–±–∫–∞ {prop_name}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå KPI –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {prop_name}: {e}")
    
    return success_count

def create_tasks_template_fields():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –≤ TASKS"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–æ–≤ –≤ TASKS...")
    
    properties = {
        "–¢–∏–ø —Ä–∞–±–æ—Ç—ã": {
            "type": "select",
            "select": {
                "options": [
                    {"name": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "color": "red"},
                    {"name": "–î–∏–∑–∞–π–Ω", "color": "blue"},
                    {"name": "–ö–æ–Ω—Ç–µ–Ω—Ç", "color": "green"},
                    {"name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ", "color": "purple"}
                ]
            }
        },
        
        "–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã": {
            "type": "select",
            "select": {
                "options": [
                    {"name": "–ü—Ä–æ—Å—Ç–∞—è", "color": "green"},
                    {"name": "–°—Ä–µ–¥–Ω—è—è", "color": "yellow"},
                    {"name": "–°–ª–æ–∂–Ω–∞—è", "color": "red"}
                ]
            }
        },
        
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è": {
            "type": "number",
            "number": {"format": "number"}
        }
    }
    
    url = f"https://api.notion.com/v1/databases/{TASKS_DB}/properties"
    
    success = 0
    for prop_name, config in properties.items():
        try:
            try:
        response = requests.patch(url, headers=HEADERS, json={
                "properties": {prop_name: config}
            })
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
            
            
                print(f"‚úÖ TASKS –ø–æ–ª–µ: {prop_name}")
                success += 1
            else:
                print(f"‚ùå TASKS –æ—à–∏–±–∫–∞ {prop_name}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå TASKS –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {prop_name}: {e}")
    
    return success

def create_sample_kpi_records():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã KPI –∑–∞–ø–∏—Å–µ–π"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ KPI –∑–∞–ø–∏—Å–µ–π...")
    
    sample_records = [
        {
            "name": "% –∑–∞–¥–∞—á –≤ —Å—Ä–æ–∫ - –ö–æ–º–∞–Ω–¥–∞ - –î–µ–∫–∞–±—Ä—å 2024",
            "object": "–ö–æ–º–∞–Ω–¥–∞",
            "category": "–°—Ä–æ–∫–∏",
            "target": "85",
            "auto": True
        },
        {
            "name": "–ö–∞—á–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω–∞ - –ö–æ–º–∞–Ω–¥–∞ - –î–µ–∫–∞–±—Ä—å 2024", 
            "object": "–ö–æ–º–∞–Ω–¥–∞",
            "category": "–ö–∞—á–µ—Å—Ç–≤–æ",
            "target": "4.5",
            "auto": True
        },
        {
            "name": "–û–±—ä–µ–º –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏ - –ü—Ä–æ–µ–∫—Ç - –î–µ–∫–∞–±—Ä—å 2024",
            "object": "–ü—Ä–æ–µ–∫—Ç", 
            "category": "–û–±—ä–µ–º",
            "target": "50",
            "auto": False
        }
    ]
    
    url = f"https://api.notion.com/v1/pages"
    created = 0
    
    for record in sample_records:
        try:
            page_data = {
                "parent": {"database_id": KPI_DB},
                "properties": {
                    "Name": {"title": [{"text": {"content": record["name"]}}]},
                    "–û–±—ä–µ–∫—Ç KPI": {"select": {"name": record["object"]}},
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫–∏": {"select": {"name": record["category"]}},
                    "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": {"rich_text": [{"text": {"content": record["target"]}}]},
                    "–ê–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç": {"checkbox": record["auto"]},
                    "–î–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞": {"date": {"start": datetime.now().strftime('%Y-%m-%d')}}
                }
            }
            
            try:
        response = requests.post(url, headers=HEADERS, json=page_data)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {{e}}")
        return None
    
    response
            
            
                print(f"‚úÖ KPI –∑–∞–ø–∏—Å—å: {record['name'][:30]}...")
                created += 1
            else:
                print(f"‚ùå KPI –∑–∞–ø–∏—Å—å –æ—à–∏–±–∫–∞: {response.status_code}")
        except Exception as e:
            print(f"‚ùå KPI –∑–∞–ø–∏—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return created

def main():
    print("üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø KPI")
    print("=" * 40)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    total_operations = 0
    
    # –≠–¢–ê–ü 1: KPI –ø–æ–ª—è
    print("\nüìä –≠–¢–ê–ü 1: KPI –ø–æ–ª—è...")
    kpi_fields = create_kpi_properties()
    total_operations += kpi_fields
    print(f"   –°–æ–∑–¥–∞–Ω–æ: {kpi_fields}/5")
    
    # –≠–¢–ê–ü 2: TASKS –ø–æ–ª—è
    print("\nüìã –≠–¢–ê–ü 2: TASKS –ø–æ–ª—è...")
    tasks_fields = create_tasks_template_fields()
    total_operations += tasks_fields
    print(f"   –°–æ–∑–¥–∞–Ω–æ: {tasks_fields}/3")
    
    # –≠–¢–ê–ü 3: –ü—Ä–∏–º–µ—Ä—ã KPI
    print("\nüìä –≠–¢–ê–ü 3: –ü—Ä–∏–º–µ—Ä—ã KPI...")
    kpi_records = create_sample_kpi_records()
    total_operations += kpi_records
    print(f"   –°–æ–∑–¥–∞–Ω–æ: {kpi_records}/3")
    
    # –†–ï–ó–£–õ–¨–¢–ê–¢
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}")
    
    if total_operations >= 8:
        print("\nüéâ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüìã –ß–¢–û –ì–û–¢–û–í–û:")
        print("‚úÖ KPI –±–∞–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ TASKS –≥–æ—Ç–æ–≤–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤")
        print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã KPI –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω—ã")
        
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å KPI ‚Üî TASKS")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
        print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫")
        print("4. –°–æ–∑–¥–∞—Ç—å dashboard")
    else:
        print(f"\n‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: {total_operations} –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    return total_operations

if __name__ == "__main__":
    main() 