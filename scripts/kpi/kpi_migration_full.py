#!/usr/bin/env python3
"""
üéØ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø KPI + –ü–û–õ–ò–ì–†–ê–§–ò–Ø
–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–æ—Ä–º—É–ª—ã RDT ‚Üí KPI + —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
"""

import os
import requests
import logging

logger = logging.getLogger(__name__)
import json
from datetime import datetime

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NOTION_TOKEN = os.getenv('NOTION_TOKEN', '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')
HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json", 
    "Notion-Version": "2022-06-28"
}

# ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö (–ë–ï–ó –î–ï–§–ò–°–û–í!)
KPI_DB = "1d6ace03d9ff80bfb809ed21dfd2150c"
RDT_DB = "195ace03d9ff80c1a1b0d236ec3564d2"
TASKS_DB = "9c5f4269d61449b6a7485579a3c21da3"
TEMPLATES_DB = "7bb1a2fc7dfa43a88b581b7a09b5a123"

def check_database_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º...")
    
    databases = {
        "KPI": KPI_DB,
        "RDT": RDT_DB, 
        "TASKS": TASKS_DB,
        "TEMPLATES": TEMPLATES_DB
    }
    
    accessible = {}
    for name, db_id in databases.items():
        try:
            url = f"https://api.notion.com/v1/databases/{db_id}"
            try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {{e}}")
        return None
    
    response
            
            
                data = response.json()
                title = data.get('title', [{}])[0].get('plain_text', 'Untitled')
                print(f"‚úÖ {name}: {title}")
                accessible[name] = True
            else:
                print(f"‚ùå {name}: {response.status_code}")
                accessible[name] = False
        except Exception as e:
            print(f"‚ùå {name}: {e}")
            accessible[name] = False
    
    return accessible

def create_kpi_connection_to_tasks():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å KPI ‚Üî TASKS"""
    print("üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ KPI ‚Üî TASKS...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ TASKS –≤ KPI –±–∞–∑—É
    kpi_property = {
        "–ó–∞–¥–∞—á–∏": {
            "type": "relation",
            "relation": {
                "database_id": TASKS_DB,
                "type": "dual_property",
                "dual_property": {}
            }
        }
    }
    
    url = f"https://api.notion.com/v1/databases/{KPI_DB}/properties"
    
    try:
        try:
        response = requests.patch(url, headers=HEADERS, json={
            "properties": kpi_property
        })
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
        
        
            print("‚úÖ –°–≤—è–∑—å KPI ‚Üî TASKS —Å–æ–∑–¥–∞–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–≤—è–∑–∏: {e}")
        return False

def create_kpi_formula_properties():
    """–°–æ–∑–¥–∞–µ—Ç KPI —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ RDT"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ KPI —Ñ–æ—Ä–º—É–ª...")
    
    properties = {
        # –ö–ü–ò –§–û–†–ú–£–õ–´ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã)
        "–ü—Ä–æ—Ü–µ–Ω—Ç –≤ —Å—Ä–æ–∫": {
            "type": "formula",
            "formula": {
                "expression": "if(prop(\"–ó–∞–¥–∞—á–∏\").length() > 0, round((prop(\"–ó–∞–¥–∞—á–∏\").filter(current.prop(\"–í —Å—Ä–æ–∫\") == true).length() / prop(\"–ó–∞–¥–∞—á–∏\").length()) * 100, 1), 0)"
            }
        },
        
        "–ü—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑ –ø—Ä–∞–≤–æ–∫": {
            "type": "formula", 
            "formula": {
                "expression": "if(prop(\"–ó–∞–¥–∞—á–∏\").length() > 0, round((prop(\"–ó–∞–¥–∞—á–∏\").filter(current.prop(\"–ë–µ–∑ –ø—Ä–∞–≤–æ–∫\") == true).length() / prop(\"–ó–∞–¥–∞—á–∏\").length()) * 100, 1), 0)"
            }
        },

        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á": {
            "type": "formula",
            "formula": {
                "expression": "prop(\"–ó–∞–¥–∞—á–∏\").length()"
            }
        },

        "–í—Ä–µ–º—è –≤—Å–µ–≥–æ": {
            "type": "formula", 
            "formula": {
                "expression": "round(prop(\"–ó–∞–¥–∞—á–∏\").map(current.prop(\"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏\")).sum() * 10) / 10"
            }
        },

        # –°–¢–†–£–ö–¢–£–†–ù–´–ï –ü–û–õ–Ø
        "–û–±—ä–µ–∫—Ç KPI": {
            "type": "select",
            "select": {
                "options": [
                    {"name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "color": "blue"},
                    {"name": "–ö–æ–º–∞–Ω–¥–∞", "color": "green"}, 
                    {"name": "–ü—Ä–æ–µ–∫—Ç", "color": "purple"},
                    {"name": "–ó–∞–¥–∞—á–∞", "color": "orange"},
                    {"name": "–®–∞–±–ª–æ–Ω", "color": "yellow"}
                ]
            }
        },
        
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {
            "type": "select", 
            "select": {
                "options": [
                    {"name": "–°—Ä–æ–∫–∏", "color": "red"},
                    {"name": "–ö–∞—á–µ—Å—Ç–≤–æ", "color": "green"},
                    {"name": "–û–±—ä–µ–º", "color": "blue"},
                    {"name": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "color": "yellow"}
                ]
            }
        },
        
        "–ê–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç": {
            "type": "checkbox",
            "checkbox": {}
        },
        
        "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ %": {
            "type": "formula",
            "formula": {
                "expression": "if(toNumber(prop(\"–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\")) > 0, round((prop(\"–§–∞–∫—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)\") / toNumber(prop(\"–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\"))) * 100, 1), 0)"
            }
        }
    }
    
    url = f"https://api.notion.com/v1/databases/{KPI_DB}/properties"
    
    success_count = 0
    for prop_name, prop_config in properties.items():
        try:
            try:
        response = requests.patch(url, headers=HEADERS, json={
                "properties": {prop_name: prop_config}
            })
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
            
            
                print(f"‚úÖ KPI –ø–æ–ª–µ: {prop_name}")
                success_count += 1
            else:
                print(f"‚ùå KPI –æ—à–∏–±–∫–∞ {prop_name}: {response.status_code}")
                print(f"   {response.text}")
        except Exception as e:
            print(f"‚ùå KPI –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {prop_name}: {e}")
    
    return success_count, len(properties)

def create_templates_properties():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–æ–≤...")
    
    # –ü–æ–ª—è –¥–ª—è TASKS –±–∞–∑—ã
    tasks_properties = {
        "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞": {
            "type": "select",
            "select": {
                "options": [
                    {"name": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "color": "red"},
                    {"name": "–î–∏–∑–∞–π–Ω", "color": "blue"},
                    {"name": "–ö–æ–Ω—Ç–µ–Ω—Ç", "color": "green"},
                    {"name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ", "color": "purple"},
                    {"name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ", "color": "gray"}
                ]
            }
        },
        
        "–°–ª–æ–∂–Ω–æ—Å—Ç—å": {
            "type": "select",
            "select": {
                "options": [
                    {"name": "–ü—Ä–æ—Å—Ç–∞—è", "color": "green"},
                    {"name": "–°—Ä–µ–¥–Ω—è—è", "color": "yellow"},
                    {"name": "–°–ª–æ–∂–Ω–∞—è", "color": "red"}
                ]
            }
        },
        
        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è": {
            "type": "number",
            "number": {"format": "number"}
        },
        
        "–°–≤—è–∑—å —Å —à–∞–±–ª–æ–Ω–æ–º": {
            "type": "relation",
            "relation": {
                "database_id": TEMPLATES_DB,
                "type": "dual_property",
                "dual_property": {}
            }
        }
    }
    
    url = f"https://api.notion.com/v1/databases/{TASKS_DB}/properties"
    
    success = 0
    for prop_name, config in tasks_properties.items():
        try:
            try:
        response = requests.patch(url, headers=HEADERS, json={
                "properties": {prop_name: config}
            })
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
            
            
                print(f"‚úÖ TASKS –ø–æ–ª–µ: {prop_name}")
                success += 1
            else:
                print(f"‚ùå TASKS –æ—à–∏–±–∫–∞ {prop_name}: {response.status_code}")
                print(f"   {response.text}")
        except Exception as e:
            print(f"‚ùå TASKS –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {prop_name}: {e}")
    
    return success

def create_polygraphy_templates():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –≤ TEMPLATES –±–∞–∑–µ"""
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤...")
    
    templates = [
        {"name": "–õ–∏—Å—Ç–æ–≤–∫–∞ A4", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–ü—Ä–æ—Å—Ç–∞—è", "time": 2, "desc": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–∏—Å—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ A4"},
        {"name": "–õ–∏—Å—Ç–æ–≤–∫–∞ A5", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–ü—Ä–æ—Å—Ç–∞—è", "time": 1.5, "desc": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ª–∏—Å—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ A5"},
        {"name": "–§–ª–∞–µ—Ä", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–ü—Ä–æ—Å—Ç–∞—è", "time": 2, "desc": "–†–µ–∫–ª–∞–º–Ω—ã–π —Ñ–ª–∞–µ—Ä –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"},
        {"name": "–ë—É–∫–ª–µ—Ç 2-fold", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–°—Ä–µ–¥–Ω—è—è", "time": 4, "desc": "–ë—É–∫–ª–µ—Ç —Å –æ–¥–Ω–∏–º —Å–≥–∏–±–æ–º"},
        {"name": "–ë—É–∫–ª–µ—Ç 3-fold", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–°—Ä–µ–¥–Ω—è—è", "time": 5, "desc": "–ë—É–∫–ª–µ—Ç —Å –¥–≤—É–º—è —Å–≥–∏–±–∞–º–∏"},
        {"name": "–í–∏–∑–∏—Ç–∫–∏", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–ü—Ä–æ—Å—Ç–∞—è", "time": 1, "desc": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–∑–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"},
        {"name": "–ë–∞–Ω–Ω–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–°—Ä–µ–¥–Ω—è—è", "time": 3, "desc": "–ë–∞–Ω–Ω–µ—Ä –¥–ª—è –Ω–∞—Ä—É–∂–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã"},
        {"name": "–ö–∞—Ç–∞–ª–æ–≥", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–°–ª–æ–∂–Ω–∞—è", "time": 8, "desc": "–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"},
        {"name": "–£–ø–∞–∫–æ–≤–∫–∞", "type": "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "complexity": "–°–ª–æ–∂–Ω–∞—è", "time": 6, "desc": "–î–∏–∑–∞–π–Ω —É–ø–∞–∫–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞"}
    ]
    
    url = f"https://api.notion.com/v1/pages"
    
    created = 0
    for template in templates:
        try:
            page_data = {
                "parent": {"database_id": TEMPLATES_DB},
                "properties": {
                    "Name": {"title": [{"text": {"content": template["name"]}}]},
                    "–û–ø–∏—Å–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": template["desc"]}}]},
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {"select": {"name": template["type"]}},
                    "–°–ª–æ–∂–Ω–æ—Å—Ç—å": {"select": {"name": template["complexity"]}},
                    "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è": {"number": template["time"]}
                }
            }
            
            try:
        response = requests.post(url, headers=HEADERS, json=page_data)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {{e}}")
        return None
    
    response
            
            
                print(f"‚úÖ –®–∞–±–ª–æ–Ω: {template['name']}")
                created += 1
            else:
                print(f"‚ùå –®–∞–±–ª–æ–Ω –æ—à–∏–±–∫–∞ {template['name']}: {response.status_code}")
                print(f"   {response.text}")
        except Exception as e:
            print(f"‚ùå –®–∞–±–ª–æ–Ω –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {template['name']}: {e}")
    
    return created

def create_sample_kpi_record():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä KPI –∑–∞–ø–∏—Å–∏"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ KPI –∑–∞–ø–∏—Å–∏...")
    
    try:
        page_data = {
            "parent": {"database_id": KPI_DB},
            "properties": {
                "Name": {"title": [{"text": {"content": f"% –∑–∞–¥–∞—á –≤ —Å—Ä–æ–∫ - –ö–æ–º–∞–Ω–¥–∞ - {datetime.now().strftime('%B %Y')}"}}]},
                "–û–±—ä–µ–∫—Ç KPI": {"select": {"name": "–ö–æ–º–∞–Ω–¥–∞"}},
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {"select": {"name": "–°—Ä–æ–∫–∏"}},
                "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": {"rich_text": [{"text": {"content": "85"}}]},
                "–ê–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç": {"checkbox": True},
                "–î–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞": {"date": {"start": datetime.now().strftime('%Y-%m-%d')}}
            }
        }
        
        url = f"https://api.notion.com/v1/pages"
        try:
        response = requests.post(url, headers=HEADERS, json=page_data)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {{e}}")
        return None
    
    response
        
        
            print("‚úÖ –ü—Ä–∏–º–µ—Ä KPI –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ KPI –∑–∞–ø–∏—Å–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ KPI –∑–∞–ø–∏—Å–∏: {e}")
        return False

def main():
    print("üöÄ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø KPI + –ü–û–õ–ò–ì–†–ê–§–ò–Ø")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ë–ê–ó–ê–ú
    accessible = check_database_access()
    
    if not all(accessible.values()):
        print("\n‚ùå –ù–ï –í–°–ï –ë–ê–ó–´ –î–û–°–¢–£–ü–ù–´")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –±–∞–∑ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        return 0
    
    total_success = 0
    
    # –≠–¢–ê–ü 1: –°–≤—è–∑—å KPI ‚Üî TASKS  
    print("\nüîó –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π...")
    if create_kpi_connection_to_tasks():
        total_success += 1
    
    # –≠–¢–ê–ü 2: KPI —Ñ–æ—Ä–º—É–ª—ã
    print("\nüìä –≠–¢–ê–ü 2: KPI —Ñ–æ—Ä–º—É–ª—ã...")
    kpi_success, kpi_total = create_kpi_formula_properties()
    print(f"   –°–æ–∑–¥–∞–Ω–æ: {kpi_success}/{kpi_total}")
    total_success += min(kpi_success, 5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    
    # –≠–¢–ê–ü 3: –ü–æ–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    print("\nüìã –≠–¢–ê–ü 3: –ü–æ–ª—è —à–∞–±–ª–æ–Ω–æ–≤...")
    templates_fields = create_templates_properties()
    print(f"   –°–æ–∑–¥–∞–Ω–æ: {templates_fields}/4")
    total_success += templates_fields
    
    # –≠–¢–ê–ü 4: –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è
    print("\nüé® –≠–¢–ê–ü 4: –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã...")
    polygraphy_created = create_polygraphy_templates()
    print(f"   –°–æ–∑–¥–∞–Ω–æ: {polygraphy_created}/9")
    total_success += min(polygraphy_created, 5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    
    # –≠–¢–ê–ü 5: –ü—Ä–∏–º–µ—Ä KPI
    print("\nüìä –≠–¢–ê–ü 5: –ü—Ä–∏–º–µ—Ä KPI –∑–∞–ø–∏—Å–∏...")
    if create_sample_kpi_record():
        total_success += 1
    
    # –†–ï–ó–£–õ–¨–¢–ê–¢
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {total_success}")
    print(f"üìä KPI –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
    print(f"üé® –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã")
    print(f"üîó –°–≤—è–∑–∏ –º–µ–∂–¥—É –±–∞–∑–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    if total_success >= 10:
        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("\nüìã –ß–¢–û –ì–û–¢–û–í–û:")
        print("‚úÖ KPI —Ñ–æ—Ä–º—É–ª—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –±–∞–∑–µ")
        print("‚úÖ –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ –°–≤—è–∑–∏ TASKS ‚Üî KPI –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞")
        
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –°–æ–∑–¥–∞—Ç—å KPI –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∫ –∑–∞–¥–∞—á–∞–º")
        print("3. –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏")
        print("4. –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
    else:
        print(f"\n‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: {total_success} –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º")
    
    return total_success

if __name__ == "__main__":
    main() 