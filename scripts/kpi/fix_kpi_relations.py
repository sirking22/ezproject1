#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è relations –≤ KPI –±–∞–∑–µ
"""

import os
import requests
import logging

logger = logging.getLogger(__name__)
import json

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_BASE_URL = "https://api.notion.com/v1"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
KPI_DB = "1d6ace03d9ff80bfb809ed21dfd2150c"

def create_relation_property(property_name, target_db_id):
    """–°–æ–∑–¥–∞–µ—Ç relation property –≤ KPI –±–∞–∑–µ"""
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL –∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    url = f"{NOTION_BASE_URL}/databases/{KPI_DB}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    get_try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {{e}}")
        return None
    
    response
    if get_response.status_code != 200:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É KPI –±–∞–∑—ã: {get_response.status_code}")
        return False
    
    current_data = get_response.json()
    current_properties = current_data.get('properties', {})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    new_property = {
        "type": "relation",
        "relation": {
            "database_id": target_db_id
        }
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É
    update_data = {
        "properties": {
            **current_properties,
            property_name: new_property
        }
    }
    
    try:
        response = requests.patch(url, headers=HEADERS, json=update_data)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
    
    
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å: {property_name} ‚Üí {target_db_id}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {property_name}: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text[:300]}")
        return False

def test_basic_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ KPI –±–∞–∑–µ"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ KPI –±–∞–∑–µ...")
    
    url = f"{NOTION_BASE_URL}/databases/{KPI_DB}"
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {{e}}")
        return None
    
    response
    
    
        data = response.json()
        properties_count = len(data.get('properties', {}))
        print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ KPI –±–∞–∑–µ: {properties_count} –ø–æ–ª–µ–π")
        return True
    else:
        print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ KPI –±–∞–∑–µ: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        return False

def main():
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï KPI RELATIONS")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
    if not test_basic_access():
        return
    
    # –ù–æ–≤—ã–µ —Å–≤—è–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–π)
    relations_to_create = {
        "–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏": "d09df250ce7e4e0d9fbe4e036d320def",
        "–°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã": "342f18c67a5e41fead73dcec00770f4e", 
        "–°–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ø–∏–∫–∏": "6fc4322e6d0c45a6b37ac49b818a063a"
    }
    
    success_count = 0
    
    print("\nüîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π (–ø–æ –æ–¥–Ω–æ–π):")
    for name, db_id in relations_to_create.items():
        print(f"\n‚è≥ –°–æ–∑–¥–∞—é: {name}...")
        if create_relation_property(name, db_id):
            success_count += 1
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤ –≤ ID
            clean_id = db_id.replace("-", "")
            print(f"   üîÑ –ü—Ä–æ–±—É—é –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤: {clean_id}")
            if create_relation_property(name, clean_id):
                success_count += 1
    
    print(f"\nüìà –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {success_count}/{len(relations_to_create)}")
    
    if success_count > 0:
        print("\nüéâ –ü–†–û–ì–†–ï–°–° –ï–°–¢–¨!")
        print("‚úÖ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ KPI –∑–∞–ø–∏—Å–∏")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å rollup –∏–∑ RDT")
        print("3. –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞")
        
    else:
        print("\n‚ö†Ô∏è –°–≤—è–∑–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑—ã")
        print("   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ ID –±–∞–∑")
        print("   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Notion API")

if __name__ == "__main__":
    main() 