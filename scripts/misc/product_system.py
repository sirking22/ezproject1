#!/usr/bin/env python3
"""
üöÄ PRODUCT SYSTEM
–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç

–ö–û–ù–¶–ï–ü–¶–ò–Ø –ü–†–û–î–£–ö–¢–ê:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
2. –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
3. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏
4. API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
5. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

–ö–û–ú–ü–û–ù–ï–ù–¢–´:
- Scheduler (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
- Rules Engine (–¥–≤–∏–∂–æ–∫ –ø—Ä–∞–≤–∏–ª)
- Web Interface (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
- Analytics (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
- API Gateway (API —à–ª—é–∑)
"""

import os
import json
import asyncio
import schedule
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
from notion_client import AsyncClient

@dataclass
class ProcessingRule:
    """–ü—Ä–∞–≤–∏–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    id: str
    name: str
    description: str
    pattern: str
    action: str
    enabled: bool = True
    priority: int = 1
    created_at: str = ""
    last_used: str = ""
    usage_count: int = 0

@dataclass
class ProcessingJob:
    """–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    id: str
    type: str
    status: str
    created_at: str
    started_at: Optional[str] = None
    completed_at: Optional[str] = None
    records_processed: int = 0
    errors: List[str] = None
    results: Dict = None

class ProductSystem:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.notion = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
        self.database_id = "ad92a6e21485428c84de8587706b3be1"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.rules: List[ProcessingRule] = []
        self.jobs: List[ProcessingJob] = []
        self.analytics = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'auto_processing': True,
            'schedule_interval': 60,  # –º–∏–Ω—É—Ç
            'max_llm_tokens_per_day': 10000,
            'quality_threshold': 0.85,
            'backup_enabled': True
        }
        
        self._load_system_state()
        self._init_default_rules()

    def _load_system_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            with open('product_state.json', 'r', encoding='utf-8') as f:
                state = json.load(f)
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
            if 'rules' in state:
                self.rules = [ProcessingRule(**rule) for rule in state['rules']]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
            if 'jobs' in state:
                self.jobs = [ProcessingJob(**job) for job in state['jobs']]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if 'config' in state:
                self.config.update(state['config'])
                
        except FileNotFoundError:
            print("‚ÑπÔ∏è –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")

    def _save_system_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        state = {
            'timestamp': datetime.now().isoformat(),
            'rules': [asdict(rule) for rule in self.rules],
            'jobs': [asdict(job) for job in self.jobs],
            'config': self.config,
            'analytics': self.analytics
        }
        
        with open('product_state.json', 'w', encoding='utf-8') as f:
            json.dump(state, f, ensure_ascii=False, indent=2)

    def _init_default_rules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if not self.rules:
            default_rules = [
                ProcessingRule(
                    id="remove_telegram_emoji",
                    name="–£–¥–∞–ª–µ–Ω–∏–µ üì± —ç–º–æ–¥–∑–∏",
                    description="–£–¥–∞–ª—è–µ—Ç üì± –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–π",
                    pattern="^üì±\\s*",
                    action="replace:",
                    priority=1
                ),
                ProcessingRule(
                    id="clean_savebot_spam",
                    name="–û—á–∏—Å—Ç–∫–∞ SaveAsBot",
                    description="–£–¥–∞–ª—è–µ—Ç —Å–ø–∞–º –æ—Ç SaveAsBot",
                    pattern=".*@SaveAsBot.*",
                    action="delete",
                    priority=2
                ),
                ProcessingRule(
                    id="extract_instagram_info",
                    name="Instagram –∫–æ–Ω—Ç–µ–Ω—Ç",
                    description="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ Instagram",
                    pattern="instagram\\.com",
                    action="tag:Instagram,–ö–æ–Ω—Ç–µ–Ω—Ç",
                    priority=3
                ),
                ProcessingRule(
                    id="extract_youtube_info", 
                    name="YouTube –∫–æ–Ω—Ç–µ–Ω—Ç",
                    description="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ YouTube",
                    pattern="youtube\\.com|youtu\\.be",
                    action="tag:YouTube,–í–∏–¥–µ–æ",
                    priority=3
                ),
                ProcessingRule(
                    id="delete_low_weight",
                    name="–£–¥–∞–ª–µ–Ω–∏–µ –º—É—Å–æ—Ä–∞",
                    description="–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å –Ω–∏–∑–∫–æ–π –≤–µ—Å–æ–º–æ—Å—Ç—å—é",
                    pattern="weight<15",
                    action="delete",
                    priority=5
                )
            ]
            
            self.rules.extend(default_rules)
            self._save_system_state()

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("üïê –ó–ê–ü–£–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
        print("="*60)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule.every(self.config['schedule_interval']).minutes.do(
            lambda: asyncio.create_task(self.auto_process())
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        schedule.every().day.at("09:00").do(
            lambda: asyncio.create_task(self.generate_daily_report())
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª
        schedule.every().sunday.at("02:00").do(
            lambda: asyncio.create_task(self.optimize_rules())
        )
        
        print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
        print(f"   üìä –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥—ã–µ {self.config['schedule_interval']} –º–∏–Ω—É—Ç")
        print(f"   üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 09:00")
        print(f"   üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            schedule.run_pending()
            await asyncio.sleep(60)

    async def auto_process(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        job_id = f"auto_{int(time.time())}"
        job = ProcessingJob(
            id=job_id,
            type="auto_processing",
            status="running",
            created_at=datetime.now().isoformat(),
            started_at=datetime.now().isoformat(),
            errors=[]
        )
        
        self.jobs.append(job)
        
        try:
            print(f"\nüîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê - {datetime.now().strftime('%H:%M:%S')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
            new_records = await self._get_new_records()
            
            if not new_records:
                job.status = "completed"
                job.completed_at = datetime.now().isoformat()
                job.records_processed = 0
                print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç")
                return
            
            print(f"üì• –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(new_records)}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
            processed = await self._apply_rules_to_records(new_records)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            job.status = "completed"
            job.completed_at = datetime.now().isoformat()
            job.records_processed = processed
            job.results = {
                'processed': processed,
                'rules_applied': len([r for r in self.rules if r.enabled])
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            self._update_analytics(processed)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed}")
            
        except Exception as e:
            job.status = "failed"
            job.completed_at = datetime.now().isoformat()
            job.errors.append(str(e))
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        finally:
            self._save_system_state()

    async def _get_new_records(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        last_job = None
        for job in reversed(self.jobs):
            if job.status == "completed" and job.type == "auto_processing":
                last_job = job
                break
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –±–µ—Ä–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        if not last_job:
            cutoff_time = datetime.now() - timedelta(hours=1)
        else:
            cutoff_time = datetime.fromisoformat(last_job.completed_at)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Notion API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return []

    async def _apply_rules_to_records(self, records: List[Dict]) -> int:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∫ –∑–∞–ø–∏—Å—è–º"""
        processed = 0
        
        for record in records:
            changes = {}
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            for rule in sorted(self.rules, key=lambda r: r.priority):
                if not rule.enabled:
                    continue
                
                change = await self._apply_single_rule(rule, record)
                if change:
                    changes.update(change)
                    rule.usage_count += 1
                    rule.last_used = datetime.now().isoformat()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –∑–∞–ø–∏—Å–∏
            if changes:
                await self._update_notion_record(record['id'], changes)
                processed += 1
        
        return processed

    async def _apply_single_rule(self, rule: ProcessingRule, record: Dict) -> Optional[Dict]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∫ –∑–∞–ø–∏—Å–∏"""
        import re
        
        content = f"{record.get('title', '')} {record.get('description', '')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        if re.search(rule.pattern, content, re.IGNORECASE):
            
            if rule.action.startswith("replace:"):
                replacement = rule.action.split(":", 1)[1]
                new_content = re.sub(rule.pattern, replacement, content)
                return {"title": new_content}
            
            elif rule.action == "delete":
                return {"delete": True}
            
            elif rule.action.startswith("tag:"):
                tags = rule.action.split(":", 1)[1].split(",")
                return {"tags": [tag.strip() for tag in tags]}
        
        return None

    async def _update_notion_record(self, page_id: str, changes: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ Notion"""
        properties = {}
        
        if "title" in changes:
            properties["Name"] = {"title": [{"text": {"content": changes["title"]}}]}
        
        if "description" in changes:
            properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {"rich_text": [{"text": {"content": changes["description"]}}]}
        
        if "tags" in changes:
            properties["–¢–µ–≥–∏"] = {"multi_select": [{"name": tag} for tag in changes["tags"]]}
        
        if "delete" in changes:
            await self.notion.pages.update(page_id=page_id, archived=True)
        elif properties:
            await self.notion.pages.update(page_id=page_id, properties=properties)

    def _update_analytics(self, processed_count: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        today = datetime.now().date().isoformat()
        
        if 'daily_stats' not in self.analytics:
            self.analytics['daily_stats'] = {}
        
        if today not in self.analytics['daily_stats']:
            self.analytics['daily_stats'][today] = {
                'processed': 0,
                'rules_triggered': 0,
                'tokens_used': 0
            }
        
        self.analytics['daily_stats'][today]['processed'] += processed_count

    async def generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –û–¢–ß–ï–¢–ê")
        
        today = datetime.now().date().isoformat()
        yesterday = (datetime.now().date() - timedelta(days=1)).isoformat()
        
        today_stats = self.analytics.get('daily_stats', {}).get(today, {})
        yesterday_stats = self.analytics.get('daily_stats', {}).get(yesterday, {})
        
        report = {
            'date': today,
            'processed_today': today_stats.get('processed', 0),
            'processed_yesterday': yesterday_stats.get('processed', 0),
            'active_rules': len([r for r in self.rules if r.enabled]),
            'total_jobs': len(self.jobs),
            'failed_jobs': len([j for j in self.jobs if j.status == 'failed']),
            'top_rules': self._get_top_rules()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(f'daily_report_{today}.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: daily_report_{today}.json")

    def _get_top_rules(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø—Ä–∞–≤–∏–ª –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        return [
            {
                'name': rule.name,
                'usage_count': rule.usage_count,
                'last_used': rule.last_used
            }
            for rule in sorted(self.rules, key=lambda r: r.usage_count, reverse=True)[:5]
        ]

    async def optimize_rules(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\nüîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–†–ê–í–ò–õ")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        for rule in self.rules:
            if rule.usage_count == 0 and rule.enabled:
                rule.enabled = False
                print(f"‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {rule.name}")
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∞–≤–∏–ª
        for rule in sorted(self.rules, key=lambda r: r.usage_count, reverse=True)[:3]:
            if rule.priority > 1:
                rule.priority = max(1, rule.priority - 1)
                print(f"‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–≤–∏–ª–∞: {rule.name}")
        
        self._save_system_state()
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def create_web_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        web_config = {
            'title': 'Smart Content Processor',
            'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ò–ò',
            'features': [
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
                'API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
            ],
            'endpoints': {
                '/': '–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å',
                '/rules': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏',
                '/jobs': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á',
                '/analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
                '/api/process': 'API –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                '/api/rules': 'API –ø—Ä–∞–≤–∏–ª'
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        with open('web_config.json', 'w', encoding='utf-8') as f:
            json.dump(web_config, f, ensure_ascii=False, indent=2)
        
        print("üåê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–∑–¥–∞–Ω–∞: web_config.json")

    def export_for_deployment(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        deployment_config = {
            'name': 'smart-content-processor',
            'version': '1.0.0',
            'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Telegram ‚Üí Notion',
            'requirements': [
                'notion-client>=2.0.0',
                'schedule>=1.2.0',
                'fastapi>=0.100.0',
                'uvicorn>=0.20.0'
            ],
            'environment': {
                'NOTION_TOKEN': 'required',
                'DATABASE_ID': 'required',
                'DEEPSEEK_API_KEY': 'optional'
            },
            'docker': {
                'image': 'python:3.11-slim',
                'ports': ['8000:8000'],
                'volumes': ['./data:/app/data']
            },
            'scaling': {
                'min_instances': 1,
                'max_instances': 5,
                'cpu_threshold': 70,
                'memory_limit': '512MB'
            }
        }
        
        with open('deployment_config.json', 'w', encoding='utf-8') as f:
            json.dump(deployment_config, f, ensure_ascii=False, indent=2)
        
        print("üöÄ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: deployment_config.json")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = ProductSystem()
    
    print("üöÄ SMART CONTENT PROCESSOR - –ü–†–û–î–£–ö–¢–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    system.create_web_interface()
    system.export_for_deployment()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await system.start_scheduler()

if __name__ == "__main__":
    asyncio.run(main()) 