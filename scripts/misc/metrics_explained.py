#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –î–ï–¢–ê–õ–¨–ù–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï –ú–ï–¢–†–ò–ö

–û–±—ä—è—Å–Ω—è—é Growth Rate, Platform Rank, Content Score
—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import json
from datetime import datetime, timedelta

class MetricsExplainer:
    """–û–±—ä—è—Å–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º"""
    
    def __init__(self):
        # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_data = {
            'telegram': {'followers': 4962, 'engagement': 17.3, 'posts_week': 10},
            'instagram': {'followers': 7000, 'engagement': 3.0, 'posts_week': 7},
            'youtube': {'followers': 51000, 'engagement': 4.5, 'posts_week': 3},
            'tiktok': {'followers': 10000, 'engagement': 5.5, 'posts_week': 14},
            'facebook': {'followers': 20000, 'engagement': 1.2, 'posts_week': 5},
            'twitter': {'followers': 15000, 'engagement': 2.2, 'posts_week': 21},
            'vk': {'followers': 0, 'engagement': 0, 'posts_week': 0}
        }
        
        # –¶–µ–ª–∏ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
        self.goals_6m = {
            'telegram': 10000,
            'instagram': 15000,
            'youtube': 75000,
            'tiktok': 25000,
            'facebook': 25000,
            'twitter': 25000,
            'vk': 10000
        }
    
    def explain_growth_rate(self):
        """–û–±—ä—è—Å–Ω—è–µ—Ç Growth Rate —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        
        print("üìà GROWTH RATE - –ß–¢–û –≠–¢–û?")
        print("=" * 50)
        print()
        
        print("üí° –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        print("   Growth Rate = % —Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        print("   –§–æ—Ä–º—É–ª–∞: (–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ / –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏) √ó 100")
        print()
        
        print("üìä –¢–í–û–ò –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï VS –¶–ï–õ–ò:")
        print("=" * 60)
        
        total_current = sum(data['followers'] for data in self.current_data.values())
        total_goal = sum(self.goals_6m.values())
        
        for platform, current in self.current_data.items():
            goal = self.goals_6m[platform]
            needed_growth = goal - current['followers']
            
            if current['followers'] > 0:
                growth_needed_percent = (needed_growth / current['followers']) * 100
                monthly_growth_needed = growth_needed_percent / 6  # –ó–∞ 6 –º–µ—Å—è—Ü–µ–≤
                
                progress_percent = (current['followers'] / goal) * 100
                
                status = "üöÄ" if progress_percent > 75 else "‚úÖ" if progress_percent > 50 else "‚ö†Ô∏è" if progress_percent > 25 else "üî¥"
                
                print(f"üì± {platform.upper()}:")
                print(f"   –°–µ–π—á–∞—Å: {current['followers']:,} | –¶–µ–ª—å: {goal:,}")
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}% {status}")
                print(f"   –ù—É–∂–µ–Ω —Ä–æ—Å—Ç: +{needed_growth:,} ({growth_needed_percent:.1f}%)")
                print(f"   –ú–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç: {monthly_growth_needed:.1f}%/–º–µ—Å—è—Ü")
                print()
            else:
                print(f"üì± {platform.upper()}:")
                print(f"   –°—Ç–∞—Ç—É—Å: üî¥ –ù–ï –ó–ê–ü–£–©–ï–ù | –¶–µ–ª—å: {goal:,}")
                print(f"   –î–µ–π—Å—Ç–≤–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –Ω—É–ª—è")
                print()
        
        print(f"üéØ –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–°:")
        print(f"   –¢–µ–∫—É—â–∏–π –æ—Ö–≤–∞—Ç: {total_current:,}")
        print(f"   –¶–µ–ª–µ–≤–æ–π –æ—Ö–≤–∞—Ç: {total_goal:,}")
        print(f"   –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {(total_current/total_goal)*100:.1f}%")
        print()
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
        print("üßÆ –ü–†–ò–ú–ï–† –†–ê–°–ß–ï–¢–ê (Telegram):")
        print("   –Ø–Ω–≤–∞—Ä—å: 4,500 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        print("   –§–µ–≤—Ä–∞–ª—å: 4,962 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞")
        print("   Growth Rate = (462 / 4,500) √ó 100 = 10.3% –∑–∞ –º–µ—Å—è—Ü")
        print("   –ì–æ–¥–æ–≤–æ–π Growth Rate = 10.3% √ó 12 = 123.6%")
        print()
        
        return self.calculate_growth_rates()
    
    def explain_platform_rank(self):
        """–û–±—ä—è—Å–Ω—è–µ—Ç Platform Rank —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º"""
        
        print("üèÜ PLATFORM RANK - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê")
        print("=" * 50)
        print()
        
        print("üí° –ß–¢–û –≠–¢–û:")
        print("   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        print("   –£—á–∏—Ç—ã–≤–∞–µ—Ç: Engagement Rate, —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ä–æ—Å—Ç")
        print()
        
        print("üéØ –ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:")
        print("   üî• EXCELLENT: Engagement > 150% –æ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞")
        print("   ‚úÖ HIGH:      Engagement > 120% –æ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞") 
        print("   üìä MEDIUM:    Engagement > 80% –æ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞")
        print("   ‚ö†Ô∏è LOW:       Engagement < 80% –æ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞")
        print()
        
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏
        benchmarks = {
            'telegram': 2.5, 'instagram': 3.5, 'youtube': 4.0,
            'tiktok': 5.0, 'facebook': 1.5, 'twitter': 2.0, 'vk': 2.8
        }
        
        print("üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢ –î–õ–Ø –¢–í–û–ò–• –ü–õ–ê–¢–§–û–†–ú:")
        print("=" * 60)
        
        for platform, data in self.current_data.items():
            if data['followers'] > 0:
                benchmark = benchmarks[platform]
                vs_benchmark = (data['engagement'] / benchmark) * 100
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥
                if vs_benchmark >= 150:
                    rank = "üî• EXCELLENT"
                    rank_score = 4
                elif vs_benchmark >= 120:
                    rank = "‚úÖ HIGH"
                    rank_score = 3
                elif vs_benchmark >= 80:
                    rank = "üìä MEDIUM"
                    rank_score = 2
                else:
                    rank = "‚ö†Ô∏è LOW"
                    rank_score = 1
                
                print(f"üì± {platform.upper()}:")
                print(f"   Engagement: {data['engagement']:.1f}% | –ë–µ–Ω—á–º–∞—Ä–∫: {benchmark}%")
                print(f"   vs –ò–Ω–¥—É—Å—Ç—Ä–∏—è: {vs_benchmark:.0f}%")
                print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Rank: {rank}")
                print(f"   –ê—É–¥–∏—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å: +{self.audience_bonus(data['followers'])}")
                print()
        
        print("ü§ñ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø:")
        print("   1. –°–∫—Ä–∏–ø—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        print("   2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–º–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏")
        print("   3. –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        print("   4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Ä–∞–Ω–≥")
        print("   5. –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ Notion")
        print()
        
        return self.calculate_platform_ranks()
    
    def explain_content_score(self):
        """–û–±—ä—è—Å–Ω—è–µ—Ç Content Score"""
        
        print("üé® CONTENT SCORE - –ö–ê–ß–ï–°–¢–í–û –ö–û–ù–¢–ï–ù–¢–ê")
        print("=" * 50)
        print()
        
        print("üí° –ß–¢–û –≠–¢–û:")
        print("   –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —à–∫–∞–ª–µ 1-10")
        print("   –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –æ–¥–Ω—É –æ—Ü–µ–Ω–∫—É")
        print()
        
        print("üìä –§–ê–ö–¢–û–†–´ –û–¶–ï–ù–ö–ò:")
        print("=" * 30)
        
        factors = {
            "Engagement Rate": {"weight": 30, "description": "–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–∞"},
            "Consistency": {"weight": 20, "description": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"},
            "Growth Trend": {"weight": 20, "description": "–î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞"},
            "Content Frequency": {"weight": 15, "description": "–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"},
            "Viral Content %": {"weight": 15, "description": "% –ø–æ—Å—Ç–æ–≤ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ 2+ —Ä–∞–∑–∞"}
        }
        
        for factor, info in factors.items():
            print(f"   ‚Ä¢ {factor}: {info['weight']}% - {info['description']}")
        print()
        
        print("üßÆ –ü–†–ò–ú–ï–† –†–ê–°–ß–ï–¢–ê (Telegram):")
        print("=" * 40)
        
        # Telegram example calculation
        telegram_scores = {
            "Engagement Rate": {"score": 10, "reason": "17.3% vs 2.5% –±–µ–Ω—á–º–∞—Ä–∫ = –º–∞–∫—Å–∏–º—É–º"},
            "Consistency": {"score": 6, "reason": "56.4% –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å = —Å—Ä–µ–¥–Ω–µ"},
            "Growth Trend": {"score": 7, "reason": "–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç"},
            "Content Frequency": {"score": 8, "reason": "1.5 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å = —Ö–æ—Ä–æ—à–æ"},
            "Viral Content %": {"score": 9, "reason": "20% –≤–∏—Ä—É—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ = –æ—Ç–ª–∏—á–Ω–æ"}
        }
        
        total_score = 0
        for factor, data in telegram_scores.items():
            weight = factors[factor]["weight"] / 100
            weighted_score = data["score"] * weight
            total_score += weighted_score
            
            print(f"   {factor}: {data['score']}/10 √ó {factors[factor]['weight']}% = {weighted_score:.1f}")
            print(f"      ‚îî‚îÄ {data['reason']}")
        
        print(f"\n   üéØ –ò–¢–û–ì–û–í–´–ô CONTENT SCORE: {total_score:.1f}/10")
        print()
        
        print("üìà –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –û–¶–ï–ù–û–ö:")
        print("   9-10: üî• –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        print("   7-8:  ‚úÖ –•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        print("   5-6:  üìä –°—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç") 
        print("   3-4:  ‚ö†Ô∏è –°–ª–∞–±—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        print("   1-2:  üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print()
        
        print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢:")
        print("   ‚Ä¢ –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        print("   ‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É")
        print("   ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç Content Score –≤ Notion")
        print("   ‚Ä¢ –î–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
        print()
        
        return self.calculate_content_scores()
    
    def audience_bonus(self, followers):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        if followers > 50000:
            return "–ú–∞–∫—Å (+0.5)"
        elif followers > 20000:
            return "–í—ã—Å–æ–∫–∏–π (+0.3)"
        elif followers > 10000:
            return "–°—Ä–µ–¥–Ω–∏–π (+0.2)"
        elif followers > 5000:
            return "–ú–∞–ª—ã–π (+0.1)"
        else:
            return "–ù–µ—Ç (0)"
    
    def calculate_growth_rates(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ growth rates"""
        results = {}
        
        for platform, data in self.current_data.items():
            if data['followers'] > 0:
                goal = self.goals_6m[platform]
                needed_growth = (goal - data['followers']) / data['followers'] * 100
                monthly_rate = needed_growth / 6
                
                results[platform] = {
                    'current': data['followers'],
                    'goal': goal,
                    'needed_total': needed_growth,
                    'needed_monthly': monthly_rate,
                    'progress': (data['followers'] / goal) * 100
                }
        
        return results
    
    def calculate_platform_ranks(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–Ω–≥–∏"""
        benchmarks = {
            'telegram': 2.5, 'instagram': 3.5, 'youtube': 4.0,
            'tiktok': 5.0, 'facebook': 1.5, 'twitter': 2.0, 'vk': 2.8
        }
        
        results = {}
        
        for platform, data in self.current_data.items():
            if data['followers'] > 0:
                benchmark = benchmarks[platform]
                vs_benchmark = (data['engagement'] / benchmark) * 100
                
                if vs_benchmark >= 150:
                    rank = "EXCELLENT"
                elif vs_benchmark >= 120:
                    rank = "HIGH"
                elif vs_benchmark >= 80:
                    rank = "MEDIUM"
                else:
                    rank = "LOW"
                
                results[platform] = {
                    'rank': rank,
                    'vs_benchmark': vs_benchmark,
                    'engagement': data['engagement'],
                    'benchmark': benchmark
                }
        
        return results
    
    def calculate_content_scores(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç content scores"""
        
        # –í–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        weights = {
            'engagement': 0.30,
            'consistency': 0.20,
            'growth': 0.20,
            'frequency': 0.15,
            'viral': 0.15
        }
        
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        benchmarks = {
            'telegram': 2.5, 'instagram': 3.5, 'youtube': 4.0,
            'tiktok': 5.0, 'facebook': 1.5, 'twitter': 2.0
        }
        
        results = {}
        
        for platform, data in self.current_data.items():
            if data['followers'] > 0 and platform in benchmarks:
                # Engagement score (1-10)
                engagement_ratio = data['engagement'] / benchmarks[platform]
                engagement_score = min(10, engagement_ratio * 4)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
                
                # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                consistency_score = 6 if platform == 'telegram' else 7  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                growth_score = 7  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                frequency_score = min(10, (data['posts_week'] / 10) * 10)
                viral_score = 8 if platform == 'telegram' else 6  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                
                # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
                total_score = (
                    engagement_score * weights['engagement'] +
                    consistency_score * weights['consistency'] +
                    growth_score * weights['growth'] +
                    frequency_score * weights['frequency'] +
                    viral_score * weights['viral']
                )
                
                results[platform] = {
                    'total_score': round(total_score, 1),
                    'engagement_score': round(engagement_score, 1),
                    'breakdown': {
                        'engagement': engagement_score,
                        'consistency': consistency_score,
                        'growth': growth_score,
                        'frequency': frequency_score,
                        'viral': viral_score
                    }
                }
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
    
    print("üéØ –î–ï–¢–ê–õ–¨–ù–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –ú–ï–¢–†–ò–ö")
    print("=" * 80)
    print()
    
    explainer = MetricsExplainer()
    
    # 1. Growth Rate
    growth_data = explainer.explain_growth_rate()
    
    print("\n" + "="*80 + "\n")
    
    # 2. Platform Rank  
    rank_data = explainer.explain_platform_rank()
    
    print("\n" + "="*80 + "\n")
    
    # 3. Content Score
    content_data = explainer.explain_content_score()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "="*80)
    print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –î–õ–Ø NOTION")
    print("="*80)
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –î–õ–Ø –¢–í–û–ò–• –ü–õ–ê–¢–§–û–†–ú:")
    print("=" * 60)
    
    for platform in ['telegram', 'instagram', 'youtube', 'tiktok', 'facebook', 'twitter']:
        if platform in growth_data and platform in rank_data and platform in content_data:
            print(f"\nüì± {platform.upper()}:")
            print(f"   Growth Rate (–º–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å): {growth_data[platform]['needed_monthly']:.1f}%")
            print(f"   Platform Rank: {rank_data[platform]['rank']}")
            print(f"   Content Score: {content_data[platform]['total_score']}/10")
            print(f"   vs Industry: {rank_data[platform]['vs_benchmark']:.0f}%")
    
    print(f"\nüí° –í–°–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø –ú–û–ì–£–¢ –†–ê–°–°–ß–ò–¢–´–í–ê–¢–¨–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")
    print(f"   –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑ –≤ –¥–µ–Ω—å - –∏ Notion –æ–±–Ω–æ–≤–∏—Ç—Å—è —Å–∞–º")

if __name__ == "__main__":
    main() 