#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ó–ê–î–ê–ß –ò–ó –ü–û–õ–Ø "–î–ò–ó–ê–ô–ù –ü–û–î–ó–ê–î–ê–ß–ò" –ì–ê–ô–î–ê
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
CHECKLISTS_DB = "47c6086858d442ebaeceb4fad1b23ba3"

async def create_task_with_guide_subtasks(guide_id: str, task_title: str, task_url: str = None):
    """
    –ü–†–ê–í–ò–õ–¨–ù–û: –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ –ø–æ–ª—è "–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏" –≥–∞–π–¥–∞
    
    Args:
        guide_id: ID –≥–∞–π–¥–∞ –≤ Notion
        task_title: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        task_url: URL –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≥–∞–π–¥
        guide = await client.pages.retrieve(page_id=guide_id)
        guide_title = guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–∞–π–¥')
        
        print(f"üìö –ì–∞–π–¥: {guide_title}")
        print(f"üìã –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É: {task_title}")
        
        # 2. –ù–ê–•–û–î–ò–ú –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –ø–æ–ª–µ "–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏" –≥–∞–π–¥–∞
        print("üîç –ò—â–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –ø–æ–ª–µ '–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏' –≥–∞–π–¥–∞...")
        
        guide_subtasks = guide['properties'].get('–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏', {}).get('relation', [])
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≥–∞–π–¥–µ: {len(guide_subtasks)}")
        
        if not guide_subtasks:
            print("‚ùå –ü–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≥–∞–π–¥–µ")
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–∑–∞–¥–∞—á–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –≥–∞–π–¥—ã)
        actual_subtasks = []
        for relation in guide_subtasks:
            subtask_id = relation['id']
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞
                subtask_obj = await client.pages.retrieve(page_id=subtask_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥–∑–∞–¥–∞—á–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                parent_type = subtask_obj.get('parent', {}).get('type', '')
                parent_id = subtask_obj.get('parent', {}).get('database_id', '')
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∑–∞–¥–∞—á–∞ –∏–∑ –±–∞–∑—ã –ø–æ–¥–∑–∞–¥–∞—á (–Ω–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤)
                if parent_type == 'database_id' and parent_id == "9c5f4269-d614-49b6-a748-5579a3c21da3":
                    actual_subtasks.append(relation)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞: {subtask_id}")
                else:
                    print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω –æ–±—ä–µ–∫—Ç (–Ω–µ –ø–æ–¥–∑–∞–¥–∞—á–∞): {subtask_id}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä–µ–∫—Ç–∞ {subtask_id}: {e}")
        
        print(f"üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(actual_subtasks)}")
        
        if not actual_subtasks:
            print("‚ùå –ü–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return None
        
        # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_data = {
            "parent": {"database_id": TASKS_DB},
            "properties": {
                "–ó–∞–¥–∞—á–∞": {
                    "title": [{
                        "type": "text",
                        "text": {"content": task_title}
                    }]
                },
                "üì¨ –ì–∞–π–¥—ã": {
                    "relation": [{"id": guide_id}]
                },
                "–°—Ç–∞—Ç—É—Å": {
                    "status": {"name": "In Progress"}
                }
            }
        }
        
        if task_url:
            task_data["properties"]["–§ –∑–∞–¥–∞—á–∏"] = {"url": task_url}
        
        new_task = await client.pages.create(**task_data)
        task_id = new_task['id']
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        # 4. –ö–û–ü–ò–†–£–ï–ú –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ –≥–∞–π–¥–∞
        copied_subtasks = []
        for guide_subtask_relation in actual_subtasks:
            try:
                subtask_id = guide_subtask_relation['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∑–∞–¥–∞—á–µ –≥–∞–π–¥–∞
                guide_subtask = await client.pages.retrieve(page_id=subtask_id)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –ø–æ–ª—è "–ü–æ–¥–∑–∞–¥–∞—á–∏"
                subtasks_prop = guide_subtask['properties'].get('–ü–æ–¥–∑–∞–¥–∞—á–∏', {})
                if subtasks_prop and subtasks_prop.get('type') == 'title':
                    subtasks_array = subtasks_prop.get('title', [])
                    subtask_title = subtasks_array[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') if subtasks_array else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                else:
                    subtask_title = f"–ü–æ–¥–∑–∞–¥–∞—á–∞ {subtask_id[:8]}"
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º "–°—Ç–∞—Ä—Ç" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                subtask_status = "–°—Ç–∞—Ä—Ç"
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
                description_array = guide_subtask['properties'].get('–û–ø–∏—Å–∞–Ω–∏–µ', {}).get('rich_text', [])
                subtask_description = description_array[0].get('text', {}).get('content', '') if description_array else ''
                
                print(f"üìã –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É: {subtask_title}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–æ–¥–∑–∞–¥–∞—á–∏
                new_subtask_data = {
                    "parent": {"database_id": CHECKLISTS_DB},
                    "properties": {
                        "Name": {
                            "title": [{
                                "type": "text",
                                "text": {"content": subtask_title}
                            }]
                        },
                        "–°—Ç–∞—Ç—É—Å": {
                            "status": {"name": subtask_status}
                        },
                        "–î–∏–∑–∞–π–Ω –∑–∞–¥–∞—á–∏": {
                            "relation": [{"id": task_id}]
                        }
                    }
                }
                
                if subtask_description:
                    new_subtask_data["properties"]["–û–ø–∏—Å–∞–Ω–∏–µ"] = {
                        "rich_text": [{
                            "type": "text",
                            "text": {"content": subtask_description}
                        }]
                    }
                
                new_subtask = await client.pages.create(**new_subtask_data)
                
                copied_subtasks.append({
                    'id': new_subtask['id'],
                    'title': subtask_title,
                    'status': subtask_status
                })
                
                print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞: {subtask_title}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏: {e}")
        
        task_url = f"https://www.notion.so/dreamclub22/{task_id.replace('-', '')}"
        guide_url = f"https://www.notion.so/dreamclub22/{guide_id.replace('-', '')}"
        
        return {
            'task_id': task_id,
            'task_url': task_url,
            'guide_url': guide_url,
            'guide_title': guide_title,
            'copied_subtasks': copied_subtasks,
            'subtasks_count': len(copied_subtasks)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ì–∞–π–¥ —É–ø–∞–∫–æ–≤–∫–∏
    guide_id = "20face03-d9ff-8176-9357-ee1f5c52e5a5"
    
    result = asyncio.run(create_task_with_guide_subtasks(
        guide_id=guide_id,
        task_title="–ó–∞–¥–∞—á–∞ —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–∑–∞–¥–∞—á –∏–∑ –≥–∞–π–¥–∞",
        task_url="https://example.com/task"
    ))
    
    if result:
        print(f"\n‚úÖ –£–°–ü–ï–•!")
        print(f"üìã –ó–∞–¥–∞—á–∞: {result['task_url']}")
        print(f"üìö –ì–∞–π–¥: {result['guide_url']}")
        print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {result['subtasks_count']}")
        print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞: {result['guide_title']}")
        print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        for subtask in result['copied_subtasks']:
            print(f"   ‚Ä¢ {subtask['title']} ({subtask['status']})")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê!") 