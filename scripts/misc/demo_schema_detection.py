"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ö–µ–º–∞—Ö Notion
"""

import json
import os
from datetime import datetime
from notion_database_schemas import get_all_schemas

def demo_detection_mechanism():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    print("=" * 50)
    
    # 1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ö–µ–º—ã
    print("\n1Ô∏è‚É£ –¢–µ–∫—É—â–∏–µ —Å—Ö–µ–º—ã –≤ notion_database_schemas.py:")
    schemas = get_all_schemas()
    
    for db_name, schema in schemas.items():
        print(f"\nüìä {db_name}:")
        print(f"  - ID: {schema.database_id}")
        print(f"  - –°–≤–æ–π—Å—Ç–≤–∞: {len(schema.properties)}")
        print(f"  - –°—Ç–∞—Ç—É—Å—ã: {len(schema.status_options.get('–°—Ç–∞—Ç—É—Å', []))}")
        print(f"  - –¢–µ–≥–∏: {len(schema.multi_select_options.get('–¢–µ–≥–∏', []))}")
    
    # 2. –ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è
    print("\n2Ô∏è‚É£ –ß—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏:")
    
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è tasks
    tasks_schema = schemas.get("tasks")
    if tasks_schema:
        print(f"\nüìã –ë–∞–∑–∞ 'tasks':")
        print(f"  –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {tasks_schema.status_options.get('–°—Ç–∞—Ç—É—Å', [])}")
        print(f"  –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: {list(tasks_schema.properties.keys())}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion
        print(f"\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion API:")
        simulated_notion_data = {
            "properties": {
                "Name": {"type": "title"},
                "–°—Ç–∞—Ç—É—Å": {"type": "status"},
                "–£—á–∞—Å—Ç–Ω–∏–∫–∏": {"type": "people"},
                "–ù–æ–≤–æ–µ –ø–æ–ª–µ": {"type": "rich_text"}  # ‚Üê –ù–û–í–û–ï!
            },
            "status_options": {
                "–°—Ç–∞—Ç—É—Å": ["To do", "In Progress", "Done", "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"]  # ‚Üê –ù–û–í–´–ô!
            },
            "multi_select_options": {
                "–¢–µ–≥–∏": ["–ë—Ä–µ–Ω–¥–∏–Ω–≥", "–î–∏–∑–∞–π–Ω", "–ù–æ–≤—ã–π —Ç–µ–≥"]  # ‚Üê –ù–û–í–´–ô!
            }
        }
        
        print(f"  –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã: {simulated_notion_data['status_options']['–°—Ç–∞—Ç—É—Å']}")
        print(f"  –¢–µ–∫—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞: {list(simulated_notion_data['properties'].keys())}")
        print(f"  –¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏: {simulated_notion_data['multi_select_options']['–¢–µ–≥–∏']}")
        
        # 3. –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"\n3Ô∏è‚É£ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        stored_statuses = set(tasks_schema.status_options.get('–°—Ç–∞—Ç—É—Å', []))
        current_statuses = set(simulated_notion_data['status_options']['–°—Ç–∞—Ç—É—Å'])
        new_statuses = current_statuses - stored_statuses
        
        if new_statuses:
            print(f"  ‚úÖ –ù–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {list(new_statuses)}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
        stored_properties = set(tasks_schema.properties.keys())
        current_properties = set(simulated_notion_data['properties'].keys())
        new_properties = current_properties - stored_properties
        
        if new_properties:
            print(f"  ‚úÖ –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: {list(new_properties)}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
        stored_tags = set(tasks_schema.multi_select_options.get('–¢–µ–≥–∏', []))
        current_tags = set(simulated_notion_data['multi_select_options']['–¢–µ–≥–∏'])
        new_tags = current_tags - stored_tags
        
        if new_tags:
            print(f"  ‚úÖ –ù–æ–≤—ã–µ —Ç–µ–≥–∏: {list(new_tags)}")
        
        # 4. –ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ
        changes = []
        
        for new_status in new_statuses:
            changes.append({
                "database_name": "tasks",
                "change_type": "new_status",
                "property_name": "–°—Ç–∞—Ç—É—Å",
                "new_value": new_status,
                "timestamp": datetime.now().isoformat()
            })
        
        for new_property in new_properties:
            changes.append({
                "database_name": "tasks",
                "change_type": "new_property",
                "property_name": new_property,
                "new_value": simulated_notion_data['properties'][new_property]['type'],
                "timestamp": datetime.now().isoformat()
            })
        
        for new_tag in new_tags:
            changes.append({
                "database_name": "tasks",
                "change_type": "new_multi_select_option",
                "property_name": "–¢–µ–≥–∏",
                "new_value": new_tag,
                "timestamp": datetime.now().isoformat()
            })
        
        if changes:
            print(f"\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö:")
            for change in changes:
                print(f"  - {change['database_name']}: {change['change_type']} - {change['property_name']} = {change['new_value']}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–º–æ-—Ñ–∞–π–ª
            with open("demo_schema_changes.json", "w", encoding="utf-8") as f:
                json.dump(changes, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ –î–µ–º–æ-–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ demo_schema_changes.json")
        else:
            print(f"\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

def demo_guarantees():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–π –∑–∞–ø—É—Å–∫–∞"""
    print("\n\n‚è∞ –ì–ê–†–ê–ù–¢–ò–ò –ó–ê–ü–£–°–ö–ê")
    print("=" * 30)
    
    print("\n1Ô∏è‚É£ GitHub Actions (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º):")
    print("  ‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 UTC")
    print("  ‚úÖ –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å: 99.9% (GitHub –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç)")
    print("  ‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö")
    print("  ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    print("\n2Ô∏è‚É£ –õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π):")
    print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
    print("  ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    print("  ‚úÖ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è")
    
    print("\n3Ô∏è‚É£ CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:")
    print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ")
    print("  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º")
    print("  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
    
    print("\n4Ô∏è‚É£ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:")
    print("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)")
    print("  ‚úÖ –†—É—á–Ω–æ–π (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)")
    print("  ‚úÖ CI/CD (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–æ–¥–∞)")
    print("  ‚úÖ Webhook (–ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö)")

def demo_notification_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\n\nüì¢ –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 30)
    
    print("\n1Ô∏è‚É£ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    print("  üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ")
    print("  üí¨ Slack —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("  üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    print("  üîó GitHub Pull Request")
    
    print("\n2Ô∏è‚É£ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö:")
    print("  üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    print("  üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ")
    print("  üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    print("  üìû –≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ")
    
    print("\n3Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    print("  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
    print("  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("  üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏")
    print("  üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—Ö–µ–º
    try:
        schemas = get_all_schemas()
        if not schemas:
            print("‚ùå –°—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ notion_database_schemas.py")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º: {e}")
        return
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_detection_mechanism()
    demo_guarantees()
    demo_notification_system()
    
    print("\n\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–°:")
    print("=" * 40)
    print("‚ùì '–ê –æ–Ω —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è?'")
    print("‚úÖ –î–ê, –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:")
    print("   1. GitHub Actions - –Ω–∞–¥—ë–∂–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ (99.9%)")
    print("   2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã (–∞–≤—Ç–æ + —Ä—É—á–Ω–æ–π + CI/CD)")
    print("   3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ª–æ–≥–∏ + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)")
    print("   4. Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã (–ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)")
    print("   5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö")
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   - –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: < 24 —á–∞—Å–∞")
    print("   - –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å: 99.99% (–¥–≤–æ–π–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è)")
    print("   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø—Ä–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö")
    print("   - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–ª–Ω–æ–µ")

if __name__ == "__main__":
    main() 