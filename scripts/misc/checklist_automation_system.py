#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ß–ï–ö–õ–ò–°–¢–û–í
–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –≥–∞–π–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ–∫–ª–∏—Å—Ç–æ–≤
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TASKS_DB = "d09df250ce7e4e0d9fbe4e036d320def"
GUIDES_DB = "47c6086858d442ebaeceb4fad1b23ba3"

class ChecklistAutomationSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
    
    def __init__(self):
        token = os.getenv("NOTION_TOKEN")
        if not token:
            raise ValueError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        self.client = AsyncClient(auth=token)
    
    async def create_task_from_guide(self, guide_id: str, task_title: str, task_url: str = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –≥–∞–π–¥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ–∫–ª–∏—Å—Ç–æ–≤
        
        Args:
            guide_id: ID –≥–∞–π–¥–∞
            task_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task_url: URL –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        
        print(f"ü§ñ –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –ò–ó –ì–ê–ô–î–ê")
        print("=" * 50)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞–π–¥–µ
            print(f"1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∞–π–¥–µ...")
            guide = await self.client.pages.retrieve(page_id=guide_id)
            guide_title = guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–∞–π–¥')
            
            print(f"‚úÖ –ì–∞–π–¥: {guide_title}")
            print(f"   üÜî {guide_id}")
            
            # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —á–µ–∫–ª–∏—Å—Ç—ã –∏–∑ –≥–∞–π–¥–∞
            print(f"\n2Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ –≥–∞–π–¥–∞...")
            checklist_items = await self._extract_checklists_from_guide(guide_id)
            
            if not checklist_items:
                print("‚ö†Ô∏è –ß–µ–∫–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≥–∞–π–¥–µ")
                return None
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklist_items)}")
            for item in checklist_items:
                status = "‚úÖ" if item.get('checked', False) else "‚ùå"
                print(f"   {status} {item['content']}")
            
            # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            print(f"\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            task_data = {
                "parent": {"database_id": TASKS_DB},
                "properties": {
                    "–ó–∞–¥–∞—á–∞": {
                        "title": [{
                            "type": "text",
                            "text": {"content": task_title}
                        }]
                    },
                    "üì¨ –ì–∞–π–¥—ã": {
                        "relation": [{"id": guide_id}]
                    },
                    "–°—Ç–∞—Ç—É—Å": {
                        "status": {"name": "In Progress"}
                    }
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if task_url:
                task_data["properties"]["–§ –∑–∞–¥–∞—á–∏"] = {"url": task_url}
            
            new_task = await self.client.pages.create(**task_data)
            task_id = new_task['id']
            
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:")
            print(f"   üÜî {task_id}")
            print(f"   üîó https://www.notion.so/dreamclub22/{task_id.replace('-', '')}")
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç—ã –≤ –∑–∞–¥–∞—á—É
            print(f"\n4Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞—á—É...")
            await self._add_checklists_to_task(task_id, checklist_items)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            final_checklists = await self._get_task_checklists(task_id)
            
            print(f"‚úÖ –ß–µ–∫–ª–∏—Å—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(final_checklists)}")
            print(f"üéØ –ó–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞!")
            
            return {
                'task_id': task_id,
                'guide_id': guide_id,
                'guide_title': guide_title,
                'checklists_count': len(final_checklists),
                'task_url': f"https://www.notion.so/dreamclub22/{task_id.replace('-', '')}",
                'guide_url': f"https://www.notion.so/dreamclub22/{guide_id.replace('-', '')}"
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def _extract_checklists_from_guide(self, guide_id: str):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–µ–∫–ª–∏—Å—Ç—ã –∏–∑ –≥–∞–π–¥–∞"""
        
        guide_blocks = await self.client.blocks.children.list(block_id=guide_id)
        blocks = guide_blocks.get('results', [])
        
        checklist_items = []
        for block in blocks:
            if block.get('type') == 'to_do':
                content = block['to_do']['rich_text'][0]['text']['content'] if block['to_do']['rich_text'] else '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'
                checked = block['to_do']['checked']
                checklist_items.append({
                    'content': content,
                    'checked': checked,
                    'block_id': block['id']
                })
        
        return checklist_items
    
    async def _add_checklists_to_task(self, task_id: str, checklist_items: list):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–∫–ª–∏—Å—Ç—ã –≤ –∑–∞–¥–∞—á—É"""
        
        checklist_blocks = []
        for item in checklist_items:
            checklist_blocks.append({
                "object": "block",
                "type": "to_do",
                "to_do": {
                    "rich_text": [{
                        "type": "text",
                        "text": {"content": item['content']}
                    }],
                    "checked": item.get('checked', False)
                }
            })
        
        await self.client.blocks.children.append(
            block_id=task_id,
            children=checklist_blocks
        )
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklist_blocks)}")
        for item in checklist_items:
            status = "‚úÖ" if item.get('checked', False) else "‚ùå"
            print(f"   {status} {item['content']}")
    
    async def _get_task_checklists(self, task_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —á–µ–∫–ª–∏—Å—Ç—ã –∏–∑ –∑–∞–¥–∞—á–∏"""
        
        task_blocks = await self.client.blocks.children.list(block_id=task_id)
        return [b for b in task_blocks.get('results', []) if b.get('type') == 'to_do']
    
    async def batch_create_tasks(self, tasks_data: list):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∏–∑ –≥–∞–π–¥–æ–≤
        
        Args:
            tasks_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á
                       [{'guide_id': '...', 'task_title': '...', 'task_url': '...'}]
        """
        
        print(f"üöÄ –ú–ê–°–°–û–í–û–ï –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß")
        print("=" * 50)
        print(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {len(tasks_data)}")
        
        results = []
        
        for i, task_data in enumerate(tasks_data, 1):
            print(f"\nüìã –ó–∞–¥–∞—á–∞ {i}/{len(tasks_data)}")
            print("-" * 30)
            
            result = await self.create_task_from_guide(
                guide_id=task_data['guide_id'],
                task_title=task_data['task_title'],
                task_url=task_data.get('task_url')
            )
            
            if result:
                results.append(result)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        print(f"\nüéØ –ò–¢–û–ì–ò:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {len(results)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(tasks_data) - len(results)}")
        
        return results

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def create_task_from_guide(guide_id: str, task_title: str, task_url: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –≥–∞–π–¥–∞"""
    system = ChecklistAutomationSystem()
    return await system.create_task_from_guide(guide_id, task_title, task_url)

async def batch_create_tasks(tasks_data: list):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∏–∑ –≥–∞–π–¥–æ–≤"""
    system = ChecklistAutomationSystem()
    return await system.batch_create_tasks(tasks_data)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
    async def test_example():
        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É
        result = await create_task_from_guide(
            guide_id="213ace03-d9ff-8139-a219-ecb38bc433bd",
            task_title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ –≥–∞–π–¥–∞",
            task_url="https://example.com/test"
        )
        
        if result:
            print(f"\nüéâ –ü–†–ò–ú–ï–† –†–ê–ë–û–¢–´:")
            print(f"üìã –ó–∞–¥–∞—á–∞: {result['task_url']}")
            print(f"üìö –ì–∞–π–¥: {result['guide_url']}")
            print(f"‚òê –ß–µ–∫–ª–∏—Å—Ç–æ–≤: {result['checklists_count']}")
    
    asyncio.run(test_example()) 