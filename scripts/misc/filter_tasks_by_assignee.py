#!/usr/bin/env python3
"""
–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ MCP Notion Server
–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
"""

import asyncio
import sys
from mcp_notion_server import NotionMCPServer

async def filter_tasks_by_assignee(assignee_name: str | None = None):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        server = NotionMCPServer()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–∑ .env
        tasks_db_id = server.tasks_db_id or "d09df250ce7e4e0d9fbe4e036d320def"  # fallback –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–π ID
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã Tasks...")
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º Tasks DB ID: {tasks_db_id}")
        tasks_response = await server.get_database_pages(tasks_db_id)
        
        if not tasks_response.get('success'):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {tasks_response.get('error')}")
            return
        
        all_tasks = tasks_response.get('pages', [])
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        if assignee_name:
            filtered_tasks = []
            for task in all_tasks:
                properties = task.get('properties', {})
                participants = properties.get('–£—á–∞—Å—Ç–Ω–∏–∫–∏', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                if isinstance(participants, list):
                    for participant in participants:
                        if assignee_name.lower() in str(participant).lower():
                            filtered_tasks.append(task)
                            break
                elif assignee_name.lower() in str(participants).lower():
                    filtered_tasks.append(task)
            
            print(f"üéØ –ó–∞–¥–∞—á –¥–ª—è '{assignee_name}': {len(filtered_tasks)}")
            tasks_to_show = filtered_tasks
        else:
            tasks_to_show = all_tasks
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*80)
        print("üìã –°–ü–ò–°–û–ö –ó–ê–î–ê–ß")
        print("="*80)
        
        for i, task in enumerate(tasks_to_show[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            properties = task.get('properties', {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            title = properties.get('–ó–∞–¥–∞—á–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            status = properties.get('–°—Ç–∞—Ç—É—Å', '–ù–µ —É–∫–∞–∑–∞–Ω')
            participants = properties.get('–£—á–∞—Å—Ç–Ω–∏–∫–∏', [])
            priority = properties.get('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            print(f"\n{i}. {title}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {status}")
            print(f"   üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {participants}")
            print(f"   üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
            print(f"   üÜî ID: {task['id']}")
        
        if len(tasks_to_show) > 20:
            print(f"\n... –∏ –µ—â—ë {len(tasks_to_show) - 20} –∑–∞–¥–∞—á")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        print("\n" + "="*80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú")
        print("="*80)
        
        status_counts = {}
        for task in tasks_to_show:
            status = task.get('properties', {}).get('–°—Ç–∞—Ç—É—Å', '–ù–µ —É–∫–∞–∑–∞–Ω')
            status_counts[status] = status_counts.get(status, 0) + 1
        
        for status, count in sorted(status_counts.items()):
            print(f"   {status}: {count}")
        
        return tasks_to_show
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
    print("="*50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    assignee_name = None
    if len(sys.argv) > 1:
        assignee_name = sys.argv[1]
        print(f"üéØ –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {assignee_name}")
    else:
        print("üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python filter_tasks_by_assignee.py '–∏–º—è')")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    tasks = await filter_tasks_by_assignee(assignee_name)
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tasks or [])} –∑–∞–¥–∞—á")

if __name__ == "__main__":
    asyncio.run(main()) 