#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á Arsentiy —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ DATA_STRUCTURE_GUIDE.md
"""

import os
import sys
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from notion_client import Client
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: notion-client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install notion-client")
    sys.exit(1)

def load_env_vars():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "NOTION_TOKEN",
        "NOTION_DESIGN_TASKS_DB_ID",  # Tasks Database
        "NOTION_SUBTASKS_DB_ID"       # Subtasks Database
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª")
        sys.exit(1)
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")
    subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")
    
    if not token or not tasks_db_id or not subtasks_db_id:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    return {
        "token": token,
        "tasks_db_id": tasks_db_id,
        "subtasks_db_id": subtasks_db_id
    }

def init_notion_client(token: str) -> Client:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Notion –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        client = Client(auth=token)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        client.users.me()
        print("‚úÖ Notion –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Notion: {e}")
        sys.exit(1)

def get_user_uuid_by_name(client: Client, user_name: str) -> str | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏"""
    print(f"\nüîç –ü–æ–∏—Å–∫ UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_name}'...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response = client.users.list()
        
        for user in response["results"]:
            if user["type"] == "person" and user["name"] == user_name:
                user_uuid = user["id"]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω UUID –¥–ª—è '{user_name}': {user_uuid}")
                return user_uuid
        
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for user in response["results"]:
            if user["type"] == "person":
                print(f"  - {user['name']} (ID: {user['id']})")
        
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return None

def find_tasks_by_assignee_uuid(client: Client, db_id: str, user_uuid: str, status_filter: List[str] | None = None) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ UUID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ Tasks Database"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –¥–ª—è UUID '{user_uuid}' –≤ Tasks Database...")
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ DATA_STRUCTURE_GUIDE.md
    filter_conditions = {
        "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
        "people": {
            "contains": user_uuid
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if status_filter:
        filter_conditions = {
            "and": [
                filter_conditions,
                {
                    "property": "–°—Ç–∞—Ç—É—Å",
                    "status": {
                        "in": status_filter
                    }
                }
            ]
        }
    
    try:
        response = client.databases.query(
            database_id=db_id,
            filter=filter_conditions
        )
        
        tasks = []
        for page in response["results"]:
            task = {
                "id": page["id"],
                "title": page["properties"]["–ó–∞–¥–∞—á–∞"]["title"][0]["plain_text"] if page["properties"]["–ó–∞–¥–∞—á–∞"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                "status": page["properties"]["–°—Ç–∞—Ç—É—Å"]["status"]["name"] if page["properties"]["–°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞",
                "assignees": [person["name"] for person in page["properties"]["–£—á–∞—Å—Ç–Ω–∏–∫–∏"]["people"]],
                "url": page["url"]
            }
            tasks.append(task)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ Tasks Database")
        return tasks
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Tasks Database: {e}")
        return []

def find_subtasks_by_assignee_uuid(client: Client, db_id: str, user_uuid: str, status_filter: List[str] | None = None) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –ø–æ–¥–∑–∞–¥–∞—á –ø–æ UUID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ Subtasks Database"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ–¥–∑–∞–¥–∞—á –¥–ª—è UUID '{user_uuid}' –≤ Subtasks Database...")
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ DATA_STRUCTURE_GUIDE.md (—Å –ø—Ä–æ–±–µ–ª–æ–º –≤ —Å—Ç–∞—Ç—É—Å–µ!)
    filter_conditions = {
        "property": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
        "people": {
            "contains": user_uuid
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if status_filter:
        filter_conditions = {
            "and": [
                filter_conditions,
                {
                    "property": " –°—Ç–∞—Ç—É—Å",  # —Å –ø—Ä–æ–±–µ–ª–æ–º –≤ –Ω–∞—á–∞–ª–µ!
                    "status": {
                        "in": status_filter
                    }
                }
            ]
        }
    
    try:
        response = client.databases.query(
            database_id=db_id,
            filter=filter_conditions
        )
        
        subtasks = []
        for page in response["results"]:
            subtask = {
                "id": page["id"],
                "title": page["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"][0]["plain_text"] if page["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                "status": page["properties"][" –°—Ç–∞—Ç—É—Å"]["status"]["name"] if page["properties"][" –°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞",
                "assignee": [person["name"] for person in page["properties"]["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]["people"]],
                "url": page["url"]
            }
            subtasks.append(subtask)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á –≤ Subtasks Database")
        return subtasks
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Subtasks Database: {e}")
        return []

def print_results(tasks: List[Dict], subtasks: List[Dict], assignee_name: str):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–õ–Ø '{assignee_name}'")
    print("=" * 50)
    
    # –ó–∞–¥–∞—á–∏
    if tasks:
        print(f"\nüéØ –ó–ê–î–ê–ß–ò ({len(tasks)}):")
        for i, task in enumerate(tasks, 1):
            print(f"{i}. {task['title']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {task['status']}")
            print(f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {', '.join(task['assignees'])}")
            print(f"   –°—Å—ã–ª–∫–∞: {task['url']}")
            print()
    else:
        print("\nüéØ –ó–ê–î–ê–ß–ò: –ù–µ—Ç –∑–∞–¥–∞—á")
    
    # –ü–æ–¥–∑–∞–¥–∞—á–∏
    if subtasks:
        print(f"\nüìù –ü–û–î–ó–ê–î–ê–ß–ò ({len(subtasks)}):")
        for i, subtask in enumerate(subtasks, 1):
            print(f"{i}. {subtask['title']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {subtask['status']}")
            print(f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {', '.join(subtask['assignee'])}")
            print(f"   –°—Å—ã–ª–∫–∞: {subtask['url']}")
            print()
    else:
        print("\nüìù –ü–û–î–ó–ê–î–ê–ß–ò: –ù–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print(f"   –í—Å–µ–≥–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(subtasks)}")
    print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {len(tasks) + len(subtasks)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–û–ò–°–ö –ó–ê–î–ê–ß ARSENTIY (–° UUID)")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = load_env_vars()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Notion –∫–ª–∏–µ–Ω—Ç
    client = init_notion_client(env_vars["token"])
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏–∑ DATA_STRUCTURE_GUIDE.md
    assignee_name = "Arsentiy"
    
    # –ü–æ–ª—É—á–∞–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_uuid = get_user_uuid_by_name(client, assignee_name)
    if not user_uuid:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ UUID –¥–ª—è '{assignee_name}'")
        return
    
    # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö To do –∏ In Progress
    status_filter = ["To do", "In Progress"]
    
    # –ü–æ–∏—Å–∫ –≤ Tasks Database
    tasks = find_tasks_by_assignee_uuid(
        client, 
        env_vars["tasks_db_id"], 
        user_uuid, 
        status_filter
    )
    
    # –ü–æ–∏—Å–∫ –≤ Subtasks Database
    subtasks = find_subtasks_by_assignee_uuid(
        client, 
        env_vars["subtasks_db_id"], 
        user_uuid, 
        status_filter
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_results(tasks, subtasks, assignee_name)
    
    print(f"\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main() 