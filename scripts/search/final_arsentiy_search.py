#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á Arsentiy —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env_vars():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")
    subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")
    
    if not token or not tasks_db_id or not subtasks_db_id:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    return {
        "token": token,
        "tasks_db_id": tasks_db_id,
        "subtasks_db_id": subtasks_db_id
    }

def search_arsentiy_in_tasks():
    """–ü–æ–∏—Å–∫ Arsentiy –≤ Tasks Database"""
    print("\nüîç –ü–û–ò–°–ö ARSENTIY –í TASKS DATABASE")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
        all_tasks = []
        has_more = True
        start_cursor = None
        
        while has_more:
            response = client.databases.query(
                database_id=env_vars["tasks_db_id"],
                page_size=100,
                start_cursor=start_cursor
            )
            
            all_tasks.extend(response["results"])
            has_more = response["has_more"]
            start_cursor = response.get("next_cursor")
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á...")
        
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á")
        
        # –ò—â–µ–º Arsentiy
        arsentiy_tasks = []
        all_assignees = set()
        
        for task in all_tasks:
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏ - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            assignees_prop = task["properties"]["–£—á–∞—Å—Ç–Ω–∏–∫–∏"]
            if "people" in assignees_prop:
                people = assignees_prop["people"]
                for person in people:
                    if "name" in person:
                        name = person["name"]
                        all_assignees.add(name)
                        if name == "Arsentiy":
                            # –ù–∞–∑–≤–∞–Ω–∏–µ
                            title = task["properties"]["–ó–∞–¥–∞—á–∞"]["title"][0]["plain_text"] if task["properties"]["–ó–∞–¥–∞—á–∞"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                            # –°—Ç–∞—Ç—É—Å
                            status = task["properties"]["–°—Ç–∞—Ç—É—Å"]["status"]["name"] if task["properties"]["–°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
                            
                            arsentiy_tasks.append({
                                "title": title,
                                "status": status,
                                "url": task["url"]
                            })
        
        print(f"\nüë• –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ Tasks Database:")
        for assignee in sorted(all_assignees):
            print(f"  - {assignee}")
        
        print(f"\nüéØ –ó–∞–¥–∞—á–∏ Arsentiy: {len(arsentiy_tasks)}")
        for i, task in enumerate(arsentiy_tasks, 1):
            print(f"{i}. {task['title']} (–°—Ç–∞—Ç—É—Å: {task['status']})")
            print(f"   –°—Å—ã–ª–∫–∞: {task['url']}")
        
        return len(arsentiy_tasks) > 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def search_arsentiy_in_subtasks():
    """–ü–æ–∏—Å–∫ Arsentiy –≤ Subtasks Database"""
    print("\nüîç –ü–û–ò–°–ö ARSENTIY –í SUBTASKS DATABASE")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–æ–¥–∑–∞–¥–∞—á–∏ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
        all_subtasks = []
        has_more = True
        start_cursor = None
        
        while has_more:
            response = client.databases.query(
                database_id=env_vars["subtasks_db_id"],
                page_size=100,
                start_cursor=start_cursor
            )
            
            all_subtasks.extend(response["results"])
            has_more = response["has_more"]
            start_cursor = response.get("next_cursor")
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_subtasks)} –ø–æ–¥–∑–∞–¥–∞—á...")
        
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_subtasks)} –ø–æ–¥–∑–∞–¥–∞—á")
        
        # –ò—â–µ–º Arsentiy
        arsentiy_subtasks = []
        all_assignees = set()
        
        for subtask in all_subtasks:
            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            assignees_prop = subtask["properties"]["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]
            if "people" in assignees_prop:
                people = assignees_prop["people"]
                for person in people:
                    if "name" in person:
                        name = person["name"]
                        all_assignees.add(name)
                        if name == "Arsentiy":
                            # –ù–∞–∑–≤–∞–Ω–∏–µ
                            title = subtask["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"][0]["plain_text"] if subtask["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                            # –°—Ç–∞—Ç—É—Å (—Å –ø—Ä–æ–±–µ–ª–æ–º!)
                            status = subtask["properties"][" –°—Ç–∞—Ç—É—Å"]["status"]["name"] if subtask["properties"][" –°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
                            
                            arsentiy_subtasks.append({
                                "title": title,
                                "status": status,
                                "url": subtask["url"]
                            })
        
        print(f"\nüë• –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ Subtasks Database:")
        for assignee in sorted(all_assignees):
            print(f"  - {assignee}")
        
        print(f"\nüìù –ü–æ–¥–∑–∞–¥–∞—á–∏ Arsentiy: {len(arsentiy_subtasks)}")
        for i, subtask in enumerate(arsentiy_subtasks, 1):
            print(f"{i}. {subtask['title']} (–°—Ç–∞—Ç—É—Å: {subtask['status']})")
            print(f"   –°—Å—ã–ª–∫–∞: {subtask['url']}")
        
        return len(arsentiy_subtasks) > 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö ARSENTIY")
    print("=" * 50)
    
    found_in_tasks = search_arsentiy_in_tasks()
    found_in_subtasks = search_arsentiy_in_subtasks()
    
    print(f"\nüìä –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê:")
    print(f"   –í Tasks Database: {'‚úÖ –ù–∞–π–¥–µ–Ω' if found_in_tasks else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"   –í Subtasks Database: {'‚úÖ –ù–∞–π–¥–µ–Ω' if found_in_subtasks else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    
    if not found_in_tasks and not found_in_subtasks:
        print(f"\nüö® Arsentiy –ù–ï –ù–ê–ô–î–ï–ù –ù–ò–ì–î–ï!")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. Arsentiy –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Notion")
        print("2. Arsentiy –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∑–∞–¥–∞—á—É/–ø–æ–¥–∑–∞–¥–∞—á—É")
        print("3. –ò–º—è –Ω–∞–ø–∏—Å–∞–Ω–æ –ø–æ-–¥—Ä—É–≥–æ–º—É")
        print("4. Arsentiy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å Arsentiy –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Notion")
        print("2. –ù–∞–∑–Ω–∞—á–∏—Ç—å Arsentiy –Ω–∞ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'To do' –∏–ª–∏ 'In Progress'")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏")
    
    print(f"\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main() 