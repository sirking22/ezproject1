#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import os
import json
import requests
from typing import Dict, List
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_employees_db():
    """–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    notion_token = os.getenv("NOTION_TOKEN")
    teams_db_id = os.getenv("NOTION_TEAMS_DB_ID")
    
    if not notion_token or not teams_db_id:
        raise ValueError("NOTION_TOKEN –∏ NOTION_TEAMS_DB_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã
    schema_url = f"https://api.notion.com/v1/databases/{teams_db_id}"
    schema_response = requests.get(schema_url, headers=headers)
    schema_response.raise_for_status()
    schema = schema_response.json()
    
    print("üîç –°–•–ï–ú–ê –ë–ê–ó–´ –°–û–¢–†–£–î–ù–ò–ö–û–í:")
    print(f"ID: {teams_db_id}")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {schema.get('title', [{}])[0].get('plain_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    print("\nüìã –ü–û–õ–Ø:")
    
    for field_name, field_props in schema['properties'].items():
        field_type = field_props.get('type', 'unknown')
        print(f"  - {field_name} ({field_type})")
        
        # –î–µ—Ç–∞–ª–∏ –¥–ª—è select –ø–æ–ª–µ–π
        if field_type == 'select':
            options = field_props.get('select', {}).get('options', [])
            if options:
                print(f"    –í–∞—Ä–∏–∞–Ω—Ç—ã: {[opt.get('name') for opt in options]}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    query_url = f"https://api.notion.com/v1/databases/{teams_db_id}/query"
    all_employees = []
    has_more = True
    start_cursor = None
    
    while has_more:
        payload = {"page_size": 100}
        if start_cursor:
            payload["start_cursor"] = start_cursor
            
        response = requests.post(query_url, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        
        all_employees.extend(data.get("results", []))
        has_more = data.get("has_more", False)
        start_cursor = data.get("next_cursor")
    
    print(f"\nüë• –í–°–ï–ì–û –°–û–¢–†–£–î–ù–ò–ö–û–í: {len(all_employees)}")
    print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    
    for i, employee in enumerate(all_employees, 1):
        props = employee.get("properties", {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        name = extract_title(props, "Name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        description = extract_rich_text(props, "–û–ø–∏—Å–∞–Ω–∏–µ") or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        rdt = extract_select(props, "RDT") or "–ù–µ —É–∫–∞–∑–∞–Ω"
        leader = extract_select(props, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å") or "–ù–µ —É–∫–∞–∑–∞–Ω"
        kpi1 = extract_number(props, "KPI 1") or 0
        on_time = extract_checkbox(props, "–í —Å—Ä–æ–∫") or False
        no_revisions = extract_checkbox(props, "–ë–µ–∑ –ø—Ä–∞–≤–æ–∫") or False
        
        print(f"\n{i}. {name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...")
        print(f"   RDT: {rdt}")
        print(f"   –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {leader}")
        print(f"   KPI 1: {kpi1}")
        print(f"   –í —Å—Ä–æ–∫: {'‚úÖ' if on_time else '‚ùå'}")
        print(f"   –ë–µ–∑ –ø—Ä–∞–≤–æ–∫: {'‚úÖ' if no_revisions else '‚ùå'}")
        print(f"   ID: {employee['id']}")
    
    return all_employees

def extract_title(props: Dict, field_name: str) -> str:
    """–ò–∑–≤–ª–µ—á—å title –ø–æ–ª–µ"""
    if field_name in props and props[field_name].get("type") == "title":
        title_array = props[field_name].get("title", [])
        if title_array:
            return title_array[0].get("plain_text", "")
    return ""

def extract_rich_text(props: Dict, field_name: str) -> str:
    """–ò–∑–≤–ª–µ—á—å rich_text –ø–æ–ª–µ"""
    if field_name in props and props[field_name].get("type") == "rich_text":
        rich_text_array = props[field_name].get("rich_text", [])
        if rich_text_array:
            return rich_text_array[0].get("plain_text", "")
    return ""

def extract_select(props: Dict, field_name: str) -> str:
    """–ò–∑–≤–ª–µ—á—å select –ø–æ–ª–µ"""
    if field_name in props and props[field_name].get("type") == "select":
        select_obj = props[field_name].get("select")
        if select_obj:
            return select_obj.get("name", "")
    return ""

def extract_number(props: Dict, field_name: str) -> float:
    """–ò–∑–≤–ª–µ—á—å number –ø–æ–ª–µ"""
    if field_name in props and props[field_name].get("type") == "number":
        return props[field_name].get("number", 0)
    return 0

def extract_checkbox(props: Dict, field_name: str) -> bool:
    """–ò–∑–≤–ª–µ—á—å checkbox –ø–æ–ª–µ"""
    if field_name in props and props[field_name].get("type") == "checkbox":
        return props[field_name].get("checkbox", False)
    return False

if __name__ == "__main__":
    try:
        employees = analyze_employees_db()
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise 