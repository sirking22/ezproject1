import os
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
TASKS_DB_ID = os.getenv("NOTION_TASKS_DB_ID")
TEAMS_DB_ID = os.getenv("NOTION_TEAMS_DB_ID")

if not NOTION_TOKEN or not TASKS_DB_ID:
    raise RuntimeError("NOTION_TOKEN –∏ NOTION_TASKS_DB_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class TodoWeekAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á ToDo –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    
    def __init__(self):
        self.headers = {
            "Authorization": f"Bearer {NOTION_TOKEN}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        self.designers = {}
        self.todo_tasks = []
        self.week_start = datetime.now().date() - timedelta(days=datetime.now().weekday())
        self.week_end = self.week_start + timedelta(days=6)
        
    def fetch_designers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        print("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤...")
        url = f"https://api.notion.com/v1/databases/{TEAMS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for emp in results:
            props = emp.get("properties", {})
            name = None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ –ø–æ–ª—è Name (select)
            if "Name" in props and props["Name"].get("select"):
                name = props["Name"]["select"]["name"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º
            is_designer = False
            if "Name" in props and props["Name"].get("select"):
                name_value = props["Name"]["select"]["name"].lower()
                if "–¥–∏–∑–∞–π–Ω" in name_value:
                    is_designer = True
            
            if name and is_designer:
                self.designers[emp["id"]] = {
                    "name": name,
                    "id": emp["id"],
                    "tasks_count": 0,
                    "tasks": []
                }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ú–∞—Ä–∏—é –ë–µ–∑—Ä–æ–¥–Ω—É—é –∫–∞–∫ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –±–∞–∑–µ)
        maria_found = any("–º–∞—Ä–∏—è" in d["name"].lower() for d in self.designers.values())
        if not maria_found:
            self.designers["maria_bezrodnaya"] = {
                "name": "–ú–∞—Ä–∏—è –ë–µ–∑—Ä–æ–¥–Ω–∞—è",
                "id": "maria_bezrodnaya",
                "tasks_count": 0,
                "tasks": []
            }
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.designers)} –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤")
        for designer in self.designers.values():
            print(f"   ‚Ä¢ {designer['name']}")
    
    def fetch_todo_tasks(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ ToDo"""
        print(f"\nüìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ ToDo –Ω–∞ –Ω–µ–¥–µ–ª—é {self.week_start} - {self.week_end}...")
        url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        for task in results:
            props = task.get("properties", {})
            task_info = self._extract_task_info(task, props)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤ ToDo –∏ –∏–º–µ–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if (task_info["status"].lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"] and 
                task_info["assignees"]):
                self.todo_tasks.append(task_info)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.todo_tasks)} –∑–∞–¥–∞—á ToDo —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏")
    
    def _extract_task_info(self, task, props):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
        title = ""
        for field in ["–ó–∞–¥–∞—á–∏", "–ó–∞–¥–∞—á–∞", "Name", "Title", "–ù–∞–∑–≤–∞–Ω–∏–µ"]:
            if field in props and props[field].get("title"):
                title = props[field]["title"][0]["plain_text"]
                break
        
        status = ""
        for field in [" –°—Ç–∞—Ç—É—Å", "–°—Ç–∞—Ç—É—Å", "Status"]:
            if field in props:
                s = props[field]
                if s.get("status"):
                    status = s["status"]["name"]
                elif s.get("select"):
                    status = s["select"]["name"]
                break
        
        assignees = []
        for field in ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "Assignee", "Responsible"]:
            if field in props and props[field].get("people"):
                assignees = [p.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") for p in props[field]["people"]]
                break
        
        deadline = ""
        for field in ["–î–µ–¥–ª–∞–π–Ω", "Due Date", "–î–∞—Ç–∞", "Deadline"]:
            if field in props and props[field].get("date"):
                deadline = props[field]["date"]["start"]
                break
        
        priority = ""
        for field in ["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "Priority"]:
            if field in props:
                p = props[field]
                if p.get("select"):
                    priority = p["select"]["name"]
                break
        
        return {
            "id": task["id"],
            "title": title,
            "status": status,
            "assignees": assignees,
            "deadline": deadline,
            "priority": priority,
            "properties": props
        }
    
    def analyze_workload(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò –î–ò–ó–ê–ô–ù–ï–†–û–í")
        print("=" * 60)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        for task in self.todo_tasks:
            for assignee_name in task["assignees"]:
                # –ò—â–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
                for designer in self.designers.values():
                    if designer["name"].lower() == assignee_name.lower():
                        designer["tasks_count"] += 1
                        designer["tasks"].append(task)
                        break
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüë• –ù–ê–ì–†–£–ó–ö–ê –ü–û –î–ò–ó–ê–ô–ù–ï–†–ê–ú:")
        total_tasks = 0
        for designer in self.designers.values():
            print(f"\nüé® {designer['name']}: {designer['tasks_count']} –∑–∞–¥–∞—á")
            total_tasks += designer["tasks_count"]
            
            if designer["tasks"]:
                print("   –ó–∞–¥–∞—á–∏:")
                for task in designer["tasks"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    deadline_info = f" (–¥–æ {task['deadline']})" if task['deadline'] else ""
                    priority_info = f" [{task['priority']}]" if task['priority'] else ""
                    print(f"   ‚Ä¢ {task['title'][:50]}{deadline_info}{priority_info}")
                if len(designer["tasks"]) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(designer['tasks']) - 5} –∑–∞–¥–∞—á")
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á ToDo: {len(self.todo_tasks)}")
        print(f"   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º: {total_tasks}")
        print(f"   ‚Ä¢ –ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {len(self.todo_tasks) - total_tasks}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priorities = defaultdict(int)
        for task in self.todo_tasks:
            priorities[task["priority"] or "–ù–µ —É–∫–∞–∑–∞–Ω"] += 1
        
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–´:")
        for priority, count in priorities.items():
            print(f"   ‚Ä¢ {priority}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        deadlines = defaultdict(int)
        for task in self.todo_tasks:
            if task["deadline"]:
                try:
                    deadline_date = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                    if deadline_date <= self.week_end:
                        deadlines["–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"] += 1
                    else:
                        deadlines["–ü–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏"] += 1
                except:
                    deadlines["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"] += 1
            else:
                deadlines["–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"] += 1
        
        print(f"\nüìÖ –î–ï–î–õ–ê–ô–ù–´:")
        for deadline_type, count in deadlines.items():
            print(f"   ‚Ä¢ {deadline_type}: {count}")
    
    def suggest_redistribution(self):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
        print(f"\nüîÑ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ü–ï–†–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Æ:")
        print("=" * 50)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        designers_list = list(self.designers.values())
        designers_list.sort(key=lambda x: x["tasks_count"], reverse=True)
        
        if len(designers_list) >= 2:
            max_load = designers_list[0]
            min_load = designers_list[-1]
            
            print(f"   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {max_load['name']} ({max_load['tasks_count']} –∑–∞–¥–∞—á)")
            print(f"   üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {min_load['name']} ({min_load['tasks_count']} –∑–∞–¥–∞—á)")
            
            if max_load["tasks_count"] - min_load["tasks_count"] > 2:
                print(f"\n   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü–µ—Ä–µ–¥–∞—Ç—å {max_load['name']} ‚Üí {min_load['name']}")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
                tasks_to_transfer = max_load["tasks"][:2]  # –ü–µ—Ä–≤—ã–µ 2 –∑–∞–¥–∞—á–∏
                print(f"   üìã –ó–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:")
                for task in tasks_to_transfer:
                    print(f"      ‚Ä¢ {task['title'][:40]}")
        
        # –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∏–∑–∞–π–Ω–µ—Ä–∞
        unassigned_tasks = []
        for task in self.todo_tasks:
            has_designer = False
            for assignee_name in task["assignees"]:
                for designer in self.designers.values():
                    if designer["name"].lower() == assignee_name.lower():
                        has_designer = True
                        break
                if has_designer:
                    break
            if not has_designer:
                unassigned_tasks.append(task)
        
        if unassigned_tasks:
            print(f"\n   ‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ ({len(unassigned_tasks)}):")
            for task in unassigned_tasks[:3]:
                print(f"      ‚Ä¢ {task['title'][:40]} ‚Üí {', '.join(task['assignees'])}")
    
    def generate_weekly_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        print(f"\nüìã –û–¢–ß–ï–¢ –ù–ê –ù–ï–î–ï–õ–Æ {self.week_start} - {self.week_end}")
        print("=" * 60)
        
        print(f"\nüéØ –¶–ï–õ–ò –ù–ê –ù–ï–î–ï–õ–Æ:")
        print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å {len(self.todo_tasks)} –∑–∞–¥–∞—á ToDo")
        print(f"   ‚Ä¢ –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É {len(self.designers)} –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏")
        
        print(f"\nüìä –ú–ï–¢–†–ò–ö–ò:")
        avg_tasks = len(self.todo_tasks) / len(self.designers) if self.designers else 0
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞: {avg_tasks:.1f} –∑–∞–¥–∞—á")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∑–∞–π–Ω–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        max_tasks = max([d["tasks_count"] for d in self.designers.values()]) if self.designers else 0
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {max_tasks} –∑–∞–¥–∞—á")
        
        print(f"\n‚úÖ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
        print(f"   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ ToDo –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫ –∫–æ–Ω—Ü—É –Ω–µ–¥–µ–ª–∏")
        print(f"   ‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ (¬±2 –∑–∞–¥–∞—á–∏)")
        print(f"   ‚Ä¢ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß TODO –ù–ê –ù–ï–î–ï–õ–Æ")
    print("=" * 50)
    
    analyzer = TodoWeekAnalyzer()
    
    try:
        analyzer.fetch_designers()
        analyzer.fetch_todo_tasks()
        analyzer.analyze_workload()
        analyzer.suggest_redistribution()
        analyzer.generate_weekly_report()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 