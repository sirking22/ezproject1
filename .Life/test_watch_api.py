#!/usr/bin/env python3
"""
üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ß–ê–°–û–í
–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Xiaomi Watch S
"""

import requests
import json
import time
from datetime import datetime
from typing import Dict, Any

class WatchAPITester:
    """–¢–µ—Å—Ç–µ—Ä API –¥–ª—è —á–∞—Å–æ–≤"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.test_results = []
        
    def test_health(self) -> bool:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_voice_command(self, command: str, expected_action: str = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        print(f"üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: '{command}'")
        
        payload = {
            "query": command,
            "context": "test",
            "timestamp": int(time.time()),
            "user_id": "test_user",
            "device": "xiaomi_watch_s"
        }
        
        start_time = time.time()
        
        try:
            response = requests.post(
                f"{self.base_url}/watch/voice",
                json=payload,
                timeout=10
            )
            
            end_time = time.time()
            response_time = end_time - start_time
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {response_time:.2f}—Å")
                print(f"   –û—Ç–≤–µ—Ç: {data.get('response', 'N/A')[:50]}...")
                print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {data.get('action', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                if expected_action and data.get('action') != expected_action:
                    print(f"‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–µ: {expected_action}")
                
                return {
                    "success": True,
                    "response_time": response_time,
                    "response": data,
                    "command": command
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}",
                    "command": command
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "command": command
            }
    
    def test_task_creation(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        commands = [
            "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—ã",
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
            "–∑–∞–¥–∞—á–∞: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ",
            "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"
        ]
        
        results = []
        for command in commands:
            result = self.test_voice_command(command, "create_task")
            results.append(result)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return {
            "test_type": "task_creation",
            "results": results,
            "success_count": sum(1 for r in results if r.get("success"))
        }
    
    def test_reflection_creation(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        commands = [
            "–¥–æ–±–∞–≤—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å",
            "–∑–∞–ø–∏—à–∏ –º—ã—Å–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ",
            "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è: –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å",
            "–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —Ö–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª"
        ]
        
        results = []
        for command in commands:
            result = self.test_voice_command(command, "create_reflection")
            results.append(result)
            time.sleep(1)
        
        return {
            "test_type": "reflection_creation",
            "results": results,
            "success_count": sum(1 for r in results if r.get("success"))
        }
    
    def test_habit_tracking(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫"""
        commands = [
            "–æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –º–µ–¥–∏—Ç–∞—Ü–∏—è",
            "–ø—Ä–∏–≤—ã—á–∫–∞: —Å–¥–µ–ª–∞–ª –∑–∞—Ä—è–¥–∫—É",
            "–∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —á—Ç–µ–Ω–∏–µ",
            "–ø—Ä–∏–≤—ã—á–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        ]
        
        results = []
        for command in commands:
            result = self.test_voice_command(command, "track_habit")
            results.append(result)
            time.sleep(1)
        
        return {
            "test_type": "habit_tracking",
            "results": results,
            "success_count": sum(1 for r in results if r.get("success"))
        }
    
    def test_general_commands(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥"""
        commands = [
            "–∫–∞–∫ –¥–µ–ª–∞",
            "—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ",
            "–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            "–ø–æ–º–æ—â—å",
            "—Å–ø–∞—Å–∏–±–æ"
        ]
        
        results = []
        for command in commands:
            result = self.test_voice_command(command)
            results.append(result)
            time.sleep(1)
        
        return {
            "test_type": "general_commands",
            "results": results,
            "success_count": sum(1 for r in results if r.get("success"))
        }
    
    def test_error_handling(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        result1 = self.test_voice_command("")
        
        # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        long_command = "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ " * 50
        result2 = self.test_voice_command(long_command)
        
        # –¢–µ—Å—Ç —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        result3 = self.test_voice_command("–∫–æ–º–∞–Ω–¥–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏: @#$%^&*()")
        
        results = [result1, result2, result3]
        
        return {
            "test_type": "error_handling",
            "results": results,
            "success_count": sum(1 for r in results if r.get("success"))
        }
    
    def test_performance(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        commands = [
            "—Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 1",
            "—Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 2",
            "—Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 3",
            "—Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 4",
            "—Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 5"
        ]
        
        response_times = []
        results = []
        
        for command in commands:
            result = self.test_voice_command(command)
            results.append(result)
            
            if result.get("success"):
                response_times.append(result.get("response_time", 0))
            
            time.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
        
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0
        
        return {
            "test_type": "performance",
            "results": results,
            "avg_response_time": avg_response_time,
            "min_response_time": min(response_times) if response_times else 0,
            "max_response_time": max(response_times) if response_times else 0
        }
    
    def run_full_test_suite(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        print("üß™" + "="*60)
        print("üéØ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ß–ê–°–û–í")
        print("="*62)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*62)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
        if not self.test_health():
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start_quick_voice_assistant.py")
            return {"error": "Server unavailable"}
        
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        tests = [
            self.test_task_creation(),
            self.test_reflection_creation(),
            self.test_habit_tracking(),
            self.test_general_commands(),
            self.test_error_handling(),
            self.test_performance()
        ]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = 0
        successful_tests = 0
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("="*50)
        
        for test in tests:
            test_type = test.get("test_type", "unknown")
            success_count = test.get("success_count", 0)
            total_count = len(test.get("results", []))
            
            total_tests += total_count
            successful_tests += success_count
            
            status = "‚úÖ" if success_count == total_count else "‚ö†Ô∏è" if success_count > 0 else "‚ùå"
            print(f"{status} {test_type}: {success_count}/{total_count}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if test_type == "performance":
                avg_time = test.get("avg_response_time", 0)
                print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}—Å")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞
        if success_rate >= 90:
            grade = "A+ (–û—Ç–ª–∏—á–Ω–æ)"
        elif success_rate >= 80:
            grade = "A (–•–æ—Ä–æ—à–æ)"
        elif success_rate >= 70:
            grade = "B (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
        elif success_rate >= 60:
            grade = "C (–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)"
        else:
            grade = "D (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)"
        
        print(f"   –û—Ü–µ–Ω–∫–∞: {grade}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if success_rate >= 90:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ —á–∞—Å–∞—Ö!")
        elif success_rate >= 70:
            print("   ‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –≤ —Ü–µ–ª–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return {
            "total_tests": total_tests,
            "successful_tests": successful_tests,
            "success_rate": success_rate,
            "grade": grade,
            "tests": tests
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WatchAPITester()
    results = tester.run_full_test_suite()
    
    if "error" not in results:
        print(f"\nüéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ù–ê –ß–ê–°–ê–•!")
        print("üì± –£—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Xiaomi Watch S –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

if __name__ == "__main__":
    main() 