#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Todoist –∏ Telegram –±–æ—Ç–∞
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from src.integrations.todoist_integration import TodoistIntegration, TaskPriority
from src.config.environment import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_todoist_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Todoist"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Todoist –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Todoist
        todoist = TodoistIntegration(config.TODOIST_API_TOKEN)
        await todoist.initialize()
        
        print("‚úÖ Todoist –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
        print("\nüìÅ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        projects = await todoist.get_projects()
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        for project in projects[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            name = project.name if hasattr(project, 'name') else project['name'] if isinstance(project, dict) and 'name' in project else str(project)
            pid = project.id if hasattr(project, 'id') else project['id'] if isinstance(project, dict) and 'id' in project else ''
            print(f"  - {name} (ID: {pid})")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        tasks = await todoist.get_tasks()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        active_tasks = [t for t in tasks if not t.completed_at]
        completed_tasks = [t for t in tasks if t.completed_at]
        print(f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_tasks)}")
        print(f"  - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {len(completed_tasks)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if active_tasks:
            print("  –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for task in active_tasks[:5]:
                priority_emoji = {"high": "üî¥", "normal": "üü°", "low": "üü¢"}.get(task.priority.value, "‚ö™")
                print(f"    {priority_emoji} {task.content} (ID: {task.id})")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        print("\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏...")
        test_task = await todoist.create_task(
            content="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ Python",
            description="–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            priority=TaskPriority.NORMAL
        )
        
        if test_task:
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_task.content} (ID: {test_task.id})")
            
            # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            print("\n‚úèÔ∏è –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            updated_task = await todoist.update_task(
                task_id=test_task.id,
                content="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                description="–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            )
            
            if updated_task:
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {updated_task.content}")
            
            # –¢–µ—Å—Ç 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            print("\n‚úÖ –¢–µ—Å—Ç 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            success = await todoist.complete_task(test_task.id)
            if success:
                print("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
            
            # –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            print("\nüóëÔ∏è –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            success = await todoist.delete_task(test_task.id)
            if success:
                print("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
        
        # –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫
        print("\nüè∑Ô∏è –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫...")
        labels = await todoist.get_labels()
        print(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–∫: {len(labels)}")
        for label in labels[:5]:
            name = label.name if hasattr(label, 'name') else label['name'] if isinstance(label, dict) and 'name' in label else str(label)
            lid = label.id if hasattr(label, 'id') else label['id'] if isinstance(label, dict) and 'id' in label else ''
            print(f"  - {name} (ID: {lid})")
        
        # –¢–µ—Å—Ç 8: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –º–µ—Ç–∫–æ–π
        print("\nüè∑Ô∏è –¢–µ—Å—Ç 8: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –º–µ—Ç–∫–æ–π...")
        if labels:
            test_task_with_label = await todoist.create_task(
                content="–ó–∞–¥–∞—á–∞ —Å –º–µ—Ç–∫–æ–π",
                description="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –º–µ—Ç–∫–æ–π",
                priority=TaskPriority.LOW,
                labels=[labels[0].name]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –º–µ—Ç–∫—É
            )
            
            if test_task_with_label:
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –º–µ—Ç–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞: {test_task_with_label.content}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
                await todoist.delete_task(test_task_with_label.id)
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –º–µ—Ç–∫–æ–π —É–¥–∞–ª–µ–Ω–∞")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Todoist –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Todoist: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_bot_commands():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    
    try:
        from src.telegram.enhanced_bot import EnhancedTelegramBot
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = EnhancedTelegramBot()
        success = await bot.initialize()
        
        if success:
            print("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            commands = [
                "/start", "/help", "/todo", "/todoist", "/tasks",
                "/complete", "/delete", "/notion", "/habit", "/reflection",
                "/idea", "/overview", "/insights", "/progress", "/recommendations",
                "/sync", "/validate", "/list", "/search"
            ]
            
            for cmd in commands:
                print(f"  - {cmd}")
            
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_notion_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion"""
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        from src.notion.core import NotionService
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Notion
        notion = NotionService()
        await notion.initialize()
        
        print("‚úÖ Notion –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        db_names = {
            "tasks": "üìã –ó–∞–¥–∞—á–∏",
            "habits": "üîÑ –ü—Ä–∏–≤—ã—á–∫–∏", 
            "reflections": "üß† –†–µ—Ñ–ª–µ–∫—Å–∏–∏",
            "rituals": "üåü –†–∏—Ç—É–∞–ª—ã",
            "guides": "üìñ –ì–∞–π–¥—ã",
            "actions": "‚ö° –î–µ–π—Å—Ç–≤–∏—è",
            "terms": "üìö –¢–µ—Ä–º–∏–Ω—ã",
            "materials": "üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
        }
        
        for db_key, db_name in db_names.items():
            try:
                count = await notion.get_database_count(db_key)
                print(f"  ‚úÖ {db_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"  ‚ùå {db_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ({e})")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Notion –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Notion: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Life Management System...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  - Todoist —Ç–æ–∫–µ–Ω: {'‚úÖ' if config.TODOIST_API_TOKEN else '‚ùå'}")
    print(f"  - Telegram —Ç–æ–∫–µ–Ω: {'‚úÖ' if config.TELEGRAM_BOT_TOKEN else '‚ùå'}")
    print(f"  - Notion —Ç–æ–∫–µ–Ω: {'‚úÖ' if config.NOTION_TOKEN else '‚ùå'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Todoist
    await test_todoist_integration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    await test_bot_commands()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Notion
    await test_notion_integration()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env")
    print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run_life_system.py")
    print("  3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram")

if __name__ == "__main__":
    asyncio.run(main()) 