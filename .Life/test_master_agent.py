#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞ –∏ –ò–ò-–∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import asyncio
import sys
import os
from datetime import datetime, UTC

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.agents.master_agent import master_agent, TaskPriority, TaskStatus, AgentRole
from src.agents.enhanced_prompts import get_enhanced_prompt, get_agent_specializations

async def test_master_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞ –∏ –ò–ò-–∫–æ–º–∞–Ω–¥—ã"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞ –∏ –ò–ò-–∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        print("\n1. üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        
        tasks = [
            {
                "title": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤",
                "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤",
                "priority": TaskPriority.HIGH,
                "tags": ["optimization", "prompts", "quality"],
                "estimated_hours": 2.0
            },
            {
                "title": "–°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å comprehensive test suite –¥–ª—è –≤—Å–µ—Ö API endpoints —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º edge cases",
                "priority": TaskPriority.MEDIUM,
                "tags": ["testing", "api", "automation"],
                "estimated_hours": 4.0
            },
            {
                "title": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è",
                "description": "–°–æ–∑–¥–∞—Ç—å GitHub Actions workflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–ø–ª–æ—è –Ω–∞ staging/production",
                "priority": TaskPriority.HIGH,
                "tags": ["devops", "ci_cd", "automation"],
                "estimated_hours": 3.0
            },
            {
                "title": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
                "description": "–°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è UX/UI",
                "priority": TaskPriority.MEDIUM,
                "tags": ["ux", "feedback", "analysis"],
                "estimated_hours": 2.5
            },
            {
                "title": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ LLM –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ (Claude 3.5, GPT-4 Turbo, Gemini Pro) –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
                "priority": TaskPriority.LOW,
                "tags": ["research", "llm", "integration"],
                "estimated_hours": 3.0
            }
        ]
        
        created_tasks = []
        for task_data in tasks:
            task_id = await master_agent.create_task(
                title=task_data["title"],
                description=task_data["description"],
                priority=task_data["priority"],
                estimated_hours=task_data["estimated_hours"],
                tags=task_data["tags"]
            )
            created_tasks.append(task_id)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_data['title']} (ID: {task_id})")
        
        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        print("\n2. ü§ñ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞—á–∏...")
        for task_id in created_tasks:
            task = master_agent.tasks.get(task_id)
            if task and task.assigned_agent:
                print(f"üìù –ó–∞–¥–∞—á–∞ '{task.title}' ‚Üí –ê–≥–µ–Ω—Ç: {task.assigned_agent.value}")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}")
                print(f"   –°—Ç–∞—Ç—É—Å: {task.status.value}")
                print(f"   –¢–µ–≥–∏: {', '.join(task.tags)}")
                print()
        
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
        print("\n3. ‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
        prompt_task_id = created_tasks[0]
        print(f"\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤...")
        
        result = await master_agent.execute_task(
            prompt_task_id,
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"{'='*40}")
        print(result[:500] + "..." if len(result) > 500 else result)
        print(f"{'='*40}")
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –æ –∫–æ–º–∞–Ω–¥–µ
        print("\n4. üìä –û—Ç—á–µ—Ç –æ –∫–æ–º–∞–Ω–¥–µ...")
        team_report = await master_agent.get_team_report()
        
        print(f"üìà –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"   - –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {team_report['team_metrics']['total_tasks']}")
        print(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {team_report['team_metrics']['completed_tasks']}")
        print(f"   - –ù–µ—É–¥–∞—á–Ω–æ: {team_report['team_metrics']['failed_tasks']}")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {team_report['team_metrics']['avg_completion_time']:.2f} —á–∞—Å–æ–≤")
        
        print(f"\nü§ñ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤:")
        for role, perf in team_report['agent_performance'].items():
            print(f"   - {role}:")
            print(f"     ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {perf['tasks_completed']}")
            print(f"     ‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: {perf['tasks_failed']}")
            print(f"     ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {perf['success_rate']:.1%}")
            print(f"     ‚Ä¢ –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {perf['current_load']}")
            print(f"     ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {perf['avg_quality']:.2f}")
        
        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(team_report['recommendations'], 1):
            print(f"   {i}. {rec}")
        
        # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã
        print("\n5. üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã...")
        optimizations = await master_agent.optimize_team()
        
        print(f"üîÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        if optimizations['prompt_updates']:
            print(f"   üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {len(optimizations['prompt_updates'])}")
            for update in optimizations['prompt_updates']:
                print(f"     - {update['agent']}: {update['reason']}")
        
        if optimizations['task_reassignments']:
            print(f"   üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á: {len(optimizations['task_reassignments'])}")
            for reassignment in optimizations['task_reassignments']:
                print(f"     - {reassignment['task_id']}: {reassignment['from_agent']} ‚Üí {reassignment['to_agent']}")
        
        if optimizations['process_improvements']:
            print(f"   ‚öôÔ∏è –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(optimizations['process_improvements'])}")
            for improvement in optimizations['process_improvements']:
                print(f"     - {improvement['type']}: {improvement['description']}")
        
        # 7. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print("\n6. ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π...")
        results = await master_agent.apply_optimizations(optimizations)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:")
        print(f"   - –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {results['prompt_updates_applied']}")
        print(f"   - –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∑–∞–¥–∞—á: {results['tasks_reassigned']}")
        print(f"   - –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {results['process_improvements_applied']}")
        
        if results['errors']:
            print(f"   - –û—à–∏–±–∫–∏: {len(results['errors'])}")
            for error in results['errors']:
                print(f"     ‚Ä¢ {error}")
        
        # 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        print("\n7. üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...")
        
        print(f"\nüîç –ü—Ä–æ–º–ø—Ç –¥–ª—è Product Manager:")
        pm_prompt = get_enhanced_prompt("Product Manager")
        print(f"{'='*50}")
        print(pm_prompt[:300] + "..." if len(pm_prompt) > 300 else pm_prompt)
        print(f"{'='*50}")
        
        print(f"\nüîç –ü—Ä–æ–º–ø—Ç –¥–ª—è Developer:")
        dev_prompt = get_enhanced_prompt("Developer")
        print(f"{'='*50}")
        print(dev_prompt[:300] + "..." if len(dev_prompt) > 300 else dev_prompt)
        print(f"{'='*50}")
        
        # 9. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n8. üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        final_report = await master_agent.get_team_report()
        
        print(f"üèÜ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   - –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ {final_report['team_metrics']['total_tasks']} –∑–∞–¥–∞—á")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {final_report['team_metrics']['avg_completion_time']:.2f} —á–∞—Å–æ–≤")
        print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {final_report['team_metrics']['completed_tasks'] / final_report['team_metrics']['total_tasks']:.1%}")
        
        print(f"\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"   - –ú–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ {len(AgentRole)} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        print(f"   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        print(f"   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞")
        print(f"   - –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def demo_agent_interaction():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("\nüé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–∞–º–∏...")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è Product Manager
        pm_task_id = await master_agent.create_task(
            title="–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ñ–∏—á –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞",
            description="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π backlog –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é —Ñ–∏—á –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –±–∏–∑–Ω–µ—Å-—Ü–µ–ª–µ–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–∞–Ω–¥—ã",
            priority=TaskPriority.HIGH,
            tags=["prioritization", "sprint", "planning"],
            estimated_hours=1.5
        )
        
        print(f"üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è Product Manager: {pm_task_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await master_agent.execute_task(
            pm_task_id,
            "–£ –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∏—á–∏ –≤ backlog: 1) –£–ª—É—á—à–µ–Ω–∏–µ UI/UX, 2) –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, 3) –ù–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API, 4) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é."
        )
        
        print(f"\nüíº –û—Ç–≤–µ—Ç Product Manager:")
        print(f"{'='*50}")
        print(result)
        print(f"{'='*50}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è Developer
        dev_task_id = await master_agent.create_task(
            title="–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ legacy –∫–æ–¥–∞",
            description="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ maintainability",
            priority=TaskPriority.MEDIUM,
            tags=["refactoring", "code", "maintenance"],
            estimated_hours=2.0
        )
        
        print(f"\nüìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è Developer: {dev_task_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await master_agent.execute_task(
            dev_task_id,
            "–£ –Ω–∞—Å –µ—Å—Ç—å –º–æ–¥—É–ª—å —Å 500+ —Å—Ç—Ä–æ–∫–∞–º–∏ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞."
        )
        
        print(f"\nüíª –û—Ç–≤–µ—Ç Developer:")
        print(f"{'='*50}")
        print(result)
        print(f"{'='*50}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è LLM Researcher
        llm_task_id = await master_agent.create_task(
            title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            description="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤",
            priority=TaskPriority.HIGH,
            tags=["prompt_engineering", "optimization", "quality"],
            estimated_hours=1.0
        )
        
        print(f"\nüìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è LLM Researcher: {llm_task_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await master_agent.execute_task(
            llm_task_id,
            "–ù–∞—à–∏ –ø—Ä–æ–º–ø—Ç—ã –¥–∞—é—Ç —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∏—Ö –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏?"
        )
        
        print(f"\nüß† –û—Ç–≤–µ—Ç LLM Researcher:")
        print(f"{'='*50}")
        print(result)
        print(f"{'='*50}")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞ –∏ –ò–ò-–∫–æ–º–∞–Ω–¥—ã...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    asyncio.run(test_master_agent())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(demo_agent_interaction())
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìö –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á")
    print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤")
    print("   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤")
    print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã")
    print("   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    print("   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤")
    print("   ‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
    
    print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ!") 