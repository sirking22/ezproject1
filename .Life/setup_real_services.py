#!/usr/bin/env python3
"""
üîó –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –†–ï–ê–õ–¨–ù–´–• –°–ï–†–í–ò–°–û–í
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –∏ Telegram
"""

import asyncio
import json
import logging
import os
import requests
import sys
from datetime import datetime
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RealServicesSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        load_dotenv()
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.telegram_chat_id = os.getenv("TELEGRAM_CHAT_ID")
        
    def print_header(self):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("üîó" + "="*60)
        print("üéØ –ù–ê–°–¢–†–û–ô–ö–ê –†–ï–ê–õ–¨–ù–´–• –°–ï–†–í–ò–°–û–í")
        print("="*62)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*62)
    
    def check_current_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 40)
        
        config_status = {
            "notion_token": bool(self.notion_token),
            "telegram_token": bool(self.telegram_token),
            "telegram_chat_id": bool(self.telegram_chat_id)
        }
        
        print(f"Notion Token: {'‚úÖ' if config_status['notion_token'] else '‚ùå'}")
        print(f"Telegram Token: {'‚úÖ' if config_status['telegram_token'] else '‚ùå'}")
        print(f"Telegram Chat ID: {'‚úÖ' if config_status['telegram_chat_id'] else '‚ùå'}")
        
        return config_status
    
    def test_notion_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Notion"""
        print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NOTION")
        print("-" * 30)
        
        if not self.notion_token:
            print("‚ùå Notion —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            headers = {
                "Authorization": f"Bearer {self.notion_token}",
                "Notion-Version": "2022-06-28",
                "Content-Type": "application/json"
            }
            
            # –¢–µ—Å—Ç API
            response = requests.get(
                "https://api.notion.com/v1/users/me",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                user_data = response.json()
                print(f"‚úÖ Notion –ø–æ–¥–∫–ª—é—á–µ–Ω: {user_data.get('name', 'Unknown')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Notion API: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Notion: {e}")
            return False
    
    def test_telegram_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        print("\nüì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM")
        print("-" * 30)
        
        if not self.telegram_token:
            print("‚ùå Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            # –¢–µ—Å—Ç API
            url = f"https://api.telegram.org/bot{self.telegram_token}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                bot_data = response.json()
                if bot_data.get("ok"):
                    bot_info = bot_data["result"]
                    print(f"‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'Unknown')}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {bot_data.get('description', 'Unknown')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    def test_telegram_send(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        print("\nüì§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –í TELEGRAM")
        print("-" * 40)
        
        if not self.telegram_token or not self.telegram_chat_id:
            print("‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return False
        
        try:
            message = f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Quick Voice Assistant\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            payload = {
                "chat_id": self.telegram_chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description', 'Unknown')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def test_notion_create(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ Notion —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –í NOTION")
        print("-" * 40)
        
        if not self.notion_token:
            print("‚ùå Notion —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        tasks_db_id = os.getenv("NOTION_TASKS_DB")
        if not tasks_db_id:
            print("‚ùå ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            headers = {
                "Authorization": f"Bearer {self.notion_token}",
                "Notion-Version": "2022-06-28",
                "Content-Type": "application/json"
            }
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã
            url = f"https://api.notion.com/v1/databases/{tasks_db_id}"
            resp = requests.get(url, headers=headers, timeout=10)
            if resp.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {resp.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {resp.text}")
                return False
            db = resp.json()
            props = db.get("properties", {})
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ title
            title_field = None
            for k, v in props.items():
                if v.get("type") == "title":
                    title_field = k
                    break
            if not title_field:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ title")
                return False
            # –°–æ–±–∏—Ä–∞–µ–º payload
            payload = {
                "parent": {"database_id": tasks_db_id},
                "properties": {
                    title_field: {
                        "title": [{"text": {"content": "üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)"}}]
                    }
                }
            }
            # –î–æ–±–∞–≤–ª—è–µ–º select-–ø–æ–ª—è —Å –ø–µ—Ä–≤—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
            for field in ["–°—Ç–∞—Ç—É—Å", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]:
                if field in props and props[field]["type"] == "select":
                    options = props[field]["select"].get("options", [])
                    if options:
                        payload["properties"][field] = {"select": {"name": options[0]["name"]}}
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
            for field in ["–î–µ–¥–ª–∞–π–Ω", "–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞"]:
                if field in props and props[field]["type"] == "date":
                    payload["properties"][field] = {"date": {"start": datetime.now().isoformat()}}
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            response = requests.post(
                "https://api.notion.com/v1/pages",
                headers=headers,
                json=payload,
                timeout=10
            )
            if response.status_code == 200:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Notion (—Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ Notion: {e}")
            return False
    
    def test_server_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä"""
        print("\nüñ•Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ß–ï–†–ï–ó –°–ï–†–í–ï–†")
        print("-" * 45)
        
        try:
            # –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            test_payload = {
                "query": "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã",
                "context": "test",
                "timestamp": int(datetime.now().timestamp()),
                "user_id": "test_user"
            }
            
            response = requests.post(
                "http://localhost:8000/watch/voice",
                json=test_payload,
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º")
                print(f"   –û—Ç–≤–µ—Ç: {data.get('response', 'N/A')[:50]}...")
                print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {data.get('action', 'N/A')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                return False
                
        except requests.exceptions.ConnectionError:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start_quick_voice_assistant.py")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def generate_setup_instructions(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï")
        print("="*50)
        
        print("üîó NOTION:")
        print("1. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞: https://www.notion.so/my-integrations")
        print("2. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        print("3. –°–∫–æ–ø–∏—Ä—É–π Internal Integration Token")
        print("4. –°–æ–∑–¥–∞–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: Tasks, Reflections, Habits")
        print("5. –î–æ–±–∞–≤—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–π –±–∞–∑–µ")
        print("6. –°–∫–æ–ø–∏—Ä—É–π Database IDs –∏–∑ URL")
        
        print("\nüì± TELEGRAM:")
        print("1. –ù–∞–π–¥–∏ @BotFather –≤ Telegram")
        print("2. –û—Ç–ø—Ä–∞–≤—å: /newbot")
        print("3. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        print("4. –°–∫–æ–ø–∏—Ä—É–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        print("5. –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É")
        print("6. –ü–æ–ª—É—á–∏ Chat ID: https://api.telegram.org/bot<TOKEN>/getUpdates")
        
        print("\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª .env")
        print("2. –î–æ–±–∞–≤—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ ID")
        print("3. –ó–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
    
    def run_full_test(self):
        """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print("="*50)
        
        tests = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.check_current_config),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion", self.test_notion_connection),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", self.test_telegram_connection),
            ("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram", self.test_telegram_send),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤ Notion", self.test_notion_create),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä", self.test_server_integration)
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"\nüîç {test_name}...")
            try:
                if asyncio.iscoroutinefunction(test_func):
                    result = asyncio.run(test_func())
                else:
                    result = test_func()
                results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                results.append((test_name, False))
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\nüìä" + "="*50)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*52)
        
        passed = sum(1 for _, result in results if result)
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{status} | {test_name}")
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            self.generate_setup_instructions()
        
        return passed == total

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup = RealServicesSetup()
    setup.print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω—ã
    config = setup.check_current_config()
    
    if not any(config.values()):
        print("\n‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        setup.generate_setup_instructions()
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success = setup.run_full_test()
    
    if success:
        print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–£–ö–¢–ò–í–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("üì± –£—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã!")
    else:
        print("\nüîß –ù–ï–û–ë–•–û–î–ò–ú–û –î–û–ù–ê–°–¢–†–û–ò–¢–¨ –°–ï–†–í–ò–°–´")
        print("üìã –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    main() 