import numpy as np
import json
import struct
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def read_glb_file(filename):
    """
    –ß–∏—Ç–∞–µ—Ç GLB —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é
    """
    print(f"üîç –ê–Ω–∞–ª–∏–∑ GLB —Ñ–∞–π–ª–∞: {filename}")
    
    with open(filename, 'rb') as f:
        # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ GLB
        magic = f.read(4)
        if magic != b'glTF':
            print("‚ùå –ù–µ GLB —Ñ–∞–π–ª!")
            return None
            
        version = struct.unpack('<I', f.read(4))[0]
        length = struct.unpack('<I', f.read(4))[0]
        
        print(f"üìä GLB –≤–µ—Ä—Å–∏—è: {version}, —Ä–∞–∑–º–µ—Ä: {length} –±–∞–π—Ç")
        
        # –ß–∏—Ç–∞–µ–º JSON chunk
        json_chunk_length = struct.unpack('<I', f.read(4))[0]
        json_chunk_type = f.read(4)
        
        if json_chunk_type != b'JSON':
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON chunk")
            return None
            
        json_data = f.read(json_chunk_length).decode('utf-8')
        gltf = json.loads(json_data)
        
        print("‚úÖ JSON –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ß–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        binary_chunk_length = struct.unpack('<I', f.read(4))[0]
        binary_chunk_type = f.read(4)
        
        if binary_chunk_type != b'BIN\x00':
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BIN chunk")
            return None
            
        binary_data = f.read(binary_chunk_length)
        
        print(f"‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(binary_data)} –±–∞–π—Ç")
        
        return gltf, binary_data

def extract_geometry(gltf, binary_data):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–∑ GLB –¥–∞–Ω–Ω—ã—Ö
    """
    print("\nüîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏...")
    
    vertices = []
    indices = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print(f"üìã Meshes: {len(gltf.get('meshes', []))}")
    print(f"üìã Accessors: {len(gltf.get('accessors', []))}")
    print(f"üìã BufferViews: {len(gltf.get('bufferViews', []))}")
    
    if 'meshes' not in gltf:
        print("‚ùå –ù–µ—Ç –º–µ—à–µ–π –≤ —Ñ–∞–π–ª–µ")
        return None, None
        
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–µ—à
    mesh = gltf['meshes'][0]
    primitive = mesh['primitives'][0]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤–µ—Ä—à–∏–Ω
    position_accessor_idx = primitive['attributes']['POSITION']
    position_accessor = gltf['accessors'][position_accessor_idx]
    position_buffer_view = gltf['bufferViews'][position_accessor['bufferView']]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã
    offset = position_buffer_view['byteOffset']
    length = position_buffer_view['byteLength']
    vertex_data = binary_data[offset:offset+length]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ numpy
    vertex_count = position_accessor['count']
    vertices = np.frombuffer(vertex_data, dtype=np.float32).reshape(vertex_count, 3)
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(vertices)} –≤–µ—Ä—à–∏–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if 'indices' in primitive:
        indices_accessor_idx = primitive['indices']
        indices_accessor = gltf['accessors'][indices_accessor_idx]
        indices_buffer_view = gltf['bufferViews'][indices_accessor['bufferView']]
        
        offset = indices_buffer_view['byteOffset']
        length = indices_buffer_view['byteLength']
        indices_data = binary_data[offset:offset+length]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω–¥–µ–∫—Å–æ–≤
        component_type = indices_accessor['componentType']
        if component_type == 5123:  # UNSIGNED_SHORT
            indices = np.frombuffer(indices_data, dtype=np.uint16)
        elif component_type == 5125:  # UNSIGNED_INT
            indices = np.frombuffer(indices_data, dtype=np.uint32)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(indices)} –∏–Ω–¥–µ–∫—Å–æ–≤")
    
    return vertices, indices

def analyze_geometry(vertices, indices):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    print("\nüìä –ê–ù–ê–õ–ò–ó –ì–ï–û–ú–ï–¢–†–ò–ò:")
    print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω: {len(vertices)}")
    if indices is not None:
        print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indices)}")
        print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {len(indices) // 3}")
    
    # –†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏
    min_coords = np.min(vertices, axis=0)
    max_coords = np.max(vertices, axis=0)
    size = max_coords - min_coords
    
    print(f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏:")
    print(f"  X: {min_coords[0]:.3f} - {max_coords[0]:.3f} (—Ä–∞–∑–º–µ—Ä: {size[0]:.3f})")
    print(f"  Y: {min_coords[1]:.3f} - {max_coords[1]:.3f} (—Ä–∞–∑–º–µ—Ä: {size[1]:.3f})")
    print(f"  Z: {min_coords[2]:.3f} - {max_coords[2]:.3f} (—Ä–∞–∑–º–µ—Ä: {size[2]:.3f})")
    
    # –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏
    center = (min_coords + max_coords) / 2
    print(f"‚Ä¢ –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏: ({center[0]:.3f}, {center[1]:.3f}, {center[2]:.3f})")
    
    return min_coords, max_coords, center, size

def visualize_reference_model(vertices, indices):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—É—é –º–æ–¥–µ–ª—å
    """
    print("\nüì∫ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    fig = plt.figure(figsize=(15, 5))
    
    # –¢—Ä–∏ –≤–∏–¥–∞
    views = [
        (30, 45, "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞"),
        (0, 0, "–í–∏–¥ —Å–ø–µ—Ä–µ–¥–∏"), 
        (90, 0, "–í–∏–¥ —Å–≤–µ—Ä—Ö—É")
    ]
    
    for i, (elev, azim, title) in enumerate(views):
        ax = fig.add_subplot(1, 3, i+1, projection='3d')
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–ª–∞–∫–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        sample_indices = np.random.choice(len(vertices), min(5000, len(vertices)), replace=False)
        sample_vertices = vertices[sample_indices]
        
        ax.scatter(sample_vertices[:, 0], sample_vertices[:, 1], sample_vertices[:, 2], 
                  c='orange', alpha=0.6, s=0.5)
        
        ax.set_title(title)
        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_zlabel('Z')
        ax.view_init(elev=elev, azim=azim)
    
    plt.suptitle('–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–∑ GLB —Ñ–∞–π–ª–∞', fontsize=16)
    plt.tight_layout()
    plt.show()

def create_lamp_from_reference(vertices, indices):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ª–∞–º–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    """
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤–µ—Ä—à–∏–Ω
    min_coords, max_coords, center, size = analyze_geometry(vertices, indices)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—à–∏–Ω—ã –∫ –µ–¥–∏–Ω–∏—á–Ω–æ–π —Å—Ñ–µ—Ä–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    normalized_vertices = vertices - center
    max_radius = np.max(np.linalg.norm(normalized_vertices, axis=1))
    normalized_vertices /= max_radius
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    x, y, z = normalized_vertices[:, 0], normalized_vertices[:, 1], normalized_vertices[:, 2]
    
    # –°—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    r = np.sqrt(x**2 + y**2 + z**2)
    theta = np.arctan2(y, x)  # –∞–∑–∏–º—É—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª
    phi = np.arccos(z / r)    # –ø–æ–ª—è—Ä–Ω—ã–π —É–≥–æ–ª
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–∞–¥–∏—É—Å–∞
    radius_variations = r - 1.0  # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–π —Å—Ñ–µ—Ä—ã
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞:")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–∞—Ä–∏–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–∞: {np.mean(np.abs(radius_variations)):.3f}")
    print(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è: {np.max(np.abs(radius_variations)):.3f}")
    print(f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(radius_variations):.3f}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    phi_new = np.linspace(0, np.pi, 80)
    theta_new = np.linspace(0, 2*np.pi, 160)
    PHI, THETA = np.meshgrid(phi_new, theta_new)
    
    # –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å
    base_radius = 60.0  # –º–º
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–º–ø–ª–∏—Ç—É–¥—ã
    amplitude_scale = np.max(np.abs(radius_variations)) * base_radius
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
    organic_pattern = (
        np.sin(THETA * 8 + PHI * 3) * np.cos(PHI * 6 + THETA * 2) * 0.4 +
        np.cos(THETA * 12 + PHI * 4) * np.sin(PHI * 8 + THETA * 3) * 0.3 +
        np.sin(THETA * 16 + PHI * 6) * np.cos(PHI * 10 + THETA * 4) * 0.2
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –º–æ–¥—É–ª—è—Ü–∏—é
    vertical_mod = np.sin(PHI * 2.5) * 0.4 + 0.6
    organic_pattern *= vertical_mod
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    organic_pattern *= amplitude_scale
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–Ω–æ—Å—Ç–∏
    np.random.seed(42)
    noise = np.random.normal(0, amplitude_scale * 0.1, organic_pattern.shape)
    organic_pattern += noise
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
    radius_new = base_radius + organic_pattern
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    X = radius_new * np.sin(PHI) * np.cos(THETA)
    Y = radius_new * np.sin(PHI) * np.sin(THETA)
    Z = radius_new * np.cos(PHI)
    
    return X, Y, Z

def save_improved_model(X, Y, Z):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ STL
    """
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    try:
        from stl import mesh
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
        vertices = []
        faces = []
        
        rows, cols = X.shape
        
        for i in range(rows):
            for j in range(cols):
                vertices.append([X[i,j], Y[i,j], Z[i,j]])
        
        vertices = np.array(vertices)
        
        for i in range(rows-1):
            for j in range(cols-1):
                v1 = i * cols + j
                v2 = i * cols + ((j + 1) % cols)
                v3 = (i + 1) * cols + j
                v4 = (i + 1) * cols + ((j + 1) % cols)
                
                faces.append([v1, v3, v2])
                faces.append([v2, v3, v4])
        
        faces = np.array(faces)
        
        # –°–æ–∑–¥–∞–µ–º STL mesh
        lamp_mesh = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))
        
        for i, face in enumerate(faces):
            for j in range(3):
                lamp_mesh.vectors[i][j] = vertices[face[j], :]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        lamp_mesh.save('organic_lamp_from_reference.stl')
        
        print("‚úÖ STL —Ñ–∞–π–ª 'organic_lamp_from_reference.stl' —Å–æ–∑–¥–∞–Ω!")
        print(f"üìä {len(faces)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, {len(vertices)} –≤–µ—Ä—à–∏–Ω")
        
        return True
        
    except ImportError:
        print("‚ùå numpy-stl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ï–ù–°–ù–û–ô –ú–û–î–ï–õ–ò GLB")
    print("="*50)
    
    filename = "12528bbab42cceba1447a4db3e8e5562.glb"
    
    # –ß–∏—Ç–∞–µ–º GLB —Ñ–∞–π–ª
    result = read_glb_file(filename)
    if result is None:
        return
    
    gltf, binary_data = result
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
    vertices, indices = extract_geometry(gltf, binary_data)
    if vertices is None:
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyze_geometry(vertices, indices)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
    visualize_reference_model(vertices, indices)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    X, Y, Z = create_lamp_from_reference(vertices, indices)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    fig = plt.figure(figsize=(12, 8))
    ax = fig.add_subplot(111, projection='3d')
    
    surf = ax.plot_surface(X, Y, Z, 
                          cmap='YlOrRd',
                          alpha=0.9,
                          linewidth=0,
                          antialiased=True)
    
    ax.set_title('–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞', fontsize=16)
    ax.set_xlabel('X (mm)')
    ax.set_ylabel('Y (mm)')
    ax.set_zlabel('Z (mm)')
    
    plt.show()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    save_improved_model(X, Y, Z)
    
    print("\nüéâ –ì–û–¢–û–í–û! –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞!")

if __name__ == "__main__":
    main() 