#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π LLM —Å–µ—Ä–≤–µ—Ä –¥–ª—è Windows
"""

import json
import time
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import socket

class SimpleLLMHandler(BaseHTTPRequestHandler):
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/health':
            self.send_health_response()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/generate':
            self.handle_generate_request()
        else:
            self.send_error(404, "Not Found")
    
    def handle_generate_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            
            # –ü–∞—Ä—Å–∏–º JSON
            request_data = json.loads(post_data.decode('utf-8'))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            prompt = request_data.get('prompt', '')
            context = request_data.get('context', 'general')
            
            print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {prompt[:50]}... (–∫–æ–Ω—Ç–µ–∫—Å—Ç: {context})")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            response = self.generate_simple_response(prompt, context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response_data = {
                'response': response,
                'context': context,
                'timestamp': datetime.now().isoformat(),
                'status': 'success'
            }
            
            self.wfile.write(json.dumps(response_data, ensure_ascii=False).encode('utf-8'))
            
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            self.send_error(500, f"Internal Server Error: {str(e)}")
    
    def generate_simple_response(self, prompt, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"""
        prompt_lower = prompt.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        if any(word in prompt_lower for word in ['–∑–∞–¥–∞—á–∞', 'task', 'todo']):
            if context == 'wear':
                return "‚åö –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —á–∞—Å–æ–≤"
            elif context == 'work':
                return "üíº –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫"
            elif context == 'morning':
                return "üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            else:
                return "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        
        elif any(word in prompt_lower for word in ['–º—ã—Å–ª—å', 'reflection', '–¥—É–º–∞—Ç—å']):
            if context == 'wear':
                return "‚åö –ú—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞ —Å —á–∞—Å–æ–≤"
            elif context == 'work':
                return "üìä –ú—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ä–∞–±–æ—á–∏–π –∂—É—Ä–Ω–∞–ª"
            elif context == 'evening':
                return "üåô –í–µ—á–µ—Ä–Ω—è—è –º—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞"
            else:
                return "üí≠ –ú—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞"
        
        elif any(word in prompt_lower for word in ['–ø—Ä–∏–≤—ã—á–∫–∞', 'habit', '—Ç—Ä–µ–∫']):
            if context == 'wear':
                return "‚åö –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ —Å —á–∞—Å–æ–≤"
            elif context == 'work':
                return "üéØ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç—Ä–µ–∫–µ—Ä–µ"
            else:
                return "üîÑ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞"
        
        else:
            return "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    
    def send_health_response(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        
        health_data = {
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'server': 'Simple LLM Server v1.0',
            'platform': 'Windows'
        }
        
        self.wfile.write(json.dumps(health_data).encode('utf-8'))
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"{datetime.now().strftime('%H:%M:%S')} - {format % args}")


def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "127.0.0.1"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    HOST = "0.0.0.0"
    PORT = 8000
    
    local_ip = get_local_ip()
    
    print("üöÄ============================================================")
    print("üß† SIMPLE LLM SERVER - –ó–ê–ü–£–°–ö")
    print("==============================================================")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("==============================================================")
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    print(f"üåê IP –∞–¥—Ä–µ—Å: {local_ip}")
    print(f"üîó URL: http://{local_ip}:{PORT}")
    print("")
    print("üìã –≠–ù–î–ü–û–ò–ù–¢–´:")
    print("‚Ä¢ GET  /health  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("‚Ä¢ POST /generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
    print("")
    print("üß™ –¢–ï–°–¢:")
    print(f"curl http://{local_ip}:{PORT}/health")
    print("")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ Ctrl+C")
    print("==============================================================")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server = HTTPServer((HOST, PORT), SimpleLLMHandler)
        
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print(f"üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{local_ip}:{PORT}")
        print("üì± –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Android –∏ Wear OS")
        print("")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.serve_forever()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ù–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 8000")
        print("   - –ï—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("   - –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ —Ñ–∞–π—Ä–≤–æ–ª")


if __name__ == "__main__":
    main() 