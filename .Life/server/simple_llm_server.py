#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è LLM
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Android –∏ Wear OS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
"""

import os
import json
import time
from datetime import datetime
from typing import Dict, Any, Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import parse_qs, urlparse
import threading
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('llm_server.log'),
        logging.StreamHandler()
    ]
)

class LLMRequestHandler(BaseHTTPRequestHandler):
    
    def __init__(self, *args, **kwargs):
        self.llm_client = MockLLMClient()  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è LLM
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        
        if parsed_url.path == '/health':
            self.send_health_response()
        elif parsed_url.path == '/status':
            self.send_status_response()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        
        if parsed_url.path == '/generate':
            self.handle_generate_request()
        else:
            self.send_error(404, "Not Found")
    
    def handle_generate_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            
            # –ü–∞—Ä—Å–∏–º JSON
            request_data = json.loads(post_data.decode('utf-8'))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            prompt = request_data.get('prompt', '')
            context = request_data.get('context', 'general')
            max_tokens = request_data.get('max_tokens', 100)
            temperature = request_data.get('temperature', 0.7)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {context}: {prompt[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.llm_client.generate_response(
                prompt=prompt,
                context=context,
                max_tokens=max_tokens,
                temperature=temperature
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            self.end_headers()
            
            response_data = {
                'response': response,
                'context': context,
                'timestamp': datetime.now().isoformat(),
                'tokens_used': len(response.split()),
                'status': 'success'
            }
            
            self.wfile.write(json.dumps(response_data, ensure_ascii=False).encode('utf-8'))
            
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:50]}...")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.send_error(500, f"Internal Server Error: {str(e)}")
    
    def send_health_response(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        
        health_data = {
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'uptime': time.time() - self.server.start_time,
            'requests_processed': getattr(self.server, 'requests_processed', 0)
        }
        
        self.wfile.write(json.dumps(health_data).encode('utf-8'))
    
    def send_status_response(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        
        status_data = {
            'server': 'LLM Server v1.0',
            'status': 'running',
            'timestamp': datetime.now().isoformat(),
            'uptime': time.time() - self.server.start_time,
            'requests_processed': getattr(self.server, 'requests_processed', 0),
            'llm_status': 'mock',  # –ó–∞–≥–ª—É—à–∫–∞
            'supported_contexts': ['home', 'work', 'morning', 'evening', 'wear'],
            'max_tokens': 1000,
            'temperature_range': [0.1, 1.0]
        }
        
        self.wfile.write(json.dumps(status_data, indent=2).encode('utf-8'))
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        logging.info(f"{self.address_string()} - {format % args}")


class MockLLMClient:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è LLM –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.context_responses = {
            'home': {
                'task': '‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–æ–º–∞—à–Ω–∏–π —Å–ø–∏—Å–æ–∫',
                'reflection': 'üí≠ –ú—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫',
                'habit': 'üîÑ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤ —Ç—Ä–µ–∫–µ—Ä–µ',
                'general': 'üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
            },
            'work': {
                'task': 'üíº –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫',
                'reflection': 'üìä –ú—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ä–∞–±–æ—á–∏–π –∂—É—Ä–Ω–∞–ª',
                'habit': 'üéØ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç—Ä–µ–∫–µ—Ä–µ',
                'general': 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–∞–±–æ—á–µ–π –±–∞–∑–µ'
            },
            'morning': {
                'task': 'üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω –¥–Ω—è',
                'reflection': '‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è –º—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞',
                'habit': 'üåû –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞',
                'general': 'üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
            },
            'evening': {
                'task': 'üåô –í–µ—á–µ—Ä–Ω—è—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
                'reflection': 'üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞',
                'habit': 'üåô –í–µ—á–µ—Ä–Ω—è—è –ø—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞',
                'general': 'üåô –í–µ—á–µ—Ä–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
            },
            'wear': {
                'task': '‚åö –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —á–∞—Å–æ–≤',
                'reflection': '‚åö –ú—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞ —Å —á–∞—Å–æ–≤',
                'habit': '‚åö –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ —Å —á–∞—Å–æ–≤',
                'general': '‚åö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å —á–∞—Å–æ–≤'
            }
        }
    
    def generate_response(self, prompt: str, context: str = 'general', 
                         max_tokens: int = 100, temperature: float = 0.7) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        command_type = self._detect_command_type(prompt)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_responses = self.context_responses.get(context, self.context_responses['general'])
        base_response = context_responses.get(command_type, context_responses['general'])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
        keywords = self._extract_keywords(prompt)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if keywords:
            response = f"{base_response}: {keywords}"
        else:
            response = base_response
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        if len(response) > max_tokens * 4:  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            response = response[:max_tokens * 4] + "..."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        time.sleep(0.1)
        
        return response
    
    def _detect_command_type(self, prompt: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ['–∑–∞–¥–∞—á–∞', 'task', 'todo', '–¥–µ–ª–∞—Ç—å']):
            return 'task'
        elif any(word in prompt_lower for word in ['–º—ã—Å–ª—å', 'reflection', '–¥—É–º–∞—Ç—å', '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ']):
            return 'reflection'
        elif any(word in prompt_lower for word in ['–ø—Ä–∏–≤—ã—á–∫–∞', 'habit', '—Ç—Ä–µ–∫', '–æ—Ç–º–µ—Ç–∏—Ç—å']):
            return 'habit'
        else:
            return 'general'
    
    def _extract_keywords(self, prompt: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-5 —Å–ª–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        words = prompt.split()
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        for i, word in enumerate(words):
            if word.lower() in ['–¥–æ–±–∞–≤–∏—Ç—å', '–∑–∞–ø–∏—Å–∞—Ç—å', '–æ—Ç–º–µ—Ç–∏—Ç—å', '—Å–æ–∑–¥–∞—Ç—å']:
                if i + 1 < len(words):
                    return ' '.join(words[i+1:i+4])  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 3 —Å–ª–æ–≤–∞
                break
        
        return ""


class LLMServer(HTTPServer):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, server_address, RequestHandlerClass):
        self.start_time = time.time()
        self.requests_processed = 0
        super().__init__(server_address, RequestHandlerClass)
    
    def finish_request(self, request, client_address):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.requests_processed += 1
        super().finish_request(request, client_address)


def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    import socket
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π IP
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "127.0.0.1"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    HOST = "0.0.0.0"  # –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    PORT = 8000
    
    local_ip = get_local_ip()
    
    print("üöÄ============================================================")
    print("üß† LLM SERVER - –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´")
    print("==============================================================")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("==============================================================")
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("------------------------------")
    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
    print("‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("------------------------------")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print("üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê")
    print("------------------------------")
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞: http://{local_ip}:{PORT}")
    print(f"üîó –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:{PORT}")
    print("üì± –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è Android –∏ Wear OS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    print("")
    print("üìã –≠–ù–î–ü–û–ò–ù–¢–´:")
    print("‚Ä¢ GET  /health  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞")
    print("‚Ä¢ GET  /status  - –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    print("‚Ä¢ POST /generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
    print("")
    print("üéØ –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í:")
    print(f"curl http://{local_ip}:{PORT}/health")
    print(f"curl -X POST http://{local_ip}:{PORT}/generate \\")
    print("  -H 'Content-Type: application/json' \\")
    print("  -d '{\"prompt\":\"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\",\"context\":\"home\"}'")
    print("")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ Ctrl+C")
    print("==============================================================")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server = LLMServer((HOST, PORT), LLMRequestHandler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        server_thread = threading.Thread(target=server.serve_forever)
        server_thread.daemon = True
        server_thread.start()
        
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print(f"üåê –í–Ω–µ—à–Ω–∏–π IP: {local_ip}")
        print(f"üîó URL –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: http://{local_ip}:{PORT}")
        
        # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            server.shutdown()
            server.server_close()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")


if __name__ == "__main__":
    main() 