#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import time
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Quick Voice Assistant API",
    description="API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Quick Voice Assistant API",
        "version": "1.0.0",
        "status": "running"
    }

@app.get("/health")
async def health():
    """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "timestamp": int(time.time()),
        "components": {
            "llm": True,
            "notion": True,
            "telegram": True
        }
    }

@app.get("/ping")
async def ping():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "ok",
        "timestamp": int(time.time()),
        "message": "pong"
    }

@app.post("/watch/voice")
async def process_voice_command(request: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç —á–∞—Å–æ–≤"""
    try:
        query = request.get("query", "")
        context = request.get("context", "watch_voice")
        user_id = request.get("user_id", "test_user")
        
        print(f"üé§ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {query}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        response_text = "–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        action = None
        data = {}
        
        query_lower = query.lower()
        
        if "–∑–∞–¥–∞—á–∞" in query_lower or "–¥–æ–±–∞–≤—å" in query_lower:
            action = "create_task"
            task_text = query.replace("–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É", "").replace("—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É", "").strip()
            data["task"] = task_text
            response_text = f"–ó–∞–¥–∞—á–∞ '{task_text}' —Å–æ–∑–¥–∞–Ω–∞!"
            
        elif "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è" in query_lower or "–º—ã—Å–ª—å" in query_lower:
            action = "save_reflection"
            reflection_text = query.replace("–¥–æ–±–∞–≤—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", "").replace("–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å", "").strip()
            data["reflection"] = reflection_text
            response_text = f"–†–µ—Ñ–ª–µ–∫—Å–∏—è '{reflection_text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
            
        elif "–ø—Ä–∏–≤—ã—á–∫–∞" in query_lower:
            action = "create_habit"
            habit_text = query.replace("—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É", "").replace("–ø—Ä–∏–≤—ã—á–∫–∞", "").strip()
            data["habit"] = habit_text
            response_text = f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_text}' —Å–æ–∑–¥–∞–Ω–∞!"
            
        elif "–∫–∞–∫ –¥–µ–ª–∞" in query_lower:
            response_text = "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è–º–∏."
            
        elif "–ø–æ–º–æ—â—å" in query_lower:
            response_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é, —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
            
        else:
            response_text = "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ß—Ç–æ –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        return {
            "response": response_text,
            "action": action,
            "data": data,
            "timestamp": int(time.time())
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/telegram/send")
async def send_telegram_message(request: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        message = request.get("message", "")
        source = request.get("source", "watch_voice")
        
        print(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {message[:50]}...")
        
        return {
            "status": "sent",
            "timestamp": int(time.time())
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/metrics")
async def get_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return {
        "uptime": int(time.time()),
        "requests_processed": 0,
        "llm_requests": 0,
        "notion_operations": 0,
        "telegram_messages": 0
    }

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000")
    print("üîç –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python test_watch_api.py")
    
    uvicorn.run(
        "simple_server:app",
        host="0.0.0.0",
        port=8000,
        reload=False,
        log_level="info"
    ) 