#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
"""

import asyncio
import sys
import os
from datetime import datetime, UTC

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.utils.config import Settings
from src.notion.universal_repository import UniversalNotionRepository

async def test_quick_commands():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        settings = Settings()
        repo = UniversalNotionRepository(settings)
        
        print("1. –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
        task_data = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
            'status': 'Pending',
            'priority': 'Medium',
            'category': 'General',
            'description': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'tags': ['todo', 'quick', 'test'],
            'created_date': datetime.now(UTC)
        }
        
        created_task = await repo.create_item('actions', task_data)
        if created_task:
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_task['title']} (ID: {created_task['id']})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
            await repo.delete_item('actions', created_task['id'])
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n2. –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏...")
        habit_data = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞',
            'status': 'Active',
            'category': 'General',
            'frequency': 'Daily',
            'description': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'tags': ['habit', 'quick', 'test'],
            'created_date': datetime.now(UTC),
            'target_frequency': 7,
            'current_frequency': 0
        }
        
        created_habit = await repo.create_habit(habit_data)
        if created_habit:
            print(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_habit['title']} (ID: {created_habit['id']})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
            await repo.delete_item('habits', created_habit['id'])
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n3. –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
        reflection_data = {
            'title': f"–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è {datetime.now().strftime('%d.%m.%Y')}",
            'type': 'Daily',
            'mood': 'Positive',
            'content': '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
            'tags': ['reflection', 'quick', 'test'],
            'created_date': datetime.now(UTC)
        }
        
        created_reflection = await repo.create_reflection(reflection_data)
        if created_reflection:
            print(f"‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {created_reflection['title']} (ID: {created_reflection['id']})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            await repo.delete_item('reflections', created_reflection['id'])
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n4. –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–∏...")
        idea_data = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –∏–¥–µ—è',
            'type': 'Idea',
            'category': 'General',
            'description': '–¢–µ—Å—Ç–æ–≤–∞—è –∏–¥–µ—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
            'tags': ['idea', 'quick', 'test'],
            'created_date': datetime.now(UTC),
            'status': 'Active'
        }
        
        created_idea = await repo.create_material(idea_data)
        if created_idea:
            print(f"‚úÖ –ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {created_idea['title']} (ID: {created_idea['id']})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–¥–µ—é
            await repo.delete_item('materials', created_idea['id'])
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∏–¥–µ—è —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n5. –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∏—Ç—É–∞–ª–∞...")
        ritual_data = {
            'title': f"–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª {datetime.now().strftime('%d.%m.%Y')}",
            'status': 'Active',
            'category': 'Morning',
            'frequency': 'Daily',
            'description': '–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è',
            'tags': ['morning', 'ritual', 'daily', 'test'],
            'created_date': datetime.now(UTC),
            'priority': 'High'
        }
        
        created_ritual = await repo.create_ritual(ritual_data)
        if created_ritual:
            print(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª —Å–æ–∑–¥–∞–Ω: {created_ritual['title']} (ID: {created_ritual['id']})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∏—Ç—É–∞–ª
            await repo.delete_item('rituals', created_ritual['id'])
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∏—Ç—É–∞–ª —É–¥–∞–ª–µ–Ω")
        
        print("\n6. –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
        evening_reflection_data = {
            'title': f"–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è {datetime.now().strftime('%d.%m.%Y')}",
            'type': 'Evening',
            'mood': 'Neutral',
            'content': '–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –æ –ø—Ä–æ—à–µ–¥—à–µ–º –¥–Ω–µ',
            'tags': ['evening', 'reflection', 'daily', 'test'],
            'created_date': datetime.now(UTC)
        }
        
        created_evening = await repo.create_reflection(evening_reflection_data)
        if created_evening:
            print(f"‚úÖ –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {created_evening['title']} (ID: {created_evening['id']})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            await repo.delete_item('reflections', created_evening['id'])
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n7. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        rituals = await repo.get_rituals()
        habits = await repo.get_habits()
        reflections = await repo.get_reflections()
        actions = await repo.get_actions()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –†–∏—Ç—É–∞–ª–æ–≤: {len(rituals)}")
        print(f"   - –ü—Ä–∏–≤—ã—á–µ–∫: {len(habits)}")
        print(f"   - –†–µ—Ñ–ª–µ–∫—Å–∏–π: {len(reflections)}")
        print(f"   - –ó–∞–¥–∞—á: {len(actions)}")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if reflections:
            mood_counts = {}
            for reflection in reflections:
                mood = reflection.get('mood', 'Unknown')
                mood_counts[mood] = mood_counts.get(mood, 0) + 1
            
            print(f"üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:")
            for mood, count in mood_counts.items():
                percentage = (count / len(reflections)) * 100
                print(f"   - {mood}: {count} ({percentage:.1f}%)")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_quick_commands()) 