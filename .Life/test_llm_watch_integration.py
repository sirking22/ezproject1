#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Xiaomi Watch S —Å –ª–æ–∫–∞–ª—å–Ω–æ–π Llama 70B
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
import logging
from datetime import datetime, UTC
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã
from src.integrations.xiaomi_watch import XiaomiWatchAPI, BiometricData
from src.watch_app.llm_watch_analyzer import LLMWatchAnalyzer, ContextType

class MockLocalLLM:
    """–ú–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.responses = {
            "morning": {
                "response": """
                –ò–ù–°–ê–ô–¢: sleep_quality
                –ù–ê–ó–í–ê–ù–ò–ï: –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
                –û–ü–ò–°–ê–ù–ò–ï: –¢–≤–æ–π —Å–æ–Ω —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –æ—á–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º (85%). –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ö–æ—Ä–æ—à–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–∞–∫–æ–π —Ä–µ–∂–∏–º —Å–Ω–∞.
                –£–í–ï–†–ï–ù–ù–û–°–¢–¨: 90
                –î–ï–ô–°–¢–í–ò–Ø: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å–Ω–∞, —É—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è 10 –º–∏–Ω—É—Ç, –ª–µ–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞
                –ö–û–ù–¢–ï–ö–°–¢: —É—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑
                """
            },
            "work": {
                "response": """
                –ò–ù–°–ê–ô–¢: stress_management
                –ù–ê–ó–í–ê–ù–ò–ï: –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞
                –û–ü–ò–°–ê–ù–ò–ï: –ó–∞–º–µ—Ç–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ –¥–æ 85 —É–¥/–º–∏–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç—Ä–µ—Å—Å. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.
                –£–í–ï–†–ï–ù–ù–û–°–¢–¨: 85
                –î–ï–ô–°–¢–í–ò–Ø: 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã
                –ö–û–ù–¢–ï–ö–°–¢: —Ä–∞–±–æ—á–∏–π –∞–Ω–∞–ª–∏–∑
                """
            },
            "evening": {
                "response": """
                –ò–ù–°–ê–ô–¢: activity_review
                –ù–ê–ó–í–ê–ù–ò–ï: –•–æ—Ä–æ—à–∞—è –¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                –û–ü–ò–°–ê–ù–ò–ï: –¢—ã –ø—Ä–æ—à–µ–ª 8500 —à–∞–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è. –í—Ä–µ–º—è –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
                –£–í–ï–†–ï–ù–ù–û–°–¢–¨: 88
                –î–ï–ô–°–¢–í–ò–Ø: –≤–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è, —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                –ö–û–ù–¢–ï–ö–°–¢: –≤–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑
                """
            },
            "voice_command": {
                "response": "–£—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—É–ª—å—Å 75 —É–¥/–º–∏–Ω –∏ —Ö–æ—Ä–æ—à—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∏—Ç–º. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å?"
            }
        }
    
    async def generate(self, prompt: str, context: str = "general", **kwargs) -> Dict[str, Any]:
        """–ú–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        
        response = self.responses.get(context, {
            "response": "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–∞–Ω–Ω—ã–µ! –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω."
        })
        
        return response

class TestLLMWatchIntegration:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–∞—Å–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM"""
    
    def __init__(self):
        self.watch_api = XiaomiWatchAPI()
        self.llm_analyzer = LLMWatchAnalyzer()
        self.mock_llm = MockLocalLLM()
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é LLM –Ω–∞ –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.llm_analyzer._call_llm = self.mock_llm.generate
    
    async def test_biometric_analysis(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LLM"""
        print("üß† –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ë–ò–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ß–ï–†–ï–ó LLM")
        print("=" * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            biometrics = await self.watch_api.get_current_biometrics()
            print(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"   - –ü—É–ª—å—Å: {biometrics.heart_rate} —É–¥/–º–∏–Ω")
            print(f"   - –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {biometrics.sleep_quality}%")
            print(f"   - –°—Ç—Ä–µ—Å—Å: {biometrics.stress_level}%")
            print(f"   - –®–∞–≥–∏: {biometrics.steps}")
            print(f"   - –ö–∞–ª–æ—Ä–∏–∏: {biometrics.calories}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLM
            insight = await self.llm_analyzer.analyze_biometrics_with_llm(biometrics)
            
            print(f"\nüß† –ê–ù–ê–õ–ò–ó –û–¢ –õ–û–ö–ê–õ–¨–ù–û–ô LLM:")
            print(f"   üìå –¢–∏–ø: {insight.insight_type}")
            print(f"   üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {insight.title}")
            print(f"   üìå –û–ø–∏—Å–∞–Ω–∏–µ: {insight.description}")
            print(f"   üìå –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {insight.confidence}%")
            print(f"   üìå –î–µ–π—Å—Ç–≤–∏—è: {', '.join(insight.action_items)}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in biometric analysis test: {e}")
            return False
    
    async def test_context_aware_notifications(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("\nüîî –¢–ï–°–¢ –ö–û–ù–¢–ï–ö–°–¢–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
        print("=" * 40)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–Ω—è
            times = [
                (7, "–£—Ç—Ä–æ"),
                (12, "–î–µ–Ω—å"),
                (18, "–í–µ—á–µ—Ä"),
                (22, "–ù–æ—á—å")
            ]
            
            for hour, time_name in times:
                print(f"\nüåÖ {time_name} ({hour}:00):")
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                original_now = datetime.now
                datetime.now = lambda: datetime(2024, 1, 1, hour, 0, 0)
                
                try:
                    notification = await self.llm_analyzer.get_smart_notification_with_llm()
                    print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification}")
                finally:
                    datetime.now = original_now
            
            return True
            
        except Exception as e:
            logger.error(f"Error in notifications test: {e}")
            return False
    
    async def test_voice_command_processing(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        print("\nüé§ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ì–û–õ–û–°–û–í–´–• –ö–û–ú–ê–ù–î")
        print("=" * 45)
        
        try:
            test_commands = [
                "–∫–∞–∫ –º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ–≥–æ–¥–Ω—è?",
                "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –º–µ–¥–∏—Ç–∞—Ü–∏—è",
                "–ø–æ–∫–∞–∂–∏ –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                "—á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
            ]
            
            for command in test_commands:
                print(f"\nüé§ –ö–æ–º–∞–Ω–¥–∞: '{command}'")
                
                response = await self.llm_analyzer.handle_voice_command_with_context(command)
                print(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in voice command test: {e}")
            return False
    
    async def test_weekly_insights(self):
        """–¢–µ—Å—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        print("\nüìà –¢–ï–°–¢ –ù–ï–î–ï–õ–¨–ù–´–• –ò–ù–°–ê–ô–¢–û–í")
        print("=" * 35)
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for i in range(7):
                biometrics = BiometricData(
                    heart_rate=70 + i * 2,
                    sleep_quality=80 - i * 2,
                    stress_level=30 + i * 5,
                    steps=8000 + i * 200,
                    calories=400 + i * 20
                )
                self.llm_analyzer.biometric_history.append(biometrics)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            weekly_insights = await self.llm_analyzer.get_weekly_insights()
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(weekly_insights)} –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤:")
            
            for i, insight in enumerate(weekly_insights, 1):
                print(f"\n   {i}. {insight.title}")
                print(f"      –¢–∏–ø: {insight.insight_type}")
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {insight.description[:100]}...")
                print(f"      –î–µ–π—Å—Ç–≤–∏—è: {', '.join(insight.action_items[:2])}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in weekly insights test: {e}")
            return False
    
    async def test_stress_detection(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞"""
        print("\nüò∞ –¢–ï–°–¢ –î–ï–¢–ï–ö–¶–ò–ò –°–¢–†–ï–°–°–ê")
        print("=" * 30)
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å
            high_stress_biometrics = BiometricData(
                heart_rate=110,
                sleep_quality=60,
                stress_level=85,
                steps=2000,
                calories=200
            )
            
            insight = await self.llm_analyzer.analyze_biometrics_with_llm(high_stress_biometrics)
            
            print(f"üö® –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω:")
            print(f"   - –ü—É–ª—å—Å: {high_stress_biometrics.heart_rate} —É–¥/–º–∏–Ω")
            print(f"   - –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {high_stress_biometrics.stress_level}%")
            print(f"   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {insight.title}")
            print(f"   - –î–µ–π—Å—Ç–≤–∏—è: {', '.join(insight.action_items)}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error in stress detection test: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò XIAOMI WATCH S –° –õ–û–ö–ê–õ–¨–ù–û–ô LLAMA 70B")
    print("=" * 70)
    print("üì± –ß–∞—Å—ã: Xiaomi Watch S")
    print("üß† LLM: –õ–æ–∫–∞–ª—å–Ω–∞—è Llama 70B (–∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–∞—è)")
    print("üéØ –¶–µ–ª—å: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–æ–º–µ—Ç—Ä–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("=" * 70)
    
    tester = TestLLMWatchIntegration()
    
    tests = [
        ("–ê–Ω–∞–ª–∏–∑ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", tester.test_biometric_analysis),
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", tester.test_context_aware_notifications),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥", tester.test_voice_command_processing),
        ("–ù–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã", tester.test_weekly_insights),
        ("–î–µ—Ç–µ–∫—Ü–∏—è —Å—Ç—Ä–µ—Å—Å–∞", tester.test_stress_detection)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name.upper()} {'='*20}")
        try:
            result = await test_func()
            results[test_name] = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        except Exception as e:
            logger.error(f"Test {test_name} failed: {e}")
            results[test_name] = "‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*20} –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ {'='*20}")
    for test_name, result in results.items():
        print(f"{test_name}: {result}")
    
    success_count = sum(1 for result in results.values() if "‚úÖ" in result)
    total_count = len(results)
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üöÄ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

if __name__ == "__main__":
    asyncio.run(main()) 