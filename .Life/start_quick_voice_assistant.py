#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö QUICK VOICE ASSISTANT
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
import logging
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

class QuickVoiceAssistantLauncher:
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Quick Voice Assistant"""
    
    def __init__(self):
        self.server_process = None
        self.status = {
            "server": False,
            "notion": False,
            "telegram": False,
            "watch_app": False
        }
    
    def print_header(self):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("üöÄ" + "="*60)
        print("üé§ QUICK VOICE ASSISTANT - –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´")
        print("="*62)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*62)
    
    def check_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
        print("-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not os.path.exists("venv"):
            print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python DEPLOYMENT_PACKAGE/scripts/auto_deploy.py")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not os.path.exists(".env"):
            print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if not os.path.exists("server/llm_api_server.py"):
            print("‚ùå –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
        return True
    
    def check_configuration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 30)
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ .env
            env_vars = {}
            with open(".env", "r", encoding="utf-8") as f:
                for line in f:
                    if "=" in line and not line.startswith("#"):
                        key, value = line.strip().split("=", 1)
                        env_vars[key] = value
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            required_vars = [
                "NOTION_TOKEN", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"
            ]
            
            missing_vars = []
            for var in required_vars:
                if not env_vars.get(var):
                    missing_vars.append(var)
            
            if missing_vars:
                print(f"‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
                print("üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã")
                return False
            
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def get_network_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            import socket
            hostname = socket.gethostname()
            ip_address = socket.gethostbyname(hostname)
            return ip_address
        except:
            return "192.168.1.100"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def start_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê")
        print("-" * 30)
        
        try:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if os.name == 'nt':  # Windows
                python_path = "venv\\Scripts\\python.exe"
            else:  # Linux/macOS
                python_path = "venv/bin/python"
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            server_script = "server/llm_api_server.py"
            
            print(f"üéØ –ó–∞–ø—É—Å–∫: {python_path} {server_script}")
            
            self.server_process = subprocess.Popen(
                [python_path, server_script],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            if self.server_process.poll() is None:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.status["server"] = True
                return True
            else:
                stdout, stderr = self.server_process.communicate()
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def test_endpoints(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API")
        print("-" * 30)
        
        try:
            import requests
            
            # –¢–µ—Å—Ç ping
            response = requests.get("http://localhost:8000/ping", timeout=5)
            if response.status_code == 200:
                print("‚úÖ /ping - —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå /ping - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
            
            # –¢–µ—Å—Ç health
            response = requests.get("http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                components = data.get("components", {})
                print(f"‚úÖ /health - —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   LLM: {'‚úÖ' if components.get('llm') else '‚ùå'}")
                print(f"   Notion: {'‚úÖ' if components.get('notion') else '‚ùå'}")
                print(f"   Telegram: {'‚úÖ' if components.get('telegram') else '‚ùå'}")
            else:
                print("‚ùå /health - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
            
            # –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            test_payload = {
                "query": "—Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞",
                "context": "test",
                "timestamp": int(time.time()),
                "user_id": "test_user"
            }
            
            response = requests.post(
                "http://localhost:8000/watch/voice",
                json=test_payload,
                timeout=10
            )
            
            if response.status_code == 200:
                print("‚úÖ /watch/voice - —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå /watch/voice - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def show_usage_instructions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        print("\nüì± –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        print("="*50)
        
        ip_address = self.get_network_info()
        
        print("üéØ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù:")
        print(f"   üåê –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:8000")
        print(f"   üåê –í —Å–µ—Ç–∏: http://{ip_address}:8000")
        print(f"   üìä –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        
        print("\nüì± –£–°–¢–ê–ù–û–í–ö–ê –ù–ê –ß–ê–°–´:")
        print("   1. –ü–æ–¥–∫–ª—é—á–∏ —á–∞—Å—ã –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
        print("   2. –û—Ç–∫—Ä–æ–π Xiaomi Wear")
        print("   3. –ü–µ—Ä–µ–π–¥–∏ –≤ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
        print("   4. –£—Å—Ç–∞–Ω–æ–≤–∏: watch_app/xiaomi_watch_app.js")
        print(f"   5. IP —Å–µ—Ä–≤–µ—Ä–∞: {ip_address}")
        
        print("\nüé§ –ì–û–õ–û–°–û–í–´–ï –ö–û–ú–ê–ù–î–´:")
        print("   ‚Ä¢ '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –º–µ–¥–∏—Ç–∞—Ü–∏—è'")
        print("   ‚Ä¢ '–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'")
        print("   ‚Ä¢ '—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏'")
        print("   ‚Ä¢ '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å'")
        print("   ‚Ä¢ '–∫–∞–∫ –º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ'")
        
        print("\nüîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
        print("   ‚Ä¢ –õ–æ–≥–∏: logs/server.log")
        print("   ‚Ä¢ –¢–µ—Å—Ç—ã: python scripts/test_system.py")
        
        print("\nüìû –ü–û–î–î–ï–†–ñ–ö–ê:")
        print("   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: INSTALLATION_GUIDE.md")
        print("   ‚Ä¢ –õ–æ–≥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: deployment_log.jsonl")
        print("   ‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–∞ –ò–ò: AI_ORCHESTRATION_PRACTICE.md")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        self.print_header()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_environment():
            return False
        
        if not self.check_configuration():
            return False
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        if not self.start_server():
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not self.test_endpoints():
            print("‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.show_usage_instructions()
        
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("="*50)
        
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.server_process.wait()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            if self.server_process:
                self.server_process.terminate()
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    launcher = QuickVoiceAssistantLauncher()
    
    try:
        success = launcher.run()
        if not success:
            print("\n‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 