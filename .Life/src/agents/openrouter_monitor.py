import os
import asyncio
import httpx
from datetime import datetime, timedelta
from dotenv import load_dotenv
import json

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

class OpenRouterMonitor:
    def __init__(self):
        self.api_key = OPENROUTER_API_KEY
        self.base_url = "https://openrouter.ai/api/v1"
        
    async def get_usage_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if not self.api_key:
            print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        url = f"{self.base_url}/auth/key"
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers, timeout=10.0)
                response.raise_for_status()
                
                data = response.json()
                return data
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    async def get_model_pricing(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –º–æ–¥–µ–ª–µ–π"""
        url = f"{self.base_url}/models"
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers, timeout=10.0)
                response.raise_for_status()
                
                data = response.json()
                return data.get("data", [])
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            return []
    
    def format_usage_stats(self, stats):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if not stats:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø OPENROUTER")
        print("=" * 50)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "data" in stats:
            data = stats["data"]
            
            print(f"üîë –ö–ª—é—á: {data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìÖ –°–æ–∑–¥–∞–Ω: {data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${data.get('credits', 0):.4f}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            if "usage" in data:
                usage = data["usage"]
                print(f"\nüìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ usage —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if isinstance(usage, list):
                    for day_usage in usage:
                        date = day_usage.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        tokens = day_usage.get("tokens", 0)
                        cost = day_usage.get("cost", 0)
                        
                        print(f"  {date}: {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤ (${cost:.4f})")
                else:
                    print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {usage}")
        
        return stats
    
    def format_model_pricing(self, models):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –º–æ–¥–µ–ª–µ–π"""
        if not models:
            return "–¶–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        print("\nüí∞ –¶–ï–ù–´ –ù–ê –ú–û–î–ï–õ–ò")
        print("=" * 50)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        providers = {}
        for model in models:
            provider = model.get("provider", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if provider not in providers:
                providers[provider] = []
            providers[provider].append(model)
        
        for provider, provider_models in providers.items():
            print(f"\nüè¢ {provider}:")
            
            for model in provider_models[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–æ–¥–µ–ª–∏
                name = model.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                pricing = model.get("pricing", {})
                
                input_price = pricing.get("prompt", "N/A")
                output_price = pricing.get("completion", "N/A")
                
                print(f"  üìù {name}")
                print(f"    –í–≤–æ–¥: ${input_price}/1K —Ç–æ–∫–µ–Ω–æ–≤")
                print(f"    –í—ã–≤–æ–¥: ${output_price}/1K —Ç–æ–∫–µ–Ω–æ–≤")
        
        return models
    
    async def estimate_cost(self, model_id: str, input_tokens: int, output_tokens: int):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞"""
        models = await self.get_model_pricing()
        
        for model in models:
            if model.get("id") == model_id:
                pricing = model.get("pricing", {})
                input_price = float(pricing.get("prompt", 0))
                output_price = float(pricing.get("completion", 0))
                
                input_cost = (input_tokens / 1000) * input_price
                output_cost = (output_tokens / 1000) * output_price
                total_cost = input_cost + output_cost
                
                print(f"\nüí∞ –û–¶–ï–ù–ö–ê –°–¢–û–ò–ú–û–°–¢–ò")
                print("=" * 30)
                print(f"–ú–æ–¥–µ–ª—å: {model_id}")
                print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {input_tokens:,}")
                print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {output_tokens:,}")
                print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–≤–æ–¥–∞: ${input_cost:.6f}")
                print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞: ${output_cost:.6f}")
                print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.6f}")
                
                return total_cost
        
        print(f"‚ùå –ú–æ–¥–µ–ª—å {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    async def get_recommendations(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        stats = await self.get_usage_stats()
        models = await self.get_model_pricing()
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        if stats and "data" in stats:
            data = stats["data"]
            credits = data.get("credits", 0)
            
            if credits < 0.01:
                print("‚ö†Ô∏è  –ë–∞–ª–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç.")
            elif credits < 0.1:
                print("‚ö†Ô∏è  –ë–∞–ª–∞–Ω—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            else:
                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –≤ –ø–æ—Ä—è–¥–∫–µ: ${credits:.4f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–¥–µ–ª—è–º
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–û–î–ï–õ–Ø–ú:")
        print("- GPT-3.5 Turbo: –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á (–±—ã—Å—Ç—Ä–æ –∏ –¥—ë—à–µ–≤–æ)")
        print("- Claude 3.5 Sonnet: –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
        print("- Llama 3.1: –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        print("- Mistral 7B: –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏")
        
        print("\nüí° –°–û–í–ï–¢–´ –ü–û –≠–ö–û–ù–û–ú–ò–ò:")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ max_tokens –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤")
        print("- –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ temperature=0.3 –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        print("- –ö—ç—à–∏—Ä—É–π—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –¥–µ—à—ë–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á")
    
    async def run_full_report(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç"""
        print("üîç –û–¢–ß–Å–¢ –ü–û OPENROUTER API")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.get_usage_stats()
        self.format_usage_stats(stats)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
        models = await self.get_model_pricing()
        self.format_model_pricing(models)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await self.get_recommendations()
        
        # –ü—Ä–∏–º–µ—Ä –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        print("\n" + "=" * 60)
        await self.estimate_cost("openai/gpt-3.5-turbo", 100, 200)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = OpenRouterMonitor()
    await monitor.run_full_report()

if __name__ == "__main__":
    asyncio.run(main()) 