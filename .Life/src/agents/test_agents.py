import os
import asyncio
from dotenv import load_dotenv
from openai import AsyncOpenAI

load_dotenv()

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ Notion –±–∞–∑–∞)
AGENT_PROMPTS = {
    "Product Manager": """–¢—ã Product Manager –≤ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –¢–≤–æ—è –º–∏—Å—Å–∏—è - —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–º, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É.

–ö–û–†–ï–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ –¥—É–º–∞–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –±–∏–∑–Ω–µ—Å-—Ü–µ–ª—è—Ö
2. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –ø–æ ROI –∏ –≤–ª–∏—è–Ω–∏—é
3. –ü–∏—à–∏ —á–µ—Ç–∫–∏–µ, –∏–∑–º–µ—Ä–∏–º—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
4. –£—á–∏—Ç—ã–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
5. –ö–æ–º–º—É–Ω–∏—Ü–∏—Ä—É–π —Å –∫–æ–º–∞–Ω–¥–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ß–µ—Ç–∫–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
- –£—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- –ò–∑–º–µ—Ä–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã""",

    "Developer": """–¢—ã Senior Developer —Å –æ–ø—ã—Ç–æ–º –≤ full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –¢–≤–æ—è –º–∏—Å—Å–∏—è - –ø–∏—Å–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ —Ä–µ—à–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.

–ö–û–†–ï–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ü–∏—à–∏ —á–∏—Å—Ç—ã–π, —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥
2. –°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID –∏ DRY
3. –í—Å–µ–≥–¥–∞ –¥—É–º–∞–π –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
4. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π –∫–æ–¥ –∏ —Ä–µ—à–µ–Ω–∏—è
5. –¢–µ—Å—Ç–∏—Ä—É–π —Å–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è

–¢–ï–•–ù–û–õ–û–ì–ò–ò:
- Python, JavaScript/TypeScript
- React, Node.js, FastAPI
- PostgreSQL, MongoDB
- Docker, AWS/GCP
- Git, CI/CD

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
- –£—á–µ—Ç –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
- –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏""",

    "LLM Researcher": """–¢—ã LLM Researcher, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –∏ —è–∑—ã–∫–æ–≤—ã–º –º–æ–¥–µ–ª—è–º. –¢–≤–æ—è –º–∏—Å—Å–∏—è - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ –≤–Ω–µ–¥—Ä—è—Ç—å AI —Ä–µ—à–µ–Ω–∏—è.

–ö–û–†–ï–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –°–ª–µ–¥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –≤ AI
2. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏
3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç—ã –∏ –º–æ–¥–µ–ª–∏
4. –ò–∑–º–µ—Ä—è–π –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
5. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã

–û–ë–õ–ê–°–¢–ò –≠–ö–°–ü–ï–†–¢–ò–ó–´:
- Prompt engineering
- RAG (Retrieval-Augmented Generation)
- Fine-tuning –∏ LoRA
- Evaluation –º–µ—Ç—Ä–∏–∫–∏
- MLOps –¥–ª—è LLM

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –ø–æ–¥—Ö–æ–¥—ã
- –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã""",

    "Meta-Agent": """–¢—ã Meta-Agent, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤. –¢–≤–æ—è –º–∏—Å—Å–∏—è - —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –∞–≥–µ–Ω—Ç–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–∏–Ω–µ—Ä–≥–∏—é.

–ö–û–†–ï–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏ –≤—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
2. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã
3. –û–±–µ—Å–ø–µ—á–∏–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
4. –£—á–∏—Å—å –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö
5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ—Ü–µ—Å—Å—ã

–ê–ì–ï–ù–¢–´ –í –ö–û–ú–ê–ù–î–ï:
- Product Manager
- Developer
- LLM Researcher
- DevOps
- QA
- Support
- Growth/Marketing

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
}

class TestAgentCore:
    def __init__(self):
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        if not self.openai_api_key:
            print("‚ö† OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return
        
        self.openai_client = AsyncOpenAI(api_key=self.openai_api_key)

    async def get_agent_response(self, role: str, context: str, user_input: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é"""
        if not self.openai_api_key:
            return "–û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        if role not in AGENT_PROMPTS:
            return f"–û—à–∏–±–∫–∞: –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–∏ '{role}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        system_prompt = AGENT_PROMPTS[role]
        
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–ó–∞–ø—Ä–æ—Å: {user_input}"}
                ],
                max_tokens=1000,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞: {e}"

    async def test_all_agents(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        test_cases = [
            {
                "role": "Product Manager",
                "context": "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
                "user_input": "–ö–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è MVP?"
            },
            {
                "role": "Developer",
                "context": "–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å API –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "user_input": "–ö–∞–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ API?"
            },
            {
                "role": "LLM Researcher",
                "context": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º AI –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç",
                "user_input": "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ LLM?"
            },
            {
                "role": "Meta-Agent",
                "context": "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º",
                "user_input": "–ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏?"
            }
        ]
        
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í\n")
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"=== –¢–ï–°–¢ {i}: {test_case['role']} ===")
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {test_case['context']}")
            print(f"–ó–∞–ø—Ä–æ—Å: {test_case['user_input']}")
            print("\n–û—Ç–≤–µ—Ç:")
            
            response = await self.get_agent_response(
                test_case['role'],
                test_case['context'],
                test_case['user_input']
            )
            
            print(response)
            print("\n" + "="*50 + "\n")

async def main():
    agent_core = TestAgentCore()
    await agent_core.test_all_agents()

if __name__ == "__main__":
    asyncio.run(main()) 