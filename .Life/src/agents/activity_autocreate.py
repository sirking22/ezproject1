import os
import sys
from dotenv import load_dotenv
import asyncio
from notion_client import AsyncClient
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.agents.activity_templates import ACTIVITY_TEMPLATES

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
DBS = {
    "rituals": os.getenv("NOTION_DATABASE_ID_RITUALS"),
    "habits": os.getenv("NOTION_DATABASE_ID_HABITS"),
    "materials": os.getenv("NOTION_DATABASE_ID_MATERIALS"),
    "guides": os.getenv("NOTION_DATABASE_ID_GUIDES"),
    "actions": os.getenv("NOTION_DATABASE_ID_ACTIONS"),
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
DB_FIELDS = {
    "rituals": ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
    "habits": ("–ü—Ä–∏–≤—ã—á–∫–∞", None),
    "materials": ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
    "guides": ("Name", None),
    "actions": ("–ó–∞–¥–∞—á–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
}

async def check_if_exists(client: AsyncClient, database_id: str, title_field: str, title_content: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –±–∞–∑–µ"""
    try:
        response = await client.databases.query(
            database_id=database_id,
            filter={
                "property": title_field,
                "title": {
                    "equals": title_content
                }
            }
        )
        return len(response["results"]) > 0
    except Exception:
        return False

async def create_activity_in_notion(activity: dict, client: AsyncClient):
    print(f"  –°–æ–∑–¥–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity['activity']}")
    
    # rituals
    ritual_title = activity["ritual"]
    if not await check_if_exists(client, DBS["rituals"], DB_FIELDS["rituals"][0], ritual_title):
        await client.pages.create(parent={"database_id": DBS["rituals"]}, properties={
            DB_FIELDS["rituals"][0]: {"title": [{"text": {"content": ritual_title}}]},
            DB_FIELDS["rituals"][1]: {"select": {"name": activity["activity"]}} if DB_FIELDS["rituals"][1] else {},
        })
        print(f"    ‚úÖ –†–∏—Ç—É–∞–ª —Å–æ–∑–¥–∞–Ω: {ritual_title}")
    else:
        print(f"    ‚ö† –†–∏—Ç—É–∞–ª '{ritual_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # habits
    habit_title = activity["habit"]
    if not await check_if_exists(client, DBS["habits"], DB_FIELDS["habits"][0], habit_title):
        await client.pages.create(parent={"database_id": DBS["habits"]}, properties={
            DB_FIELDS["habits"][0]: {"title": [{"text": {"content": habit_title}}]},
        })
        print(f"    ‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {habit_title}")
    else:
        print(f"    ‚ö† –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # materials
    material_title = f"{activity['activity']} ‚Äî {activity['material']['type']} —à–∞–±–ª–æ–Ω"
    if not await check_if_exists(client, DBS["materials"], DB_FIELDS["materials"][0], material_title):
        await client.pages.create(parent={"database_id": DBS["materials"]}, properties={
            DB_FIELDS["materials"][0]: {"title": [{"text": {"content": material_title}}]},
            DB_FIELDS["materials"][1]: {"select": {"name": activity["activity"]}} if DB_FIELDS["materials"][1] else {},
        })
        print(f"    ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {material_title}")
    else:
        print(f"    ‚ö† –ú–∞—Ç–µ—Ä–∏–∞–ª '{material_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # guides
    guide_title = activity["guide"]
    if not await check_if_exists(client, DBS["guides"], DB_FIELDS["guides"][0], guide_title):
        await client.pages.create(parent={"database_id": DBS["guides"]}, properties={
            DB_FIELDS["guides"][0]: {"title": [{"text": {"content": guide_title}}]},
        })
        print(f"    ‚úÖ –ì–∞–π–¥ —Å–æ–∑–¥–∞–Ω: {guide_title}")
    else:
        print(f"    ‚ö† –ì–∞–π–¥ '{guide_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # actions
    action_title = activity["action"]
    if not await check_if_exists(client, DBS["actions"], DB_FIELDS["actions"][0], action_title):
        await client.pages.create(parent={"database_id": DBS["actions"]}, properties={
            DB_FIELDS["actions"][0]: {"title": [{"text": {"content": action_title}}]},
            DB_FIELDS["actions"][1]: {"select": {"name": activity["activity"]}} if DB_FIELDS["actions"][1] else {},
        })
        print(f"    ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {action_title}")
    else:
        print(f"    ‚ö† –ó–∞–¥–∞—á–∞ '{action_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def main():
    client = AsyncClient(auth=NOTION_TOKEN)
    print(f"üöÄ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ Notion")
    print(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {len(ACTIVITY_TEMPLATES)}")
    print("=" * 60)
    
    success_count = 0
    error_count = 0
    
    for i, activity in enumerate(ACTIVITY_TEMPLATES, 1):
        print(f"\n[{i}/{len(ACTIVITY_TEMPLATES)}] –°–æ–∑–¥–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity['activity']}")
        try:
            await create_activity_in_notion(activity, client)
            success_count += 1
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '{activity['activity']}' —Å–æ–∑–¥–∞–Ω–∞ –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö Notion!")
        except Exception as e:
            error_count += 1
            tb = traceback.format_exc()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ '{activity['activity']}': {e}")
            print(tb)
            with open("errors.log", "a", encoding="utf-8") as f:
                f.write(f"[{activity['activity']}]: {e}\n{tb}\n---\n")
    
    print("\n" + "=" * 60)
    print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {success_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"   üìä –í—Å–µ–≥–æ: {len(ACTIVITY_TEMPLATES)}")
    print("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 