#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ TELEGRAM ‚Üí NOTION –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ RAWMID –≤ –±–∞–∑—ã Notion:
1. PLATFORMS_DB ‚Üí –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
2. CONTENT_DB ‚Üí –ø–æ—Å—Ç—ã —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
"""

import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv
from telegram_working_scraper import TelegramWorkingScraper

load_dotenv()

class TelegramNotionIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö –≤ Notion"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.platforms_db = os.getenv('NOTION_PLATFORMS_DB_ID')
        self.content_db = os.getenv('NOTION_CONTENT_PLAN_DB_ID')
        
        if not self.notion_token:
            raise ValueError("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        self.headers = {
            "Authorization": f"Bearer {self.notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        self.scraper = TelegramWorkingScraper("rawmid")
    
    def update_platform_statistics(self, telegram_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –±–∞–∑–µ PLATFORMS"""
        
        print("üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–õ–ê–¢–§–û–†–ú–´")
        print("=" * 50)
        
        if not self.platforms_db:
            print("‚ùå NOTION_PLATFORMS_DB_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å Telegram
        telegram_page = self.find_telegram_platform()
        
        if telegram_page:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å Telegram")
            return self.update_existing_platform(telegram_page['id'], telegram_data)
        else:
            print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å Telegram")
            return self.create_new_platform(telegram_data)
    
    def find_telegram_platform(self):
        """–ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å Telegram –≤ –±–∞–∑–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        
        try:
            query_data = {
                "filter": {
                    "property": "Platforms",
                    "title": {
                        "contains": "Telegram"
                    }
                }
            }
            
            response = requests.post(
                f"https://api.notion.com/v1/databases/{self.platforms_db}/query",
                headers=self.headers,
                json=query_data
            )
            
            if response.status_code == 200:
                results = response.json().get('results', [])
                
                # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å RAWMID
                for page in results:
                    title_prop = page.get('properties', {}).get('Platforms', {})
                    if title_prop.get('title'):
                        title_text = title_prop['title'][0].get('text', {}).get('content', '')
                        if 'rawmid' in title_text.lower() or 'telegram' in title_text.lower():
                            print(f"   üìã –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {title_text}")
                            return page
                
                print(f"   ‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ {len(results)} –ø–ª–∞—Ç—Ñ–æ—Ä–º")
                return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {e}")
            return None
    
    def create_new_platform(self, telegram_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        
        print(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Telegram")
        
        channel_info = telegram_data.get('channel_info', {})
        subscriber_count = telegram_data.get('subscriber_count', 0)
        stats = telegram_data.get('statistics', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = {
            "parent": {"database_id": self.platforms_db},
            "properties": {
                "Platforms": {
                    "title": [
                        {
                            "text": {
                                "content": f"Telegram RAWMID (@rawmid)"
                            }
                        }
                    ]
                },
                "Followers": {
                    "number": subscriber_count
                },
                "Upload": {
                    "number": stats.get('posts_with_views', 0) if stats else 0
                },
                "My account link": {
                    "url": "https://t.me/rawmid"
                }
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if stats:
            # Followers target - —Å—Ç–∞–≤–∏–º –Ω–∞ 20% –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–∏—Ö
            target_followers = int(subscriber_count * 1.2) if subscriber_count else 10000
            page_data["properties"]["Followers target"] = {"number": target_followers}
        
        try:
            response = requests.post(
                "https://api.notion.com/v1/pages",
                headers=self.headers,
                json=page_data
            )
            
            if response.status_code == 200:
                page = response.json()
                print(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {page['id']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {e}")
            return False
    
    def update_existing_platform(self, page_id, telegram_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        
        subscriber_count = telegram_data.get('subscriber_count', 0)
        stats = telegram_data.get('statistics', {})
        
        update_data = {
            "properties": {
                "Followers": {
                    "number": subscriber_count
                },
                "Upload": {
                    "number": stats.get('posts_with_views', 0) if stats else 0
                }
            }
        }
        
        try:
            response = requests.patch(
                f"https://api.notion.com/v1/pages/{page_id}",
                headers=self.headers,
                json=update_data
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscriber_count:,}")
                print(f"   üìù –ü–æ—Å—Ç–æ–≤: {stats.get('posts_with_views', 0) if stats else 0}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {e}")
            return False
    
    def add_posts_to_content_db(self, telegram_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        print(f"\nüìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–û–í –í –ë–ê–ó–£ –ö–û–ù–¢–ï–ù–¢–ê")
        print("=" * 50)
        
        if not self.content_db:
            print("‚ùå NOTION_CONTENT_PLAN_DB_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        posts = telegram_data.get('posts_html', [])
        if not posts:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        recent_posts = posts[:5]
        print(f"üì§ –î–æ–±–∞–≤–ª—è–µ–º {len(recent_posts)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤...")
        
        success_count = 0
        
        for i, post in enumerate(recent_posts, 1):
            if self.add_single_post(post, i):
                success_count += 1
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}/{len(recent_posts)} –ø–æ—Å—Ç–æ–≤")
        return success_count > 0
    
    def add_single_post(self, post, post_num):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –≤ –±–∞–∑—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            post_text = post.get('text', '')
            post_title = post_text[:50] + "..." if len(post_text) > 50 else post_text
            if not post_title:
                post_title = f"Telegram –ø–æ—Å—Ç {post.get('id', post_num)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç
            existing_post = self.find_existing_post(post_title)
            if existing_post:
                print(f"   {post_num}. ‚ö†Ô∏è –ü–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {post_title[:30]}...")
                return False
            
            page_data = {
                "parent": {"database_id": self.content_db},
                "properties": {
                    "Name": {
                        "title": [
                            {
                                "text": {
                                    "content": post_title
                                }
                            }
                        ]
                    },
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": {
                        "number": post.get('views_number', 0)
                    },
                    "URL –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": {
                        "url": post.get('link', '') if post.get('link') else None
                    },
                    "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ": {
                        "checkbox": True
                    }
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if post.get('date'):
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç Notion
                    date_obj = datetime.strptime(post['date'], '%Y-%m-%d %H:%M')
                    page_data["properties"]["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] = {
                        "date": {
                            "start": date_obj.strftime('%Y-%m-%d')
                        }
                    }
                except:
                    pass  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
            # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            if page_data["properties"]["URL –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]["url"] is None:
                del page_data["properties"]["URL –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]
            
            response = requests.post(
                "https://api.notion.com/v1/pages",
                headers=self.headers,
                json=page_data
            )
            
            if response.status_code == 200:
                views = post.get('views_number', 0)
                print(f"   {post_num}. ‚úÖ {post_title[:30]}... | üëÄ {views:,}")
                return True
            else:
                print(f"   {post_num}. ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   {post_num}. ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def find_existing_post(self, post_title):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        
        try:
            query_data = {
                "filter": {
                    "property": "Name",
                    "title": {
                        "contains": post_title[:20]  # –ò—â–µ–º –ø–æ –ø–µ—Ä–≤—ã–º 20 —Å–∏–º–≤–æ–ª–∞–º
                    }
                },
                "page_size": 1
            }
            
            response = requests.post(
                f"https://api.notion.com/v1/databases/{self.content_db}/query",
                headers=self.headers,
                json=query_data
            )
            
            if response.status_code == 200:
                results = response.json().get('results', [])
                return len(results) > 0
            
            return False
            
        except:
            return False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ—Å—Ç–∞ –Ω–µ—Ç
    
    def run_full_integration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        
        print("üöÄ –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø TELEGRAM ‚Üí NOTION")
        print("üéØ –ö–∞–Ω–∞–ª: @rawmid")
        print("=" * 80)
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        print("1Ô∏è‚É£ –°–ë–û–† –î–ê–ù–ù–´–• –ò–ó TELEGRAM...")
        telegram_data = self.scraper.scrape_all_data()
        
        if not telegram_data.get('subscriber_count'):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram")
            return False
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –ø–ª–∞—Ç—Ñ–æ—Ä–º
        print(f"\n2Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –ü–õ–ê–¢–§–û–†–ú...")
        platform_success = self.update_platform_statistics(telegram_data)
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        print(f"\n3Ô∏è‚É£ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–û–í –í –ë–ê–ó–£ –ö–û–ù–¢–ï–ù–¢–ê...")
        content_success = self.add_posts_to_content_db(telegram_data)
        
        # 4. –ò—Ç–æ–≥–∏
        print(f"\nüìã –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 50)
        
        if platform_success:
            print("‚úÖ –ë–∞–∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        
        if content_success:
            print("‚úÖ –ü–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        else:
            print("‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)")
        
        if platform_success or content_success:
            print(f"\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üìä –î–∞–Ω–Ω—ã–µ Telegram —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Notion")
            print("üîÑ –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫")
            return True
        else:
            print(f"\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        integration = TelegramNotionIntegration()
        success = integration.run_full_integration()
        
        if success:
            print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Notion")
            print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)")
            print("3. –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 