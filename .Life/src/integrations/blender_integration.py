"""
Blender API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –æ–±—ä–µ–∫—Ç–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω—å—é
"""

import logging
from typing import Dict, Any, Optional, List, Tuple
import os
import sys

logger = logging.getLogger(__name__)

class BlenderGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3D –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ Blender API
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.setup_precise_environment()
        self.clear_scene()
        
    def setup_precise_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥—ã"""
        try:
            import bpy
            
            # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è - –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã
            bpy.context.scene.unit_settings.system = 'METRIC'
            bpy.context.scene.unit_settings.length_unit = 'MILLIMETERS'
            bpy.context.scene.unit_settings.scale_length = 1.0
            
            # –¢–æ—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
            bpy.context.scene.tool_settings.use_snap = True
            bpy.context.scene.tool_settings.snap_elements = {'VERTEX', 'EDGE', 'FACE'}
            bpy.context.scene.tool_settings.use_snap_project = True
            bpy.context.scene.tool_settings.grid_scale = 0.1  # 0.1mm —Å–µ—Ç–∫–∞
            
            # –†–µ–Ω–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            bpy.context.scene.render.engine = 'CYCLES'
            bpy.context.scene.cycles.device = 'GPU'
            
            logger.info("‚úÖ –¢–æ—á–Ω–∞—è —Å—Ä–µ–¥–∞ Blender –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except ImportError:
            logger.error("‚ùå Blender API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            raise
        
    def clear_scene(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã"""
        try:
            import bpy
            bpy.ops.object.select_all(action='SELECT')
            bpy.ops.object.delete(use_global=False)
            logger.info("üßπ –°—Ü–µ–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ü–µ–Ω—ã: {e}")
    
    def create_precise_cube(self, 
                           width: float, 
                           height: float, 
                           depth: float,
                           location: Tuple[float, float, float] = (0, 0, 0),
                           name: str = "PreciseCube") -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∫—É–±–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        """
        try:
            import bpy
            from mathutils import Vector
            
            bpy.ops.mesh.primitive_cube_add(location=location)
            cube = bpy.context.active_object
            cube.name = name
            
            # –¢–æ—á–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            cube.scale = (width/2, height/2, depth/2)
            bpy.ops.object.transform_apply(scale=True)
            
            logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω –∫—É–± {name}: {width}x{height}x{depth}mm")
            return cube
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–±–∞: {e}")
            return None
    
    def create_precise_cylinder(self,
                               radius: float,
                               height: float,
                               segments: int = 32,
                               location: Tuple[float, float, float] = (0, 0, 0),
                               name: str = "PreciseCylinder") -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Ü–∏–ª–∏–Ω–¥—Ä–∞
        """
        try:
            import bpy
            
            bpy.ops.mesh.primitive_cylinder_add(
                radius=radius,
                depth=height,
                vertices=segments,
                location=location
            )
            cylinder = bpy.context.active_object
            cylinder.name = name
            
            logger.info(f"üîµ –°–æ–∑–¥–∞–Ω —Ü–∏–ª–∏–Ω–¥—Ä {name}: R={radius}, H={height}mm")
            return cylinder
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–ª–∏–Ω–¥—Ä–∞: {e}")
            return None
    
    def create_precise_sphere(self,
                             radius: float,
                             segments: int = 32,
                             rings: int = 16,
                             location: Tuple[float, float, float] = (0, 0, 0),
                             name: str = "PreciseSphere") -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π —Å—Ñ–µ—Ä—ã
        """
        try:
            import bpy
            
            bpy.ops.mesh.primitive_uv_sphere_add(
                radius=radius,
                segments=segments,
                ring_count=rings,
                location=location
            )
            sphere = bpy.context.active_object
            sphere.name = name
            
            logger.info(f"‚ö™ –°–æ–∑–¥–∞–Ω–∞ —Å—Ñ–µ—Ä–∞ {name}: R={radius}mm")
            return sphere
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã: {e}")
            return None
    
    def create_from_vertices(self,
                            vertices: List[Tuple[float, float, float]],
                            faces: List[List[int]],
                            name: str = "CustomMesh") -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –≤–µ—Ä—à–∏–Ω –∏ –≥—Ä–∞–Ω–µ–π
        """
        try:
            import bpy
            from mathutils import Vector
            
            mesh = bpy.data.meshes.new(name)
            obj = bpy.data.objects.new(name, mesh)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
            bpy.context.collection.objects.link(obj)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—à
            mesh.from_pydata(vertices, [], faces)
            mesh.update()
            
            # –í—ã–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç
            bpy.context.view_layer.objects.active = obj
            obj.select_set(True)
            
            logger.info(f"üé® –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç {name}: {len(vertices)} –≤–µ—Ä—à–∏–Ω, {len(faces)} –≥—Ä–∞–Ω–µ–π")
            return obj
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –≤–µ—Ä—à–∏–Ω: {e}")
            return None
    
    def create_organic_lamp(self,
                           base_radius: float = 60.0,
                           complexity: float = 1.0,
                           name: str = "OrganicLamp") -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ª–∞–º–ø—ã —á–µ—Ä–µ–∑ Blender API
        """
        try:
            import numpy as np
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
            phi_res = int(40 * complexity)
            theta_res = int(80 * complexity)
            
            phi = np.linspace(0, np.pi, phi_res)
            theta = np.linspace(0, 2*np.pi, theta_res)
            PHI, THETA = np.meshgrid(phi, theta)
            
            # –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ª–Ω—ã
            wave1 = np.sin(THETA * 6 + PHI * 2) * np.cos(PHI * 4 + THETA * 1.5) * 12.0
            wave2 = np.cos(THETA * 11 + PHI * 3) * np.sin(PHI * 7 + THETA * 2) * 8.0
            wave3 = np.sin(THETA * 18 + PHI * 4) * np.cos(PHI * 12 + THETA * 3) * 4.0
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤–æ–ª–Ω—ã
            organic_deformation = wave1 * 0.6 + wave2 * 0.3 + wave3 * 0.1
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
            vertical_flow = np.sin(PHI * 2.5) * 0.4 + 0.6
            organic_deformation *= vertical_flow
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
            radius = base_radius + organic_deformation
            
            # –î–µ–∫–∞—Ä—Ç–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            X = radius * np.sin(PHI) * np.cos(THETA)
            Y = radius * np.sin(PHI) * np.sin(THETA)
            Z = radius * np.cos(PHI)
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã –∏ –≥—Ä–∞–Ω–∏
            vertices = []
            faces = []
            
            rows, cols = X.shape
            
            # –í–µ—Ä—à–∏–Ω—ã
            for i in range(rows):
                for j in range(cols):
                    vertices.append((X[i,j], Y[i,j], Z[i,j]))
            
            # –ì—Ä–∞–Ω–∏
            for i in range(rows-1):
                for j in range(cols-1):
                    v1 = i * cols + j
                    v2 = i * cols + ((j + 1) % cols)
                    v3 = (i + 1) * cols + j
                    v4 = (i + 1) * cols + ((j + 1) % cols)
                    
                    faces.append([v1, v3, v2])
                    faces.append([v2, v3, v4])
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
            obj = self.create_from_vertices(vertices, faces, name)
            
            if obj:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                self.add_glass_material(obj)
            
            logger.info(f"üí° –°–æ–∑–¥–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞ {name}")
            return obj
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ª–∞–º–ø—ã: {e}")
            return None
    
    def add_glass_material(self, obj: Any):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        try:
            import bpy
            
            material = bpy.data.materials.new(name="Glass")
            material.use_nodes = True
            nodes = material.node_tree.nodes
            
            # –û—á–∏—â–∞–µ–º –Ω–æ–¥—ã
            nodes.clear()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–¥—ã
            output = nodes.new(type='ShaderNodeOutputMaterial')
            glass = nodes.new(type='ShaderNodeBsdfGlass')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–µ–∫–ª–∞
            glass.inputs['Color'].default_value = (0.8, 0.9, 1.0, 1.0)
            glass.inputs['Roughness'].default_value = 0.0
            glass.inputs['IOR'].default_value = 1.45
            
            # –°–æ–µ–¥–∏–Ω—è–µ–º
            material.node_tree.links.new(glass.outputs['BSDF'], output.inputs['Surface'])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –æ–±—ä–µ–∫—Ç—É
            if obj.data.materials:
                obj.data.materials[0] = material
            else:
                obj.data.materials.append(material)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
    
    def create_from_blueprint(self, blueprint_data: Dict[str, Any]) -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ —á–µ—Ä—Ç–µ–∂—É
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            dimensions = blueprint_data.get('dimensions', {})
            width = dimensions.get('width', 100)
            height = dimensions.get('height', 100)
            depth = dimensions.get('depth', 100)
            
            # –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞
            object_type = blueprint_data.get('type', 'cube')
            
            if object_type == 'cube':
                return self.create_precise_cube(width, height, depth)
            elif object_type == 'cylinder':
                radius = dimensions.get('radius', 50)
                return self.create_precise_cylinder(radius, height)
            elif object_type == 'sphere':
                radius = dimensions.get('radius', 50)
                return self.create_precise_sphere(radius)
            elif object_type == 'organic':
                return self.create_organic_lamp()
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {object_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ —á–µ—Ä—Ç–µ–∂—É: {e}")
            return None
    
    def export_stl(self, obj: Any, filepath: str) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ STL"""
        try:
            import bpy
            
            # –í—ã–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç
            bpy.context.view_layer.objects.active = obj
            obj.select_set(True)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            bpy.ops.export_mesh.stl(
                filepath=filepath,
                use_selection=True,
                global_scale=1.0,
                use_scene_unit=True,
                ascii=False,
                use_mesh_edges=False,
                use_mesh_vertices=False
            )
            
            logger.info(f"üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ STL: {filepath}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ STL: {e}")
            return False
    
    def export_obj(self, obj: Any, filepath: str) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ OBJ"""
        try:
            import bpy
            
            # –í—ã–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç
            bpy.context.view_layer.objects.active = obj
            obj.select_set(True)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            bpy.ops.export_scene.obj(
                filepath=filepath,
                use_selection=True,
                use_materials=True,
                use_triangles=True,
                use_normals=True,
                use_uvs=True
            )
            
            logger.info(f"üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ OBJ: {filepath}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ OBJ: {e}")
            return False
    
    def render_preview(self, filepath: str, resolution: Tuple[int, int] = (1920, 1080)) -> bool:
        """–†–µ–Ω–¥–µ—Ä –ø—Ä–µ–≤—å—é"""
        try:
            import bpy
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞
            bpy.context.scene.render.resolution_x = resolution[0]
            bpy.context.scene.render.resolution_y = resolution[1]
            bpy.context.scene.render.filepath = filepath
            
            # –†–µ–Ω–¥–µ—Ä–∏–º
            bpy.ops.render.render(write_still=True)
            
            logger.info(f"üì∏ –†–µ–Ω–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞: {e}")
            return False
    
    def get_object_info(self, obj: Any) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ"""
        try:
            bbox = obj.bound_box
            dimensions = {
                'width': bbox[4][0] - bbox[0][0],
                'height': bbox[2][1] - bbox[0][1],
                'depth': bbox[1][2] - bbox[0][2]
            }
            
            return {
                'name': obj.name,
                'type': obj.type,
                'dimensions': dimensions,
                'vertex_count': len(obj.data.vertices),
                'face_count': len(obj.data.polygons),
                'location': tuple(obj.location),
                'rotation': tuple(obj.rotation_euler)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ: {e}")
            return {}


class BlenderIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Blender API —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω—å—é
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.generator = None
        self.available = False
        
        try:
            self.generator = BlenderGenerator()
            self.available = True
            logger.info("‚úÖ Blender –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Blender API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Blender API"""
        return self.available
    
    def generate_3d_object(self, 
                          request_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            request_data: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        if not self.available or not self.generator:
            return {
                'success': False,
                'error': 'Blender API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
        
        try:
            object_type = request_data.get('type', 'organic_lamp')
            
            if object_type == 'organic_lamp':
                obj = self.generator.create_organic_lamp(
                    base_radius=request_data.get('base_radius', 60.0),
                    complexity=request_data.get('complexity', 1.0)
                )
            else:
                obj = self.generator.create_precise_object(
                    object_type=object_type,
                    dimensions=request_data.get('dimensions', {}),
                    name=request_data.get('name', 'GeneratedObject')
                )
            
            if obj:
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ STL
                filepath = f"generated_{object_type}_{obj.name}.stl"
                if self.generator.export_stl(obj, filepath):
                    # –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–≤—å—é
                    preview_path = f"preview_{object_type}_{obj.name}.png"
                    self.generator.render_preview(preview_path)
                    
                    return {
                        'success': True,
                        'filepath': filepath,
                        'preview_path': preview_path,
                        'object_type': object_type,
                        'object_info': self.generator.get_object_info(obj)
                    }
            
            return {
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞'
            }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –æ–±—ä–µ–∫—Ç–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def create_precise_object(self, 
                             object_type: str,
                             dimensions: Dict[str, float],
                             name: str = "PreciseObject") -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        
        Args:
            object_type: —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (cube, cylinder, sphere)
            dimensions: —Ä–∞–∑–º–µ—Ä—ã
            name: –∏–º—è –æ–±—ä–µ–∫—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        """
        if not self.available or not self.generator:
            return {
                'success': False,
                'error': 'Blender API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
        
        try:
            blueprint_data = {
                'type': object_type,
                'dimensions': dimensions
            }
            
            obj = self.generator.create_from_blueprint(blueprint_data)
            if obj:
                obj.name = name
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
                filepath = f"{name}.stl"
                if self.generator.export_stl(obj, filepath):
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
                    info = self.generator.get_object_info(obj)
                    logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ: {info}")
                    
                    return {
                        'success': True,
                        'filepath': filepath,
                        'object_info': info
                    }
            
            return {
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def batch_generate(self, 
                      objects_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        
        Args:
            objects_data: —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        if not self.available or not self.generator:
            return [{'success': False, 'error': 'Blender API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}]
        
        results = []
        
        for i, obj_data in enumerate(objects_data):
            try:
                logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ {i+1}/{len(objects_data)}")
                
                if obj_data.get('type') == 'organic_lamp':
                    result = self.generate_3d_object(obj_data)
                else:
                    result = self.create_precise_object(
                        obj_data.get('type', 'cube'),
                        obj_data.get('dimensions', {}),
                        obj_data.get('name', f"Object_{i+1}")
                    )
                
                results.append(result)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ {i+1}: {e}")
                results.append({'success': False, 'error': str(e)})
        
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –æ–±—ä–µ–∫—Ç–æ–≤")
        return results
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            'available': self.available,
            'blender_version': self._get_blender_version() if self.available else None
        }
    
    def _get_blender_version(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Blender"""
        try:
            import bpy
            return bpy.app.version_string
        except:
            return "Unknown" 