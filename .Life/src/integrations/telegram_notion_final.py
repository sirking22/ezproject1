#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø TELEGRAM ‚Üí NOTION

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:
‚úÖ PLATFORMS_DB - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ + –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
‚úÖ CONTENT_DB - –ø–æ—Å—Ç—ã —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ + engagement –º–µ—Ç—Ä–∏–∫–∏

üìä –î–û–°–¢–£–ü–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã - 100% —Ç–æ—á–Ω–æ—Å—Ç—å
‚ùå –õ–∞–π–∫–∏ - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—É–±–ª–∏—á–Ω–æ–º API  
‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—É–±–ª–∏—á–Ω–æ–º API
üîÑ –†–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É
"""

import requests
import os
from bs4 import BeautifulSoup
import re
import json
from datetime import datetime, timezone
from dotenv import load_dotenv

load_dotenv()

class TelegramToNotionFinal:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.platforms_db_id = os.getenv('NOTION_PLATFORMS_DB_ID')
        self.content_db_id = os.getenv('NOTION_CONTENT_PLAN_DB_ID')
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        
        self.notion_headers = {
            'Authorization': f'Bearer {self.notion_token}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }
        
        self.telegram_headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
    
    def get_telegram_analytics(self, channel="rawmid"):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É Telegram –∫–∞–Ω–∞–ª–∞"""
        
        print(f"üìä –°–ë–û–† –ê–ù–ê–õ–ò–¢–ò–ö–ò @{channel}")
        print("=" * 50)
        
        channel = channel.replace("@", "")
        
        # 1. –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Bot API
        channel_info = self.get_channel_info_via_bot(channel)
        
        # 2. –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
        posts_data = self.get_posts_metrics(channel)
        
        return {
            'channel_info': channel_info,
            'posts_data': posts_data,
            'summary': {
                'total_posts': len(posts_data),
                'total_views': sum(p['views'] for p in posts_data),
                'avg_views': sum(p['views'] for p in posts_data) / len(posts_data) if posts_data else 0,
                'max_views': max((p['views'] for p in posts_data), default=0),
                'min_views': min((p['views'] for p in posts_data), default=0)
            }
        }
    
    def get_channel_info_via_bot(self, channel):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Bot API"""
        
        if not self.bot_token:
            return {"error": "No Bot Token", "subscribers": 0}
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
            chat_url = f"https://api.telegram.org/bot{self.bot_token}/getChat"
            chat_response = requests.get(chat_url, params={'chat_id': f'@{channel}'}, timeout=10)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            count_url = f"https://api.telegram.org/bot{self.bot_token}/getChatMemberCount"
            count_response = requests.get(count_url, params={'chat_id': f'@{channel}'}, timeout=10)
            
            subscribers = 0
            channel_id = ""
            title = channel
            
            if chat_response.status_code == 200:
                chat_data = chat_response.json()
                if chat_data.get('ok'):
                    info = chat_data['result']
                    channel_id = str(info.get('id', ''))
                    title = info.get('title', channel)
            
            if count_response.status_code == 200:
                count_data = count_response.json()
                if count_data.get('ok'):
                    subscribers = count_data['result']
            
            print(f"   üìù {title}")
            print(f"   üë• {subscribers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            print(f"   üÜî {channel_id}")
            
            return {
                'id': channel_id,
                'title': title,
                'username': channel,
                'subscribers': subscribers
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Bot API: {e}")
            return {"error": str(e), "subscribers": 0}
    
    def get_posts_metrics(self, channel):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥"""
        
        print(f"   üîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤...")
        
        url = f"https://t.me/s/{channel}"
        
        try:
            response = requests.get(url, headers=self.telegram_headers, timeout=15)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                posts_elements = soup.find_all('div', class_='tgme_widget_message')
                
                print(f"   üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts_elements)}")
                
                posts_data = []
                
                for i, post_elem in enumerate(posts_elements, 1):
                    post_metrics = self.extract_post_metrics(post_elem, i, channel)
                    if post_metrics:
                        posts_data.append(post_metrics)
                
                return posts_data
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
            return []
    
    def extract_post_metrics(self, post_elem, post_num, channel):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        
        try:
            # ID –ø–æ—Å—Ç–∞
            post_link = post_elem.get('data-post', '')
            post_id = post_link.split('/')[-1] if post_link else str(post_num)
            
            # URL –ø–æ—Å—Ç–∞
            post_url = f"https://t.me/{channel}/{post_id}"
            
            # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            text_elem = post_elem.find('div', class_='tgme_widget_message_text')
            text_content = ""
            if text_elem:
                text_content = text_elem.get_text(strip=True)
            
            # –î–∞—Ç–∞ –ø–æ—Å—Ç–∞
            date_elem = post_elem.find('time', class_='datetime')
            post_date = ""
            if date_elem:
                datetime_attr = date_elem.get('datetime', '')
                if datetime_attr:
                    try:
                        date_obj = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                        post_date = date_obj.strftime('%Y-%m-%d')
                    except:
                        post_date = datetime.now().strftime('%Y-%m-%d')
            
            # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã (–æ—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞)
            views_elem = post_elem.find('span', class_='tgme_widget_message_views')
            views = 0
            if views_elem:
                views_text = views_elem.text.strip()
                views = self.convert_count_to_number(views_text)
            
            # –¢–∏–ø –º–µ–¥–∏–∞
            media_type = "–¢–µ–∫—Å—Ç"
            if post_elem.find('video'):
                media_type = "–í–∏–¥–µ–æ"
            elif post_elem.find('img') or post_elem.find('i', class_='tgme_widget_message_photo_wrap'):
                media_type = "–§–æ—Ç–æ"
            elif post_elem.find('audio'):
                media_type = "–ê—É–¥–∏–æ"
            
            return {
                'id': post_id,
                'url': post_url,
                'text': text_content,
                'date': post_date,
                'views': views,
                'media_type': media_type,
                'engagement_rate': 0  # –ë—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post_num}: {e}")
            return None
    
    def convert_count_to_number(self, count_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—á–µ—Ç—á–∏–∫–∞ –≤ —á–∏—Å–ª–æ"""
        
        if not count_str:
            return 0
        
        count_str = str(count_str).replace(' ', '').replace(',', '').lower()
        
        match = re.search(r'([\d.,]+[km]?)', count_str)
        if not match:
            return 0
        
        number_str = match.group(1)
        
        try:
            if 'k' in number_str:
                return int(float(number_str.replace('k', '')) * 1000)
            elif 'm' in number_str:
                return int(float(number_str.replace('m', '')) * 1000000)
            else:
                return int(float(number_str))
        except:
            return 0
    
    def update_platforms_database(self, channel_info):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        
        print(f"\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï PLATFORMS DATABASE")
        print("=" * 50)
        
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å Telegram
            search_response = requests.post(
                f"https://api.notion.com/v1/databases/{self.platforms_db_id}/query",
                headers=self.notion_headers,
                json={
                    "filter": {
                        "property": "Platform Name",
                        "title": {
                            "equals": "Telegram"
                        }
                    }
                }
            )
            
            if search_response.status_code == 200:
                search_data = search_response.json()
                
                if search_data['results']:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    page_id = search_data['results'][0]['id']
                    
                    update_data = {
                        "properties": {
                            "Followers": {"number": channel_info.get('subscribers', 0)},
                            "Last Updated": {"date": {"start": datetime.now(timezone.utc).isoformat()}}
                        }
                    }
                    
                    update_response = requests.patch(
                        f"https://api.notion.com/v1/pages/{page_id}",
                        headers=self.notion_headers,
                        json=update_data
                    )
                    
                    if update_response.status_code == 200:
                        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {channel_info.get('subscribers', 0):,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                        return True
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response.status_code}")
                        return False
                else:
                    print("   ‚ùå Telegram –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
                    return False
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def update_content_database(self, posts_data, limit=5):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        print(f"\nüìù –û–ë–ù–û–í–õ–ï–ù–ò–ï CONTENT DATABASE")
        print("=" * 50)
        
        if not posts_data:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞—Ö")
            return False
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        top_posts = sorted(posts_data, key=lambda x: x['views'], reverse=True)[:limit]
        
        print(f"   üìä –î–æ–±–∞–≤–ª—è–µ–º {len(top_posts)} –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º")
        
        success_count = 0
        
        for i, post in enumerate(top_posts, 1):
            try:
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion
                notion_data = {
                    "parent": {"database_id": self.content_db_id},
                    "properties": {
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": {
                            "title": [
                                {
                                    "text": {
                                        "content": post['text'][:100] + "..." if len(post['text']) > 100 else post['text']
                                    }
                                }
                            ]
                        },
                        "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": {"number": post['views']},
                        "URL –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": {"url": post['url']},
                        "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": {"date": {"start": post['date']} if post['date'] else None},
                        "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞": {
                            "select": {"name": post['media_type']}
                        }
                    }
                }
                
                # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
                if not post['date']:
                    del notion_data["properties"]["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                create_response = requests.post(
                    "https://api.notion.com/v1/pages",
                    headers=self.notion_headers,
                    json=notion_data
                )
                
                if create_response.status_code == 200:
                    print(f"   ‚úÖ {i}. {post['views']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ | {post['text'][:30]}...")
                    success_count += 1
                else:
                    print(f"   ‚ùå {i}. –û—à–∏–±–∫–∞ {create_response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå {i}. –û—à–∏–±–∫–∞: {e}")
        
        print(f"\n   üìä –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}/{len(top_posts)} –ø–æ—Å—Ç–æ–≤")
        return success_count > 0
    
    def run_full_sync(self, channel="rawmid"):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TELEGRAM ‚Üí NOTION")
        print("=" * 80)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
        telegram_data = self.get_telegram_analytics(channel)
        
        if not telegram_data['channel_info'] or 'error' in telegram_data['channel_info']:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞")
            return False
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platforms_updated = self.update_platforms_database(telegram_data['channel_info'])
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_updated = self.update_content_database(telegram_data['posts_data'])
        
        # 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
        print(f"   üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {'‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ' if platforms_updated else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"   üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {'‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ' if content_updated else '‚ùå –û—à–∏–±–∫–∞'}")
        
        summary = telegram_data['summary']
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {telegram_data['channel_info']['subscribers']:,}")
        print(f"   üìù –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {summary['total_posts']}")
        print(f"   üëÄ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {summary['total_views']:,}")
        print(f"   üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {summary['avg_views']:,.0f}")
        print(f"   üèÜ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {summary['max_views']:,}")
        
        return platforms_updated and content_updated

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env = ['NOTION_TOKEN', 'NOTION_PLATFORMS_DB_ID', 'NOTION_CONTENT_PLAN_DB_ID', 'TELEGRAM_BOT_TOKEN']
    missing_env = [var for var in required_env if not os.getenv(var)]
    
    if missing_env:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_env)}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    sync = TelegramToNotionFinal()
    success = sync.run_full_sync("rawmid")
    
    if success:
        print(f"\nüéâ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"üîÑ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    else:
        print(f"\n‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")

if __name__ == "__main__":
    main() 