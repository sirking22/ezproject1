import asyncio
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import os
from pathlib import Path

@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    timestamp: str
    operation: str
    duration: float
    model_used: str
    tokens_used: int
    cost: float
    success: bool
    error: Optional[str] = None

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, log_file: str = "performance_log.json"):
        self.log_file = Path(log_file)
        self.metrics: List[PerformanceMetric] = []
        self.cache_hits = 0
        self.cache_misses = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        self.load_metrics()
    
    def load_metrics(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.log_file.exists():
            try:
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.metrics = [PerformanceMetric(**metric) for metric in data]
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump([asdict(metric) for metric in self.metrics], f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def add_metric(self, operation: str, duration: float, model_used: str, 
                  tokens_used: int, cost: float, success: bool, error: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –º–µ—Ç—Ä–∏–∫—É"""
        metric = PerformanceMetric(
            timestamp=datetime.now().isoformat(),
            operation=operation,
            duration=duration,
            model_used=model_used,
            tokens_used=tokens_used,
            cost=cost,
            success=success,
            error=error
        )
        
        self.metrics.append(metric)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–∏–∫
        if len(self.metrics) % 10 == 0:
            self.save_metrics()
    
    def get_performance_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        recent_metrics = [
            m for m in self.metrics 
            if datetime.fromisoformat(m.timestamp) > cutoff_date
        ]
        
        if not recent_metrics:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"}
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_operations = len(recent_metrics)
        successful_operations = len([m for m in recent_metrics if m.success])
        total_duration = sum(m.duration for m in recent_metrics)
        total_tokens = sum(m.tokens_used for m in recent_metrics)
        total_cost = sum(m.cost for m in recent_metrics)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
        model_stats = {}
        for metric in recent_metrics:
            model = metric.model_used
            if model not in model_stats:
                model_stats[model] = {
                    "operations": 0,
                    "total_tokens": 0,
                    "total_cost": 0,
                    "avg_duration": 0,
                    "success_rate": 0
                }
            
            model_stats[model]["operations"] += 1
            model_stats[model]["total_tokens"] += metric.tokens_used
            model_stats[model]["total_cost"] += metric.cost
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for model in model_stats:
            model_metrics = [m for m in recent_metrics if m.model_used == model]
            model_stats[model]["avg_duration"] = sum(m.duration for m in model_metrics) / len(model_metrics)
            model_stats[model]["success_rate"] = len([m for m in model_metrics if m.success]) / len(model_metrics)
        
        return {
            "period_days": days,
            "total_operations": total_operations,
            "successful_operations": successful_operations,
            "success_rate": successful_operations / total_operations if total_operations > 0 else 0,
            "avg_duration": total_duration / total_operations if total_operations > 0 else 0,
            "total_tokens": total_tokens,
            "total_cost": total_cost,
            "model_stats": model_stats,
            "cache_hits": self.cache_hits,
            "cache_misses": self.cache_misses,
            "cache_hit_rate": self.cache_hits / (self.cache_hits + self.cache_misses) if (self.cache_hits + self.cache_misses) > 0 else 0
        }
    
    def print_performance_report(self, days: int = 7):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        stats = self.get_performance_stats(days)
        
        if "error" in stats:
            print(f"‚ùå {stats['error']}")
            return
        
        print(f"\nüìä –û–¢–ß–Å–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–∑–∞ {days} –¥–Ω–µ–π)")
        print("=" * 60)
        
        print(f"üî¢ –û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {stats['total_operations']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {stats['successful_operations']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1%}")
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_duration']:.2f}—Å")
        print(f"üìù –û–±—â–µ–µ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']:,}")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats['total_cost']:.6f}")
        print(f"üéØ –ö—ç—à-—Ö–∏—Ç—ã: {stats['cache_hits']}")
        print(f"‚ùå –ö—ç—à-–ø—Ä–æ–º–∞—Ö–∏: {stats['cache_misses']}")
        print(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {stats['cache_hit_rate']:.1%}")
        
        print(f"\nüè¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–û–î–ï–õ–Ø–ú:")
        for model, model_stats in stats['model_stats'].items():
            print(f"\n  üìù {model}:")
            print(f"    –û–ø–µ—Ä–∞—Ü–∏–∏: {model_stats['operations']}")
            print(f"    –¢–æ–∫–µ–Ω—ã: {model_stats['total_tokens']:,}")
            print(f"    –°—Ç–æ–∏–º–æ—Å—Ç—å: ${model_stats['total_cost']:.6f}")
            print(f"    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {model_stats['avg_duration']:.2f}—Å")
            print(f"    –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {model_stats['success_rate']:.1%}")
    
    def get_optimization_recommendations(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        stats = self.get_performance_stats(7)
        recommendations = []
        
        if "error" in stats:
            return ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"]
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if stats['success_rate'] < 0.9:
            recommendations.append("‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if stats['avg_duration'] > 5.0:
            recommendations.append("üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        if stats['total_cost'] > 1.0:
            recommendations.append("üí∞ –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –¥–µ—à—ë–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á")
        
        # –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∞
        if stats['cache_hit_rate'] < 0.3:
            recommendations.append("üíæ –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞ - —É–≤–µ–ª–∏—á—å—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥–µ–ª—è–º
        for model, model_stats in stats['model_stats'].items():
            if model_stats['avg_duration'] > 3.0:
                recommendations.append(f"üêå –ú–æ–¥–µ–ª—å {model} –º–µ–¥–ª–µ–Ω–Ω–∞—è - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
            
            if model_stats['total_cost'] > 0.5:
                recommendations.append(f"üí∞ –ú–æ–¥–µ–ª—å {model} –¥–æ—Ä–æ–≥–∞—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!")
        
        return recommendations

class CacheManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, max_size: int = 1000, ttl_hours: int = 24):
        self.max_size = max_size
        self.ttl_hours = ttl_hours
        self.cache: Dict[str, Dict] = {}
        self.access_times: Dict[str, float] = {}
    
    def _cleanup_expired(self):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
        current_time = time.time()
        expired_keys = [
            key for key, access_time in self.access_times.items()
            if current_time - access_time > self.ttl_hours * 3600
        ]
        
        for key in expired_keys:
            del self.cache[key]
            del self.access_times[key]
    
    def _evict_lru(self):
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø–∏—Å–∏"""
        if len(self.cache) >= self.max_size:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
            oldest_key = min(self.access_times.keys(), key=lambda k: self.access_times[k])
            del self.cache[oldest_key]
            del self.access_times[oldest_key]
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        self._cleanup_expired()
        
        if key in self.cache:
            self.access_times[key] = time.time()
            return self.cache[key]['value']
        
        return None
    
    def set(self, key: str, value: Any):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        self._cleanup_expired()
        self._evict_lru()
        
        self.cache[key] = {
            'value': value,
            'created_at': time.time()
        }
        self.access_times[key] = time.time()
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        self._cleanup_expired()
        
        return {
            "size": len(self.cache),
            "max_size": self.max_size,
            "utilization": len(self.cache) / self.max_size if self.max_size > 0 else 0,
            "ttl_hours": self.ttl_hours
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
performance_monitor = PerformanceMonitor()
cache_manager = CacheManager() 