import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict
from dotenv import load_dotenv
from notion_client import AsyncClient
from src.agents.agent_core import agent_core

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DailyAutomation:
    def __init__(self):
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.notion_client = AsyncClient(auth=self.notion_token)
        
        # Notion –±–∞–∑—ã
        self.dbs = {
            "rituals": os.getenv("NOTION_DATABASE_ID_RITUALS"),
            "habits": os.getenv("NOTION_DATABASE_ID_HABITS"),
            "reflection": os.getenv("NOTION_DATABASE_ID_REFLECTION"),
            "guides": os.getenv("NOTION_DATABASE_ID_GUIDES"),
            "actions": os.getenv("NOTION_DATABASE_ID_ACTIONS"),
            "terms": os.getenv("NOTION_DATABASE_ID_TERMS"),
            "materials": os.getenv("NOTION_DATABASE_ID_MATERIALS"),
            "agent_prompts": os.getenv("NOTION_DATABASE_ID_AGENT_PROMPTS"),
        }
        
        # –ü–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π –±–∞–∑—ã
        self.db_fields = {
            "rituals": ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            "habits": ("–ü—Ä–∏–≤—ã—á–∫–∞", None),
            "reflection": ("–î–∞—Ç–∞", "–¢–∏–ø"),
            "guides": ("Name", None),
            "actions": ("–ó–∞–¥–∞—á–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            "terms": ("–¢–µ—Ä–º–∏–Ω", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            "materials": ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            "agent_prompts": ("Name", "–†–æ–ª—å"),
        }

    async def create_daily_reflection(self):
        """–°–æ–∑–¥–∞—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é"""
        try:
            today = datetime.now().strftime("%Y-%m-%d")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
            habits = await self.get_notion_records("habits")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            context = f"–î–∞—Ç–∞: {today}\n–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: {len(habits)}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Meta-Agent
            reflection_prompt = f"""
            –°–æ–∑–¥–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è {today}.
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç:
            - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {len(habits)}
            - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {datetime.now().strftime('%A')}
            
            –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:
            1. –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
            2. –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
            3. –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            4. –í—ã–∑–æ–≤—ã –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            5. –ü–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            6. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            
            –°–¥–µ–ª–∞–π —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π, —á–µ—Å—Ç–Ω–æ–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–π.
            """
            
            reflection_content = await agent_core.get_agent_response(
                "Meta-Agent", 
                context, 
                reflection_prompt
            )
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ reflection
            await self.create_notion_record(
                "reflection",
                f"–†–µ—Ñ–ª–µ–∫—Å–∏—è {today}",
                "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è",
                {
                    "–î–∞—Ç–∞": {"date": {"start": today}},
                    "–¢–∏–ø": {"select": {"name": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è"}},
                    "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": reflection_content}}]}
                }
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–ª—è {today}")
            return reflection_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
            return None

    async def check_habits_completion(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            today = datetime.now().strftime("%Y-%m-%d")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
            habits = await self.get_notion_records("habits")
            
            incomplete_habits = []
            for habit in habits:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                habit_name = habit["properties"].get("–ü—Ä–∏–≤—ã—á–∫–∞", {}).get("title", [{}])[0].get("plain_text", "")
                if habit_name:
                    incomplete_habits.append(habit_name)
            
            if incomplete_habits:
                # –°–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö
                reminder_content = f"""
                üìã **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö - {today}**
                
                –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:
                {chr(10).join(f"‚Ä¢ {habit}" for habit in incomplete_habits)}
                
                –í—Ä–µ–º—è –µ—â—ë –µ—Å—Ç—å! –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è.
                """
                
                # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ actions –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await self.create_notion_record(
                    "actions",
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö {today}",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                    {
                        "–ó–∞–¥–∞—á–∞": {"title": [{"text": {"content": f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏: {', '.join(incomplete_habits[:3])}"}}]},
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {"select": {"name": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"}},
                        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": {"select": {"name": "–°—Ä–µ–¥–Ω–∏–π"}},
                        "–°—Ç–∞—Ç—É—Å": {"select": {"name": "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"}}
                    }
                )
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ {len(incomplete_habits)} –ø—Ä–∏–≤—ã—á–∫–∞—Ö")
                return reminder_content
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
            return None

    async def generate_weekly_insights(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            today = datetime.now()
            if today.weekday() != 6:  # –¢–æ–ª—å–∫–æ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_start = (today - timedelta(days=6)).strftime("%Y-%m-%d")
            week_end = today.strftime("%Y-%m-%d")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            reflections = await self.get_notion_records("reflection")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            actions = await self.get_notion_records("actions")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context = f"""
            –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏: {week_start} - {week_end}
            –†–µ—Ñ–ª–µ–∫—Å–∏–π: {len(reflections)}
            –ó–∞–¥–∞—á: {len(actions)}
            """
            
            # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –æ—Ç Meta-Agent
            insights_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ–¥–µ–ª—é {week_start} - {week_end} –∏ —Å–æ–∑–¥–∞–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.
            
            –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞:
            1. –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏
            2. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
            3. –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–∫–∏
            4. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            5. –¶–µ–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            6. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
            
            –°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –≥–ª—É–±–æ–∫–∏–º, —á–µ—Å—Ç–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –¥–ª—è —Ä–æ—Å—Ç–∞.
            """
            
            insights_content = await agent_core.get_agent_response(
                "Meta-Agent",
                context,
                insights_prompt
            )
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ reflection
            await self.create_notion_record(
                "reflection",
                f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã {week_start}-{week_end}",
                "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è",
                {
                    "–î–∞—Ç–∞": {"date": {"start": today.strftime("%Y-%m-%d")}},
                    "–¢–∏–ø": {"select": {"name": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è"}},
                    "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": insights_content}}]}
                }
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è {week_start}-{week_end}")
            return insights_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return None

    async def create_notion_record(self, db_name: str, title: str, category: str = None, 
                                 additional_props: Dict = None) -> bool:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π Notion –±–∞–∑–µ"""
        try:
            db_id = self.dbs[db_name]
            title_field = self.db_fields[db_name][0]
            category_field = self.db_fields[db_name][1]
            
            properties = {
                title_field: {"title": [{"text": {"content": title}}]}
            }
            
            if category_field and category:
                properties[category_field] = {"select": {"name": category}}
            
            if additional_props:
                properties.update(additional_props)
            
            await self.notion_client.pages.create(
                parent={"database_id": db_id},
                properties=properties
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ {db_name}: {e}")
            return False

    async def get_notion_records(self, db_name: str, filter_params: Dict = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ Notion –±–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            db_id = self.dbs[db_name]
            
            query_params = {"database_id": db_id}
            if filter_params:
                query_params["filter"] = filter_params
            
            response = await self.notion_client.databases.query(**query_params)
            return response["results"]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ {db_name}: {e}")
            return []

    async def run_daily_automation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
        
        results = {}
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        reflection = await self.create_daily_reflection()
        results["reflection"] = reflection
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        habits_reminder = await self.check_habits_completion()
        results["habits_reminder"] = habits_reminder
        
        # 3. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã (—Ç–æ–ª—å–∫–æ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º)
        weekly_insights = await self.generate_weekly_insights()
        results["weekly_insights"] = weekly_insights
        
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    automation = DailyAutomation()
    results = await automation.run_daily_automation()
    
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò ===")
    for key, value in results.items():
        if value:
            print(f"‚úì {key}: {len(str(value))} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"- {key}: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main()) 