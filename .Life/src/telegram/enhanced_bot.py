#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Todoist –∏ —É–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""

import asyncio
import logging
import os
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta, UTC
import json
from dataclasses import dataclass

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)
from telegram.constants import ParseMode

from ..integrations.todoist_integration import TodoistIntegration, TaskPriority
from ..notion.core import NotionService
from ..config.environment import config
from ..notion.client import NotionClient
from ..notion.llm_service import LLMService, LLMConfig
from ..notion.repository import UniversalRepository
from ..utils.config import Config

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
class TaskStatus:
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"

class TaskPriority:
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class EnhancedTaskManager:
    def __init__(self):
        pass
    
    async def create_task(self, *args, **kwargs):
        return None
    
    async def get_tasks(self, *args, **kwargs):
        return []

class ContentManager:
    def __init__(self, notion_token=None, content_db_id=None, media_db_id=None):
        pass
    
    async def create_content(self, *args, **kwargs):
        return None

class VoiceService:
    def __init__(self):
        pass
    
    async def process_voice(self, *args, **kwargs):
        return None

class LLMService:
    def __init__(self):
        pass
    
    async def generate_response(self, *args, **kwargs):
        return "–ó–∞–≥–ª—É—à–∫–∞ LLM"

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TASK_CREATE_TITLE, TASK_CREATE_DESC, TASK_CREATE_PRIORITY, TASK_CREATE_ASSIGNEE = range(4)
CONTENT_CREATE_TITLE, CONTENT_CREATE_TYPE, CONTENT_CREATE_TEXT, CONTENT_CREATE_PLATFORMS = range(4, 8)
TASK_EDIT_FIELD, TASK_EDIT_VALUE = range(8, 10)
CONTENT_EDIT_FIELD, CONTENT_EDIT_VALUE = range(10, 12)
TODOIST_CREATE_TITLE, TODOIST_CREATE_DESC, TODOIST_CREATE_PRIORITY, TODOIST_CREATE_PROJECT = range(12, 16)

@dataclass
class UserSession:
    user_id: int
    current_context: str = "home"
    session_id: str = ""
    last_interaction: datetime = None
    
    def __post_init__(self):
        if self.last_interaction is None:
            self.last_interaction = datetime.now(UTC)
        if not self.session_id:
            self.session_id = f"user_{self.user_id}_{int(self.last_interaction.timestamp())}"

class EnhancedTelegramBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Todoist –∏ Notion"""
    
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.notion_token = os.getenv("NOTION_TOKEN")
        self.todoist_token = os.getenv("TODOIST_API_TOKEN")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.task_manager = EnhancedTaskManager()
        
        self.content_manager = ContentManager(
            notion_token=self.notion_token,
            content_db_id=os.getenv("NOTION_CONTENT_PLAN_DB_ID"),
            media_db_id=os.getenv("NOTION_MATERIALS_DB_ID")
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Todoist
        self.todoist = TodoistIntegration(self.todoist_token) if self.todoist_token else None
        
        self.voice_service = VoiceService()
        self.llm_service = LLMService()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states: Dict[str, Dict] = {}
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∏–∑ .env)
        allowed_users = os.getenv("ALLOWED_TELEGRAM_USERS", "").split(",")
        self.allowed_users = [user.strip() for user in allowed_users if user.strip()]
        
        self.notion = NotionService()
        self.application = None
        self.is_initialized = False
        
        self.config = Config()
        self.notion_client = NotionClient(self.config.notion_token, self.config.notion_dbs)
        self.repository = UniversalRepository(self.notion_client)
        
        # LLM —Å–µ—Ä–≤–∏—Å
        llm_config = LLMConfig(
            use_local=True,
            local_url="http://localhost:8000",
            openrouter_api_key=self.config.openrouter_api_key,
            fallback_to_openrouter=True
        )
        self.llm_service = LLMService(self.notion_client, llm_config)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏
        self.user_sessions: Dict[int, UserSession] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(self.token).build()
        self._setup_handlers()
        
        logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("test", self.test_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        self.application.add_handler(CommandHandler("validate", self.validate_command))
        self.application.add_handler(CommandHandler("list", self.list_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("create", self.create_command))
        self.application.add_handler(CommandHandler("update", self.update_command))
        self.application.add_handler(CommandHandler("delete", self.delete_command))
        
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("todo", self.todo_command))
        self.application.add_handler(CommandHandler("habit", self.habit_command))
        self.application.add_handler(CommandHandler("reflection", self.reflection_command))
        self.application.add_handler(CommandHandler("idea", self.idea_command))
        self.application.add_handler(CommandHandler("morning", self.morning_command))
        self.application.add_handler(CommandHandler("evening", self.evening_command))
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
        self.application.add_handler(CommandHandler("progress", self.progress_command))
        self.application.add_handler(CommandHandler("mood", self.mood_command))
        self.application.add_handler(CommandHandler("insights", self.insights_command))
        self.application.add_handler(CommandHandler("recommendations", self.recommendations_command))
        
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
        self.application.add_handler(CommandHandler("context", self.context_command))
        self.application.add_handler(CommandHandler("insight", self.insight_command))
        self.application.add_handler(CommandHandler("predict", self.predict_command))
        self.application.add_handler(CommandHandler("optimize", self.optimize_command))
        self.application.add_handler(CommandHandler("chat", self.chat_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = UserSession(user_id=user_id)
        
        welcome_message = f"""
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é AI-—ç–∫–æ—Å–∏—Å—Ç–µ–º—É!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å:
‚Ä¢ –ó–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏ —Ä–∏—Ç—É–∞–ª–∞–º–∏  
‚Ä¢ –†–µ—Ñ–ª–µ–∫—Å–∏—è–º–∏ –∏ –∏–¥–µ—è–º–∏
‚Ä¢ –õ–∏—á–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º

üéØ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/todo [–∑–∞–¥–∞—á–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/habit [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
/reflection [—Ç–µ–∫—Å—Ç] - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
/idea [–∏–¥–µ—è] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é
/morning - —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª
/evening - –≤–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è

üß† AI-–ø–æ–º–æ—â—å:
/insight [—Ç–µ–º–∞] - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
/predict [–ø—Ä–∏–≤—ã—á–∫–∞] - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
/optimize [–æ–±–ª–∞—Å—Ç—å] - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
/chat - —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å AI

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:
/progress - –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
/insights - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
/recommendations - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {self.user_sessions[user_id].current_context}

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!
        """
        
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

üéØ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
/todo [–∑–∞–¥–∞—á–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/habit [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É  
/reflection [—Ç–µ–∫—Å—Ç] - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
/idea [–∏–¥–µ—è] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é
/morning - —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª
/evening - –≤–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è

üß† AI-–ø–æ–º–æ—â—å:
/context [work/home] - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
/insight [—Ç–µ–º–∞] - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º—ã
/predict [–ø—Ä–∏–≤—ã—á–∫–∞] - –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
/optimize [–æ–±–ª–∞—Å—Ç—å] - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
/chat - —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å AI

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã:
/progress - –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
/mood - –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
/insights - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
/recommendations - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏:
/validate [table] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
/list [table] [limit] - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
/search [table] [query] - –ø–æ–∏—Å–∫
/create [table] [data] - —Å–æ–∑–¥–∞–Ω–∏–µ
/update [table] [id] [data] - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
/delete [table] [id] - —É–¥–∞–ª–µ–Ω–∏–µ

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: rituals, habits, reflections, guides, actions, terms, materials
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
    
    async def todo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /todo - –±—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: `/todo \"–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\"`")
            return
        
        task_text = " ".join(context.args)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Todoist
            task = await self.todoist.create_task(
                content=task_text,
                priority=TaskPriority.NORMAL
            )
            
            if task:
                response = f"""
‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Todoist**

üìù **–¢–µ–∫—Å—Ç:** {task.content}
üÜî **ID:** `{task.id}`
üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {task.created_at.strftime('%d.%m.%Y %H:%M')}
üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {task.priority.value}

üí° **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/complete {task.id}` - –∑–∞–≤–µ—Ä—à–∏—Ç—å
‚Ä¢ `/delete {task.id}` - —É–¥–∞–ª–∏—Ç—å
‚Ä¢ `/tasks` - –≤—Å–µ –∑–∞–¥–∞—á–∏
                """
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{task.id}")],
                    [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task.id}")],
                    [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="list_tasks")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def todoist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /todoist - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Todoist"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tasks = await self.todoist.get_tasks()
            projects = await self.todoist.get_projects()
            
            today_tasks = [t for t in tasks if t.due_date and t.due_date.date() == datetime.now().date()]
            overdue_tasks = [t for t in tasks if t.due_date and t.due_date.date() < datetime.now().date() and not t.completed_at]
            
            stats_text = f"""
üìä **Todoist –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìã **–í—Å–µ–≥–æ –∑–∞–¥–∞—á:** {len(tasks)}
‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** {len([t for t in tasks if t.completed_at])}
üìÖ **–ù–∞ —Å–µ–≥–æ–¥–Ω—è:** {len(today_tasks)}
‚ö†Ô∏è **–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:** {len(overdue_tasks)}
üìÅ **–ü—Ä–æ–µ–∫—Ç–æ–≤:** {len(projects)}

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/tasks` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
‚Ä¢ `/todo "—Ç–µ–∫—Å—Ç"` - –±—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ `/complete ID` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
            """
            
            keyboard = [
                [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="list_tasks")],
                [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today_tasks")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ", callback_data="overdue_tasks")],
                [InlineKeyboardButton("üìÅ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="list_projects")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Todoist: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tasks - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        try:
            tasks = await self.todoist.get_tasks()
            
            if not tasks:
                await update.message.reply_text("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            active_tasks = [t for t in tasks if not t.completed_at]
            completed_tasks = [t for t in tasks if t.completed_at]
            
            response = f"""
üìã **–ó–∞–¥–∞—á–∏ –≤ Todoist**

üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–µ ({len(active_tasks)}):**
            """
            
            for i, task in enumerate(active_tasks[:10], 1):
                priority_emoji = {"high": "üî¥", "normal": "üü°", "low": "üü¢"}.get(task.priority.value, "‚ö™")
                due_text = f"üìÖ {task.due_date.strftime('%d.%m')}" if task.due_date else ""
                response += f"\n{i}. {priority_emoji} {task.content} {due_text}\n   ID: `{task.id}`"
            
            if len(active_tasks) > 10:
                response += f"\n... –∏ –µ—â–µ {len(active_tasks) - 10} –∑–∞–¥–∞—á"
            
            if completed_tasks:
                response += f"\n\n‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ ({len(completed_tasks)}):**"
                for i, task in enumerate(completed_tasks[:5], 1):
                    response += f"\n{i}. ‚úÖ {task.content}"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="complete_task")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="delete_task")],
                [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today_tasks")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def complete_task_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /complete - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: `/complete 123456789`")
            return
        
        task_id = context.args[0]
        
        try:
            success = await self.todoist.complete_task(task_id)
            
            if success:
                await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def delete_task_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: `/delete 123456789`")
            return
        
        task_id = context.args[0]
        
        try:
            success = await self.todoist.delete_task(task_id)
            
            if success:
                await update.message.reply_text(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def notion_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /notion - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Notion"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
            stats = await self._get_notion_stats()
            
            response = f"""
üìö **Notion –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**

{stats}

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/habit "–Ω–∞–∑–≤–∞–Ω–∏–µ"` - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
‚Ä¢ `/reflection "—Ç–µ–∫—Å—Ç"` - –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
‚Ä¢ `/idea "–∏–¥–µ—è"` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é
‚Ä¢ `/list —Ç–∏–ø` - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            """
            
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notion_stats")],
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="add_notion")],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_notion")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Notion: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _get_notion_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Notion"""
        try:
            stats = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_names = {
                "tasks": "üìã –ó–∞–¥–∞—á–∏",
                "habits": "üîÑ –ü—Ä–∏–≤—ã—á–∫–∏", 
                "reflections": "üß† –†–µ—Ñ–ª–µ–∫—Å–∏–∏",
                "rituals": "üåü –†–∏—Ç—É–∞–ª—ã",
                "guides": "üìñ –ì–∞–π–¥—ã",
                "actions": "‚ö° –î–µ–π—Å—Ç–≤–∏—è",
                "terms": "üìö –¢–µ—Ä–º–∏–Ω—ã",
                "materials": "üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
            }
            
            for db_key, db_name in db_names.items():
                try:
                    count = await self.notion.get_database_count(db_key)
                    stats.append(f"{db_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                except:
                    stats.append(f"{db_name}: ‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            return "\n".join(stats)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Notion: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    async def habit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /habit - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: `/habit \"–ú–µ–¥–∏—Ç–∞—Ü–∏—è\"`")
            return
        
        habit_name = " ".join(context.args)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ Notion
            habit_data = {
                "name": habit_name,
                "status": "–ê–∫—Ç–∏–≤–Ω–∞—è",
                "created_date": datetime.now().isoformat(),
                "streak": 0
            }
            
            habit = await self.notion.create_habit(habit_data)
            
            if habit:
                response = f"""
‚úÖ **–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Notion**

üîÑ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {habit_name}
üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {datetime.now().strftime('%d.%m.%Y')}
üî• **–°—Ç—Ä–∏–∫:** 0 –¥–Ω–µ–π

üí° **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/list habits` - –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ `/reflection "–æ –ø—Ä–∏–≤—ã—á–∫–µ"` - —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
                """
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def reflection_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /reflection - –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: `/reflection \"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å\"`")
            return
        
        reflection_text = " ".join(context.args)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –≤ Notion
            reflection_data = {
                "name": f"–†–µ—Ñ–ª–µ–∫—Å–∏—è {datetime.now().strftime('%d.%m.%Y')}",
                "content": reflection_text,
                "date": datetime.now().isoformat(),
                "type": "daily"
            }
            
            reflection = await self.notion.create_reflection(reflection_data)
            
            if reflection:
                response = f"""
üß† **–†–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Notion**

üìù **–¢–µ–∫—Å—Ç:** {reflection_text}
üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí° **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/list reflections` - –≤—Å–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
‚Ä¢ `/insights` - –∞–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π
                """
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def idea_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /idea - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ—é: `/idea \"–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è\"`")
            return
        
        idea_text = " ".join(context.args)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–¥–µ—é –≤ Notion
            idea_data = {
                "name": f"–ò–¥–µ—è: {idea_text[:50]}...",
                "content": idea_text,
                "date": datetime.now().isoformat(),
                "status": "–ù–æ–≤–∞—è"
            }
            
            idea = await self.notion.create_material(idea_data)
            
            if idea:
                response = f"""
üí° **–ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion**

üí≠ **–¢–µ–∫—Å—Ç:** {idea_text}
üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí° **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/list materials` - –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ `/search "{idea_text[:20]}"` - –ø–æ–∏—Å–∫
                """
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def overview_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /overview - –æ–±–∑–æ—Ä –¥–Ω—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            tasks = await self.todoist.get_tasks()
            today_tasks = [t for t in tasks if t.due_date and t.due_date.date() == datetime.now().date()]
            completed_today = [t for t in tasks if t.completed_at and t.completed_at.date() == datetime.now().date()]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Notion
            notion_stats = await self._get_notion_stats()
            
            response = f"""
üìä **–û–±–∑–æ—Ä –¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}**

üìã **Todoist:**
‚Ä¢ –ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_tasks)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {len(completed_today)}
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([t for t in tasks if not t.completed_at])}

üìö **Notion:**
{notion_stats}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ {'üéâ –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!' if len(completed_today) >= 3 else 'üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞—á'}
‚Ä¢ {'üî• –ü—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ!' if '–ü—Ä–∏–≤—ã—á–∫–∏' in notion_stats and '0' not in notion_stats else 'üîÑ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏'}
            """
            
            keyboard = [
                [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="list_tasks")],
                [InlineKeyboardButton("üß† –†–µ—Ñ–ª–µ–∫—Å–∏—è", callback_data="add_reflection")],
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="detailed_analytics")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def insights_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /insights - –∏–Ω—Å–∞–π—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            tasks = await self.todoist.get_tasks()
            completed_tasks = [t for t in tasks if t.completed_at]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            completion_rate = len(completed_tasks) / len(tasks) * 100 if tasks else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = []
            if completion_rate > 80:
                patterns.append("üéØ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            elif completion_rate > 60:
                patterns.append("üìà –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            else:
                patterns.append("üìù –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
            high_priority_completed = len([t for t in completed_tasks if t.priority == TaskPriority.HIGH])
            if high_priority_completed > 0:
                patterns.append("üî• –§–æ–∫—É—Å –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö")
            
            response = f"""
üß† **–ò–Ω—Å–∞–π—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**

üìä **–ú–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_tasks)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%

üéØ **–ü–∞—Ç—Ç–µ—Ä–Ω—ã:**
{chr(10).join(f"‚Ä¢ {pattern}" for pattern in patterns)}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ {'üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ü–µ–ª–∏' if completion_rate > 80 else 'üìù –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–µ–ª–∫–∏–µ'}
‚Ä¢ {'‚è∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É Pomodoro' if completion_rate < 50 else 'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏'}
            """
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def progress_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /progress - –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            tasks = await self.todoist.get_tasks()
            week_ago = datetime.now() - timedelta(days=7)
            
            week_tasks = [t for t in tasks if t.created_at >= week_ago]
            week_completed = [t for t in week_tasks if t.completed_at]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_progress = {}
            for task in week_completed:
                day = task.completed_at.date()
                daily_progress[day] = daily_progress.get(day, 0) + 1
            
            response = f"""
üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len(week_tasks)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(week_completed)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {len(week_completed) / 7:.1f} –∑–∞–¥–∞—á/–¥–µ–Ω—å

üìÖ **–ü–æ –¥–Ω—è–º:**
            """
            
            for i in range(7):
                day = (datetime.now() - timedelta(days=i)).date()
                count = daily_progress.get(day, 0)
                emoji = "üî•" if count >= 3 else "‚úÖ" if count >= 1 else "üìù"
                response += f"\n{emoji} {day.strftime('%d.%m')}: {count} –∑–∞–¥–∞—á"
            
            response += f"""

üéØ **–¢—Ä–µ–Ω–¥—ã:**
‚Ä¢ {'üìà –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç' if len(week_completed) > len(week_tasks) * 0.7 else 'üìâ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ñ–æ–∫—É—Å–∞'}
‚Ä¢ {'üî• –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–µ–º–ø' if len(set(daily_progress.keys())) >= 5 else 'üìù –ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞'}
            """
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def recommendations_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /recommendations - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            tasks = await self.todoist.get_tasks()
            overdue_tasks = [t for t in tasks if t.due_date and t.due_date.date() < datetime.now().date() and not t.completed_at]
            high_priority_tasks = [t for t in tasks if t.priority == TaskPriority.HIGH and not t.completed_at]
            
            recommendations = []
            
            if overdue_tasks:
                recommendations.append(f"‚ö†Ô∏è **{len(overdue_tasks)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á** - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")
            
            if high_priority_tasks:
                recommendations.append(f"üî• **{len(high_priority_tasks)} –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á** - —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö")
            
            if len(tasks) > 20:
                recommendations.append("üìù **–ú–Ω–æ–≥–æ –∑–∞–¥–∞—á** - —Ä–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –Ω–∞ –º–µ–ª–∫–∏–µ")
            
            if not recommendations:
                recommendations.append("üéâ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
            
            response = f"""
üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**

{chr(10).join(recommendations)}

üéØ **–î–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ `/tasks` - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
‚Ä¢ `/todo "–≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞"` - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
‚Ä¢ `/reflection "–º—ã—Å–ª–∏"` - –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
‚Ä¢ `/insights` - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            """
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def sync_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /sync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"""
        try:
            response = "üîÑ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º...**\n\n"
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Todoist
            tasks = await self.todoist.get_tasks()
            response += f"‚úÖ Todoist: {len(tasks)} –∑–∞–¥–∞—á\n"
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Notion
            notion_stats = await self._get_notion_stats()
            response += f"‚úÖ Notion: –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
            
            response += f"""
üîÑ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ Todoist: {len(tasks)} –∑–∞–¥–∞—á
‚Ä¢ Notion: –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã

üí° **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
‚Ä¢ `/overview` - –æ–±–∑–æ—Ä –¥–Ω—è
‚Ä¢ `/insights` - –∏–Ω—Å–∞–π—Ç—ã
‚Ä¢ `/recommendations` - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            """
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    async def validate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /validate - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            response = "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...**\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Todoist
            try:
                tasks = await self.todoist.get_tasks()
                response += f"‚úÖ Todoist: {len(tasks)} –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ\n"
            except Exception as e:
                response += f"‚ùå Todoist: –æ—à–∏–±–∫–∞ - {str(e)}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Notion
            try:
                notion_stats = await self._get_notion_stats()
                response += f"‚úÖ Notion: –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã\n"
            except Exception as e:
                response += f"‚ùå Notion: –æ—à–∏–±–∫–∞ - {str(e)}\n"
            
            response += f"""
üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:**

{response}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            """
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    
    async def list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø: `/list tasks`, `/list habits`, `/list reflections`")
            return
        
        list_type = context.args[0].lower()
        
        try:
            if list_type == "tasks":
                tasks = await self.todoist.get_tasks()
                response = f"üìã **–ó–∞–¥–∞—á–∏ –≤ Todoist ({len(tasks)}):**\n\n"
                
                for i, task in enumerate(tasks[:10], 1):
                    status = "‚úÖ" if task.completed_at else "üîÑ"
                    priority = {"high": "üî¥", "normal": "üü°", "low": "üü¢"}.get(task.priority.value, "‚ö™")
                    response += f"{i}. {status} {priority} {task.content}\n   ID: `{task.id}`\n"
                
                if len(tasks) > 10:
                    response += f"\n... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
            
            elif list_type == "habits":
                habits = await self.notion.list_habits()
                response = f"üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏ –≤ Notion ({len(habits)}):**\n\n"
                
                for i, habit in enumerate(habits[:10], 1):
                    response += f"{i}. {habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                
                if len(habits) > 10:
                    response += f"\n... –∏ –µ—â–µ {len(habits) - 10} –ø—Ä–∏–≤—ã—á–µ–∫"
            
            elif list_type == "reflections":
                reflections = await self.notion.list_reflections()
                response = f"üß† **–†–µ—Ñ–ª–µ–∫—Å–∏–∏ –≤ Notion ({len(reflections)}):**\n\n"
                
                for i, reflection in enumerate(reflections[:10], 1):
                    response += f"{i}. {reflection.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                
                if len(reflections) > 10:
                    response += f"\n... –∏ –µ—â–µ {len(reflections) - 10} —Ä–µ—Ñ–ª–µ–∫—Å–∏–π"
            
            else:
                response = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {list_type}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: tasks, habits, reflections"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ {list_type}: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: `/search \"–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\"`")
            return
        
        query = " ".join(context.args)
        
        try:
            response = f"üîç **–ü–æ–∏—Å–∫: \"{query}\"**\n\n"
            
            # –ò—â–µ–º –≤ Todoist
            tasks = await self.todoist.get_tasks()
            matching_tasks = [t for t in tasks if query.lower() in t.content.lower()]
            
            if matching_tasks:
                response += f"üìã **–ù–∞–π–¥–µ–Ω–æ –≤ Todoist ({len(matching_tasks)}):**\n"
                for i, task in enumerate(matching_tasks[:5], 1):
                    response += f"{i}. {task.content}\n   ID: `{task.id}`\n"
            else:
                response += "üìã **–í Todoist –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n"
            
            # –ò—â–µ–º –≤ Notion (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try:
                notion_results = await self.notion.search(query)
                if notion_results:
                    response += f"\nüìö **–ù–∞–π–¥–µ–Ω–æ –≤ Notion ({len(notion_results)}):**\n"
                    for i, result in enumerate(notion_results[:5], 1):
                        response += f"{i}. {result.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                else:
                    response += "\nüìö **–í Notion –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n"
            except:
                response += "\nüìö **–ü–æ–∏—Å–∫ –≤ Notion –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        try:
            if data == "create_task":
                await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/todo \"—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏\"`")
            
            elif data == "overview":
                await self.overview_command(update, context)
            
            elif data == "insights":
                await self.insights_command(update, context)
            
            elif data == "sync":
                await self.sync_command(update, context)
            
            elif data == "list_tasks":
                await self.tasks_command(update, context)
            
            elif data == "today_tasks":
                tasks = await self.todoist.get_tasks()
                today_tasks = [t for t in tasks if t.due_date and t.due_date.date() == datetime.now().date()]
                
                response = f"üìÖ **–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({len(today_tasks)}):**\n\n"
                for i, task in enumerate(today_tasks, 1):
                    response += f"{i}. {task.content}\n   ID: `{task.id}`\n"
                
                await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
            
            elif data == "overdue_tasks":
                tasks = await self.todoist.get_tasks()
                overdue_tasks = [t for t in tasks if t.due_date and t.due_date.date() < datetime.now().date() and not t.completed_at]
                
                response = f"‚ö†Ô∏è **–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(overdue_tasks)}):**\n\n"
                for i, task in enumerate(overdue_tasks, 1):
                    response += f"{i}. {task.content}\n   ID: `{task.id}`\n"
                
                await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
            
            elif data.startswith("complete_"):
                task_id = data.split("_")[1]
                success = await self.todoist.complete_task(task_id)
                if success:
                    await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                else:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")
            
            elif data.startswith("delete_"):
                task_id = data.split("_")[1]
                success = await self.todoist.delete_task(task_id)
                if success:
                    await query.edit_message_text(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!")
                else:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")
            
            elif data.startswith("context_"):
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                new_context = data.split("_")[1]
                if user_id in self.user_sessions:
                    self.user_sessions[user_id].current_context = new_context
                    session_id = self.user_sessions[user_id].session_id
                    await self.llm_service.switch_context(session_id, new_context)
                    
                    context_names = {
                        "work": "üíº –†–∞–±–æ—á–∏–π",
                        "home": "üè† –î–æ–º–∞—à–Ω–∏–π",
                        "general": "üåê –û–±—â–∏–π"
                    }
                    
                    await query.edit_message_text(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {context_names[new_context]}")
            
            else:
                await query.edit_message_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ —Å AI"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = UserSession(user_id=user_id)
        
        message = update.message.text
        await self._handle_chat_message(update, message)

    async def _handle_chat_message(self, update: Update, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ —Å AI"""
        user_id = update.effective_user.id
        current_context = self.user_sessions[user_id].current_context
        session_id = self.user_sessions[user_id].session_id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        await update.message.reply_chat_action("typing")
        
        try:
            async with self.llm_service:
                response = await self.llm_service.generate_response(
                    prompt=message,
                    context=current_context,
                    user_id=str(user_id),
                    session_id=session_id,
                    use_notion_context=True
                )
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å AI: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    async def run(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.is_initialized:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
enhanced_bot = EnhancedTelegramBot()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = EnhancedTelegramBot()
    bot.run()

if __name__ == "__main__":
    main() 