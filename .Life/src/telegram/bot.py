import os
import asyncio
import logging
from typing import Dict, List
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from src.agents.agent_core import agent_core

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USERS = [int(x.strip()) for x in os.getenv("ALLOWED_TELEGRAM_USERS", "").split(",") if x.strip()]

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
AVAILABLE_AGENTS = [
    "Product Manager",
    "Developer", 
    "LLM Researcher",
    "DevOps",
    "QA",
    "Support",
    "Growth/Marketing",
    "Meta-Agent"
]

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self._setup_handlers()
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏
        self.application.add_handler(CommandHandler("agents", self.agents_command))
        self.application.add_handler(CommandHandler("ask", self.ask_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("cache", self.cache_command))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CommandHandler("dbs", self.databases_command))
        self.application.add_handler(CommandHandler("db_info", self.db_info_command))
        self.application.add_handler(CommandHandler("db_create", self.db_create_command))
        self.application.add_handler(CommandHandler("db_clean", self.db_clean_command))
        self.application.add_handler(CommandHandler("agent_add", self.agent_add_command))
        self.application.add_handler(CommandHandler("agent_edit", self.agent_edit_command))
        self.application.add_handler(CommandHandler("agent_delete", self.agent_delete_command))
        self.application.add_handler(CommandHandler("system", self.system_command))
        self.application.add_handler(CommandHandler("backup", self.backup_command))
        self.application.add_handler(CommandHandler("restore", self.restore_command))
        self.application.add_handler(CommandHandler("optimize", self.optimize_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        user_id = update.effective_user.id
        is_admin = self.is_user_admin(user_id)
        
        welcome_text = f"""
ü§ñ **Notion-Telegram-LLM Integration**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!

{'üëë **–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**' if is_admin else 'üë§ **–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**'}

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/agents` - –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ `/ask [–∞–≥–µ–Ω—Ç] [–≤–æ–ø—Ä–æ—Å]` - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/cache` - –ö—ç—à

{'**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**' if is_admin else ''}
{'‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' if is_admin else ''}
{'‚Ä¢ `/dbs` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö' if is_admin else ''}
{'‚Ä¢ `/system` - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' if is_admin else ''}

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/ask Product Manager –ö–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏?`
‚Ä¢ `/ask Developer –ö–∞–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—ã–±—Ä–∞—Ç—å?`
        """
        
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        is_admin = self.is_user_admin(update.effective_user.id)
        
        help_text = """
üìö **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/agents` - –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ `/cache` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
‚Ä¢ `/optimize` - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏:**
‚Ä¢ `/ask [–∞–≥–µ–Ω—Ç] [–≤–æ–ø—Ä–æ—Å]` - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/ask Product Manager –ö–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏?`
‚Ä¢ `/ask Developer –ö–∞–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—ã–±—Ä–∞—Ç—å?`
        """
        
        if is_admin:
            admin_help = """

üëë **–ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:**

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ `/dbs` - –û–±–∑–æ—Ä –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/db_info [–±–∞–∑–∞]` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ
‚Ä¢ `/db_create [–±–∞–∑–∞]` - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É
‚Ä¢ `/db_clean [–±–∞–∑–∞]` - –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏:**
‚Ä¢ `/agent_add [—Ä–æ–ª—å] [–ø—Ä–æ–º–ø—Ç]` - –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
‚Ä¢ `/agent_edit [—Ä–æ–ª—å] [–Ω–æ–≤—ã–π_–ø—Ä–æ–º–ø—Ç]` - –ò–∑–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
‚Ä¢ `/agent_delete [—Ä–æ–ª—å]` - –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞

**–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/system` - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ `/backup` - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
‚Ä¢ `/restore` - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

**–ü—Ä–∏–º–µ—Ä—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `/db_info rituals` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ —Ä–∏—Ç—É–∞–ª–æ–≤
‚Ä¢ `/agent_add "New Agent" "–¢—ã –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç..."` - –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
‚Ä¢ `/db_clean actions` - –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∑–∞–¥–∞—á–∞—Ö
            """
            help_text += admin_help
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

    async def agents_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /agents"""
        if not self.is_user_allowed(update.effective_user.id):
            return
            
        agents_text = "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –∞–≥–µ–Ω—Ç—ã:**\n\n"
        
        for i, agent in enumerate(AVAILABLE_AGENTS, 1):
            agents_text += f"{i}. **{agent}**\n"
        
        agents_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ask [–∞–≥–µ–Ω—Ç] [–≤–æ–ø—Ä–æ—Å]` –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º."
        
        keyboard = []
        for agent in AVAILABLE_AGENTS:
            keyboard.append([InlineKeyboardButton(f"üí¨ {agent}", callback_data=f"ask_{agent}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(agents_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask"""
        if not self.is_user_allowed(update.effective_user.id):
            return
            
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/ask [–∞–≥–µ–Ω—Ç] [–≤–æ–ø—Ä–æ—Å]`\n"
                "–ü—Ä–∏–º–µ—Ä: `/ask \"Product Manager\" \"–ö–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏?\"`",
                parse_mode='Markdown'
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å
        agent_name = context.args[0].strip('"')
        question = ' '.join(context.args[1:])
        
        if agent_name not in AVAILABLE_AGENTS:
            await update.message.reply_text(
                f"‚ùå –ê–≥–µ–Ω—Ç '{agent_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /agents –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."
            )
            return
        
        await self.process_agent_request(update, context, agent_name, question)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.is_user_allowed(update.effective_user.id):
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É
        if update.message.reply_to_message and update.message.reply_to_message.from_user.is_bot:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Meta-Agent –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            agent_name = "Meta-Agent"
            question = update.message.text
            
            await self.process_agent_request(update, context, agent_name, question)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
            keyboard = []
            for agent in AVAILABLE_AGENTS:
                keyboard.append([InlineKeyboardButton(f"üí¨ {agent}", callback_data=f"ask_{agent}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:",
                reply_markup=reply_markup
            )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "admin_dbs":
            await self._handle_admin_dbs(query)
        elif query.data == "admin_agents":
            await self._handle_admin_agents(query)
        elif query.data == "admin_stats":
            await self._handle_admin_stats(query)
        elif query.data == "admin_system":
            await self._handle_admin_system(query)
        elif query.data == "admin_backup":
            await self._handle_admin_backup(query)
        elif query.data == "admin_optimize":
            await self._handle_admin_optimize(query)
        elif query.data == "admin_main":
            await self._handle_admin_main(query)
        elif query.data.startswith("ask_"):
            agent_name = query.data[4:]  # –£–±–∏—Ä–∞–µ–º "ask_"
            await query.edit_message_text(
                f"üí¨ –í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: **{agent_name}**\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
                parse_mode='Markdown'
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_agent'] = agent_name

    async def _handle_admin_dbs(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        dbs_info = await self._get_databases_info()
        
        text = "üóÑÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•**\n\n"
        
        for db_name, info in dbs_info.items():
            status = "‚úÖ" if info['exists'] else "‚ùå"
            text += f"{status} **{db_name}**: {info['description']}\n"
            if info['exists']:
                text += f"   üìä –ó–∞–ø–∏—Å–µ–π: {info['count']}\n"
            text += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_agents(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
        
        text = "ü§ñ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò**\n\n"
        
        if prompts:
            text += f"**–ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤:** {len(prompts)}\n\n"
            
            for role, prompt in prompts.items():
                text += f"üìù **{role}**\n"
                text += f"   –î–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        else:
            text += "‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_stats(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            from src.utils.performance_monitor import performance_monitor
            
            if performance_monitor:
                stats = performance_monitor.get_performance_stats(days=7)
                
                if "error" not in stats:
                    text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
                    text += f"**–û–ø–µ—Ä–∞—Ü–∏–∏:** {stats['total_operations']}\n"
                    text += f"**–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {stats['success_rate']:.1%}\n"
                    text += f"**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:** {stats['avg_duration']:.2f}—Å\n"
                    text += f"**–¢–æ–∫–µ–Ω—ã:** {stats['total_tokens']:,}\n"
                    text += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${stats['total_cost']:.6f}\n"
                    text += f"**–ö—ç—à:** {stats['cache_hit_rate']:.1%}\n"
                else:
                    text = f"‚ùå {stats['error']}"
            else:
                text = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_system(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        system_info = await self._get_system_info()
        
        text = "‚öôÔ∏è **–°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò**\n\n"
        
        for key, value in system_info.items():
            text += f"**{key}:** {value}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_backup(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
            
            import json
            from datetime import datetime
            
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "prompts": prompts,
                "system_info": await self._get_system_info()
            }
            
            backup_file = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            text = f"‚úÖ **–†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø –°–û–ó–î–ê–ù–ê**\n\n–§–∞–π–ª: {backup_file}\n–ê–≥–µ–Ω—Ç–æ–≤: {len(prompts)}"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_optimize(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            from src.utils.performance_monitor import performance_monitor
            
            if performance_monitor:
                recommendations = performance_monitor.get_optimization_recommendations()
                
                text = "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò**\n\n"
                
                for rec in recommendations:
                    text += f"‚Ä¢ {rec}\n"
            else:
                text = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_main(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_dbs"),
                InlineKeyboardButton("ü§ñ –ê–≥–µ–Ω—Ç—ã", callback_data="admin_agents")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
            ],
            [
                InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_backup"),
                InlineKeyboardButton("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="admin_optimize")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üëë **–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    async def process_agent_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE, agent_name: str, question: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–≥–µ–Ω—Ç—É"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                f"ü§ñ **{agent_name}** –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
                parse_mode='Markdown'
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á–∏
            model_type = await agent_core.get_optimal_model_for_task(agent_name, "medium")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
            context_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
            response = await agent_core.get_agent_response(agent_name, context_info, question, model_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            model_used = agent_core.models.get(model_type, "unknown")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            await agent_core.log_agent_interaction(agent_name, question, response, True, model_used)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
            await processing_msg.edit_text(
                f"ü§ñ **{agent_name}** –æ—Ç–≤–µ—á–∞–µ—Ç (–º–æ–¥–µ–ª—å: {model_used}):\n\n{response}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–≥–µ–Ω—Ç—É: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            await update.message.reply_text(
                "üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...",
                parse_mode='Markdown'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await agent_core.print_performance_report(days=7)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if hasattr(agent_core, 'performance_monitor') and agent_core.performance_monitor:
                recommendations = agent_core.performance_monitor.get_optimization_recommendations()
                
                if recommendations:
                    rec_text = "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:\n"
                    for rec in recommendations:
                        rec_text += f"‚Ä¢ {rec}\n"
                    
                    await update.message.reply_text(rec_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            )

    async def cache_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        try:
            from src.utils.performance_monitor import cache_manager
            
            if cache_manager:
                stats = cache_manager.get_stats()
                
                cache_text = f"""
üíæ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê

üìä –†–∞–∑–º–µ—Ä: {stats['size']}/{stats['max_size']}
üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats['utilization']:.1%}
‚è∞ TTL: {stats['ttl_hours']} —á–∞—Å–æ–≤
                """
                
                await update.message.reply_text(cache_text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {str(e)}"
            )

    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_dbs"),
                InlineKeyboardButton("ü§ñ –ê–≥–µ–Ω—Ç—ã", callback_data="admin_agents")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
            ],
            [
                InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_backup"),
                InlineKeyboardButton("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="admin_optimize")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëë **–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def databases_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        dbs_info = await self._get_databases_info()
        
        text = "üóÑÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•**\n\n"
        
        for db_name, info in dbs_info.items():
            status = "‚úÖ" if info['exists'] else "‚ùå"
            text += f"{status} **{db_name}**: {info['description']}\n"
            if info['exists']:
                text += f"   üìä –ó–∞–ø–∏—Å–µ–π: {info['count']}\n"
            text += "\n"
        
        text += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        text += "‚Ä¢ `/db_info [–±–∞–∑–∞]` - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        text += "‚Ä¢ `/db_create [–±–∞–∑–∞]` - –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É\n"
        text += "‚Ä¢ `/db_clean [–±–∞–∑–∞]` - –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def db_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: `/db_info [–±–∞–∑–∞]`")
            return
        
        db_name = context.args[0].lower()
        info = await self._get_database_info(db_name)
        
        if not info:
            await update.message.reply_text(f"‚ùå –ë–∞–∑–∞ '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        text = f"üìä **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï: {db_name.upper()}**\n\n"
        text += f"**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if info['exists'] else '‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}\n"
        text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {info['description']}\n"
        
        if info['exists']:
            text += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {info['count']}\n"
            text += f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {info['last_update']}\n"
            text += f"**–ü–æ–ª—è:** {', '.join(info['fields'])}\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def db_create_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: `/db_create [–±–∞–∑–∞]`")
            return
        
        db_name = context.args[0].lower()
        
        try:
            await update.message.reply_text(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã '{db_name}'...")
            await update.message.reply_text(f"‚úÖ –ë–∞–∑–∞ '{db_name}' –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã: {str(e)}")
    
    async def db_clean_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: `/db_clean [–±–∞–∑–∞]`")
            return
        
        db_name = context.args[0].lower()
        
        try:
            await update.message.reply_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ '{db_name}'...")
            await update.message.reply_text(f"‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ '{db_name}' –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    
    async def agent_add_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∏ –ø—Ä–æ–º–ø—Ç: `/agent_add [—Ä–æ–ª—å] [–ø—Ä–æ–º–ø—Ç]`")
            return
        
        role = context.args[0]
        prompt = " ".join(context.args[1:])
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Notion
            success = await agent_core.create_notion_record(
                db_name="agent_prompts",
                title=f"–ü—Ä–æ–º–ø—Ç {role}",
                category=role,
                additional_props={
                    "–ü—Ä–æ–º–ø—Ç": {"rich_text": [{"text": {"content": prompt}}]},
                    "–ú–∏—Å—Å–∏—è": {"rich_text": [{"text": {"content": f"–ê–≥–µ–Ω—Ç {role}"}}]},
                    "–°—Ç–∞—Ç—É—Å": {"select": {"name": "–ê–∫—Ç–∏–≤–µ–Ω"}},
                    "–í–µ—Ä—Å–∏—è": {"number": 1}
                }
            )
            
            if success:
                await update.message.reply_text(f"‚úÖ –ê–≥–µ–Ω—Ç '{role}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                await agent_core.load_prompts_from_notion(force_refresh=True)
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞ '{role}'")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def agent_edit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: `/agent_edit [—Ä–æ–ª—å] [–Ω–æ–≤—ã–π_–ø—Ä–æ–º–ø—Ç]`")
            return
        
        role = context.args[0]
        new_prompt = " ".join(context.args[1:])
        
        try:
            await update.message.reply_text(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ '{role}'...")
            await update.message.reply_text(f"‚úÖ –ê–≥–µ–Ω—Ç '{role}' –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def agent_delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞: `/agent_delete [—Ä–æ–ª—å]`")
            return
        
        role = context.args[0]
        
        try:
            await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ '{role}'...")
            await update.message.reply_text(f"‚úÖ –ê–≥–µ–Ω—Ç '{role}' –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
    
    async def system_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        system_info = await self._get_system_info()
        
        text = "‚öôÔ∏è **–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n"
        
        for key, value in system_info.items():
            text += f"**{key}:** {value}\n"
        
        text += "\n**–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
        text += "‚Ä¢ `/backup` - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
        text += "‚Ä¢ `/restore` - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n"
        text += "‚Ä¢ `/cache` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤
            prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
            
            import json
            from datetime import datetime
            
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "prompts": prompts,
                "system_info": await self._get_system_info()
            }
            
            backup_file = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            await update.message.reply_text(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
    
    async def restore_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: `/restore [—Ñ–∞–π–ª]`")
            return
        
        backup_file = context.args[0]
        
        try:
            await update.message.reply_text(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ '{backup_file}'...")
            await update.message.reply_text(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ '{backup_file}' –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
    
    async def optimize_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            from src.utils.performance_monitor import performance_monitor
            
            if performance_monitor:
                recommendations = performance_monitor.get_optimization_recommendations()
                
                text = "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò**\n\n"
                
                for rec in recommendations:
                    text += f"‚Ä¢ {rec}\n"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                text += "\n**–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:**\n"
                text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                text += "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á\n"
                text += "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ max_tokens –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏\n"
                text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
                
                await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _get_databases_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dbs = {
            "rituals": {"description": "–®–∞–±–ª–æ–Ω—ã –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏", "exists": False, "count": 0},
            "habits": {"description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫", "exists": False, "count": 0},
            "reflection": {"description": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", "exists": False, "count": 0},
            "guides": {"description": "–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "exists": False, "count": 0},
            "actions": {"description": "–ó–∞–¥–∞—á–∏ –∏ –ø–ª–∞–Ω—ã", "exists": False, "count": 0},
            "terms": {"description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "exists": False, "count": 0},
            "materials": {"description": "–ú–µ–¥–∏–∞ –∏ —Ñ–∞–π–ª—ã", "exists": False, "count": 0},
            "agent_prompts": {"description": "–ü—Ä–æ–º–ø—Ç—ã AI –∞–≥–µ–Ω—Ç–æ–≤", "exists": False, "count": 0}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑
        for db_name in dbs.keys():
            try:
                records = await agent_core.get_notion_records(db_name, {"page_size": 1})
                dbs[db_name]["exists"] = True
                dbs[db_name]["count"] = len(records) if records else 0
            except:
                dbs[db_name]["exists"] = False
                dbs[db_name]["count"] = 0
        
        return dbs
    
    async def _get_database_info(self, db_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            records = await agent_core.get_notion_records(db_name)
            
            return {
                "exists": True,
                "count": len(records),
                "description": f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name}",
                "last_update": "–ù–µ–¥–∞–≤–Ω–æ",
                "fields": ["–ü–æ–ª–µ1", "–ü–æ–ª–µ2"]  # –£–ø—Ä–æ—â—ë–Ω–Ω–æ
            }
        except:
            return None
    
    async def _get_system_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        import platform
        try:
            import psutil
            cpu_percent = f"{psutil.cpu_percent()}%"
            memory_percent = f"{psutil.virtual_memory().percent}%"
            disk_percent = f"{psutil.disk_usage('.').percent}%"
        except ImportError:
            cpu_percent = "N/A"
            memory_percent = "N/A"
            disk_percent = "N/A"
        
        return {
            "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": platform.platform(),
            "Python": platform.python_version(),
            "CPU": cpu_percent,
            "–ü–∞–º—è—Ç—å": memory_percent,
            "–î–∏—Å–∫": disk_percent,
            "–ê–≥–µ–Ω—Ç—ã": len(await agent_core.load_prompts_from_notion()) if agent_core else 0,
            "–ö—ç—à": "N/A"  # –£–ø—Ä–æ—â—ë–Ω–Ω–æ
        }

    def is_user_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return user_id in ALLOWED_USERS

    def is_user_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        admin_users_str = os.getenv("TELEGRAM_ADMIN_USERS", "")
        admin_users = {int(user_id.strip()) for user_id in admin_users_str.split(",") if user_id.strip()}
        return user_id in admin_users

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    bot = TelegramBot()
    bot.run()

if __name__ == "__main__":
    asyncio.run(main()) 