import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
from dotenv import load_dotenv
from datetime import datetime, UTC

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
from src.agents.agent_core import agent_core
from src.notion.universal_repository import UniversalNotionRepository
from src.core.config import Settings

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AdminBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.allowed_users = self._parse_allowed_users()
        self.admin_users = self._parse_admin_users()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        self.settings = Settings()
        self.notion_repo = UniversalNotionRepository(self.settings)
        
        self.application = Application.builder().token(self.token).build()
        self._setup_handlers()
    
    def _parse_allowed_users(self) -> set:
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_str = os.getenv("TELEGRAM_ALLOWED_USERS", "")
        return {int(user_id.strip()) for user_id in users_str.split(",") if user_id.strip()}
    
    def _parse_admin_users(self) -> set:
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        admins_str = os.getenv("TELEGRAM_ADMIN_USERS", "")
        return {int(user_id.strip()) for user_id in admins_str.split(",") if user_id.strip()}
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
        self.application.add_handler(CommandHandler("test", self.test_command))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        self.application.add_handler(CommandHandler("dbs", self.databases_command))
        self.application.add_handler(CommandHandler("db_info", self.db_info_command))
        self.application.add_handler(CommandHandler("db_create", self.db_create_command))
        self.application.add_handler(CommandHandler("db_clean", self.db_clean_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
        self.application.add_handler(CommandHandler("list", self.list_command))
        self.application.add_handler(CommandHandler("create", self.create_command))
        self.application.add_handler(CommandHandler("get", self.get_command))
        self.application.add_handler(CommandHandler("update", self.update_command))
        self.application.add_handler(CommandHandler("delete", self.delete_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("validate", self.validate_command))
        
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
        self.application.add_handler(CommandHandler("todo", self.todo_command))
        self.application.add_handler(CommandHandler("habit", self.habit_command))
        self.application.add_handler(CommandHandler("reflection", self.reflection_command))
        self.application.add_handler(CommandHandler("idea", self.idea_command))
        self.application.add_handler(CommandHandler("morning", self.morning_command))
        self.application.add_handler(CommandHandler("evening", self.evening_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("progress", self.progress_command))
        self.application.add_handler(CommandHandler("mood", self.mood_command))
        self.application.add_handler(CommandHandler("insights", self.insights_command))
        self.application.add_handler(CommandHandler("recommendations", self.recommendations_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏
        self.application.add_handler(CommandHandler("agents", self.agents_command))
        self.application.add_handler(CommandHandler("agent_add", self.agent_add_command))
        self.application.add_handler(CommandHandler("agent_edit", self.agent_edit_command))
        self.application.add_handler(CommandHandler("agent_delete", self.agent_delete_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.application.add_handler(CommandHandler("cache", self.cache_command))
        self.application.add_handler(CommandHandler("optimize", self.optimize_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.application.add_handler(CommandHandler("system", self.system_command))
        self.application.add_handler(CommandHandler("backup", self.backup_command))
        self.application.add_handler(CommandHandler("restore", self.restore_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Xiaomi Watch S
        self.application.add_handler(CommandHandler("watch_sync", self.watch_sync_command))
        self.application.add_handler(CommandHandler("watch_biometrics", self.watch_biometrics_command))
        self.application.add_handler(CommandHandler("watch_voice", self.watch_voice_command))
        self.application.add_handler(CommandHandler("watch_settings", self.watch_settings_command))
        self.application.add_handler(CommandHandler("watch_notification", self.watch_notification_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def is_user_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return user_id in self.allowed_users
    
    def is_user_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_users
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print(f"üîç –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.allowed_users}")
        print(f"üîç –ê–¥–º–∏–Ω—ã: {self.admin_users}")
        
        if not self.is_user_allowed(user_id):
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        is_admin = self.is_user_admin(user_id)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–∞–¥–º–∏–Ω' if is_admin else '–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
        
        welcome_text = f"""
ü§ñ **Notion-Telegram-LLM Admin Panel**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!

{'üëë **–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**' if is_admin else 'üë§ **–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**'}

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/agents` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/cache` - –ö—ç—à

{'**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**' if is_admin else ''}
{'‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' if is_admin else ''}
{'‚Ä¢ `/dbs` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö' if is_admin else ''}
{'‚Ä¢ `/system` - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' if is_admin else ''}
        """
        
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)
        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        is_admin = self.is_user_admin(update.effective_user.id)
        
        help_text = """
üìö **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/agents` - –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ `/cache` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
‚Ä¢ `/optimize` - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏:**
‚Ä¢ `/ask [–∞–≥–µ–Ω—Ç] [–≤–æ–ø—Ä–æ—Å]` - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É

**üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:**
‚Ä¢ `/todo [–∑–∞–¥–∞—á–∞]` - –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚Ä¢ `/habit [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
‚Ä¢ `/reflection [—Ç–µ–∫—Å—Ç]` - –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
‚Ä¢ `/idea [–∏–¥–µ—è]` - –ë—ã—Å—Ç—Ä–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é
‚Ä¢ `/morning` - –°–æ–∑–¥–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª
‚Ä¢ `/evening` - –°–æ–∑–¥–∞—Ç—å –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é

**üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã:**
‚Ä¢ `/progress` - –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
‚Ä¢ `/mood` - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
‚Ä¢ `/insights` - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
‚Ä¢ `/recommendations` - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Xiaomi Watch S:**
‚Ä¢ `/watch_sync` - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —á–∞—Å–∞–º–∏
‚Ä¢ `/watch_biometrics` - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/watch_voice` - –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ `/watch_settings` - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ `/watch_notification` - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:**
‚Ä¢ `/validate [table]` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ `/validate all` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
‚Ä¢ `/list [table] [limit]` - –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ `/create [table] [title] [description]` - –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
‚Ä¢ `/get [table] [id]` - –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
‚Ä¢ `/search [table] [query]` - –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ `/update [table] [id] [field] [value]` - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
‚Ä¢ `/delete [table] [id]` - –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:**
‚Ä¢ `rituals` - –†–∏—Ç—É–∞–ª—ã
‚Ä¢ `habits` - –ü—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ `reflections` - –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è
‚Ä¢ `guides` - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
‚Ä¢ `actions` - –î–µ–π—Å—Ç–≤–∏—è/–∑–∞–¥–∞—á–∏
‚Ä¢ `terms` - –¢–µ—Ä–º–∏–Ω—ã
‚Ä¢ `materials` - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã

**–ü—Ä–∏–º–µ—Ä—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/todo "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"` - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚Ä¢ `/habit "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"` - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
‚Ä¢ `/reflection "–°–µ–≥–æ–¥–Ω—è –±—ã–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å"` - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
‚Ä¢ `/morning` - —Å–æ–∑–¥–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª
‚Ä¢ `/progress` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ `/recommendations` - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        
        if is_admin:
            admin_help = """

üëë **–ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:**

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ `/dbs` - –û–±–∑–æ—Ä –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/db_info [–±–∞–∑–∞]` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ
‚Ä¢ `/db_create [–±–∞–∑–∞]` - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É
‚Ä¢ `/db_clean [–±–∞–∑–∞]` - –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏:**
‚Ä¢ `/agent_add [—Ä–æ–ª—å] [–ø—Ä–æ–º–ø—Ç]` - –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
‚Ä¢ `/agent_edit [—Ä–æ–ª—å] [–Ω–æ–≤—ã–π_–ø—Ä–æ–º–ø—Ç]` - –ò–∑–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
‚Ä¢ `/agent_delete [—Ä–æ–ª—å]` - –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞

**–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/system` - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ `/backup` - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
‚Ä¢ `/restore` - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

**–ü—Ä–∏–º–µ—Ä—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `/db_info rituals` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ —Ä–∏—Ç—É–∞–ª–æ–≤
‚Ä¢ `/agent_add "New Agent" "–¢—ã –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç..."` - –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
‚Ä¢ `/db_clean actions` - –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∑–∞–¥–∞—á–∞—Ö
            """
            help_text += admin_help
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not self.is_user_admin(user_id):
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–∞–Ω–µ–ª—å")
        
        keyboard = [
            [
                InlineKeyboardButton("üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_dbs"),
                InlineKeyboardButton("ü§ñ –ê–≥–µ–Ω—Ç—ã", callback_data="admin_agents")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
            ],
            [
                InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_backup"),
                InlineKeyboardButton("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="admin_optimize")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëë **–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        print(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def databases_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        dbs_info = await self._get_databases_info()
        
        text = "üóÑÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•**\n\n"
        
        for db_name, info in dbs_info.items():
            status = "‚úÖ" if info['exists'] else "‚ùå"
            text += f"{status} **{db_name}**: {info['description']}\n"
            if info['exists']:
                text += f"   üìä –ó–∞–ø–∏—Å–µ–π: {info['count']}\n"
            text += "\n"
        
        text += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        text += "‚Ä¢ `/db_info [–±–∞–∑–∞]` - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        text += "‚Ä¢ `/db_create [–±–∞–∑–∞]` - –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É\n"
        text += "‚Ä¢ `/db_clean [–±–∞–∑–∞]` - –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def db_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: `/db_info [–±–∞–∑–∞]`")
            return
        
        db_name = context.args[0].lower()
        info = await self._get_database_info(db_name)
        
        if not info:
            await update.message.reply_text(f"‚ùå –ë–∞–∑–∞ '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        text = f"üìä **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï: {db_name.upper()}**\n\n"
        text += f"**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if info['exists'] else '‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}\n"
        text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {info['description']}\n"
        
        if info['exists']:
            text += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {info['count']}\n"
            text += f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {info['last_update']}\n"
            text += f"**–ü–æ–ª—è:** {', '.join(info['fields'])}\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def agents_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        is_admin = self.is_user_admin(update.effective_user.id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
        prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
        
        text = "ü§ñ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò**\n\n"
        
        if prompts:
            text += f"**–ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤:** {len(prompts)}\n\n"
            
            for role, prompt in prompts.items():
                text += f"üìù **{role}**\n"
                text += f"   –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                text += f"   –ù–∞—á–∞–ª–æ: {prompt[:50]}...\n\n"
        else:
            text += "‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        if is_admin:
            text += "**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
            text += "‚Ä¢ `/agent_add [—Ä–æ–ª—å] [–ø—Ä–æ–º–ø—Ç]` - –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞\n"
            text += "‚Ä¢ `/agent_edit [—Ä–æ–ª—å] [–Ω–æ–≤—ã–π_–ø—Ä–æ–º–ø—Ç]` - –ò–∑–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞\n"
            text += "‚Ä¢ `/agent_delete [—Ä–æ–ª—å]` - –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def agent_add_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∏ –ø—Ä–æ–º–ø—Ç: `/agent_add [—Ä–æ–ª—å] [–ø—Ä–æ–º–ø—Ç]`")
            return
        
        role = context.args[0]
        prompt = " ".join(context.args[1:])
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Notion
            success = await agent_core.create_notion_record(
                db_name="agent_prompts",
                title=f"–ü—Ä–æ–º–ø—Ç {role}",
                category=role,
                additional_props={
                    "–ü—Ä–æ–º–ø—Ç": {"rich_text": [{"text": {"content": prompt}}]},
                    "–ú–∏—Å—Å–∏—è": {"rich_text": [{"text": {"content": f"–ê–≥–µ–Ω—Ç {role}"}}]},
                    "–°—Ç–∞—Ç—É—Å": {"select": {"name": "–ê–∫—Ç–∏–≤–µ–Ω"}},
                    "–í–µ—Ä—Å–∏—è": {"number": 1}
                }
            )
            
            if success:
                await update.message.reply_text(f"‚úÖ –ê–≥–µ–Ω—Ç '{role}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                await agent_core.load_prompts_from_notion(force_refresh=True)
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞ '{role}'")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ performance_monitor
        text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤
            prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
            text += f"**–ê–≥–µ–Ω—Ç–æ–≤:** {len(prompts)}\n"
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            import platform
            try:
                import psutil
                text += f"**CPU:** {psutil.cpu_percent()}%\n"
                text += f"**–ü–∞–º—è—Ç—å:** {psutil.virtual_memory().percent}%\n"
                text += f"**–î–∏—Å–∫:** {psutil.disk_usage('.').percent}%\n"
            except ImportError:
                text += "**CPU:** N/A\n"
                text += "**–ü–∞–º—è—Ç—å:** N/A\n"
                text += "**–î–∏—Å–∫:** N/A\n"
            
            text += f"**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {platform.platform()}\n"
            text += f"**Python:** {platform.python_version()}\n"
            
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    async def optimize_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        text = "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò**\n\n"
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "**–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:**\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        text += "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á\n"
        text += "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ max_tokens –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏\n"
        text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
        text += "‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenRouter –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def system_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        system_info = await self._get_system_info()
        
        text = "‚öôÔ∏è **–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n"
        
        for key, value in system_info.items():
            text += f"**{key}:** {value}\n"
        
        text += "\n**–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
        text += "‚Ä¢ `/backup` - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
        text += "‚Ä¢ `/restore` - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n"
        text += "‚Ä¢ `/cache` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤
            prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
            
            import json
            from datetime import datetime
            
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "prompts": prompts,
                "system_info": await self._get_system_info()
            }
            
            backup_file = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            await update.message.reply_text(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if query.data == "admin_dbs":
            await self._handle_admin_dbs(query)
        elif query.data == "admin_agents":
            await self._handle_admin_agents(query)
        elif query.data == "admin_stats":
            await self._handle_admin_stats(query)
        elif query.data == "admin_system":
            await self._handle_admin_system(query)
        elif query.data == "admin_backup":
            await self._handle_admin_backup(query)
        elif query.data == "admin_optimize":
            await self._handle_admin_optimize(query)
    
    async def _handle_admin_dbs(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        dbs_info = await self._get_databases_info()
        
        text = "üóÑÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•**\n\n"
        
        for db_name, info in dbs_info.items():
            status = "‚úÖ" if info['exists'] else "‚ùå"
            text += f"{status} **{db_name}**: {info['description']}\n"
            if info['exists']:
                text += f"   üìä –ó–∞–ø–∏—Å–µ–π: {info['count']}\n"
            text += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î", callback_data="admin_db_stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_agents(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
        prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
        
        text = "ü§ñ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò**\n\n"
        
        if prompts:
            text += f"**–ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤:** {len(prompts)}\n\n"
            
            for role, prompt in prompts.items():
                text += f"üìù **{role}**\n"
                text += f"   –î–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        else:
            text += "‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="admin_agent_add")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_stats(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤
            prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
            text += f"**–ê–≥–µ–Ω—Ç–æ–≤:** {len(prompts)}\n"
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            import platform
            try:
                import psutil
                text += f"**CPU:** {psutil.cpu_percent()}%\n"
                text += f"**–ü–∞–º—è—Ç—å:** {psutil.virtual_memory().percent}%\n"
                text += f"**–î–∏—Å–∫:** {psutil.disk_usage('.').percent}%\n"
            except ImportError:
                text += "**CPU:** N/A\n"
                text += "**–ü–∞–º—è—Ç—å:** N/A\n"
                text += "**–î–∏—Å–∫:** N/A\n"
            
            text += f"**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {platform.platform()}\n"
            text += f"**Python:** {platform.python_version()}\n"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_system(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        system_info = await self._get_system_info()
        
        text = "‚öôÔ∏è **–°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò**\n\n"
        
        for key, value in system_info.items():
            text += f"**{key}:** {value}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")],
            [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", callback_data="admin_backup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_backup(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            prompts = await agent_core.load_prompts_from_notion(force_refresh=True)
            
            import json
            from datetime import datetime
            
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "prompts": prompts,
                "system_info": await self._get_system_info()
            }
            
            backup_file = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            text = f"‚úÖ **–†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø –°–û–ó–î–ê–ù–ê**\n\n–§–∞–π–ª: {backup_file}\n–ê–≥–µ–Ω—Ç–æ–≤: {len(prompts)}"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _handle_admin_optimize(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.is_user_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        text = "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò**\n\n"
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "**–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:**\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        text += "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á\n"
        text += "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ max_tokens –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏\n"
        text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
        text += "‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenRouter –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _get_databases_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dbs = {
            "rituals": {"description": "–®–∞–±–ª–æ–Ω—ã –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏", "exists": False, "count": 0},
            "habits": {"description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫", "exists": False, "count": 0},
            "reflection": {"description": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", "exists": False, "count": 0},
            "guides": {"description": "–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "exists": False, "count": 0},
            "actions": {"description": "–ó–∞–¥–∞—á–∏ –∏ –ø–ª–∞–Ω—ã", "exists": False, "count": 0},
            "terms": {"description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "exists": False, "count": 0},
            "materials": {"description": "–ú–µ–¥–∏–∞ –∏ —Ñ–∞–π–ª—ã", "exists": False, "count": 0},
            "agent_prompts": {"description": "–ü—Ä–æ–º–ø—Ç—ã AI –∞–≥–µ–Ω—Ç–æ–≤", "exists": False, "count": 0}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑
        for db_name in dbs.keys():
            try:
                records = await agent_core.get_notion_records(db_name, {"page_size": 1})
                dbs[db_name]["exists"] = True
                dbs[db_name]["count"] = len(records) if records else 0
            except:
                dbs[db_name]["exists"] = False
                dbs[db_name]["count"] = 0
        
        return dbs
    
    async def _get_database_info(self, db_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            records = await agent_core.get_notion_records(db_name)
            
            return {
                "exists": True,
                "count": len(records),
                "description": f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name}",
                "last_update": "–ù–µ–¥–∞–≤–Ω–æ",
                "fields": ["–ü–æ–ª–µ1", "–ü–æ–ª–µ2"]  # –£–ø—Ä–æ—â—ë–Ω–Ω–æ
            }
        except:
            return None
    
    async def _get_system_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        import platform
        import psutil
        
        return {
            "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": platform.platform(),
            "Python": platform.python_version(),
            "CPU": f"{psutil.cpu_percent()}%",
            "–ü–∞–º—è—Ç—å": f"{psutil.virtual_memory().percent}%",
            "–î–∏—Å–∫": f"{psutil.disk_usage('.').percent}%",
            "–ê–≥–µ–Ω—Ç—ã": len(await agent_core.load_prompts_from_notion()) if agent_core else 0,
            "–ö—ç—à": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É"
        }
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message_text}")
        
        if not self.is_user_allowed(user_id):
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        await update.message.reply_text("üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π. /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def run(self):
        print("ü§ñ –ó–∞–ø—É—Å–∫ Admin Telegram –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await self.application.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)

    async def db_create_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: `/db_create [–±–∞–∑–∞]`")
            return
        
        db_name = context.args[0].lower()
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –≤ Notion
            await update.message.reply_text(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã '{db_name}'...")
            
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏
            await update.message.reply_text(f"‚úÖ –ë–∞–∑–∞ '{db_name}' –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã: {str(e)}")
    
    async def db_clean_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: `/db_clean [–±–∞–∑–∞]`")
            return
        
        db_name = context.args[0].lower()
        
        try:
            await update.message.reply_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ '{db_name}'...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            await update.message.reply_text(f"‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ '{db_name}' –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    
    async def agent_edit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: `/agent_edit [—Ä–æ–ª—å] [–Ω–æ–≤—ã–π_–ø—Ä–æ–º–ø—Ç]`")
            return
        
        role = context.args[0]
        new_prompt = " ".join(context.args[1:])
        
        try:
            await update.message.reply_text(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ '{role}'...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Notion
            await update.message.reply_text(f"‚úÖ –ê–≥–µ–Ω—Ç '{role}' –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def agent_delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞: `/agent_delete [—Ä–æ–ª—å]`")
            return
        
        role = context.args[0]
        
        try:
            await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ '{role}'...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Notion
            await update.message.reply_text(f"‚úÖ –ê–≥–µ–Ω—Ç '{role}' –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
    
    async def cache_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        text = "üíæ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–≠–®–ï–ú**\n\n"
        text += "**–°—Ç–∞—Ç—É—Å:** –ö—ç—à –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É\n"
        text += "**–§—É–Ω–∫—Ü–∏–∏:**\n"
        text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤\n"
        text += "‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤\n"
        text += "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
        text += "\n**–ö–æ–º–∞–Ω–¥—ã:**\n"
        text += "‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        text += "‚Ä¢ `/optimize` - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def restore_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: `/restore [—Ñ–∞–π–ª]`")
            return
        
        backup_file = context.args[0]
        
        try:
            await update.message.reply_text(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ '{backup_file}'...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            await update.message.reply_text(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ '{backup_file}' –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        print(f"üîç –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {user_id} ({user_name})")
        
        test_message = f"""
üß™ **–¢–ï–°–¢ –ë–û–¢–ê**

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})
üîß –í–µ—Ä—Å–∏—è: Admin Bot v1.0
‚è∞ –í—Ä–µ–º—è: {update.message.date}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
‚Ä¢ /test - –≠—Ç–æ—Ç —Ç–µ—Å—Ç
        """
        
        await update.message.reply_text(test_message, parse_mode=ParseMode.MARKDOWN)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    async def validate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: `/validate [table]` –∏–ª–∏ `/validate all`")
            return
        
        table_name = context.args[0].lower()
        
        try:
            if table_name == "all":
                await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
                results = []
                for table in ['rituals', 'habits', 'reflections', 'guides', 'actions', 'terms', 'materials']:
                    is_valid, message = await self.notion_repo.validate_database(table)
                    status = "‚úÖ" if is_valid else "‚ùå"
                    results.append(f"{status} {table}: {message}")
                
                response = "**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:**\n\n" + "\n".join(results)
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                is_valid, message = await self.notion_repo.validate_database(table_name)
                status = "‚úÖ" if is_valid else "‚ùå"
                response = f"**–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}:**\n\n{status} {message}"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")

    async def list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: `/list [table] [limit]`")
            return
        
        table_name = context.args[0].lower()
        limit = int(context.args[1]) if len(context.args) > 1 else 10
        
        try:
            await update.message.reply_text(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ {table_name}...")
            items = await self.notion_repo.list_items(table_name, limit=limit)
            
            if not items:
                await update.message.reply_text(f"üì≠ –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
                return
            
            response = f"**–°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ {table_name} ({len(items)}):**\n\n"
            for i, item in enumerate(items[:limit], 1):
                title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                status = item.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')
                response += f"{i}. **{title}** ({status})\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")

    async def create_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –¥–∞–Ω–Ω—ã–µ: `/create [table] [title] [description]`")
            return
        
        table_name = context.args[0].lower()
        title = context.args[1]
        description = " ".join(context.args[2:]) if len(context.args) > 2 else ""
        
        try:
            await update.message.reply_text(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ {table_name}...")
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            data = {
                'title': title,
                'description': description,
                'status': 'Active',
                'created_date': datetime.now(UTC)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            if table_name == 'rituals':
                data.update({
                    'category': 'General',
                    'frequency': 'Daily',
                    'priority': 'Medium'
                })
            elif table_name == 'habits':
                data.update({
                    'category': 'General',
                    'frequency': 'Daily',
                    'target_frequency': 7,
                    'current_frequency': 0
                })
            elif table_name == 'reflections':
                data.update({
                    'type': 'Daily',
                    'mood': 'Neutral'
                })
            elif table_name == 'guides':
                data.update({
                    'category': 'General',
                    'difficulty': 'Beginner',
                    'status': 'Draft'
                })
            elif table_name == 'actions':
                data.update({
                    'priority': 'Medium',
                    'category': 'General'
                })
            elif table_name == 'terms':
                data.update({
                    'category': 'General',
                    'mastery_level': 'Learning'
                })
            elif table_name == 'materials':
                data.update({
                    'type': 'Article',
                    'category': 'General',
                    'status': 'Active'
                })
            
            created_item = await self.notion_repo.create_item(table_name, data)
            
            if created_item:
                response = f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ {table_name}:\n\n**{created_item['title']}**\nID: `{created_item['id']}`"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ {table_name}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {str(e)}")

    async def get_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ ID: `/get [table] [id]`")
            return
        
        table_name = context.args[0].lower()
        item_id = context.args[1]
        
        try:
            await update.message.reply_text(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ {table_name}...")
            item = await self.notion_repo.get_item(table_name, item_id)
            
            if item:
                response = f"**–≠–ª–µ–º–µ–Ω—Ç –∏–∑ {table_name}:**\n\n"
                response += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {item.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                response += f"**ID:** `{item['id']}`\n"
                response += f"**–°—Ç–∞—Ç—É—Å:** {item.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                response += f"**–°–æ–∑–¥–∞–Ω:** {item.get('created_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                
                if item.get('description'):
                    response += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {item['description']}\n"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {table_name}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –∑–∞–ø—Ä–æ—Å: `/search [table] [query]`")
            return
        
        table_name = context.args[0].lower()
        query = " ".join(context.args[1:])
        
        try:
            await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫ –≤ {table_name}...")
            results = await self.notion_repo.search_items(table_name, query)
            
            if not results:
                await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {table_name}")
                return
            
            response = f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ {table_name} ({len(results)}):**\n\n"
            for i, item in enumerate(results[:10], 1):
                title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                response += f"{i}. **{title}**\n"
            
            if len(results) > 10:
                response += f"\n... –∏ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

    async def update_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if len(context.args) < 3:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, ID –∏ –¥–∞–Ω–Ω—ã–µ: `/update [table] [id] [field] [value]`")
            return
        
        table_name = context.args[0].lower()
        item_id = context.args[1]
        field = context.args[2]
        value = " ".join(context.args[3:]) if len(context.args) > 3 else ""
        
        try:
            await update.message.reply_text(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ {table_name}...")
            
            update_data = {field: value}
            updated_item = await self.notion_repo.update_item(table_name, item_id, update_data)
            
            if updated_item:
                response = f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –≤ {table_name}:\n\n**{updated_item['title']}**\n–ü–æ–ª–µ '{field}' –∏–∑–º–µ–Ω–µ–Ω–æ"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ {table_name}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    async def delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ ID: `/delete [table] [id]`")
            return
        
        table_name = context.args[0].lower()
        item_id = context.args[1]
        
        try:
            await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ {table_name}...")
            deleted = await self.notion_repo.delete_item(table_name, item_id)
            
            if deleted:
                await update.message.reply_text(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ {table_name}")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ {table_name}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
    async def todo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É: `/todo [–∑–∞–¥–∞—á–∞]`")
            return
        
        task_text = " ".join(context.args)
        
        try:
            await update.message.reply_text(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            
            task_data = {
                'title': task_text,
                'status': 'Pending',
                'priority': 'Medium',
                'category': 'General',
                'description': f"–ó–∞–¥–∞—á–∞: {task_text}",
                'tags': ['todo', 'quick'],
                'created_date': datetime.now(UTC)
            }
            
            created_task = await self.notion_repo.create_item('actions', task_data)
            
            if created_task:
                response = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n**{created_task['title']}**\nID: `{created_task['id']}`\n–°—Ç–∞—Ç—É—Å: {created_task.get('status', 'Pending')}"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

    async def habit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É: `/habit [–Ω–∞–∑–≤–∞–Ω–∏–µ]`")
            return
        
        habit_name = " ".join(context.args)
        
        try:
            await update.message.reply_text(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏...")
            
            habit_data = {
                'title': habit_name,
                'status': 'Active',
                'category': 'General',
                'frequency': 'Daily',
                'description': f"–ü—Ä–∏–≤—ã—á–∫–∞: {habit_name}",
                'tags': ['habit', 'quick'],
                'created_date': datetime.now(UTC),
                'target_frequency': 7,
                'current_frequency': 0
            }
            
            created_habit = await self.notion_repo.create_habit(habit_data)
            
            if created_habit:
                response = f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n**{created_habit['title']}**\nID: `{created_habit['id']}`\n–ß–∞—Å—Ç–æ—Ç–∞: {created_habit.get('frequency', 'Daily')}"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {str(e)}")

    async def reflection_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é: `/reflection [—Ç–µ–∫—Å—Ç]`")
            return
        
        reflection_text = " ".join(context.args)
        
        try:
            await update.message.reply_text(f"üí≠ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
            
            reflection_data = {
                'title': f"–†–µ—Ñ–ª–µ–∫—Å–∏—è {datetime.now().strftime('%d.%m.%Y')}",
                'type': 'Daily',
                'mood': 'Neutral',
                'content': reflection_text,
                'tags': ['reflection', 'quick'],
                'created_date': datetime.now(UTC)
            }
            
            created_reflection = await self.notion_repo.create_reflection(reflection_data)
            
            if created_reflection:
                response = f"‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n**{created_reflection['title']}**\nID: `{created_reflection['id']}`\n\n{reflection_text}"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {str(e)}")

    async def idea_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ—é: `/idea [–∏–¥–µ—è]`")
            return
        
        idea_text = " ".join(context.args)
        
        try:
            await update.message.reply_text(f"üí° –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–∏...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –º–∞—Ç–µ—Ä–∏–∞–ª
            idea_data = {
                'title': f"–ò–¥–µ—è: {idea_text[:50]}...",
                'type': 'Idea',
                'category': 'General',
                'description': idea_text,
                'tags': ['idea', 'quick'],
                'created_date': datetime.now(UTC),
                'status': 'Active'
            }
            
            created_idea = await self.notion_repo.create_material(idea_data)
            
            if created_idea:
                response = f"‚úÖ –ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n**{created_idea['title']}**\nID: `{created_idea['id']}`\n\n{idea_text}"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–¥–µ–∏: {str(e)}")

    async def morning_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª - —à–∞–±–ª–æ–Ω"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            await update.message.reply_text("üåÖ –°–æ–∑–¥–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∏—Ç—É–∞–ª–∞...")
            
            # –°–æ–∑–¥–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª
            ritual_data = {
                'title': f"–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª {datetime.now().strftime('%d.%m.%Y')}",
                'status': 'Active',
                'category': 'Morning',
                'frequency': 'Daily',
                'description': '–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è',
                'tags': ['morning', 'ritual', 'daily'],
                'created_date': datetime.now(UTC),
                'priority': 'High'
            }
            
            created_ritual = await self.notion_repo.create_ritual(ritual_data)
            
            if created_ritual:
                response = f"üåÖ **–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª —Å–æ–∑–¥–∞–Ω!**\n\n**{created_ritual['title']}**\nID: `{created_ritual['id']}`\n\n**–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª:**\n‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏—è (5-10 –º–∏–Ω)\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è\n‚Ä¢ –õ–µ–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞\n‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫\n‚Ä¢ –ß—Ç–µ–Ω–∏–µ/–æ–±—É—á–µ–Ω–∏–µ"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∏—Ç—É–∞–ª–∞: {str(e)}")

    async def evening_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è - —à–∞–±–ª–æ–Ω"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            await update.message.reply_text("üåô –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            reflection_data = {
                'title': f"–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è {datetime.now().strftime('%d.%m.%Y')}",
                'type': 'Evening',
                'mood': 'Neutral',
                'content': '–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –æ –ø—Ä–æ—à–µ–¥—à–µ–º –¥–Ω–µ',
                'tags': ['evening', 'reflection', 'daily'],
                'created_date': datetime.now(UTC)
            }
            
            created_reflection = await self.notion_repo.create_reflection(reflection_data)
            
            if created_reflection:
                response = f"üåô **–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!**\n\n**{created_reflection['title']}**\nID: `{created_reflection['id']}`\n\n**–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:**\n‚Ä¢ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ?\n‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ?\n‚Ä¢ –ó–∞ —á—Ç–æ —è –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω?\n‚Ä¢ –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞?\n\n–ò—Å–ø–æ–ª—å–∑—É–π `/reflection [—Ç–µ–∫—Å—Ç]` –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–æ–≤"
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {str(e)}")

    # –ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
    async def progress_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            await update.message.reply_text("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º
            rituals = await self.notion_repo.get_rituals()
            habits = await self.notion_repo.get_habits()
            reflections = await self.notion_repo.get_reflections()
            actions = await self.notion_repo.get_actions()
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            active_rituals = len([r for r in rituals if r.get('status') == 'Active'])
            active_habits = len([h for h in habits if h.get('status') == 'Active'])
            pending_tasks = len([a for a in actions if a.get('status') == 'Pending'])
            completed_tasks = len([a for a in actions if a.get('status') == 'Done'])
            
            response = f"üìä **–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ**\n\n"
            response += f"üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã:** {active_rituals}\n"
            response += f"üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:** {active_habits}\n"
            response += f"üìù **–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ:** {pending_tasks}\n"
            response += f"‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:** {completed_tasks}\n"
            response += f"üí≠ **–†–µ—Ñ–ª–µ–∫—Å–∏–π:** {len(reflections)}\n\n"
            
            if active_habits > 0:
                response += f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                response += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫\n"
                response += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π `/reflection` –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
                response += f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π –¥–µ–Ω—å —Å `/morning`\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}")

    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è–º"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            await update.message.reply_text("üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")
            
            reflections = await self.notion_repo.get_reflections()
            
            if not reflections:
                await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –î–æ–±–∞–≤—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é `/reflection`")
                return
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            mood_counts = {}
            for reflection in reflections:
                mood = reflection.get('mood', 'Unknown')
                mood_counts[mood] = mood_counts.get(mood, 0) + 1
            
            response = f"üòä **–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è**\n\n"
            response += f"**–í—Å–µ–≥–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π:** {len(reflections)}\n\n"
            
            for mood, count in mood_counts.items():
                percentage = (count / len(reflections)) * 100
                response += f"**{mood}:** {count} ({percentage:.1f}%)\n"
            
            response += f"\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            if mood_counts.get('Positive', 0) > mood_counts.get('Negative', 0):
                response += f"‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\n"
            else:
                response += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
            
            response += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π `/reflection` –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}")

    async def insights_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            reflections = await self.notion_repo.get_reflections()
            habits = await self.notion_repo.get_habits()
            actions = await self.notion_repo.get_actions()
            
            response = f"üß† **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã**\n\n"
            
            # –ò–Ω—Å–∞–π—Ç 1: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if len(reflections) > 0:
                response += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:**\n"
                response += f"‚Ä¢ –£ —Ç–µ–±—è {len(reflections)} —Ä–µ—Ñ–ª–µ–∫—Å–∏–π\n"
                response += f"‚Ä¢ –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è\n\n"
            
            # –ò–Ω—Å–∞–π—Ç 2: –ü—Ä–∏–≤—ã—á–∫–∏
            active_habits = [h for h in habits if h.get('status') == 'Active']
            if active_habits:
                response += f"üîÑ **–†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏:**\n"
                response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {len(active_habits)}\n"
                response += f"‚Ä¢ –§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏: {', '.join([h.get('title', '')[:20] for h in active_habits[:3]])}\n\n"
            
            # –ò–Ω—Å–∞–π—Ç 3: –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            completed_tasks = [a for a in actions if a.get('status') == 'Done']
            if completed_tasks:
                response += f"‚úÖ **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
                response += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(completed_tasks)}\n"
                response += f"‚Ä¢ –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É\n\n"
            
            response += f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            response += f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤–µ—Å—Ç–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏\n"
            response += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≤—ã—á–µ–∫\n"
            response += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π `/stats` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Å–∞–π—Ç–æ–≤: {str(e)}")

    async def recommendations_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            await update.message.reply_text("üí° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            rituals = await self.notion_repo.get_rituals()
            habits = await self.notion_repo.get_habits()
            reflections = await self.notion_repo.get_reflections()
            actions = await self.notion_repo.get_actions()
            
            response = f"üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1: –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∏—Ç—É–∞–ª–æ–≤
            if len(rituals) < 3:
                response += f"üéØ **–†–∏—Ç—É–∞–ª—ã:**\n"
                response += f"‚Ä¢ –£ —Ç–µ–±—è –º–∞–ª–æ —Ä–∏—Ç—É–∞–ª–æ–≤ ({len(rituals)})\n"
                response += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª: `/morning`\n"
                response += f"‚Ä¢ –ò–ª–∏ —Å–æ–∑–¥–∞–π –≤–µ—á–µ—Ä–Ω–∏–π: `/evening`\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2: –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤—ã—á–µ–∫
            active_habits = [h for h in habits if h.get('status') == 'Active']
            if len(active_habits) < 2:
                response += f"üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏:**\n"
                response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {len(active_habits)}\n"
                response += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é: `/habit [–Ω–∞–∑–≤–∞–Ω–∏–µ]`\n"
                response += f"‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: `/habit –º–µ–¥–∏—Ç–∞—Ü–∏—è`\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3: –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π
            if len(reflections) < 5:
                response += f"üí≠ **–†–µ—Ñ–ª–µ–∫—Å–∏–∏:**\n"
                response += f"‚Ä¢ –†–µ—Ñ–ª–µ–∫—Å–∏–π: {len(reflections)}\n"
                response += f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—é\n"
                response += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π: `/reflection [—Ç–µ–∫—Å—Ç]`\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 4: –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á
            pending_tasks = [a for a in actions if a.get('status') == 'Pending']
            if len(pending_tasks) > 5:
                response += f"üìù **–ó–∞–¥–∞—á–∏:**\n"
                response += f"‚Ä¢ –ú–Ω–æ–≥–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(pending_tasks)}\n"
                response += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π —Ñ–æ–∫—É—Å –Ω–∞ 3 –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n"
                response += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é\n\n"
            
            response += f"**–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            response += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π `/morning` –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è\n"
            response += f"‚Ä¢ `/evening` –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏\n"
            response += f"‚Ä¢ `/progress` –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            response += f"‚Ä¢ `/stats` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")

    async def watch_sync_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Xiaomi Watch S"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            from src.integrations.xiaomi_watch import xiaomi_integration
            
            await update.message.reply_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Xiaomi Watch S...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            biometrics = await xiaomi_integration.watch_api.get_current_biometrics()
            
            response_text = f"""
üì± **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Xiaomi Watch S**

‚úÖ **–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:**
‚Ä¢ –ü—É–ª—å—Å: {biometrics.heart_rate} —É–¥/–º–∏–Ω
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {biometrics.sleep_quality:.0f}%
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {biometrics.sleep_duration:.1f} —á
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {biometrics.stress_level:.0f}%
‚Ä¢ –®–∞–≥–∏: {biometrics.steps}
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {biometrics.calories}

üîÑ **–ì–æ—Ç–æ–≤ –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º!**
            """.strip()
            
            await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")

    async def watch_biometrics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            from src.integrations.xiaomi_watch import xiaomi_integration
            
            await update.message.reply_text("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            biometrics = await xiaomi_integration.watch_api.get_current_biometrics()
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            stress_analysis = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π" if biometrics.stress_level < 50 else "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π"
            sleep_analysis = "–û—Ç–ª–∏—á–Ω—ã–π" if biometrics.sleep_quality > 80 else "–•–æ—Ä–æ—à–∏–π" if biometrics.sleep_quality > 60 else "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
            activity_analysis = "–ê–∫—Ç–∏–≤–Ω—ã–π" if biometrics.steps > 8000 else "–£–º–µ—Ä–µ–Ω–Ω—ã–π" if biometrics.steps > 5000 else "–ù–∏–∑–∫–∏–π"
            
            response_text = f"""
üìä **–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ**

üíì **–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –ü—É–ª—å—Å: {biometrics.heart_rate} —É–¥/–º–∏–Ω
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {biometrics.stress_level:.0f}% ({stress_analysis})

üò¥ **–°–æ–Ω:**
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {biometrics.sleep_quality:.0f}% ({sleep_analysis})
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {biometrics.sleep_duration:.1f} —á

üèÉ‚Äç‚ôÇÔ∏è **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –®–∞–≥–∏: {biometrics.steps} ({activity_analysis})
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {biometrics.calories}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã: {biometrics.activity_level:.1f} —á

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{self._get_biometric_recommendations(biometrics)}
            """.strip()
            
            await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    async def watch_voice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            from src.integrations.xiaomi_watch import xiaomi_integration
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            test_commands = [
                "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
                "–º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                "–¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É –º–µ–¥–∏—Ç–∞—Ü–∏—è",
                "–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ"
            ]
            
            response_text = "üé§ **–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞**\n\n"
            
            for command in test_commands:
                response = await xiaomi_integration.handle_voice_command(b"test_audio")
                response_text += f"**–ö–æ–º–∞–Ω–¥–∞:** `{command}`\n"
                response_text += f"**–û—Ç–≤–µ—Ç:** {response}\n\n"
            
            await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    async def watch_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–∞—Å–æ–≤"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üîî –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="watch_morning"),
                InlineKeyboardButton("üåÖ –î–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="watch_day")
            ],
            [
                InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="watch_evening"),
                InlineKeyboardButton("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="watch_emergency")
            ],
            [
                InlineKeyboardButton("üìä –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="watch_biometrics_notif"),
                InlineKeyboardButton("üéØ –¶–µ–ª–µ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="watch_goals")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Xiaomi Watch S**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    async def watch_notification_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            from src.integrations.xiaomi_watch import xiaomi_integration
            
            notification = await xiaomi_integration.get_smart_notification()
            
            await update.message.reply_text(
                f"üì± **–£–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Å–æ–≤:**\n\n{notification}",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

    def _get_biometric_recommendations(self, biometrics) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–æ–º–µ—Ç—Ä–∏–∏"""
        recommendations = []
        
        if biometrics.stress_level and biometrics.stress_level > 60:
            recommendations.append("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞")
        
        if biometrics.sleep_quality and biometrics.sleep_quality < 70:
            recommendations.append("‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: –∏–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Ä–∞–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º")
        
        if biometrics.steps and biometrics.steps < 6000:
            recommendations.append("‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ü–µ–ª—å 8000+ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å")
        
        if biometrics.heart_rate and biometrics.heart_rate > 90:
            recommendations.append("‚Ä¢ –ü—É–ª—å—Å –ø–æ–≤—ã—à–µ–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö")
        
        if not recommendations:
            recommendations.append("‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        
        return "\n".join(recommendations)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
admin_bot = AdminBot()