#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì± TELEGRAM ANALYTICS –¢–ï–°–¢

–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Telegram –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ Notion
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å
"""

import os
import requests
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

class TelegramAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Analytics"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        
        if not self.bot_token:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def test_bot_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É"""
        
        print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM BOT API")
        print("=" * 50)
        
        try:
            response = requests.get(f"{self.base_url}/getMe")
            if response.status_code == 200:
                bot_info = response.json()
                if bot_info['ok']:
                    bot_data = bot_info['result']
                    print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    print(f"üìù –ò–º—è: {bot_data.get('first_name', 'N/A')}")
                    print(f"üîó Username: @{bot_data.get('username', 'N/A')}")
                    print(f"üÜî ID: {bot_data.get('id', 'N/A')}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {bot_info.get('description', 'Unknown error')}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_chat_info(self, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ"""
        
        try:
            response = requests.get(f"{self.base_url}/getChat", 
                                  params={'chat_id': chat_id})
            
            if response.status_code == 200:
                result = response.json()
                if result['ok']:
                    return result['result']
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {result.get('description', 'Unknown')}")
                    return None
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def get_chat_member_count(self, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        
        try:
            response = requests.get(f"{self.base_url}/getChatMemberCount",
                                  params={'chat_id': chat_id})
            
            if response.status_code == 200:
                result = response.json()
                if result['ok']:
                    return result['result']
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.get('description', 'Unknown')}")
                    return None
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def get_recent_messages(self, chat_id, limit=10):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞
        # –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º
        
        print(f"üì¨ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ú–µ—Ç–æ–¥ getUpdates –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        try:
            response = requests.get(f"{self.base_url}/getUpdates",
                                  params={'limit': limit, 'timeout': 10})
            
            if response.status_code == 200:
                result = response.json()
                if result['ok']:
                    updates = result['result']
                    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
                    
                    messages = []
                    for update in updates:
                        if 'message' in update:
                            messages.append(update['message'])
                        elif 'channel_post' in update:
                            messages.append(update['channel_post'])
                    
                    return messages
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('description', 'Unknown')}")
                    return []
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return []
    
    def analyze_channel_statistics(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞"""
        
        print("\nüìä –ê–ù–ê–õ–ò–ó TELEGRAM –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
        print("=" * 60)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
        if self.channel_id:
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª: {self.channel_id}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
            chat_info = self.get_chat_info(self.channel_id)
            if chat_info:
                print(f"\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–ù–ê–õ–ï:")
                print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info.get('title', 'N/A')}")
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {chat_info.get('description', 'N/A')[:100]}...")
                print(f"   üîó Username: @{chat_info.get('username', 'N/A')}")
                print(f"   üìÖ –¢–∏–ø: {chat_info.get('type', 'N/A')}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            member_count = self.get_chat_member_count(self.channel_id)
            if member_count:
                print(f"\nüë• –£–ß–ê–°–¢–ù–ò–ö–ò: {member_count:,} —á–µ–ª–æ–≤–µ–∫")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = self.get_recent_messages(self.channel_id)
            if messages:
                print(f"\nüì® –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:")
                for i, msg in enumerate(messages[:5], 1):
                    date = datetime.fromtimestamp(msg.get('date', 0))
                    text = msg.get('text', msg.get('caption', '–ú–µ–¥–∏–∞'))[:50]
                    views = msg.get('views', 'N/A')
                    print(f"   {i}. {date.strftime('%d.%m %H:%M')} | üëÄ {views} | {text}...")
        
        else:
            print("‚ö†Ô∏è TELEGRAM_CHANNEL_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
            print("üí° –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:")
            print("   TELEGRAM_CHANNEL_ID=@your_channel_username")
            print("   –∏–ª–∏ TELEGRAM_CHANNEL_ID=-100123456789")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print(f"\nüì¨ –ü–û–õ–£–ß–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–ô:")
        updates = self.get_recent_messages(None)
        if updates:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            channels = set()
            for msg in updates:
                chat = msg.get('chat', {})
                if chat.get('type') in ['channel', 'supergroup']:
                    channels.add(f"{chat.get('title', 'Unknown')} (@{chat.get('username', 'private')})")
            
            if channels:
                print(f"\nüì∫ –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´:")
                for i, channel in enumerate(sorted(channels), 1):
                    print(f"   {i}. {channel}")
        
        return {
            'channel_info': chat_info if self.channel_id else None,
            'member_count': member_count if self.channel_id else None,
            'recent_messages': messages if self.channel_id else updates
        }
    
    def recommend_setup(self):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:")
        print("=" * 50)
        
        print("1Ô∏è‚É£ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:")
        print("   TELEGRAM_CHANNEL_ID=@your_channel_username")
        print("   –∏–ª–∏ TELEGRAM_CHANNEL_ID=-100123456789")
        
        print("\n2Ô∏è‚É£ –ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞")
        print("   ‚Ä¢ –ò–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º")
        
        print("\n3Ô∏è‚É£ –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:")
        print("   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Analytics API (—Ç—Ä–µ–±—É–µ—Ç approval)")
        
        print("\n4Ô∏è‚É£ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
        print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Telegram Desktop")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TelemetryDeck –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–º–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üì± TELEGRAM ANALYTICS - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("=" * 80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics = TelegramAnalytics()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if analytics.test_bot_connection():
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            results = analytics.analyze_channel_statistics()
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            analytics.recommend_setup()
            
            print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
            print("üìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion")
        
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 