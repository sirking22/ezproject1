#!/usr/bin/env python3
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è Life Watch App
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Xiaomi Watch S –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import json
import logging
from datetime import datetime, UTC
from typing import Dict, Any, Optional, List
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class WatchData(BaseModel):
    type: str = Field(..., description="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö (heart_rate, activity, task, voice_command, etc.)")
    data: Dict[str, Any] = Field(..., description="–î–∞–Ω–Ω—ã–µ —Å —á–∞—Å–æ–≤")
    timestamp: int = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")

class NotificationData(BaseModel):
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    message: str = Field(..., description="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    icon: Optional[str] = Field(None, description="–ò–∫–æ–Ω–∫–∞")
    vibration: bool = Field(True, description="–í–∏–±—Ä–∞—Ü–∏—è")
    sound: bool = Field(True, description="–ó–≤—É–∫")
    duration: int = Field(5000, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º—Å")

class AIResponse(BaseModel):
    response: str = Field(..., description="–û—Ç–≤–µ—Ç –æ—Ç –ò–ò")
    context: Optional[Dict[str, Any]] = Field(None, description="–ö–æ–Ω—Ç–µ–∫—Å—Ç")
    confidence: float = Field(0.8, description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")

class SyncResponse(BaseModel):
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    processed_count: int = Field(0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Life Watch API",
    description="API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Xiaomi Watch S —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
watch_data_buffer: List[Dict[str, Any]] = []
notifications_queue: List[Dict[str, Any]] = []
ai_responses_queue: List[Dict[str, Any]] = []

class WatchDataProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å —á–∞—Å–æ–≤"""
    
    def __init__(self):
        self.stats = {
            "heart_rate_count": 0,
            "activity_count": 0,
            "task_count": 0,
            "voice_command_count": 0,
            "total_processed": 0
        }
    
    async def process_heart_rate(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª—å—Å–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª—å—Å–∞: {data}")
        
        heart_rate = data.get("heartRate", 0)
        quality = data.get("quality", "unknown")
        timestamp = data.get("timestamp", 0)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–µ—Å—Å–∞
        stress_level = self._analyze_stress(heart_rate)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion
        processed_data = {
            "type": "heart_rate",
            "heart_rate": heart_rate,
            "quality": quality,
            "stress_level": stress_level,
            "timestamp": timestamp,
            "processed_at": datetime.now(UTC).isoformat()
        }
        
        watch_data_buffer.append(processed_data)
        self.stats["heart_rate_count"] += 1
        self.stats["total_processed"] += 1
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if stress_level == "high":
            await self._generate_stress_notification(heart_rate)
        
        return processed_data
    
    async def process_activity(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data}")
        
        steps = data.get("steps", 0)
        calories = data.get("calories", 0)
        distance = data.get("distance", 0)
        active_minutes = data.get("activeMinutes", 0)
        timestamp = data.get("timestamp", 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π
        goals_achieved = self._check_activity_goals(steps, calories)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        processed_data = {
            "type": "activity",
            "steps": steps,
            "calories": calories,
            "distance": distance,
            "active_minutes": active_minutes,
            "goals_achieved": goals_achieved,
            "timestamp": timestamp,
            "processed_at": datetime.now(UTC).isoformat()
        }
        
        watch_data_buffer.append(processed_data)
        self.stats["activity_count"] += 1
        self.stats["total_processed"] += 1
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π
        for goal in goals_achieved:
            await self._generate_goal_notification(goal)
        
        return processed_data
    
    async def process_task(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {data}")
        
        task_text = data.get("text", "")
        task_id = data.get("id", "")
        completed = data.get("completed", False)
        priority = data.get("priority", "medium")
        timestamp = data.get("timestamp", 0)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion
        processed_data = {
            "type": "task",
            "id": task_id,
            "text": task_text,
            "completed": completed,
            "priority": priority,
            "timestamp": timestamp,
            "processed_at": datetime.now(UTC).isoformat()
        }
        
        watch_data_buffer.append(processed_data)
        self.stats["task_count"] += 1
        self.stats["total_processed"] += 1
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        if not completed:
            await self._generate_task_notification(task_text)
        
        return processed_data
    
    async def process_voice_command(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {data}")
        
        command_text = data.get("text", "")
        audio_data = data.get("audio", None)
        timestamp = data.get("timestamp", 0)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent = self._recognize_intent(command_text)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        processed_data = {
            "type": "voice_command",
            "text": command_text,
            "intent": intent,
            "audio_data": audio_data is not None,
            "timestamp": timestamp,
            "processed_at": datetime.now(UTC).isoformat()
        }
        
        watch_data_buffer.append(processed_data)
        self.stats["voice_command_count"] += 1
        self.stats["total_processed"] += 1
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
        ai_response = await self._generate_ai_response(command_text, intent)
        ai_responses_queue.append(ai_response)
        
        return processed_data
    
    def _analyze_stress(self, heart_rate: int) -> str:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞ –ø–æ –ø—É–ª—å—Å—É"""
        if heart_rate > 100:
            return "high"
        elif heart_rate > 80:
            return "medium"
        else:
            return "low"
    
    def _check_activity_goals(self, steps: int, calories: int) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        goals = []
        
        if steps >= 10000:
            goals.append("steps_10000")
        if calories >= 500:
            goals.append("calories_500")
        
        return goals
    
    def _recognize_intent(self, command_text: str) -> str:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        command_lower = command_text.lower()
        
        if "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É" in command_lower or "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É" in command_lower:
            return "add_task"
        elif "–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å" in command_lower or "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in command_lower:
            return "show_progress"
        elif "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è" in command_lower or "–º—ã—Å–ª–∏" in command_lower:
            return "add_reflection"
        elif "–ø–æ–º–æ—â—å" in command_lower or "—á—Ç–æ –¥–µ–ª–∞—Ç—å" in command_lower:
            return "help"
        else:
            return "unknown"
    
    async def _generate_stress_notification(self, heart_rate: int):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–µ—Å—Å–µ"""
        notification = {
            "title": "‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π –ø—É–ª—å—Å",
            "message": f"–í–∞—à –ø—É–ª—å—Å {heart_rate} —É–¥/–º–∏–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö.",
            "icon": "heart",
            "vibration": True,
            "sound": True,
            "duration": 5000
        }
        notifications_queue.append(notification)
    
    async def _generate_goal_notification(self, goal: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏"""
        if goal == "steps_10000":
            notification = {
                "title": "üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!",
                "message": "10000 —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                "icon": "steps",
                "vibration": True,
                "sound": True,
                "duration": 5000
            }
        elif goal == "calories_500":
            notification = {
                "title": "üî• –ö–∞–ª–æ—Ä–∏–∏ —Å–æ–∂–∂–µ–Ω—ã!",
                "message": "500+ –∫–∞–ª–æ—Ä–∏–π —Å–æ–∂–∂–µ–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "icon": "calories",
                "vibration": True,
                "sound": True,
                "duration": 3000
            }
        else:
            return
        
        notifications_queue.append(notification)
    
    async def _generate_task_notification(self, task_text: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        notification = {
            "title": "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
            "message": task_text[:50] + "..." if len(task_text) > 50 else task_text,
            "icon": "task",
            "vibration": True,
            "sound": True,
            "duration": 3000
        }
        notifications_queue.append(notification)
    
    async def _generate_ai_response(self, command_text: str, intent: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        responses = {
            "add_task": f"–ó–∞–¥–∞—á–∞ '{command_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª.",
            "show_progress": "–ü–æ–∫–∞–∑—ã–≤–∞—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è...",
            "add_reflection": "–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∞—à–∏ –º—ã—Å–ª–∏...",
            "help": "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é.",
            "unknown": "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É' –∏–ª–∏ '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å'."
        }
        
        response_text = responses.get(intent, responses["unknown"])
        
        return {
            "type": "ai_response",
            "response": response_text,
            "intent": intent,
            "original_command": command_text,
            "timestamp": datetime.now(UTC).isoformat()
        }

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
processor = WatchDataProcessor()

# API endpoints
@app.post("/watch/sync", response_model=SyncResponse)
async def sync_watch_data(watch_data: WatchData, background_tasks: BackgroundTasks):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —á–∞—Å–æ–≤"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —á–∞—Å–æ–≤: {watch_data.type}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if watch_data.type == "heart_rate":
            processed_data = await processor.process_heart_rate(watch_data.data)
        elif watch_data.type == "activity":
            processed_data = await processor.process_activity(watch_data.data)
        elif watch_data.type == "task":
            processed_data = await processor.process_task(watch_data.data)
        elif watch_data.type == "voice_command":
            processed_data = await processor.process_voice_command(watch_data.data)
        elif watch_data.type == "sleep":
            processed_data = await processor.process_sleep(watch_data.data)
        else:
            raise HTTPException(status_code=400, detail=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {watch_data.type}")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion
        background_tasks.add_task(integrate_with_notion, processed_data)
        
        return SyncResponse(
            status="success",
            message=f"–î–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ {watch_data.type} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã",
            processed_count=processor.stats["total_processed"]
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/phone/notifications")
async def get_notifications():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Å–æ–≤"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        notifications = notifications_queue.copy()
        notifications_queue.clear()
        
        return {"notifications": notifications}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/phone/ai_responses")
async def get_ai_responses():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò –¥–ª—è —á–∞—Å–æ–≤"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ò–ò –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        responses = ai_responses_queue.copy()
        ai_responses_queue.clear()
        
        return {"ai_responses": responses}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/phone/ai_chat")
async def ai_chat(chat_data: WatchData):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ —Å –ò–ò"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
        response = await processor._generate_ai_response(
            chat_data.data.get("text", ""),
            processor._recognize_intent(chat_data.data.get("text", ""))
        )
        
        return AIResponse(
            response=response["response"],
            context={"intent": response["intent"]},
            confidence=0.8
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    return {
        "processor_stats": processor.stats,
        "buffer_size": len(watch_data_buffer),
        "notifications_queue_size": len(notifications_queue),
        "ai_responses_queue_size": len(ai_responses_queue),
        "uptime": datetime.now(UTC).isoformat()
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now(UTC).isoformat(),
        "version": "1.0.0"
    }

# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
async def integrate_with_notion(data: Dict[str, Any]):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Notion"""
    try:
        logger.info(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion: {data['type']}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π Notion
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {data}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
async def process_sleep(self, data: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞: {data}")
    
    quality = data.get("quality", "unknown")
    duration = data.get("duration", 0)
    deep_sleep = data.get("deepSleep", 0)
    light_sleep = data.get("lightSleep", 0)
    rem_sleep = data.get("remSleep", 0)
    timestamp = data.get("timestamp", 0)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞
    sleep_score = self._calculate_sleep_score(quality, duration, deep_sleep)
    
    processed_data = {
        "type": "sleep",
        "quality": quality,
        "duration": duration,
        "deep_sleep": deep_sleep,
        "light_sleep": light_sleep,
        "rem_sleep": rem_sleep,
        "sleep_score": sleep_score,
        "timestamp": timestamp,
        "processed_at": datetime.now(UTC).isoformat()
    }
    
    watch_data_buffer.append(processed_data)
    self.stats["total_processed"] += 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–Ω–∞
    if sleep_score < 0.6:
        await self._generate_sleep_notification(sleep_score)
    
    return processed_data

def _calculate_sleep_score(self, quality: str, duration: float, deep_sleep: float) -> float:
    """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
    score = 0.0
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
    if quality == "good":
        score += 0.4
    elif quality == "fair":
        score += 0.2
    
    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞
    if 7 <= duration <= 9:
        score += 0.4
    elif 6 <= duration < 7 or 9 < duration <= 10:
        score += 0.2
    
    # –ì–ª—É–±–æ–∫–∏–π —Å–æ–Ω
    if deep_sleep >= 1.5:
        score += 0.2
    
    return min(score, 1.0)

async def _generate_sleep_notification(self, sleep_score: float):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–Ω–∞"""
    if sleep_score < 0.4:
        message = "–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –Ω–∏–∑–∫–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ —Å–ø–∞—Ç—å."
    else:
        message = "–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ."
    
    notification = {
        "title": "üò¥ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞",
        "message": message,
        "icon": "sleep",
        "vibration": True,
        "sound": True,
        "duration": 5000
    }
    notifications_queue.append(notification)

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–ª–∞—Å—Å—É
WatchDataProcessor.process_sleep = process_sleep
WatchDataProcessor._calculate_sleep_score = _calculate_sleep_score
WatchDataProcessor._generate_sleep_notification = _generate_sleep_notification

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Life Watch API —Å–µ—Ä–≤–µ—Ä–∞...")
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info",
        reload=True
    ) 