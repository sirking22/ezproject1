/**
 * Quick Voice Assistant –¥–ª—è Xiaomi Watch S
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ LLM –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å
 */

class QuickVoiceAssistant {
    constructor() {
        this.isRecording = false;
        this.isActive = false;
        this.lastQuery = null;
        this.communication = new Communication();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            autoRecordOnWake: true,      // –ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
            gestureActivation: true,     // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∂–µ—Å—Ç–∞–º–∏
            voiceActivation: true,       // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–º
            quickMode: true,             // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ UI
            responseTimeout: 10000,      // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç
            retryAttempts: 2             // –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state = {
            screenActive: false,
            lastActivity: null,
            queryHistory: [],
            responseCache: {}
        };

        this.initialize();
    }

    async initialize() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quick Voice Assistant...');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        this.setupWakeDetection();
        this.setupGestureActivation();
        this.setupVoiceActivation();

        // –¢–µ—Å—Ç —Å–≤—è–∑–∏
        await this.testConnection();

        console.log('‚úÖ Quick Voice Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    }

    setupWakeDetection() {
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
        if (this.config.autoRecordOnWake) {
            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
            this.onScreenWake = () => {
                console.log('üì± –≠–∫—Ä–∞–Ω –ø—Ä–æ–±—É–¥–∏–ª—Å—è - –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏');
                this.state.screenActive = true;
                this.showReadyIndicator();

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => {
                    if (this.state.screenActive && !this.isRecording) {
                        this.startQuickRecording();
                    }
                }, 1000);
            };

            this.onScreenSleep = () => {
                console.log('üò¥ –≠–∫—Ä–∞–Ω —É—Å–Ω—É–ª');
                this.state.screenActive = false;
                this.stopRecording();
            };
        }
    }

    setupGestureActivation() {
        if (this.config.gestureActivation) {
            // –ñ–µ—Å—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            this.gestures = {
                'shake': () => this.activateRecording(),
                'double_tap': () => this.activateRecording(),
                'long_press': () => this.showQuickMenu(),
                'swipe_up': () => this.repeatLastQuery()
            };
        }
    }

    setupVoiceActivation() {
        if (this.config.voiceActivation) {
            // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            this.wakeWords = [
                '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç',
                '–ø–æ–º–æ—â—å',
                '–≤–æ–ø—Ä–æ—Å',
                '–∑–∞–¥–∞—á–∞',
                '–º—ã—Å–ª—å',
                '–∏–¥–µ—è'
            ];
        }
    }

    async testConnection() {
        try {
            const response = await this.communication.ping();
            console.log('‚úÖ –°–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', error);
            return false;
        }
    }

    activateRecording() {
        console.log('üé§ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏...');

        if (this.isRecording) {
            this.stopRecording();
            return;
        }

        this.startQuickRecording();
    }

    async startQuickRecording() {
        if (this.isRecording) return;

        this.isRecording = true;
        console.log('üé§ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞...');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
        this.showRecordingIndicator();

        try {
            // –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ (3-10 —Å–µ–∫—É–Ω–¥)
            const audioData = await this.recordVoice();

            if (audioData) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
                const text = await this.speechToText(audioData);

                if (text && text.trim()) {
                    console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', text);
                    await this.processQuery(text);
                } else {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å');
                    this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å');
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏');
        } finally {
            this.stopRecording();
        }
    }

    async recordVoice() {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
        return new Promise((resolve) => {
            setTimeout(() => {
                // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                resolve('mock_audio_data');
            }, 3000);
        });
    }

    async speechToText(audioData) {
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        const mockTexts = [
            '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –º–µ–¥–∏—Ç–∞—Ü–∏—è',
            '–∫–∞–∫ –º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
            '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å',
            '–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å –æ –ø—Ä–æ–µ–∫—Ç–µ',
            '—á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è',
            '–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python',
            '—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É —á—Ç–µ–Ω–∏–µ'
        ];

        return mockTexts[Math.floor(Math.random() * mockTexts.length)];
    }

    async processQuery(text) {
        console.log('üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', text);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.state.queryHistory.push({
            text: text,
            timestamp: Date.now()
        });

        this.lastQuery = text;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.showProcessingIndicator();

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
            const response = await this.communication.sendToLLM(text);

            if (response) {
                console.log('ü§ñ –û—Ç–≤–µ—Ç LLM:', response);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                this.showResponse(response);

                // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                this.state.responseCache[text] = response;

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await this.executeActions(text, response);

            } else {
                this.showError('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
        }
    }

    async executeActions(query, response) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞

        if (query.includes('–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É') || query.includes('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É')) {
            await this.addTask(query);
        }

        if (query.includes('–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å') || query.includes('—Å–æ—Ö—Ä–∞–Ω–∏ –∏–¥–µ—é')) {
            await this.saveThought(query);
        }

        if (query.includes('—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É')) {
            await this.createHabit(query);
        }

        if (query.includes('–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å') || query.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
            await this.showProgress();
        }
    }

    async addTask(query) {
        try {
            const taskText = query.replace(/–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É|—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É/i, '').trim();
            await this.communication.sendToNotion('tasks', {
                title: taskText,
                type: 'task',
                source: 'watch_voice'
            });
            console.log('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', taskText);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        }
    }

    async saveThought(query) {
        try {
            const thoughtText = query.replace(/–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å|—Å–æ—Ö—Ä–∞–Ω–∏ –∏–¥–µ—é/i, '').trim();
            await this.communication.sendToNotion('reflections', {
                content: thoughtText,
                type: 'thought',
                source: 'watch_voice'
            });
            console.log('‚úÖ –ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', thoughtText);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—Å–ª–∏:', error);
        }
    }

    async createHabit(query) {
        try {
            const habitText = query.replace(/—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É/i, '').trim();
            await this.communication.sendToNotion('habits', {
                title: habitText,
                type: 'habit',
                source: 'watch_voice'
            });
            console.log('‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', habitText);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
        }
    }

    async showProgress() {
        try {
            const progress = await this.communication.getProgress();
            console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:', progress);
            this.showResponse(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.summary}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
    }

    stopRecording() {
        this.isRecording = false;
        console.log('üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        this.hideRecordingIndicator();
    }

    repeatLastQuery() {
        if (this.lastQuery) {
            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', this.lastQuery);
            this.processQuery(this.lastQuery);
        } else {
            this.showError('–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
        }
    }

    showQuickMenu() {
        console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é:');
        console.log('  üé§ - –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å');
        console.log('  üîÑ - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å');
        console.log('  üìä - –ü—Ä–æ–≥—Ä–µ—Å—Å');
        console.log('  ‚öôÔ∏è - –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
    }

    // UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    showReadyIndicator() {
        console.log('üì± –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    }

    showRecordingIndicator() {
        console.log('üî¥ –ó–∞–ø–∏—Å—å...');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
    }

    showProcessingIndicator() {
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }

    showResponse(response) {
        console.log('ü§ñ –û—Ç–≤–µ—Ç:', response);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ (–∫—Ä–∞—Ç–∫–æ)
        // –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    }

    showError(message) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', message);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    }

    hideRecordingIndicator() {
        console.log('üì± –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫—Ä—ã—Ç');
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
    }
}

class Communication {
    constructor() {
        this.serverUrl = 'http://localhost:8000';
        this.telegramUrl = 'http://localhost:3000';
    }

    async ping() {
        const response = await fetch(`${this.serverUrl}/ping`);
        return response.ok;
    }

    async sendToLLM(query) {
        try {
            const response = await fetch(`${this.serverUrl}/llm/query`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    query: query,
                    context: 'watch_voice',
                    timestamp: Date.now()
                })
            });

            const result = await response.json();
            return result.response;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM:', error);
            throw error;
        }
    }

    async sendToNotion(database, data) {
        try {
            const response = await fetch(`${this.serverUrl}/notion/${database}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            return await response.json();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Notion:', error);
            throw error;
        }
    }

    async getProgress() {
        try {
            const response = await fetch(`${this.serverUrl}/progress`);
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
            throw error;
        }
    }

    async sendToTelegram(message) {
        try {
            const response = await fetch(`${this.telegramUrl}/send`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    message: message,
                    source: 'watch_voice'
                })
            });

            return await response.json();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const assistant = new QuickVoiceAssistant();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { QuickVoiceAssistant };
} 