#!/usr/bin/env python3
"""
üìù –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• NOTION
"""

import os
import requests
from dotenv import load_dotenv

def get_database_structure():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion"""
    load_dotenv()
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_TASKS_DB")
    
    if not token:
        print("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    if not tasks_db_id:
        print("‚ùå NOTION_TASKS_DB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        headers = {
            "Authorization": f"Bearer {token}",
            "Notion-Version": "2022-06-28"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        url = f"https://api.notion.com/v1/databases/{tasks_db_id}"
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            db_info = response.json()
            properties = db_info.get("properties", {})
            
            print("üìã –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
            print("="*50)
            
            for prop_name, prop_info in properties.items():
                prop_type = prop_info.get("type", "unknown")
                print(f"üìù {prop_name}: {prop_type}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select/multi_select
                if prop_type in ["select", "multi_select"]:
                    options = prop_info.get(prop_type, {}).get("options", [])
                    if options:
                        print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {[opt.get('name') for opt in options]}")
            
            return properties
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def create_test_task_with_structure(properties):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    load_dotenv()
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_TASKS_DB")
    
    if not token or not tasks_db_id:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã")
        return False
    
    try:
        headers = {
            "Authorization": f"Bearer {token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        
        # –°–æ–∑–¥–∞–µ–º payload –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        payload = {
            "parent": {"database_id": tasks_db_id},
            "properties": {}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        for prop_name, prop_info in properties.items():
            prop_type = prop_info.get("type")
            
            if prop_type == "title":
                payload["properties"][prop_name] = {
                    "title": [
                        {
                            "text": {
                                "content": "üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç Quick Voice Assistant"
                            }
                        }
                    ]
                }
            elif prop_type == "select":
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                options = prop_info.get("select", {}).get("options", [])
                if options:
                    payload["properties"][prop_name] = {
                        "select": {
                            "name": options[0]["name"]
                        }
                    }
            elif prop_type == "date":
                from datetime import datetime
                payload["properties"][prop_name] = {
                    "date": {
                        "start": datetime.now().isoformat()
                    }
                }
            elif prop_type == "number":
                payload["properties"][prop_name] = {
                    "number": 1
                }
            elif prop_type == "checkbox":
                payload["properties"][prop_name] = {
                    "checkbox": False
                }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        url = "https://api.notion.com/v1/pages"
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìù" + "="*50)
    print("üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ NOTION –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*52)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    properties = get_database_structure()
    
    if properties:
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(properties)}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏...")
        if create_test_task_with_structure(properties):
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
            print("üìù –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main() 