#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
"""

import asyncio
import logging
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from src.llm.client import LocalLLMClient, quick_generate, quick_work_generate, quick_home_generate
from src.notion.llm_service import LLMService, LLMConfig
from src.notion.client import NotionClient
from src.utils.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_local_llm_client():
    """–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        async with LocalLLMClient() as client:
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            print("üìù –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            response = await client.generate(
                prompt="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                context="home",
                session_id="test_session"
            )
            print(f"‚úÖ –û—Ç–≤–µ—Ç: {response.text[:100]}...")
            print(f"üìä –ú–æ–¥–µ–ª—å: {response.model}, –ö–æ–Ω—Ç–µ–∫—Å—Ç: {response.context}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {response.processing_time:.2f}—Å, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            print("\nüîÑ –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            await client.set_session_context("test_session", "work")
            response = await client.generate(
                prompt="–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                context="work",
                session_id="test_session"
            )
            print(f"‚úÖ –†–∞–±–æ—á–∏–π –æ—Ç–≤–µ—Ç: {response.text[:100]}...")
            
            # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
            print("\nüìã –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏...")
            session_info = await client.get_session_info("test_session")
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏: {session_info}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
            print("\nüíö –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è...")
            health = await client.health_check()
            print(f"‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞: {health}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")

async def test_quick_functions():
    """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("‚ö° –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        response = await quick_generate("–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö", context="home")
        print(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç: {response[:100]}...")
        
        # –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("üíº –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        response = await quick_work_generate("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print(f"‚úÖ –†–∞–±–æ—á–∏–π –æ—Ç–≤–µ—Ç: {response[:100]}...")
        
        # –¢–µ—Å—Ç –¥–æ–º–∞—à–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("üè† –¢–µ—Å—Ç –¥–æ–º–∞—à–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        response = await quick_home_generate("–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ")
        print(f"‚úÖ –î–æ–º–∞—à–Ω–∏–π –æ—Ç–≤–µ—Ç: {response[:100]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")

async def test_llm_service():
    """–¢–µ—Å—Ç LLM —Å–µ—Ä–≤–∏—Å–∞ —Å Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Å–µ—Ä–≤–∏—Å–∞ —Å Notion...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        
        # –°–æ–∑–¥–∞–µ–º Notion –∫–ª–∏–µ–Ω—Ç
        notion_client = NotionClient(config.notion_token, config.notion_dbs)
        
        # –°–æ–∑–¥–∞–µ–º LLM —Å–µ—Ä–≤–∏—Å
        llm_config = LLMConfig(
            use_local=True,
            local_url="http://localhost:8000",
            openrouter_api_key=config.openrouter_api_key,
            fallback_to_openrouter=True
        )
        
        async with LLMService(notion_client, llm_config) as llm_service:
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º Notion
            print("üìä –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º Notion...")
            response = await llm_service.generate_response(
                prompt="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏",
                context="home",
                user_id="test_user",
                use_notion_context=True
            )
            print(f"‚úÖ –û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: {response[:200]}...")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞
            print("\nüí° –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞...")
            insight = await llm_service.generate_insight(
                topic="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                context="work",
                user_id="test_user"
            )
            print(f"‚úÖ –ò–Ω—Å–∞–π—Ç: {insight[:200]}...")
            
            # –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            print("\nüîÆ –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
            prediction = await llm_service.generate_prediction(
                habit_or_goal="–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
                context="home",
                user_id="test_user"
            )
            print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction[:200]}...")
            
            # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            print("\n‚ö° –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
            optimization = await llm_service.generate_optimization(
                area="–í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                context="work",
                user_id="test_user"
            )
            print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {optimization[:200]}...")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
            print("\nüíö –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
            health = await llm_service.health_check()
            print(f"‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ: {health}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞: {e}")

async def test_context_switching():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤...")
    
    try:
        async with LocalLLMClient() as client:
            session_id = "context_test_session"
            
            # –¢–µ—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            print("üè† –¢–µ—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            await client.set_session_context(session_id, "home")
            response = await client.generate(
                prompt="–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ?",
                session_id=session_id
            )
            print(f"‚úÖ –î–æ–º–∞—à–Ω–∏–π –æ—Ç–≤–µ—Ç: {response.text[:100]}...")
            
            # –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            print("üíº –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            await client.set_session_context(session_id, "work")
            response = await client.generate(
                prompt="–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?",
                session_id=session_id
            )
            print(f"‚úÖ –†–∞–±–æ—á–∏–π –æ—Ç–≤–µ—Ç: {response.text[:100]}...")
            
            # –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            print("üåê –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            await client.set_session_context(session_id, "general")
            response = await client.generate(
                prompt="–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é",
                session_id=session_id
            )
            print(f"‚úÖ –û–±—â–∏–π –æ—Ç–≤–µ—Ç: {response.text[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏
            print("\nüìã –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏...")
            session_info = await client.get_session_info(session_id)
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏: {session_info}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω—ã–π LLM –∫–ª–∏–µ–Ω—Ç
    await test_local_llm_client()
    
    # –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await test_quick_functions()
    
    # –¢–µ—Å—Ç 3: LLM —Å–µ—Ä–≤–∏—Å —Å Notion
    await test_llm_service()
    
    # –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    await test_context_switching()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main()) 