#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Xiaomi Watch S
–ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import sys
import os
from datetime import datetime, UTC

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
from src.integrations.xiaomi_watch import (
    XiaomiWatchAPI,
    VoiceProcessor,
    IntentRecognizer,
    BiometricData,
    VoiceCommand
)

async def test_xiaomi_watch_basic():
    """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Xiaomi Watch S"""
    print("üì± –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Xiaomi Watch S...")
    print("=" * 60)
    
    try:
        # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–∞—Å–æ–≤
        print("\n1. üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Xiaomi Watch S...")
        
        watch_api = XiaomiWatchAPI()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        heart_rate = await watch_api.get_heart_rate()
        sleep_data = await watch_api.get_sleep_data()
        activity_data = await watch_api.get_activity_data()
        stress_level = await watch_api.get_stress_level()
        
        print(f"‚úÖ –ü—É–ª—å—Å: {heart_rate} —É–¥/–º–∏–Ω")
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {sleep_data.get('quality', 0):.0f}%")
        print(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {sleep_data.get('duration', 0):.1f} —á")
        print(f"‚úÖ –®–∞–≥–∏: {activity_data.get('steps', 0)}")
        print(f"‚úÖ –ö–∞–ª–æ—Ä–∏–∏: {activity_data.get('calories', 0)}")
        print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {stress_level:.0f}%")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        biometrics = await watch_api.get_current_biometrics()
        print(f"‚úÖ –ü–æ–ª–Ω—ã–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        print(f"   - –ü—É–ª—å—Å: {biometrics.heart_rate}")
        print(f"   - –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {biometrics.sleep_quality}")
        print(f"   - –°—Ç—Ä–µ—Å—Å: {biometrics.stress_level}")
        print(f"   - –®–∞–≥–∏: {biometrics.steps}")
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        print("\n2. üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π...")
        
        intent_recognizer = IntentRecognizer()
        
        test_commands = [
            "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
            "–¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É –º–µ–¥–∏—Ç–∞—Ü–∏—è",
            "–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ",
            "–º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
            "–ø–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π",
            "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        ]
        
        for command in test_commands:
            intent = await intent_recognizer.analyze(command)
            print(f"üìù –ö–æ–º–∞–Ω–¥–∞: '{command}'")
            print(f"   –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent['intent']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {intent['confidence']:.2f}")
            print(f"   –î–∞–Ω–Ω—ã–µ: {intent['extracted_data']}")
            print()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("\n3. üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        
        voice_processor = VoiceProcessor()
        
        # –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
        text = await voice_processor.speech_to_text(b"test_audio")
        print(f"‚úÖ Speech-to-Text: '{text}'")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
        audio_data = await voice_processor.text_to_speech("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print(f"‚úÖ Text-to-Speech: {len(audio_data)} –±–∞–π—Ç")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        print("\n4. üòä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        def analyze_mood_from_biometrics(biometrics):
            if biometrics.stress_level is None:
                return "neutral"
            
            if biometrics.stress_level > 70:
                return "stressed"
            elif biometrics.stress_level > 40:
                return "anxious"
            elif biometrics.stress_level > 20:
                return "calm"
            else:
                return "relaxed"
        
        test_biometrics = [
            BiometricData(heart_rate=75, stress_level=30.0),  # –°–ø–æ–∫–æ–π–Ω–æ–µ
            BiometricData(heart_rate=95, stress_level=70.0),  # –°—Ç—Ä–µ—Å—Å
            BiometricData(heart_rate=110, stress_level=85.0), # –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å
        ]
        
        for bio in test_biometrics:
            mood = analyze_mood_from_biometrics(bio)
            print(f"üíì –ü—É–ª—å—Å: {bio.heart_rate}, –°—Ç—Ä–µ—Å—Å: {bio.stress_level:.0f}% ‚Üí –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")
        
        # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\n5. üîî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        current_hour = datetime.now().hour
        
        if 6 <= current_hour < 10:
            notification = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {biometrics.sleep_quality:.0f}%. –†–µ–∫–æ–º–µ–Ω–¥—É—é 10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        elif 10 <= current_hour < 18:
            if biometrics.stress_level and biometrics.stress_level > 60:
                notification = "–ó–∞–º–µ—Ç–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞. –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤?"
            else:
                notification = "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif 18 <= current_hour < 22:
            notification = "–í—Ä–µ–º—è –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?"
        else:
            notification = "–ü–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
        print(f"üì± –£–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification}")
        
        # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n6. üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        print(f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   ‚úÖ API Xiaomi Watch S —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print(f"   ‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤")
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
        
        print(f"\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"   - –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ —á–∞—Å—ã")
        print(f"   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∏–æ–º–µ—Ç—Ä–∏–∏")
        print(f"   - –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print(f"   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ Notion –±–∞–∑–∞–º–∏")
        
        print("\n‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Xiaomi Watch S –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def demo_voice_commands():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("\nüé§ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–û–õ–û–°–û–í–´–• –ö–û–ú–ê–ù–î")
    print("=" * 40)
    
    commands = [
        "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
        "–¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É –º–µ–¥–∏—Ç–∞—Ü–∏—è",
        "–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ",
        "–∫–∞–∫–æ–π –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å?",
        "–ø–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π, —è —É—Å—Ç–∞–ª"
    ]
    
    intent_recognizer = IntentRecognizer()
    
    for i, command in enumerate(commands, 1):
        print(f"\n{i}. üé§ –ö–æ–º–∞–Ω–¥–∞: '{command}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = await intent_recognizer.analyze(command)
        print(f"üì± –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent['intent']}")
        print(f"üì± –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {intent['confidence']:.2f}")
        print(f"üì± –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {intent['extracted_data']}")

async def demo_smart_notifications():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüîî –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ú–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 40)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–Ω—è
    times = [
        (7, "–£—Ç—Ä–æ"),
        (12, "–î–µ–Ω—å"), 
        (18, "–í–µ—á–µ—Ä"),
        (22, "–ù–æ—á—å")
    ]
    
    watch_api = XiaomiWatchAPI()
    biometrics = await watch_api.get_current_biometrics()
    
    for hour, time_name in times:
        print(f"\nüåÖ {time_name} ({hour}:00):")
        
        if 6 <= hour < 10:
            notification = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {biometrics.sleep_quality:.0f}%. –†–µ–∫–æ–º–µ–Ω–¥—É—é 10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        elif 10 <= hour < 18:
            if biometrics.stress_level and biometrics.stress_level > 60:
                notification = "–ó–∞–º–µ—Ç–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞. –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤?"
            elif biometrics.steps and biometrics.steps < 5000:
                notification = "–ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≥—É–ª–∫—É!"
            else:
                notification = "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif 18 <= hour < 22:
            notification = "–í—Ä–µ–º—è –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?"
        else:
            notification = "–ü–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
        print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification}")

if __name__ == "__main__":
    asyncio.run(test_xiaomi_watch_basic())
    asyncio.run(demo_voice_commands())
    asyncio.run(demo_smart_notifications()) 