import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def create_organic_lamp_mesh():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ—É–≥–æ–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è STL —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ª–∞–º–ø—ã
    —Å –∏–∑–≥–∏–±–∏—Å—Ç—ã–º–∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏
    """
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –∫—Ä–∏–≤—ã—Ö)
    phi = np.linspace(0, np.pi, 80)  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —É–≥–æ–ª
    theta = np.linspace(0, 2*np.pi, 160)  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª
    
    PHI, THETA = np.meshgrid(phi, theta)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∞–º–ø—ã
    base_radius = 60.0  # –±–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å 6—Å–º
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ª–Ω—ã
    # –°–ª–æ–π 1: –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–≥–∏–±–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏
    wave1_freq_theta = 6  # —á–∞—Å—Ç–æ—Ç–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    wave1_freq_phi = 4    # —á–∞—Å—Ç–æ—Ç–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    wave1_amp = 12.0      # –∞–º–ø–ª–∏—Ç—É–¥–∞
    
    # –°–ª–æ–π 2: –í—Ç–æ—Ä–∏—á–Ω—ã–µ –≤–æ–ª–Ω—ã –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    wave2_freq_theta = 11
    wave2_freq_phi = 7
    wave2_amp = 8.0
    
    # –°–ª–æ–π 3: –ú–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    wave3_freq_theta = 18
    wave3_freq_phi = 12
    wave3_amp = 4.0
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–≥–∏–±–∏—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ sin –∏ cos
    # –¥–ª—è –±–æ–ª–µ–µ –æ—Ä–≥–∞–Ω–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π - —Å–æ–∑–¥–∞–µ—Ç –∫—Ä—É–ø–Ω—ã–µ –∏–∑–≥–∏–±–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏
    primary_wave = (
        np.sin(THETA * wave1_freq_theta + PHI * 2.0) * 
        np.cos(PHI * wave1_freq_phi + THETA * 1.5) * 
        wave1_amp
    )
    
    # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Å–ª–æ–π - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    secondary_wave = (
        np.cos(THETA * wave2_freq_theta + PHI * 3.0) * 
        np.sin(PHI * wave2_freq_phi + THETA * 2.0) * 
        wave2_amp
    )
    
    # –¢—Ä–µ—Ç–∏—á–Ω—ã–π —Å–ª–æ–π - –º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    detail_wave = (
        np.sin(THETA * wave3_freq_theta + PHI * 4.0) * 
        np.cos(PHI * wave3_freq_phi + THETA * 3.0) * 
        wave3_amp
    )
    
    # –°–æ–∑–¥–∞–µ–º "—Ç–µ—á–µ–Ω–∏–µ" –≤–æ–ª–Ω - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—Ç–µ–∫–∞—Ç—å –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞
    flow_pattern1 = np.sin(THETA * 3 + PHI * 2) * np.cos(PHI * 3)
    flow_pattern2 = np.cos(THETA * 5 + PHI * 4) * np.sin(THETA * 2)
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
    organic_deformation = (
        primary_wave * (0.6 + 0.3 * flow_pattern1) +
        secondary_wave * (0.4 + 0.2 * flow_pattern2) +
        detail_wave * 0.3
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –º–æ–¥—É–ª—è—Ü–∏—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    vertical_flow = np.sin(PHI * 2.5) * 0.4 + 0.6
    organic_deformation *= vertical_flow
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–Ω–æ—Å—Ç–∏
    np.random.seed(42)
    noise = np.random.normal(0, 1.0, organic_deformation.shape)
    organic_deformation += noise
    
    # –°–≥–ª–∞–∂–∏–≤–∞–µ–º —Ä–µ–∑–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    try:
        from scipy import ndimage
        organic_deformation = ndimage.gaussian_filter(organic_deformation, sigma=0.8)
    except ImportError:
        # –ï—Å–ª–∏ scipy –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        pass
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
    radius = base_radius + organic_deformation
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    X = radius * np.sin(PHI) * np.cos(THETA)
    Y = radius * np.sin(PHI) * np.sin(THETA)
    Z = radius * np.cos(PHI)
    
    return X, Y, Z

def create_stl_file():
    """
    –°–æ–∑–¥–∞–µ—Ç STL —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    """
    try:
        from stl import mesh
        
        X, Y, Z = create_organic_lamp_mesh()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –¥–ª—è STL
        vertices = []
        faces = []
        
        rows, cols = X.shape
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤–µ—Ä—à–∏–Ω
        for i in range(rows):
            for j in range(cols):
                vertices.append([X[i,j], Y[i,j], Z[i,j]])
        
        vertices = np.array(vertices)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏
        for i in range(rows-1):
            for j in range(cols-1):
                # –ò–Ω–¥–µ–∫—Å—ã –≤–µ—Ä—à–∏–Ω –¥–ª—è –∫–≤–∞–¥–∞
                v1 = i * cols + j
                v2 = i * cols + ((j + 1) % cols)  # –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –ø–æ theta
                v3 = (i + 1) * cols + j
                v4 = (i + 1) * cols + ((j + 1) % cols)
                
                # –î–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
                faces.append([v1, v3, v2])
                faces.append([v2, v3, v4])
        
        faces = np.array(faces)
        
        # –°–æ–∑–¥–∞–µ–º STL mesh
        lamp_mesh = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))
        
        for i, face in enumerate(faces):
            for j in range(3):
                lamp_mesh.vectors[i][j] = vertices[face[j], :]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º STL —Ñ–∞–π–ª
        lamp_mesh.save('organic_lamp_v2.stl')
        
        print("‚úÖ STL —Ñ–∞–π–ª 'organic_lamp_v2.stl' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(faces)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, {len(vertices)} –≤–µ—Ä—à–∏–Ω")
        print(f"üìè –†–∞–∑–º–µ—Ä—ã: ~120mm –¥–∏–∞–º–µ—Ç—Ä")
        
        return True
        
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ numpy-stl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–º–∞–Ω–¥–æ–π: pip install numpy-stl")
        return False

def create_obj_file():
    """
    –°–æ–∑–¥–∞–µ—Ç OBJ —Ñ–∞–π–ª (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)
    """
    X, Y, Z = create_organic_lamp_mesh()
    
    with open('organic_lamp_v2.obj', 'w') as f:
        f.write("# Organic Lamp Model v2 - curved flowing lines\n")
        f.write("# Created with Python for 3D printing\n")
        f.write("# More organic and flowing pattern\n\n")
        
        rows, cols = X.shape
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã
        vertex_count = 0
        for i in range(rows):
            for j in range(cols):
                f.write(f"v {X[i,j]:.6f} {Y[i,j]:.6f} {Z[i,j]:.6f}\n")
                vertex_count += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏ (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏)
        face_count = 0
        for i in range(rows-1):
            for j in range(cols-1):
                # OBJ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-based –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
                v1 = i * cols + j + 1
                v2 = i * cols + ((j + 1) % cols) + 1
                v3 = (i + 1) * cols + j + 1
                v4 = (i + 1) * cols + ((j + 1) % cols) + 1
                
                # –î–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
                f.write(f"f {v1} {v3} {v2}\n")
                f.write(f"f {v2} {v3} {v4}\n")
                face_count += 2
    
    print("‚úÖ OBJ —Ñ–∞–π–ª 'organic_lamp_v2.obj' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä {vertex_count} –≤–µ—Ä—à–∏–Ω, {face_count} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤")
    return True

def visualize_model():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 3D –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    """
    X, Y, Z = create_organic_lamp_mesh()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∏–¥–∞–º–∏
    fig = plt.figure(figsize=(15, 5))
    
    # –¢—Ä–∏ –≤–∏–¥–∞ –º–æ–¥–µ–ª–∏
    views = [
        (30, 45, "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞"),
        (0, 0, "–í–∏–¥ —Å–ø–µ—Ä–µ–¥–∏"), 
        (90, 0, "–í–∏–¥ —Å–≤–µ—Ä—Ö—É")
    ]
    
    for i, (elev, azim, title) in enumerate(views):
        ax = fig.add_subplot(1, 3, i+1, projection='3d')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
        surf = ax.plot_surface(X, Y, Z, 
                              cmap='YlOrRd',
                              alpha=0.9,
                              linewidth=0,
                              antialiased=True,
                              shade=True,
                              rcount=50, ccount=50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        
        ax.set_title(title, fontsize=12)
        ax.set_xlabel('X (mm)')
        ax.set_ylabel('Y (mm)')
        ax.set_zlabel('Z (mm)')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≥–æ–ª –æ–±–∑–æ—Ä–∞
        ax.view_init(elev=elev, azim=azim)
        
        # –†–∞–≤–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        max_range = 90
        ax.set_xlim([-max_range, max_range])
        ax.set_ylim([-max_range, max_range])
        ax.set_zlim([-max_range, max_range])
    
    plt.suptitle('–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞ v2 - –∏–∑–≥–∏–±–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏', fontsize=16)
    plt.tight_layout()
    plt.show()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è
    fig2 = plt.figure(figsize=(12, 12), facecolor='black')
    ax2 = fig2.add_subplot(111, projection='3d')
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—á–µ–Ω–∏—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    center_distance = np.sqrt(X**2 + Y**2 + Z**2)
    normalized_distance = (center_distance - center_distance.min()) / (center_distance.max() - center_distance.min())
    
    # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è
    colors = plt.cm.YlOrRd(1.0 - normalized_distance * 0.5)
    
    surf2 = ax2.plot_surface(X, Y, Z,
                           facecolors=colors,
                           alpha=0.85,
                           linewidth=0,
                           antialiased=True,
                           rcount=60, ccount=60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    ax2.set_facecolor('black')
    ax2.xaxis.pane.fill = False
    ax2.yaxis.pane.fill = False  
    ax2.zaxis.pane.fill = False
    ax2.grid(False)
    ax2.set_xticks([])
    ax2.set_yticks([])
    ax2.set_zticks([])
    
    # –£–≥–æ–ª –∫–∞–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ç–æ
    ax2.view_init(elev=20, azim=45)
    
    max_range = 90
    ax2.set_xlim([-max_range, max_range])
    ax2.set_ylim([-max_range, max_range])
    ax2.set_zlim([-max_range, max_range])
    
    plt.title("–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞ v2 - —Å –∏–∑–≥–∏–±–∏—Å—Ç—ã–º–∏ –ª–∏–Ω–∏—è–º–∏", color='white', pad=20)
    plt.show()

def main():
    print("üåü –°–æ–∑–¥–∞–Ω–∏–µ STL –º–æ–¥–µ–ª–∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ª–∞–º–ø—ã v2")
    print("üîÑ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –∏–∑–≥–∏–±–∏—Å—Ç—ã–º–∏ –ª–∏–Ω–∏—è–º–∏")
    print("="*60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3D –º–æ–¥–µ–ª—å
    print("üì∫ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3D –º–æ–¥–µ–ª–∏...")
    visualize_model()
    
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è 3D –ø–µ—á–∞—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º OBJ (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    obj_success = create_obj_file()
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å STL
    stl_success = create_stl_file()
    
    print("\n" + "="*60)
    print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if obj_success:
        print("‚úÖ organic_lamp_v2.obj - —Å–æ–∑–¥–∞–Ω (–∏–∑–≥–∏–±–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏)")
    
    if stl_success:
        print("‚úÖ organic_lamp_v2.stl - —Å–æ–∑–¥–∞–Ω (–≥–æ—Ç–æ–≤ –¥–ª—è 3D –ø–µ—á–∞—Ç–∏)")
    else:
        print("‚ö†Ô∏è  STL –Ω–µ —Å–æ–∑–¥–∞–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏ numpy-stl: pip install numpy-stl")
    
    print("\nüîç –ö–ê–ö –ü–û–°–ú–û–¢–†–ï–¢–¨:")
    print("1. –í Cursor: —É—Å—Ç–∞–Ω–æ–≤–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ '3D Viewer', –∫–ª–∏–∫–Ω–∏ –Ω–∞ —Ñ–∞–π–ª")
    print("2. –û–Ω–ª–∞–π–Ω: https://3dviewer.net (–ø–µ—Ä–µ—Ç–∞—â–∏ —Ñ–∞–π–ª)")
    print("3. –ü—Ä–æ–≥—Ä–∞–º–º—ã: Blender, FreeCAD, PrusaSlicer")
    
    print("\nüñ®Ô∏è  –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø 3D –ü–ï–ß–ê–¢–ò:")
    print("‚Ä¢ –†–∞–∑–º–µ—Ä: ~120mm –¥–∏–∞–º–µ—Ç—Ä (–º–∞—Å—à—Ç–∞–±–∏—Ä—É–π –ø–æ –∂–µ–ª–∞–Ω–∏—é)")
    print("‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: PLA –∏–ª–∏ PETG")
    print("‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: 15-20%")
    print("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∏: –ù–ï –Ω—É–∂–Ω—ã")
    print("‚Ä¢ –î–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫")
    
    print("\nüí° –£–õ–£–ß–®–ï–ù–ò–Ø v2:")
    print("‚Ä¢ –ë–æ–ª–µ–µ –∏–∑–≥–∏–±–∏—Å—Ç—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏—á–Ω—ã–µ –ª–∏–Ω–∏–∏")
    print("‚Ä¢ –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤–æ–ª–Ω")
    print("‚Ä¢ –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
    print("‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    main() 