import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def create_smooth_organic_lamp():
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–¥–∫—É—é –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫—É—é –ª–∞–º–ø—É –±–µ–∑ "–µ–∂–∏—Å—Ç–æ—Å—Ç–∏"
    """
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–¥–∫–æ—Å—Ç–∏
    phi = np.linspace(0, np.pi, 100)  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —É–≥–æ–ª
    theta = np.linspace(0, 2*np.pi, 200)  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª
    
    PHI, THETA = np.meshgrid(phi, theta)
    
    # –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å
    base_radius = 60.0  # –º–º
    
    # –ù–û–í–´–ô –ü–û–î–•–û–î: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–≤–Ω—ã–µ –≤–æ–ª–Ω—ã –±–µ–∑ –æ—Å—Ç—Ä—ã—Ö –∫—Ä–∞–µ–≤
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–≤–Ω—ã–µ –≤–æ–ª–Ω—ã - –ë–ï–ó abs() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—Å—Ç—Ä—ã—Ö –∫—Ä–∞–µ–≤
    primary_wave = (
        np.sin(THETA * 6 + PHI * 1.5) * 
        np.cos(PHI * 3 + THETA * 0.8) * 8.0
    )
    
    # –í—Ç–æ—Ä–∏—á–Ω—ã–µ –≤–æ–ª–Ω—ã –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    secondary_wave = (
        np.cos(THETA * 9 + PHI * 2.2) * 
        np.sin(PHI * 4 + THETA * 1.2) * 5.0
    )
    
    # –¢—Ä–µ—Ç–∏—á–Ω—ã–µ –≤–æ–ª–Ω—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    tertiary_wave = (
        np.sin(THETA * 12 + PHI * 3.1) * 
        np.cos(PHI * 5 + THETA * 1.8) * 3.0
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
    flow_modulation = (
        np.sin(PHI * 2) * 0.3 + 0.7  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
    ) * (
        np.cos(THETA * 2) * 0.2 + 0.8  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
    )
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤–æ–ª–Ω—ã —Å –ø–ª–∞–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
    organic_deformation = (
        primary_wave * flow_modulation * 0.6 +
        secondary_wave * flow_modulation * 0.4 +
        tertiary_wave * flow_modulation * 0.2
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–µ–Ω—å –º—è–≥–∫–∏–π —à—É–º
    np.random.seed(42)
    gentle_noise = np.random.normal(0, 0.8, organic_deformation.shape)
    
    # –°–≥–ª–∞–∂–∏–≤–∞–µ–º —à—É–º –ø—Ä–æ—Å—Ç—ã–º —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º
    kernel_size = 3
    smoothed_noise = np.zeros_like(gentle_noise)
    for i in range(kernel_size, gentle_noise.shape[0] - kernel_size):
        for j in range(kernel_size, gentle_noise.shape[1] - kernel_size):
            smoothed_noise[i, j] = np.mean(
                gentle_noise[i-kernel_size:i+kernel_size+1, 
                           j-kernel_size:j+kernel_size+1]
            )
    
    organic_deformation += smoothed_noise * 0.3
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–π –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    smoothed_deformation = np.zeros_like(organic_deformation)
    for i in range(2, organic_deformation.shape[0] - 2):
        for j in range(2, organic_deformation.shape[1] - 2):
            smoothed_deformation[i, j] = np.mean(
                organic_deformation[i-2:i+3, j-2:j+3]
            )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    organic_deformation = smoothed_deformation
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
    radius = base_radius + organic_deformation
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–¥–∏—É—Å–æ–≤
    radius = np.maximum(radius, base_radius * 0.3)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    X = radius * np.sin(PHI) * np.cos(THETA)
    Y = radius * np.sin(PHI) * np.sin(THETA)
    Z = radius * np.cos(PHI)
    
    return X, Y, Z

def create_flowing_lamp():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å "—Ç–µ–∫—É—á–∏–º–∏" —Ñ–æ—Ä–º–∞–º–∏
    """
    phi = np.linspace(0, np.pi, 90)
    theta = np.linspace(0, 2*np.pi, 180)
    
    PHI, THETA = np.meshgrid(phi, theta)
    
    base_radius = 60.0
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–¥–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    # –°–æ–∑–¥–∞–µ–º "—Ç–µ–∫—É—á–∏–µ" –≤–æ–ª–Ω—ã
    flow1 = np.sin(THETA * 4 + PHI * 2) * np.exp(-0.1 * PHI) * 10
    flow2 = np.cos(THETA * 7 + PHI * 1.5) * np.sin(PHI * 2) * 6
    flow3 = np.sin(THETA * 10 + PHI * 3) * np.cos(PHI * 1.5) * 4
    
    # –ú–æ–¥—É–ª—è—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    vertical_flow = np.sin(PHI * 1.5) * 0.4 + 0.6
    horizontal_flow = np.cos(THETA * 1.2) * 0.3 + 0.7
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
    deformation = (flow1 + flow2 + flow3) * vertical_flow * horizontal_flow
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    try:
        from scipy import ndimage
        kernel = np.ones((5, 5)) / 25
        deformation = ndimage.convolve(deformation, kernel, mode='wrap')
    except ImportError:
        # –ï—Å–ª–∏ scipy –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        smoothed = np.zeros_like(deformation)
        for i in range(2, deformation.shape[0] - 2):
            for j in range(2, deformation.shape[1] - 2):
                smoothed[i, j] = np.mean(deformation[i-2:i+3, j-2:j+3])
        deformation = smoothed
    
    radius = base_radius + deformation
    radius = np.maximum(radius, base_radius * 0.4)
    
    X = radius * np.sin(PHI) * np.cos(THETA)
    Y = radius * np.sin(PHI) * np.sin(THETA)
    Z = radius * np.cos(PHI)
    
    return X, Y, Z

def create_stl_file(X, Y, Z, filename):
    """
    –°–æ–∑–¥–∞–µ—Ç STL —Ñ–∞–π–ª
    """
    try:
        from stl import mesh
        
        vertices = []
        faces = []
        
        rows, cols = X.shape
        
        for i in range(rows):
            for j in range(cols):
                vertices.append([X[i,j], Y[i,j], Z[i,j]])
        
        vertices = np.array(vertices)
        
        for i in range(rows-1):
            for j in range(cols-1):
                v1 = i * cols + j
                v2 = i * cols + ((j + 1) % cols)
                v3 = (i + 1) * cols + j
                v4 = (i + 1) * cols + ((j + 1) % cols)
                
                faces.append([v1, v3, v2])
                faces.append([v2, v3, v4])
        
        faces = np.array(faces)
        
        lamp_mesh = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))
        
        for i, face in enumerate(faces):
            for j in range(3):
                lamp_mesh.vectors[i][j] = vertices[face[j], :]
        
        lamp_mesh.save(filename)
        
        print(f"‚úÖ STL —Ñ–∞–π–ª '{filename}' —Å–æ–∑–¥–∞–Ω!")
        print(f"üìä {len(faces)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, {len(vertices)} –≤–µ—Ä—à–∏–Ω")
        
        return True
        
    except ImportError:
        print("‚ùå numpy-stl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def visualize_comparison():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    """
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–¥–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    X1, Y1, Z1 = create_smooth_organic_lamp()
    X2, Y2, Z2 = create_flowing_lamp()
    
    fig = plt.figure(figsize=(15, 10))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    algorithms = [
        (X1, Y1, Z1, "–ì–ª–∞–¥–∫–∞—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞"),
        (X2, Y2, Z2, "–¢–µ–∫—É—á–∞—è –ª–∞–º–ø–∞")
    ]
    
    for idx, (X, Y, Z, title) in enumerate(algorithms):
        # –¢—Ä–∏ –≤–∏–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        for i, (elev, azim, view_name) in enumerate([(30, 45, "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞"), (0, 0, "–°–ø–µ—Ä–µ–¥–∏"), (90, 0, "–°–≤–µ—Ä—Ö—É")]):
            ax = fig.add_subplot(2, 3, idx*3 + i + 1, projection='3d')
            
            surf = ax.plot_surface(X, Y, Z, 
                                 cmap='YlOrRd',
                                 alpha=0.9,
                                 linewidth=0,
                                 antialiased=True,
                                 rcount=40, ccount=40)
            
            ax.set_title(f"{title}\n{view_name}", fontsize=10)
            ax.view_init(elev=elev, azim=azim)
            
            max_range = 90
            ax.set_xlim([-max_range, max_range])
            ax.set_ylim([-max_range, max_range])
            ax.set_zlim([-max_range, max_range])
            
            ax.set_xticks([])
            ax.set_yticks([])
            ax.set_zticks([])
    
    plt.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–ª–∞–¥–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–±–µ–∑ "–µ–∂–∏—Å—Ç–æ—Å—Ç–∏")', fontsize=16)
    plt.tight_layout()
    plt.show()
    
    return X1, Y1, Z1, X2, Y2, Z2

def main():
    print("üåü –°–û–ó–î–ê–ù–ò–ï –ì–õ–ê–î–ö–û–ô –û–†–ì–ê–ù–ò–ß–ï–°–ö–û–ô –õ–ê–ú–ü–´")
    print("üö´ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º '–µ–∂–∏—Å—Ç–æ—Å—Ç—å' –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π")
    print("="*60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    X1, Y1, Z1, X2, Y2, Z2 = visualize_comparison()
    
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ STL —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    create_stl_file(X1, Y1, Z1, 'smooth_organic_lamp.stl')
    create_stl_file(X2, Y2, Z2, 'flowing_lamp.stl')
    
    print("\n" + "="*60)
    print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ smooth_organic_lamp.stl - –≥–ª–∞–¥–∫–∞—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è")
    print("‚úÖ flowing_lamp.stl - —Ç–µ–∫—É—á–∞—è –≤–µ—Ä—Å–∏—è")
    
    print("\nüí° –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print("‚Ä¢ –£–±—Ä–∞–ª abs() - –Ω–µ—Ç –æ—Å—Ç—Ä—ã—Ö –∫—Ä–∞–µ–≤")
    print("‚Ä¢ –î–æ–±–∞–≤–∏–ª —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ - –Ω–µ—Ç '–µ–∂–∏—Å—Ç–æ—Å—Ç–∏'")
    print("‚Ä¢ –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ - –±–æ–ª–µ–µ –≥–ª–∞–¥–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é —Ç–æ–ª—å–∫–æ –ø–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ - –Ω–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏–π")
    
    print("\nüîç –ö–ê–ö –ü–û–°–ú–û–¢–†–ï–¢–¨:")
    print("1. –í Cursor: —É—Å—Ç–∞–Ω–æ–≤–∏ '3D Viewer', –∫–ª–∏–∫–Ω–∏ –Ω–∞ STL")
    print("2. –û–Ω–ª–∞–π–Ω: https://3dviewer.net")
    print("3. –°—Ä–∞–≤–Ω–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏")

if __name__ == "__main__":
    main() 