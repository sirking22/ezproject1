#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –∞–¥–º–∏–Ω—Å–∫–∏–º –±–æ—Ç–æ–º
"""

import asyncio
import sys
import os
from datetime import datetime, UTC

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.config import Settings
from src.notion.universal_repository import UniversalNotionRepository

async def test_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        settings = Settings()
        repo = UniversalNotionRepository(settings)
        
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        tables = ['rituals', 'habits', 'reflections', 'guides', 'actions', 'terms', 'materials']
        
        for table in tables:
            database_id = repo.databases.get(table)
            if database_id:
                print(f"‚úÖ {table}: {database_id[:8]}...")
            else:
                print(f"‚ùå {table}: ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("\n2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        for table in tables:
            is_valid, message = await repo.validate_database(table)
            if is_valid:
                print(f"‚úÖ {table}: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print(f"‚ùå {table}: {message}")
        
        print("\n3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞...")
        ritual_data = {
            'title': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∏—Ç—É–∞–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            'status': 'Active',
            'category': 'Health',
            'frequency': 'Daily',
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∏—Ç—É–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            'tags': ['test', 'integration'],
            'created_date': datetime.now(UTC),
            'priority': 'High'
        }
        
        created_ritual = await repo.create_ritual(ritual_data)
        if created_ritual:
            print(f"‚úÖ –†–∏—Ç—É–∞–ª —Å–æ–∑–¥–∞–Ω: {created_ritual['title']} (ID: {created_ritual['id']})")
            
            print("\n4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞...")
            retrieved_ritual = await repo.get_item('rituals', created_ritual['id'])
            if retrieved_ritual:
                print(f"‚úÖ –†–∏—Ç—É–∞–ª –ø–æ–ª—É—á–µ–Ω: {retrieved_ritual['title']}")
            
            print("\n5. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞...")
            update_data = {
                'description': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
                'priority': 'Medium'
            }
            updated_ritual = await repo.update_item('rituals', created_ritual['id'], update_data)
            if updated_ritual:
                print(f"‚úÖ –†–∏—Ç—É–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_ritual['description']}")
            
            print("\n6. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞...")
            search_results = await repo.search_items('rituals', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è')
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {len(search_results)}")
            
            print("\n7. –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
            active_rituals = await repo.get_rituals({'status': 'Active'})
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤: {len(active_rituals)}")
            
            print("\n8. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞...")
            deleted = await repo.delete_item('rituals', created_ritual['id'])
            if deleted:
                print("‚úÖ –†–∏—Ç—É–∞–ª —É–¥–∞–ª–µ–Ω")
        
        print("\n9. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏...")
        habit_data = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            'status': 'Active',
            'category': 'Productivity',
            'frequency': 'Daily',
            'description': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            'tags': ['test', 'integration'],
            'created_date': datetime.now(UTC),
            'target_frequency': 7,
            'current_frequency': 0
        }
        
        created_habit = await repo.create_habit(habit_data)
        if created_habit:
            print(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_habit['title']} (ID: {created_habit['id']})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
            await repo.delete_item('habits', created_habit['id'])
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n10. –¢–µ—Å—Ç –∞–ª–∏–∞—Å–æ–≤...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–∏–∞—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        rituals = await repo.get_rituals()
        habits = await repo.get_habits()
        reflections = await repo.get_reflections()
        guides = await repo.get_guides()
        actions = await repo.get_actions()
        terms = await repo.get_terms()
        materials = await repo.get_materials()
        
        print(f"‚úÖ –ê–ª–∏–∞—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç:")
        print(f"   - –†–∏—Ç—É–∞–ª–æ–≤: {len(rituals)}")
        print(f"   - –ü—Ä–∏–≤—ã—á–µ–∫: {len(habits)}")
        print(f"   - –†–∞–∑–º—ã—à–ª–µ–Ω–∏–π: {len(reflections)}")
        print(f"   - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤: {len(guides)}")
        print(f"   - –î–µ–π—Å—Ç–≤–∏–π: {len(actions)}")
        print(f"   - –¢–µ—Ä–º–∏–Ω–æ–≤: {len(terms)}")
        print(f"   - –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials)}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_integration()) 