package com.quickvoice

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject
import java.io.IOException
import java.util.concurrent.TimeUnit

class TelegramNotifier {
    
    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .build()
    
    private val botToken = "your_telegram_bot_token" // –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    private val chatId = "your_chat_id" // –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    private val mediaType = "application/json; charset=utf-8".toMediaType()
    
    suspend fun sendNotification(message: String): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val requestBody = JSONObject().apply {
                    put("chat_id", chatId)
                    put("text", message)
                    put("parse_mode", "HTML")
                }.toString()
                
                val request = Request.Builder()
                    .url("https://api.telegram.org/bot$botToken/sendMessage")
                    .post(requestBody.toRequestBody(mediaType))
                    .addHeader("Content-Type", "application/json")
                    .build()
                
                val response = client.newCall(request).execute()
                response.isSuccessful
            } catch (e: Exception) {
                false
            }
        }
    }
    
    suspend fun sendQuickUpdate(data: Map<String, Any>): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val message = formatQuickUpdate(data)
                sendNotification(message)
            } catch (e: Exception) {
                false
            }
        }
    }
    
    private fun formatQuickUpdate(data: Map<String, Any>): String {
        val type = data["type"] as String
        val content = data["content"] as String
        val timestamp = java.time.LocalDateTime.now().format(
            java.time.format.DateTimeFormatter.ofPattern("HH:mm")
        )
        
        return when (type) {
            "task" -> """
                ‚úÖ <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>
                üìù $content
                ‚è∞ $timestamp
                üì± –î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
            """.trimIndent()
            
            "reflection" -> """
                üí≠ <b>–ù–æ–≤–∞—è –º—ã—Å–ª—å</b>
                üìù $content
                ‚è∞ $timestamp
                üé§ –ó–∞–ø–∏—Å–∞–Ω–æ –≥–æ–ª–æ—Å–æ–º
            """.trimIndent()
            
            "habit" -> """
                üîÑ <b>–ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞</b>
                üìù $content
                ‚è∞ $timestamp
                ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
            """.trimIndent()
            
            "idea" -> """
                üí° <b>–ù–æ–≤–∞—è –∏–¥–µ—è</b>
                üìù $content
                ‚è∞ $timestamp
                üé§ –ó–∞–ø–∏—Å–∞–Ω–æ –≥–æ–ª–æ—Å–æ–º
            """.trimIndent()
            
            else -> """
                üì± <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b>
                üìù $content
                ‚è∞ $timestamp
            """.trimIndent()
        }
    }
    
    suspend fun sendDailySummary(summary: Map<String, Any>): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val message = formatDailySummary(summary)
                sendNotification(message)
            } catch (e: Exception) {
                false
            }
        }
    }
    
    private fun formatDailySummary(summary: Map<String, Any>): String {
        val date = summary["date"] as String
        val tasksCompleted = summary["tasks_completed"] as Int
        val tasksTotal = summary["tasks_total"] as Int
        val habitsCompleted = summary["habits_completed"] as Int
        val reflectionsCount = summary["reflections_count"] as Int
        val mood = summary["mood"] as String
        
        return """
            üìä <b>–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç</b>
            üìÖ $date
            
            ‚úÖ –ó–∞–¥–∞—á–∏: $tasksCompleted/$tasksTotal
            üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: $habitsCompleted –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            üí≠ –†–µ—Ñ–ª–µ–∫—Å–∏–∏: $reflectionsCount –∑–∞–ø–∏—Å–µ–π
            üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: $mood
            
            üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!
        """.trimIndent()
    }
    
    suspend fun sendContextualNotification(
        message: String,
        context: String,
        priority: String = "normal"
    ): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val formattedMessage = formatContextualMessage(message, context, priority)
                sendNotification(formattedMessage)
            } catch (e: Exception) {
                false
            }
        }
    }
    
    private fun formatContextualMessage(
        message: String,
        context: String,
        priority: String
    ): String {
        val emoji = when (context) {
            "work" -> "üíº"
            "morning" -> "üåÖ"
            "evening" -> "üåô"
            "health" -> "üèÉ‚Äç‚ôÇÔ∏è"
            else -> "üì±"
        }
        
        val priorityEmoji = when (priority) {
            "high" -> "üö®"
            "normal" -> "üì¢"
            "low" -> "üí¨"
            else -> "üì¢"
        }
        
        val timestamp = java.time.LocalDateTime.now().format(
            java.time.format.DateTimeFormatter.ofPattern("HH:mm")
        )
        
        return """
            $priorityEmoji $emoji <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>
            üìù $message
            ‚è∞ $timestamp
            üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
        """.trimIndent()
    }
    
    suspend fun sendErrorNotification(error: String): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val message = """
                    ‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ</b>
                    üö® $error
                    ‚è∞ ${java.time.LocalDateTime.now().format(
                        java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")
                    )}
                    üì± Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                """.trimIndent()
                
                sendNotification(message)
            } catch (e: Exception) {
                false
            }
        }
    }
    
    suspend fun testConnection(): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val request = Request.Builder()
                    .url("https://api.telegram.org/bot$botToken/getMe")
                    .get()
                    .build()
                
                val response = client.newCall(request).execute()
                response.isSuccessful
            } catch (e: Exception) {
                false
            }
        }
    }
    
    suspend fun sendVoiceCommandLog(command: String, response: String): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val message = """
                    üé§ <b>–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞</b>
                    üìù –ö–æ–º–∞–Ω–¥–∞: $command
                    üí¨ –û—Ç–≤–µ—Ç: $response
                    ‚è∞ ${java.time.LocalDateTime.now().format(
                        java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")
                    )}
                """.trimIndent()
                
                sendNotification(message)
            } catch (e: Exception) {
                false
            }
        }
    }
} 