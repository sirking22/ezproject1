package com.quickvoice

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import androidx.core.app.NotificationCompat
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.time.LocalDateTime
import java.time.LocalTime

class NotificationManager(private val context: Context) {
    
    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
    private val analyticsManager = AnalyticsManager(context)
    private val contextManager = ContextManager()
    
    companion object {
        const val CHANNEL_ID_REMINDERS = "voice_reminders"
        const val CHANNEL_ID_UPDATES = "voice_updates"
        const val NOTIFICATION_ID_REMINDER = 100
        const val NOTIFICATION_ID_UPDATE = 101
    }
    
    init {
        createNotificationChannels()
    }
    
    private fun createNotificationChannels() {
        val reminderChannel = NotificationChannel(
            CHANNEL_ID_REMINDERS,
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            NotificationManager.IMPORTANCE_DEFAULT
        ).apply {
            description = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö"
        }
        
        val updateChannel = NotificationChannel(
            CHANNEL_ID_UPDATES,
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            NotificationManager.IMPORTANCE_LOW
        ).apply {
            description = "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        }
        
        notificationManager.createNotificationChannel(reminderChannel)
        notificationManager.createNotificationChannel(updateChannel)
    }
    
    suspend fun showSmartReminder() {
        withContext(Dispatchers.IO) {
            val currentContext = contextManager.getCurrentContext()
            val dailyUsage = analyticsManager.getDailyUsageCount()
            
            val (title, message) = when {
                dailyUsage == 0 -> {
                    when (currentContext) {
                        "morning" -> "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!" to "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –¥–µ–Ω—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π"
                        "work" -> "üíº –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è" to "–î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏ –≥–æ–ª–æ—Å–æ–º"
                        "evening" -> "üåô –í–µ—á–µ—Ä" to "–ó–∞–ø–∏—à–∏ –º—ã—Å–ª–∏ –æ –¥–Ω–µ"
                        else -> "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç" to "–ü–æ–ø—Ä–æ–±—É–π –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"
                    }
                }
                
                dailyUsage < 3 -> {
                    "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å" to "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ $dailyUsage —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è"
                }
                
                else -> {
                    "üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!" to "–¢—ã –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                }
            }
            
            showNotification(
                channelId = CHANNEL_ID_REMINDERS,
                notificationId = NOTIFICATION_ID_REMINDER,
                title = title,
                message = message,
                autoCancel = true
            )
        }
    }
    
    suspend fun showContextualReminder() {
        withContext(Dispatchers.IO) {
            val currentContext = contextManager.getCurrentContext()
            val time = LocalTime.now()
            
            val (title, message) = when (currentContext) {
                "morning" -> {
                    if (time.isBefore(LocalTime.of(9, 0))) {
                        "üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª" to "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π"
                    } else {
                        "üíº –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É" to "–î–æ–±–∞–≤—å –ø–µ—Ä–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–Ω—è"
                    }
                }
                
                "work" -> {
                    if (time.isBefore(LocalTime.of(12, 0))) {
                        "üìã –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏" to "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞"
                    } else if (time.isBefore(LocalTime.of(15, 0))) {
                        "üçΩÔ∏è –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤" to "–ó–∞–ø–∏—à–∏ –∏–¥–µ–∏ –∑–∞ –æ–±–µ–¥–æ–º"
                    } else {
                        "üìä –í–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä" to "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–∞–º"
                    }
                }
                
                "evening" -> {
                    if (time.isBefore(LocalTime.of(20, 0))) {
                        "üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è" to "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å"
                    } else {
                        "üò¥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É" to "–ó–∞–ø–∏—à–∏ –º—ã—Å–ª–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º"
                    }
                }
                
                else -> {
                    "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç" to "–ü–æ–ø—Ä–æ–±—É–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"
                }
            }
            
            showNotification(
                channelId = CHANNEL_ID_REMINDERS,
                notificationId = NOTIFICATION_ID_REMINDER + 1,
                title = title,
                message = message,
                autoCancel = true
            )
        }
    }
    
    suspend fun showUsageUpdate() {
        withContext(Dispatchers.IO) {
            val dailyUsage = analyticsManager.getDailyUsageCount()
            val stats = analyticsManager.generateUsageStats()
            
            val message = when {
                dailyUsage == 0 -> "–¢—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–µ–≥–æ–¥–Ω—è"
                dailyUsage == 1 -> "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –û–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–µ–≥–æ–¥–Ω—è"
                dailyUsage < 5 -> "–•–æ—Ä–æ—à–æ! $dailyUsage –∫–æ–º–∞–Ω–¥ —Å–µ–≥–æ–¥–Ω—è"
                else -> "–û—Ç–ª–∏—á–Ω–æ! $dailyUsage –∫–æ–º–∞–Ω–¥ —Å–µ–≥–æ–¥–Ω—è"
            }
            
            showNotification(
                channelId = CHANNEL_ID_UPDATES,
                notificationId = NOTIFICATION_ID_UPDATE,
                title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                message = message,
                autoCancel = true
            )
        }
    }
    
    suspend fun showAchievementNotification(achievement: String) {
        withContext(Dispatchers.IO) {
            showNotification(
                channelId = CHANNEL_ID_UPDATES,
                notificationId = NOTIFICATION_ID_UPDATE + 1,
                title = "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
                message = achievement,
                autoCancel = true
            )
        }
    }
    
    private fun showNotification(
        channelId: String,
        notificationId: Int,
        title: String,
        message: String,
        autoCancel: Boolean = true
    ) {
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        
        val pendingIntent = PendingIntent.getActivity(
            context,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = NotificationCompat.Builder(context, channelId)
            .setSmallIcon(android.R.drawable.ic_btn_speak_now)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setAutoCancel(autoCancel)
            .setContentIntent(pendingIntent)
            .build()
        
        notificationManager.notify(notificationId, notification)
    }
    
    fun cancelNotification(notificationId: Int) {
        notificationManager.cancel(notificationId)
    }
    
    fun cancelAllNotifications() {
        notificationManager.cancelAll()
    }
    
    suspend fun checkAndShowReminders() {
        withContext(Dispatchers.IO) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if (analyticsManager.shouldShowUsageReminder()) {
                showSmartReminder()
                analyticsManager.markReminderShown()
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            val time = LocalTime.now()
            when {
                time.hour == 9 && time.minute == 0 -> showContextualReminder()
                time.hour == 12 && time.minute == 0 -> showContextualReminder()
                time.hour == 18 && time.minute == 0 -> showContextualReminder()
                time.hour == 21 && time.minute == 0 -> showContextualReminder()
            }
        }
    }
    
    suspend fun showWeeklyReport() {
        withContext(Dispatchers.IO) {
            val stats = analyticsManager.generateUsageStats()
            
            if (stats.totalCommands > 0) {
                showNotification(
                    channelId = CHANNEL_ID_UPDATES,
                    notificationId = NOTIFICATION_ID_UPDATE + 2,
                    title = "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤",
                    message = "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    autoCancel = true
                )
            }
        }
    }
} 