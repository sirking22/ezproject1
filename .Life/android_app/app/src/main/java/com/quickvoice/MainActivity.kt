package com.quickvoice

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.speech.RecognitionListener
import android.speech.RecognizerIntent
import android.speech.SpeechRecognizer
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import java.util.*

class MainActivity : AppCompatActivity() {
    
    private lateinit var voiceButton: Button
    private lateinit var statusText: TextView
    private lateinit var commandText: TextView
    private lateinit var resultText: TextView
    
    private var speechRecognizer: SpeechRecognizer? = null
    private var isListening = false
    
    private val llmClient = LLMClient()
    private val notionSync = NotionSync()
    private val telegramNotifier = TelegramNotifier()
    private val contextManager = ContextManager()
    
    companion object {
        private const val PERMISSION_REQUEST_CODE = 123
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        initializeViews()
        setupVoiceRecognition()
        checkPermissions()
        updateStatus("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    }
    
    private fun initializeViews() {
        voiceButton = findViewById(R.id.voiceButton)
        statusText = findViewById(R.id.statusText)
        commandText = findViewById(R.id.commandText)
        resultText = findViewById(R.id.resultText)
        
        voiceButton.setOnClickListener {
            if (isListening) {
                stopListening()
            } else {
                startListening()
            }
        }
    }
    
    private fun setupVoiceRecognition() {
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this)
        speechRecognizer?.setRecognitionListener(object : RecognitionListener {
            override fun onReadyForSpeech(params: Bundle?) {
                updateStatus("–°–ª—É—à–∞—é...")
                isListening = true
                voiceButton.text = "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            }
            
            override fun onBeginningOfSpeech() {
                updateStatus("–ì–æ–≤–æ—Ä–∏—Ç–µ...")
            }
            
            override fun onRmsChanged(rmsdB: Float) {
                // –ê–Ω–∏–º–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
            }
            
            override fun onBufferReceived(buffer: ByteArray?) {}
            
            override fun onEndOfSpeech() {
                updateStatus("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            }
            
            override fun onError(error: Int) {
                when (error) {
                    SpeechRecognizer.ERROR_NO_MATCH -> {
                        updateStatus("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                        Toast.makeText(this@MainActivity, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", Toast.LENGTH_SHORT).show()
                    }
                    SpeechRecognizer.ERROR_SPEECH_TIMEOUT -> {
                        updateStatus("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
                    }
                    else -> {
                        updateStatus("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                    }
                }
                stopListening()
            }
            
            override fun onResults(results: Bundle?) {
                val matches = results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)
                if (!matches.isNullOrEmpty()) {
                    val command = matches[0]
                    processCommand(command)
                }
                stopListening()
            }
            
            override fun onPartialResults(partialResults: Bundle?) {}
            override fun onEvent(eventType: Int, params: Bundle?) {}
        })
    }
    
    private fun startListening() {
        if (checkPermissions()) {
            val intent = RecognizerIntent.getVoiceDetailsIntent(this)
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ru-RU")
            intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 1)
            intent.putExtra(RecognizerIntent.EXTRA_PARTIAL_RESULTS, false)
            
            speechRecognizer?.startListening(intent)
        }
    }
    
    private fun stopListening() {
        speechRecognizer?.stopListening()
        isListening = false
        voiceButton.text = "üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
        updateStatus("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    }
    
    private fun processCommand(command: String) {
        commandText.text = "–ö–æ–º–∞–Ω–¥–∞: $command"
        updateStatus("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...")
        
        lifecycleScope.launch {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                val context = contextManager.getCurrentContext()
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
                val llmResponse = llmClient.processCommand(command, context)
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                val result = processLLMResponse(llmResponse, command)
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Notion
                if (result.shouldSync) {
                    notionSync.syncData(result.data)
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                if (result.shouldNotify) {
                    telegramNotifier.sendNotification(result.message)
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                resultText.text = result.message
                updateStatus("–ì–æ—Ç–æ–≤–æ")
                
                Toast.makeText(this@MainActivity, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", Toast.LENGTH_SHORT).show()
                
            } catch (e: Exception) {
                updateStatus("–û—à–∏–±–∫–∞: ${e.message}")
                resultText.text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã"
                Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    private fun processLLMResponse(llmResponse: String, originalCommand: String): CommandResult {
        return when {
            originalCommand.contains("–∑–∞–¥–∞—á–∞", ignoreCase = true) || 
            originalCommand.contains("todo", ignoreCase = true) -> {
                CommandResult(
                    message = "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: $llmResponse",
                    shouldSync = true,
                    shouldNotify = true,
                    data = mapOf(
                        "type" to "task",
                        "content" to llmResponse,
                        "source" to "voice"
                    )
                )
            }
            
            originalCommand.contains("–º—ã—Å–ª—å", ignoreCase = true) || 
            originalCommand.contains("—Ä–µ—Ñ–ª–µ–∫—Å–∏—è", ignoreCase = true) -> {
                CommandResult(
                    message = "üí≠ –ú—ã—Å–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞: $llmResponse",
                    shouldSync = true,
                    shouldNotify = false,
                    data = mapOf(
                        "type" to "reflection",
                        "content" to llmResponse,
                        "source" to "voice"
                    )
                )
            }
            
            originalCommand.contains("–ø—Ä–∏–≤—ã—á–∫–∞", ignoreCase = true) -> {
                CommandResult(
                    message = "üîÑ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞: $llmResponse",
                    shouldSync = true,
                    shouldNotify = true,
                    data = mapOf(
                        "type" to "habit",
                        "content" to llmResponse,
                        "source" to "voice"
                    )
                )
            }
            
            originalCommand.contains("–ø—Ä–æ–≥—Ä–µ—Å—Å", ignoreCase = true) || 
            originalCommand.contains("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", ignoreCase = true) -> {
                CommandResult(
                    message = "üìä $llmResponse",
                    shouldSync = false,
                    shouldNotify = false,
                    data = emptyMap()
                )
            }
            
            else -> {
                CommandResult(
                    message = llmResponse,
                    shouldSync = false,
                    shouldNotify = false,
                    data = emptyMap()
                )
            }
        }
    }
    
    private fun updateStatus(status: String) {
        statusText.text = "–°—Ç–∞—Ç—É—Å: $status"
    }
    
    private fun checkPermissions(): Boolean {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) 
            != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.RECORD_AUDIO),
                PERMISSION_REQUEST_CODE
            )
            return false
        }
        return true
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω–æ", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        speechRecognizer?.destroy()
    }
}

data class CommandResult(
    val message: String,
    val shouldSync: Boolean,
    val shouldNotify: Boolean,
    val data: Map<String, Any>
) 