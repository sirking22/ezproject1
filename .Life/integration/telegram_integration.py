"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –¥–ª—è Quick Voice Assistant
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class TelegramMessage:
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    text: str
    chat_id: str
    parse_mode: str = "HTML"
    reply_markup: Optional[Dict[str, Any]] = None
    disable_notification: bool = False

class TelegramIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"""
    
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.bot = None
        self.enabled = bool(bot_token and chat_id)
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        if not self.enabled:
            logger.warning("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
            # from telegram import Bot
            # self.bot = Bot(token=self.bot_token)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
            success = await self._test_connection()
            if success:
                logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
                self.enabled = False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
            self.enabled = False
    
    async def _test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        try:
            import httpx
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/getMe")
                if response.status_code == 200:
                    data = response.json()
                    if data.get("ok"):
                        bot_info = data.get("result", {})
                        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'unknown')}")
                        return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def send_message(self, text: str, source: str = "watch_voice") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.enabled:
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            formatted_text = self._format_message(text, source)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API
            success = await self._send_via_api(formatted_text)
            
            if success:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {text[:50]}...")
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_voice_notification(self, command: str, response: str, action: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        if not self.enabled:
            return False
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification = self._create_voice_notification(command, response, action)
            
            success = await self._send_via_api(notification)
            
            if success:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_health_update(self, health_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ"""
        if not self.enabled:
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ
            health_message = self._format_health_data(health_data)
            
            success = await self._send_via_api(health_message)
            
            if success:
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ: {e}")
            return False
    
    async def send_progress_report(self, progress_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        if not self.enabled:
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_message = self._format_progress_data(progress_data)
            
            success = await self._send_via_api(progress_message)
            
            if success:
                logger.info("–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")
            return False
    
    def _format_message(self, text: str, source: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        if source == "watch_voice":
            return f"üé§ <b>–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n{text}\n\n‚è∞ {timestamp}"
        elif source == "system":
            return f"‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n{text}\n\n‚è∞ {timestamp}"
        elif source == "health":
            return f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ</b>\n\n{text}\n\n‚è∞ {timestamp}"
        else:
            return f"üì± <b>{source.title()}</b>\n\n{text}\n\n‚è∞ {timestamp}"
    
    def _create_voice_notification(self, command: str, response: str, action: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        message = f"üé§ <b>–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞</b>\n\n"
        message += f"üìù <b>–ö–æ–º–∞–Ω–¥–∞:</b> {command}\n"
        message += f"üí¨ <b>–û—Ç–≤–µ—Ç:</b> {response}\n"
        
        if action:
            message += f"‚ö° <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}\n"
        
        message += f"\n‚è∞ {timestamp}"
        
        return message
    
    def _format_health_data(self, health_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        message = f"‚ù§Ô∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n"
        
        if "heart_rate" in health_data:
            message += f"üíì <b>–ü—É–ª—å—Å:</b> {health_data['heart_rate']} —É–¥/–º–∏–Ω\n"
        
        if "steps" in health_data:
            message += f"üëü <b>–®–∞–≥–∏:</b> {health_data['steps']}\n"
        
        if "calories" in health_data:
            message += f"üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {health_data['calories']}\n"
        
        if "stress" in health_data:
            message += f"üò∞ <b>–°—Ç—Ä–µ—Å—Å:</b> {health_data['stress']}%\n"
        
        if "sleep" in health_data:
            message += f"üò¥ <b>–°–æ–Ω:</b> {health_data['sleep']} —á–∞—Å–æ–≤\n"
        
        message += f"\n‚è∞ {timestamp}"
        
        return message
    
    def _format_progress_data(self, progress_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        message = f"üìä <b>–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ</b>\n\n"
        
        if "habits_completed" in progress_data:
            message += f"‚úÖ <b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> {progress_data['habits_completed']}/{progress_data.get('habits_total', 0)}\n"
        
        if "tasks_completed" in progress_data:
            message += f"üìã <b>–ó–∞–¥–∞—á–∏:</b> {progress_data['tasks_completed']}/{progress_data.get('tasks_total', 0)}\n"
        
        if "reflections_count" in progress_data:
            message += f"üí≠ <b>–†–µ—Ñ–ª–µ–∫—Å–∏–∏:</b> {progress_data['reflections_count']}\n"
        
        if "streak_days" in progress_data:
            message += f"üî• <b>–°–µ—Ä–∏—è –¥–Ω–µ–π:</b> {progress_data['streak_days']}\n"
        
        message += f"\n‚è∞ {timestamp}"
        
        return message
    
    async def _send_via_api(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
        try:
            import httpx
            
            payload = {
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": "HTML",
                "disable_notification": False
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json=payload,
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return data.get("ok", False)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API Telegram: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
            return False
    
    async def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        if not self.enabled:
            return None
        
        try:
            import httpx
            
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/getMe")
                if response.status_code == 200:
                    data = response.json()
                    if data.get("ok"):
                        return data.get("result", {})
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
telegram_integration = None

async def initialize_telegram_integration(bot_token: str, chat_id: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"""
    global telegram_integration
    telegram_integration = TelegramIntegration(bot_token, chat_id)
    await telegram_integration.initialize()
    return telegram_integration

async def send_message(text: str, source: str = "watch_voice") -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä"""
    if telegram_integration:
        return await telegram_integration.send_message(text, source)
    return False

async def send_voice_notification(command: str, response: str, action: str = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä"""
    if telegram_integration:
        return await telegram_integration.send_voice_notification(command, response, action)
    return False 