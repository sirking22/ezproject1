"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ Quick Voice Assistant
"""

import os
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_CONFIG = {
    "host": os.getenv("SERVER_HOST", "0.0.0.0"),
    "port": int(os.getenv("SERVER_PORT", 8000)),
    "debug": os.getenv("DEBUG", "True").lower() == "true",
    "reload": os.getenv("RELOAD", "False").lower() == "true"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å)
LLM_CONFIG = {
    "model_path": os.getenv("LLM_MODEL_PATH", ""),
    "model_type": os.getenv("LLM_MODEL_TYPE", "llama"),
    "context_length": int(os.getenv("LLM_CONTEXT_LENGTH", 4096)),
    "temperature": float(os.getenv("LLM_TEMPERATURE", 0.7)),
    "max_tokens": int(os.getenv("LLM_MAX_TOKENS", 512)),
    "use_local": os.getenv("USE_LOCAL_LLM", "False").lower() == "true",
    "fallback_to_openai": os.getenv("FALLBACK_TO_OPENAI", "True").lower() == "true"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
NOTION_CONFIG = {
    "token": os.getenv("NOTION_TOKEN", ""),
    "databases": {
        "tasks": os.getenv("NOTION_TASKS_DB", ""),
        "reflections": os.getenv("NOTION_REFLECTIONS_DB", ""),
        "habits": os.getenv("NOTION_HABITS_DB", ""),
        "ideas": os.getenv("NOTION_IDEAS_DB", ""),
        "materials": os.getenv("NOTION_MATERIALS_DB", "")
    },
    "enabled": os.getenv("NOTION_ENABLED", "True").lower() == "true"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TELEGRAM_CONFIG = {
    "bot_token": os.getenv("TELEGRAM_BOT_TOKEN", ""),
    "chat_id": os.getenv("TELEGRAM_CHAT_ID", ""),
    "enabled": os.getenv("TELEGRAM_ENABLED", "True").lower() == "true"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
VOICE_CONFIG = {
    "sample_rate": int(os.getenv("VOICE_SAMPLE_RATE", 16000)),
    "chunk_size": int(os.getenv("VOICE_CHUNK_SIZE", 1024)),
    "max_duration": int(os.getenv("VOICE_MAX_DURATION", 30)),
    "language": os.getenv("VOICE_LANGUAGE", "ru"),
    "model": os.getenv("VOICE_MODEL", "whisper")
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
PERFORMANCE_CONFIG = {
    "max_workers": int(os.getenv("MAX_WORKERS", 4)),
    "timeout": int(os.getenv("REQUEST_TIMEOUT", 30)),
    "cache_size": int(os.getenv("CACHE_SIZE", 1000)),
    "enable_compression": os.getenv("ENABLE_COMPRESSION", "True").lower() == "true",
    "enable_caching": os.getenv("ENABLE_CACHING", "True").lower() == "true"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURITY_CONFIG = {
    "allowed_hosts": os.getenv("ALLOWED_HOSTS", "192.168.1.0/24").split(","),
    "rate_limit": int(os.getenv("RATE_LIMIT", 100)),
    "enable_logging": os.getenv("ENABLE_LOGGING", "True").lower() == "true",
    "api_key": os.getenv("API_KEY", "")
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_CONFIG = {
    "enable_metrics": os.getenv("ENABLE_METRICS", "True").lower() == "true",
    "log_level": os.getenv("LOG_LEVEL", "INFO"),
    "save_logs": os.getenv("SAVE_LOGS", "True").lower() == "true",
    "log_file": os.getenv("LOG_FILE", "logs/server.log")
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_CONFIG = {
    "redis_url": os.getenv("REDIS_URL", "redis://localhost:6379"),
    "ttl": int(os.getenv("CACHE_TTL", 3600)),
    "max_size": int(os.getenv("CACHE_MAX_SIZE", 1000))
}

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
VOICE_COMMANDS = {
    "add_task": {
        "patterns": ["–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É", "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É", "–∑–∞–¥–∞—á–∞"],
        "action": "create_task",
        "database": "tasks"
    },
    "save_thought": {
        "patterns": ["–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å", "—Å–æ—Ö—Ä–∞–Ω–∏ –∏–¥–µ—é", "–º—ã—Å–ª—å"],
        "action": "save_reflection",
        "database": "reflections"
    },
    "create_habit": {
        "patterns": ["—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É", "–Ω–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", "–ø—Ä–∏–≤—ã—á–∫–∞"],
        "action": "create_habit",
        "database": "habits"
    },
    "show_progress": {
        "patterns": ["–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ø—Ä–æ–≥—Ä–µ—Å—Å"],
        "action": "get_progress",
        "database": "all"
    },
    "health_check": {
        "patterns": ["–∫–∞–∫ –º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–∑–¥–æ—Ä–æ–≤—å–µ", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ"],
        "action": "health_analysis",
        "database": "biometrics"
    },
    "sync_data": {
        "patterns": ["—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π", "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "–æ–±–Ω–æ–≤–∏"],
        "action": "sync_all",
        "database": "all"
    }
}

# –û—Ç–≤–µ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_RESPONSES = {
    "add_task": "–ó–∞–¥–∞—á–∞ '{task}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
    "save_thought": "–ú—ã—Å–ª—å '{thought}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –ø–æ–∑–∂–µ.",
    "create_habit": "–ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' —Å–æ–∑–¥–∞–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ.",
    "show_progress": "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress}. –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!",
    "health_check": "–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! {details}",
    "sync_data": "–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
    "unknown": "–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ß—Ç–æ –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "default",
            "level": "INFO"
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "logs/server.log",
            "formatter": "default",
            "level": "DEBUG"
        }
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO"
    }
}

def get_config() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    return {
        "server": SERVER_CONFIG,
        "llm": LLM_CONFIG,
        "notion": NOTION_CONFIG,
        "telegram": TELEGRAM_CONFIG,
        "voice": VOICE_CONFIG,
        "performance": PERFORMANCE_CONFIG,
        "security": SECURITY_CONFIG,
        "monitoring": MONITORING_CONFIG,
        "cache": CACHE_CONFIG,
        "commands": VOICE_COMMANDS,
        "responses": DEFAULT_RESPONSES,
        "logging": LOGGING_CONFIG
    }

def validate_config() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not NOTION_CONFIG["token"] and NOTION_CONFIG["enabled"]:
        errors.append("NOTION_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not TELEGRAM_CONFIG["bot_token"] and TELEGRAM_CONFIG["enabled"]:
        errors.append("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not LLM_CONFIG["model_path"] and LLM_CONFIG["use_local"]:
        errors.append("LLM_MODEL_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏")
    
    if errors:
        print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in errors:
            print(f"   - {error}")
        return False
    
    return True

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:")
    config = get_config()
    
    for section, settings in config.items():
        if isinstance(settings, dict):
            print(f"\n{section.upper()}:")
            for key, value in settings.items():
                if isinstance(value, dict):
                    print(f"  {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                else:
                    print(f"  {key}: {value}")
    
    print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {validate_config()}") 