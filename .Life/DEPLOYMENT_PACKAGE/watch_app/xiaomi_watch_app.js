/**
 * Xiaomi Watch S App - Quick Voice Assistant
 * –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ LLM
 */

class XiaomiWatchApp {
    constructor() {
        this.currentState = 'ready';
        this.isRecording = false;
        this.lastQuery = null;
        this.serverUrl = 'http://192.168.1.100:8000'; // IP —Ç–≤–æ–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            autoRecordOnWake: true,
            recordTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
            retryAttempts: 2,
            wakeWords: ['–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–ø–æ–º–æ—â—å', '–≤–æ–ø—Ä–æ—Å', '–∑–∞–¥–∞—á–∞', '–º—ã—Å–ª—å']
        };

        this.initialize();
    }

    async initialize() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Xiaomi Watch App...');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Ä–∞–Ω–æ–≤
        this.setupScreens();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂–µ—Å—Ç–æ–≤
        this.setupGestures();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        this.setupWakeDetection();

        // –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        this.showMainScreen();

        console.log('‚úÖ Xiaomi Watch App –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    }

    setupScreens() {
        // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω - –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏
        this.screens = {
            main: {
                title: 'üé§ –ì–æ—Ç–æ–≤',
                message: '–ü–æ–¥–Ω–∏–º–∏ —Ä—É–∫—É\n–∏ –≥–æ–≤–æ—Ä–∏',
                button1: '‚óè',
                button2: '–ú–µ–Ω—é',
                color: 'green'
            },
            recording: {
                title: 'üî¥ –ó–∞–ø–∏—Å—å',
                message: '–ì–æ–≤–æ—Ä–∏—Ç–µ...',
                button1: '‚óè',
                button2: '–°—Ç–æ–ø',
                color: 'red',
                animation: 'wave'
            },
            processing: {
                title: 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞',
                message: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...',
                button1: '‚óè',
                button2: '–û—Ç–º–µ–Ω–∞',
                color: 'blue'
            },
            response: {
                title: '‚úÖ –ì–æ—Ç–æ–≤–æ',
                message: '',
                button1: '–ü–æ–≤—Ç–æ—Ä',
                button2: '–ù–æ–≤–æ–µ',
                color: 'green'
            },
            error: {
                title: '‚ùå –û—à–∏–±–∫–∞',
                message: '',
                button1: '–ü–æ–≤—Ç–æ—Ä',
                button2: '–û—Ç–º–µ–Ω–∞',
                color: 'red'
            }
        };
    }

    setupGestures() {
        // –ñ–µ—Å—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
        this.gestures = {
            'shake': () => this.activateRecording(),
            'double_tap': () => this.activateRecording(),
            'long_press': () => this.showQuickMenu(),
            'swipe_up': () => this.repeatLastQuery()
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∂–µ—Å—Ç–æ–≤
        this.setupGestureHandlers();
    }

    setupGestureHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–µ—Å—Ç–æ–≤ –¥–ª—è Xiaomi Watch S
        if (typeof device !== 'undefined') {
            // –í—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏–µ
            device.addEventListener('shake', () => {
                console.log('üëÜ –ñ–µ—Å—Ç: –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏–µ');
                this.activateRecording();
            });

            // –î–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            device.addEventListener('doubletap', () => {
                console.log('üëÜ –ñ–µ—Å—Ç: –¥–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ');
                this.activateRecording();
            });

            // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
            device.addEventListener('longpress', () => {
                console.log('üëÜ –ñ–µ—Å—Ç: –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ');
                this.showQuickMenu();
            });

            // –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö
            device.addEventListener('swipeup', () => {
                console.log('üëÜ –ñ–µ—Å—Ç: —Å–≤–∞–π–ø –≤–≤–µ—Ä—Ö');
                this.repeatLastQuery();
            });
        }
    }

    setupWakeDetection() {
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
        if (this.config.autoRecordOnWake) {
            if (typeof device !== 'undefined') {
                device.addEventListener('screenwake', () => {
                    console.log('üì± –≠–∫—Ä–∞–Ω –ø—Ä–æ–±—É–¥–∏–ª—Å—è');
                    this.onScreenWake();
                });

                device.addEventListener('screensleep', () => {
                    console.log('üò¥ –≠–∫—Ä–∞–Ω —É—Å–Ω—É–ª');
                    this.onScreenSleep();
                });
            }
        }
    }

    onScreenWake() {
        this.currentState = 'ready';
        this.showMainScreen();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            if (this.currentState === 'ready' && !this.isRecording) {
                console.log('‚è±Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏');
                this.showReadyIndicator();
            }
        }, 1000);
    }

    onScreenSleep() {
        this.stopRecording();
        this.currentState = 'sleep';
    }

    showMainScreen() {
        const screen = this.screens.main;
        this.renderScreen(screen);
    }

    showReadyIndicator() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        this.updateScreen({
            title: 'üé§ –ì–æ—Ç–æ–≤',
            message: '–ì–æ–≤–æ—Ä–∏—Ç–µ...',
            color: 'green',
            indicator: 'pulse'
        });
    }

    activateRecording() {
        if (this.isRecording) {
            this.stopRecording();
            return;
        }

        console.log('üé§ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏...');
        this.startRecording();
    }

    async startRecording() {
        if (this.isRecording) return;

        this.isRecording = true;
        this.currentState = 'recording';

        console.log('üé§ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞...');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–ø–∏—Å–∏
        this.showRecordingScreen();

        try {
            // –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
            const audioData = await this.recordVoice();

            if (audioData) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
                const text = await this.speechToText(audioData);

                if (text && text.trim()) {
                    console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', text);
                    await this.processQuery(text);
                } else {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å');
                    this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å');
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏');
        } finally {
            this.stopRecording();
        }
    }

    async recordVoice() {
        return new Promise((resolve) => {
            // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞ –¥–ª—è Xiaomi Watch S
            console.log('üéôÔ∏è –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞...');

            // –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
            const timeout = setTimeout(() => {
                console.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏');
                resolve(null);
            }, this.config.recordTimeout);

            // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 3-5 —Å–µ–∫—É–Ω–¥
            const recordTime = Math.random() * 2000 + 3000; // 3-5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                clearTimeout(timeout);
                console.log('‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                resolve('mock_audio_data');
            }, recordTime);
        });
    }

    async speechToText(audioData) {
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        console.log('üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç...');

        const mockTexts = [
            '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –º–µ–¥–∏—Ç–∞—Ü–∏—è',
            '–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å –æ –ø—Ä–æ–µ–∫—Ç–µ',
            '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å',
            '—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É —á—Ç–µ–Ω–∏–µ',
            '–∫–∞–∫ –º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
            '—á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è',
            '–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python',
            '—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ'
        ];

        // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

        return mockTexts[Math.floor(Math.random() * mockTexts.length)];
    }

    async processQuery(text) {
        console.log('üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', text);

        this.lastQuery = text;
        this.currentState = 'processing';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.showProcessingScreen();

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
            const response = await this.sendToLLM(text);

            if (response) {
                console.log('ü§ñ –û—Ç–≤–µ—Ç LLM:', response);
                this.showResponse(response);
            } else {
                this.showError('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
        }
    }

    async sendToLLM(query) {
        try {
            console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM...');

            const response = await fetch(`${this.serverUrl}/watch/voice`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    query: query,
                    context: 'watch_voice',
                    timestamp: Date.now()
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const result = await response.json();
            return result.response;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM:', error);

            // Fallback: –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
            return this.processLocally(query);
        }
    }

    processLocally(query) {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
        const commands = {
            '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É': '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ',
            '–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å': '–ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ',
            '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å': '–ü—Ä–æ–≥—Ä–µ—Å—Å: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            '—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };

        for (const [key, response] of Object.entries(commands)) {
            if (query.toLowerCase().includes(key)) {
                return response;
            }
        }

        return '–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
    }

    showRecordingScreen() {
        const screen = this.screens.recording;
        this.renderScreen(screen);
    }

    showProcessingScreen() {
        const screen = this.screens.processing;
        this.renderScreen(screen);
    }

    showResponse(response) {
        this.currentState = 'response';

        // –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —á–∞—Å–æ–≤
        const shortResponse = this.getShortResponse(response);

        const screen = {
            ...this.screens.response,
            message: shortResponse
        };

        this.renderScreen(screen);

        // –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        this.sendToTelegram(response);
    }

    getShortResponse(response) {
        // –°–æ–∫—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —á–∞—Å–æ–≤
        if (response.includes('–¥–æ–±–∞–≤–ª–µ–Ω–∞')) return '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞';
        if (response.includes('—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')) return '–ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞';
        if (response.includes('—Å–æ–∑–¥–∞–Ω–∞')) return '–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞';
        if (response.includes('–ø—Ä–æ–≥—Ä–µ—Å—Å')) return '–ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ—Ç–æ–≤';
        if (response.includes('—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è')) return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';

        return response.substring(0, 20) + '...';
    }

    async sendToTelegram(message) {
        try {
            await fetch(`${this.serverUrl}/telegram/send`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    message: `üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: ${this.lastQuery}\n\n${message}`,
                    source: 'watch_voice'
                })
            });

            console.log('üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        }
    }

    showError(message) {
        this.currentState = 'error';

        const screen = {
            ...this.screens.error,
            message: message
        };

        this.renderScreen(screen);
    }

    stopRecording() {
        this.isRecording = false;
        console.log('üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

        if (this.currentState === 'recording') {
            this.currentState = 'ready';
            this.showMainScreen();
        }
    }

    repeatLastQuery() {
        if (this.lastQuery) {
            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', this.lastQuery);
            this.processQuery(this.lastQuery);
        } else {
            this.showError('–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
        }
    }

    showQuickMenu() {
        console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é:');
        console.log('  üé§ - –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å');
        console.log('  üîÑ - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å');
        console.log('  üìä - –ü—Ä–æ–≥—Ä–µ—Å—Å');
        console.log('  ‚öôÔ∏è - –ù–∞—Å—Ç—Ä–æ–π–∫–∏');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        this.renderScreen({
            title: '‚ö° –ú–µ–Ω—é',
            message: 'üé§ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å\nüîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            button1: '–í—ã–±–æ—Ä',
            button2: '–û—Ç–º–µ–Ω–∞',
            color: 'blue'
        });
    }

    renderScreen(screen) {
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ –Ω–∞ Xiaomi Watch S
        console.log(`üì± –≠–ö–†–ê–ù: ${screen.title}`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${screen.message}`);
        console.log(`   –ö–Ω–æ–ø–∫–∏: [${screen.button1}] [${screen.button2}]`);
        console.log(`   –¶–≤–µ—Ç: ${screen.color}`);

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —á–∞—Å–æ–≤
        this.updateDisplay(screen);
    }

    updateDisplay(screen) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è —á–∞—Å–æ–≤
        if (typeof device !== 'undefined' && device.display) {
            device.display.update({
                title: screen.title,
                message: screen.message,
                button1: screen.button1,
                button2: screen.button2,
                color: screen.color,
                animation: screen.animation
            });
        }
    }

    updateScreen(updates) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        const currentScreen = this.screens[this.currentState];
        const updatedScreen = { ...currentScreen, ...updates };
        this.renderScreen(updatedScreen);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const watchApp = new XiaomiWatchApp();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
function onButton1Press() {
    console.log('üîò –ö–Ω–æ–ø–∫–∞ 1 –Ω–∞–∂–∞—Ç–∞');

    switch (watchApp.currentState) {
        case 'ready':
            watchApp.activateRecording();
            break;
        case 'recording':
            watchApp.stopRecording();
            break;
        case 'processing':
            watchApp.stopRecording();
            break;
        case 'response':
            watchApp.repeatLastQuery();
            break;
        case 'error':
            watchApp.repeatLastQuery();
            break;
    }
}

function onButton2Press() {
    console.log('üîò –ö–Ω–æ–ø–∫–∞ 2 –Ω–∞–∂–∞—Ç–∞');

    switch (watchApp.currentState) {
        case 'ready':
            watchApp.showQuickMenu();
            break;
        case 'recording':
            watchApp.stopRecording();
            break;
        case 'processing':
            watchApp.stopRecording();
            break;
        case 'response':
            watchApp.activateRecording();
            break;
        case 'error':
            watchApp.showMainScreen();
            break;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { XiaomiWatchApp };
} 