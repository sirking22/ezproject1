#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –≤ Blender
"""

import subprocess
import tempfile
from pathlib import Path

def create_interactive_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Blender"""
    script = '''
import bpy
import bmesh
import math
from mathutils import Vector

# –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

def create_magic_crystal():
    """–°–æ–∑–¥–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª"""
    
    # 1. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª (–æ–∫—Ç–∞—ç–¥—Ä)
    vertices = [
        (0, 0, 2),      # –í–µ—Ä—Ö
        (1, 1, 0),      # –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫
        (-1, 1, 0),     # –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥  
        (-1, -1, 0),    # –Æ–≥–æ-–∑–∞–ø–∞–¥
        (1, -1, 0),     # –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
        (0, 0, -2)      # –ù–∏–∑
    ]
    
    faces = [
        [0, 1, 2],  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å 1
        [0, 2, 3],  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å 2
        [0, 3, 4],  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å 3
        [0, 4, 1],  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å 4
        [5, 2, 1],  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å 1
        [5, 3, 2],  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å 2
        [5, 4, 3],  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å 3
        [5, 1, 4]   # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å 4
    ]
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Å—Ç–∞–ª–ª
    mesh = bpy.data.meshes.new("MagicCrystal")
    obj = bpy.data.objects.new("MagicCrystal", mesh)
    bpy.context.collection.objects.link(obj)
    
    mesh.from_pydata(vertices, [], faces)
    mesh.update()
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª
    obj.scale = (2.0, 2.0, 1.5)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∫—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    mat = bpy.data.materials.new(name="Crystal")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    nodes.clear()
    
    # Principled BSDF –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    bsdf.inputs['Base Color'].default_value = (0.7, 0.9, 1.0, 1.0)  # –ì–æ–ª—É–±–æ–π
    bsdf.inputs['Transmission'].default_value = 0.95  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    bsdf.inputs['Roughness'].default_value = 0.05     # –û—á–µ–Ω—å –≥–ª–∞–¥–∫–∏–π
    bsdf.inputs['IOR'].default_value = 1.45           # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–∏—Å—Å–∏—é –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è
    emission = nodes.new(type='ShaderNodeEmission')
    emission.inputs['Color'].default_value = (0.5, 0.8, 1.0, 1.0)
    emission.inputs['Strength'].default_value = 0.3
    
    # –°–º–µ—à–∏–≤–∞–µ–º BSDF –∏ —ç–º–∏—Å—Å–∏—é
    mix = nodes.new(type='ShaderNodeMixShader')
    mix.inputs['Fac'].default_value = 0.1
    
    # Output
    output = nodes.new(type='ShaderNodeOutputMaterial')
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º –Ω–æ–¥—ã
    mat.node_tree.links.new(bsdf.outputs['BSDF'], mix.inputs[1])
    mat.node_tree.links.new(emission.outputs['Emission'], mix.inputs[2])
    mat.node_tree.links.new(mix.outputs['Shader'], output.inputs['Surface'])
    
    obj.data.materials.append(mat)
    
    return obj

def create_floating_rings():
    """–°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–µ –∫–æ–ª—å—Ü–∞ –≤–æ–∫—Ä—É–≥ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞"""
    rings = []
    
    for i in range(4):
        # –†–∞–∑–Ω—ã–µ —Ä–∞–¥–∏—É—Å—ã –∏ –≤—ã—Å–æ—Ç—ã
        angle = i * 90  # 90 –≥—Ä–∞–¥—É—Å–æ–≤ –º–µ–∂–¥—É –∫–æ–ª—å—Ü–∞–º–∏
        radius = 6.0 + i * 0.5
        height = 1.0 + i * 0.8
        
        bpy.ops.mesh.primitive_torus_add(
            major_radius=1.2,
            minor_radius=0.2,
            location=(0, 0, height)
        )
        ring = bpy.context.active_object
        ring.name = f"FloatingRing_{i+1}"
        
        # –ù–∞–∫–ª–æ–Ω—è–µ–º –∫–æ–ª—å—Ü–æ
        ring.rotation_euler = (math.radians(20 + i * 10), 0, math.radians(angle))
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
        ring.rotation_euler = (0, 0, math.radians(angle))
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–æ–ª–µ—Ü
        ring_mat = bpy.data.materials.new(name=f"RingMaterial_{i}")
        ring_mat.use_nodes = True
        ring_bsdf = ring_mat.node_tree.nodes["Principled BSDF"]
        
        # –†–∞–∑–Ω—ã–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
        colors = [
            (1.0, 0.8, 0.2, 1.0),  # –ó–æ–ª–æ—Ç–æ
            (0.9, 0.9, 0.9, 1.0),  # –°–µ—Ä–µ–±—Ä–æ
            (0.8, 0.4, 0.1, 1.0),  # –ú–µ–¥—å
            (0.6, 0.3, 0.8, 1.0),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –º–µ—Ç–∞–ª–ª
        ]
        
        ring_bsdf.inputs['Base Color'].default_value = colors[i]
        ring_bsdf.inputs['Metallic'].default_value = 1.0
        ring_bsdf.inputs['Roughness'].default_value = 0.1
        
        ring.data.materials.append(ring_mat)
        rings.append(ring)
    
    return rings

def create_energy_orbs():
    """–°–æ–∑–¥–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ñ–µ—Ä—ã"""
    orbs = []
    
    for i in range(6):
        angle = i * 60 * math.pi / 180  # 60 –≥—Ä–∞–¥—É—Å–æ–≤
        radius = 4.5
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        z = 0.5 + (i % 2) * 2.0  # –†–∞–∑–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        
        bpy.ops.mesh.primitive_uv_sphere_add(
            radius=0.3,
            location=(x, y, z)
        )
        orb = bpy.context.active_object
        orb.name = f"EnergyOrb_{i+1}"
        
        # –°–≤–µ—Ç—è—â–∏–π—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª
        orb_mat = bpy.data.materials.new(name=f"OrbMaterial_{i}")
        orb_mat.use_nodes = True
        orb_nodes = orb_mat.node_tree.nodes
        orb_nodes.clear()
        
        # –¢–æ–ª—å–∫–æ —ç–º–∏—Å—Å–∏—è –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è
        emission = orb_nodes.new(type='ShaderNodeEmission')
        output = orb_nodes.new(type='ShaderNodeOutputMaterial')
        
        # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏
        energy_colors = [
            (1.0, 0.3, 0.3),  # –ö—Ä–∞—Å–Ω—ã–π
            (0.3, 1.0, 0.3),  # –ó–µ–ª–µ–Ω—ã–π
            (0.3, 0.3, 1.0),  # –°–∏–Ω–∏–π
            (1.0, 1.0, 0.3),  # –ñ–µ–ª—Ç—ã–π
            (1.0, 0.3, 1.0),  # –ú–∞–≥–µ–Ω—Ç–∞
            (0.3, 1.0, 1.0),  # –¶–∏–∞–Ω
        ]
        
        emission.inputs['Color'].default_value = (*energy_colors[i], 1.0)
        emission.inputs['Strength'].default_value = 3.0
        
        orb_mat.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])
        orb.data.materials.append(orb_mat)
        orbs.append(orb)
    
    return orbs

# –°–æ–∑–¥–∞–µ–º –≤—Å—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
print("–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞...")
crystal = create_magic_crystal()

print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–∏—Ö –∫–æ–ª–µ—Ü...")
rings = create_floating_rings()

print("–°–æ–∑–¥–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä...")
orbs = create_energy_orbs()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è...")

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–≤–µ—Ç
if "Light" in bpy.data.objects:
    bpy.data.objects.remove(bpy.data.objects["Light"], do_unlink=True)

# HDRI –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
world = bpy.context.scene.world
world.use_nodes = True
world_nodes = world.node_tree.nodes
world_nodes.clear()

# Environment texture
env_tex = world_nodes.new(type='ShaderNodeTexEnvironment')
world_bg = world_nodes.new(type='ShaderNodeBackground')
world_output = world_nodes.new(type='ShaderNodeOutputWorld')

world_bg.inputs['Strength'].default_value = 0.5
world.node_tree.links.new(env_tex.outputs['Color'], world_bg.inputs['Color'])
world.node_tree.links.new(world_bg.outputs['Background'], world_output.inputs['Surface'])

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
bpy.ops.object.light_add(type='SUN', location=(10, 10, 10))
sun = bpy.context.active_object
sun.data.energy = 2.0
sun.data.color = (1.0, 0.95, 0.8)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã...")
if "Camera" in bpy.data.objects:
    camera = bpy.data.objects["Camera"]
else:
    bpy.ops.object.camera_add()
    camera = bpy.context.active_object

camera.location = (8, -8, 6)
camera.rotation_euler = (1.1, 0, 0.785)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.samples = 128
scene.render.resolution_x = 1920
scene.render.resolution_y = 1080

# –í–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏ Cycles
scene.cycles.use_denoising = True
scene.view_settings.look = 'Medium High Contrast'

print("‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª —Å–æ–∑–¥–∞–Ω!")
print("üé® –°—Ü–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞!")
print("üì∑ –ù–∞–∂–º–∏—Ç–µ F12 –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—É
bpy.ops.wm.save_as_mainfile(filepath="output/blender/magic_crystal_scene.blend")
print("üíæ –°—Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: output/blender/magic_crystal_scene.blend")
'''
    return script

def run_blender_with_script():
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º Blender —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º"""
    script_content = create_interactive_script()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
        f.write(script_content)
        script_path = f.name
    
    blender_path = "Z:\\–ü—Ä–æ–≥—Ä–∞–º–º—ã\\Blender\\blender.exe"
    
    # –°–æ–∑–¥–∞–µ–º output –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = Path("output/blender")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        print("üéá –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –≤ Blender...")
        print("üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ Blender —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω–æ–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Blender —Å GUI –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
        subprocess.Popen([
            blender_path,
            "--python", script_path
        ])
        
        print("‚ú® Blender –æ—Ç–∫—Ä—ã—Ç!")
        print("üé® –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è...")
        print("üé¨ –í Blender –≤—ã —É–≤–∏–¥–∏—Ç–µ:")
        print("   - üíé –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é")
        print("   - üîÑ 4 –ø–ª–∞–≤–∞—é—â–∏—Ö –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª—å—Ü–∞") 
        print("   - ‚ö° 6 —Å–≤–µ—Ç—è—â–∏—Ö—Å—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä")
        print("   - üåÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ")
        print("")
        print("üéØ –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:")
        print("   - F12 - —Ä–µ–Ω–¥–µ—Ä —Å—Ü–µ–Ω—ã")
        print("   - –ü—Ä–æ–±–µ–ª - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
        print("   - Tab - —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   - Ctrl+S - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Blender: {e}")
    finally:
        # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É, Blender –º–æ–∂–µ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        print(f"üìù –°–∫—Ä–∏–ø—Ç: {script_path}")

if __name__ == "__main__":
    print("üîÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ Blender")
    print("=" * 50)
    
    run_blender_with_script()
    
    print("\n‚ú® –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤ Blender!") 