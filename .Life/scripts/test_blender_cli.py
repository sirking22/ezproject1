#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Blender CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Blender –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent.parent / 'src'))

from integrations.blender_cli_integration import BlenderCLIIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_blender_find():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ Blender"""
    logger.info("üîç –ü–æ–∏—Å–∫ Blender...")
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    blender = BlenderCLIIntegration()
    status = blender.get_status()
    
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
    
    if status['available']:
        logger.info("‚úÖ Blender –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        return True
    else:
        logger.warning("‚ö†Ô∏è Blender –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
        logger.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        possible_paths = [
            r"C:\Program Files\Blender Foundation\Blender\blender.exe",
            r"C:\Program Files (x86)\Blender Foundation\Blender\blender.exe",
            r"C:\Users\{}\AppData\Local\Programs\Blender Foundation\Blender\blender.exe".format(os.getenv('USERNAME', '')),
            r"C:\Program Files (x86)\Steam\steamapps\common\Blender\blender.exe",
            r"C:\blender\blender.exe",
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                logger.info(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {path}")
            else:
                logger.info(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {path}")
        
        return False

def test_with_custom_path():
    """–¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –≤—Ä—É—á–Ω—É—é"""
    logger.info("\nüîß –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    
    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å
    print("\n" + "="*60)
    print("–£–ö–ê–ó–ê–ù–ò–ï –ü–£–¢–ò –ö BLENDER")
    print("="*60)
    print("–ï—Å–ª–∏ Blender –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ blender.exe")
    print("–ü—Ä–∏–º–µ—Ä—ã:")
    print("  C:\\Program Files\\Blender Foundation\\Blender\\blender.exe")
    print("  C:\\blender\\blender.exe")
    print("  C:\\Users\\YourName\\AppData\\Local\\Programs\\Blender Foundation\\Blender\\blender.exe")
    print()
    
    custom_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ blender.exe (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    if not custom_path:
        logger.info("–ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    if not os.path.exists(custom_path):
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {custom_path}")
        return False
    
    logger.info(f"üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Ç–µ–º: {custom_path}")
    
    blender = BlenderCLIIntegration(custom_path)
    status = blender.get_status()
    
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
    
    if status['available']:
        logger.info("‚úÖ Blender –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏!")
        return True
    else:
        logger.error("‚ùå Blender –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏")
        return False

def test_simple_cube():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—É–±–∞"""
    logger.info("\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—É–±–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    blender = BlenderCLIIntegration()
    
    if not blender.available:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—É–±
    result = blender.create_precise_object(
        object_type='cube',
        dimensions={'width': 100, 'height': 100, 'depth': 100},
        name='TestCube',
        output_dir='test_output'
    )
    
    if result['success']:
        logger.info("‚úÖ –ö—É–± —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ STL —Ñ–∞–π–ª: {result['stl_file']}")
        logger.info(f"üì∏ –ü—Ä–µ–≤—å—é: {result['preview_file']}")
        return True
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–±–∞: {result['error']}")
        if 'stderr' in result:
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {result['stderr']}")
        return False

def test_organic_lamp():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ª–∞–º–ø—ã"""
    logger.info("\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ª–∞–º–ø—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    blender = BlenderCLIIntegration()
    
    if not blender.available:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫—É—é –ª–∞–º–ø—É
    result = blender.create_organic_lamp(
        base_radius=80.0,
        complexity=1.2,
        output_dir='test_output'
    )
    
    if result['success']:
        logger.info("‚úÖ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ STL —Ñ–∞–π–ª: {result['stl_file']}")
        logger.info(f"üì∏ –ü—Ä–µ–≤—å—é: {result['preview_file']}")
        return True
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞–º–ø—ã: {result['error']}")
        if 'stderr' in result:
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {result['stderr']}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Blender CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    logger.info("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.makedirs('test_output', exist_ok=True)
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = 4
    passed_tests = 0
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ Blender
    if test_blender_find():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 2: –†—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏
    if test_with_custom_path():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π –∫—É–±
    if test_simple_cube():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 4: –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞
    if test_organic_lamp():
        passed_tests += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Blender CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif passed_tests > 0:
        logger.info("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Blender")
    else:
        logger.error("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Blender")
    
    logger.info("=" * 60)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if passed_tests == 0:
        print("\n" + "="*60)
        print("–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –£–°–¢–ê–ù–û–í–ö–ï BLENDER")
        print("="*60)
        print("1. –°–∫–∞—á–∞–π—Ç–µ Blender —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞: https://www.blender.org/download/")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Blender –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ blender.exe –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞")
        print("="*60)

if __name__ == "__main__":
    main() 