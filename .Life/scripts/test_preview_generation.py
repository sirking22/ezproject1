#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –¥–ª—è Blender Engine
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from integrations.blender_engine import (
    BlenderEngine, ObjectSpec, ObjectType, Dimensions, 
    MeshSettings, MaterialSettings, MaterialType, RenderSettings
)
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_basic_preview():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–≤—å—é"""
    logger.info("üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–≤—å—é...")
    
    engine = BlenderEngine()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—É–±
    spec = ObjectSpec(
        name="test_cube",
        object_type=ObjectType.CUBE,
        dimensions=Dimensions(width=50, height=50, depth=50),
        material_settings=MaterialSettings(
            material_type=MaterialType.PLASTIC,
            color=(0.8, 0.2, 0.2, 1.0)  # –ö—Ä–∞—Å–Ω—ã–π
        )
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–µ–≤—å—é
    render_settings = RenderSettings(
        resolution_x=800,
        resolution_y=600,
        engine="BLENDER_EEVEE_NEXT",
        samples=32,
        preview_type="perspective",
        lighting_type="studio",
        preview_format="PNG"
    )
    
    result = engine.generate_preview(spec, render_settings)
    
    if result.success:
        logger.info(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {result.preview_file}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f}—Å")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.error_message}")
    
    return result.success

def test_multiple_preview_types():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–≤—å—é"""
    logger.info("üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–≤—å—é...")
    
    engine = BlenderEngine()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É
    spec = ObjectSpec(
        name="test_sphere",
        object_type=ObjectType.SPHERE,
        dimensions=Dimensions(radius=30),
        material_settings=MaterialSettings(
            material_type=MaterialType.GLASS,
            color=(0.2, 0.8, 0.8, 0.8),
            ior=1.5
        )
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–µ–≤—å—é
    preview_types = ["front", "side", "top", "perspective", "wireframe"]
    
    for preview_type in preview_types:
        logger.info(f"üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é —Ç–∏–ø–∞: {preview_type}")
        
        render_settings = RenderSettings(
            resolution_x=600,
            resolution_y=600,
            engine="CYCLES",
            samples=64,
            preview_type=preview_type,
            lighting_type="studio",
            preview_format="PNG"
        )
        
        result = engine.generate_preview(spec, render_settings)
        
        if result.success:
            logger.info(f"‚úÖ {preview_type}: {result.preview_file}")
        else:
            logger.error(f"‚ùå {preview_type}: {result.error_message}")

def test_lighting_setups():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Å–≤–µ—â–µ–Ω–∏—è"""
    logger.info("üí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Å–≤–µ—â–µ–Ω–∏—è...")
    
    engine = BlenderEngine()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫—É—é –ª–∞–º–ø—É
    spec = ObjectSpec(
        name="test_organic_lamp",
        object_type=ObjectType.ORGANIC_LAMP,
        dimensions=Dimensions(radius=40),
        mesh_settings=MeshSettings(subdivisions=2),
        material_settings=MaterialSettings(
            material_type=MaterialType.METAL,
            color=(0.8, 0.8, 0.9, 1.0),
            metallic=0.9,
            roughness=0.1
        )
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—Å–≤–µ—â–µ–Ω–∏—è
    lighting_types = ["studio", "natural", "dramatic", "product"]
    
    for lighting_type in lighting_types:
        logger.info(f"üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º: {lighting_type}")
        
        render_settings = RenderSettings(
            resolution_x=800,
            resolution_y=600,
            engine="CYCLES",
            samples=128,
            preview_type="perspective",
            lighting_type=lighting_type,
            enable_ao=True,
            preview_format="PNG"
        )
        
        result = engine.generate_preview(spec, render_settings)
        
        if result.success:
            logger.info(f"‚úÖ {lighting_type}: {result.preview_file}")
        else:
            logger.error(f"‚ùå {lighting_type}: {result.error_message}")

def test_material_previews():
    """–¢–µ—Å—Ç –ø—Ä–µ–≤—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    logger.info("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
    
    engine = BlenderEngine()
    
    # –°–æ–∑–¥–∞–µ–º —Ü–∏–ª–∏–Ω–¥—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    spec = ObjectSpec(
        name="test_materials",
        object_type=ObjectType.CYLINDER,
        dimensions=Dimensions(radius=25, height=80),
        material_settings=MaterialSettings(
            material_type=MaterialType.PLASTIC,
            color=(0.2, 0.6, 0.8, 1.0),
            roughness=0.3
        )
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    materials = [
        ("plastic_blue", MaterialType.PLASTIC, (0.2, 0.6, 0.8, 1.0), 0.3, 0.0),
        ("metal_gold", MaterialType.METAL, (1.0, 0.8, 0.2, 1.0), 0.1, 0.9),
        ("glass_clear", MaterialType.GLASS, (0.9, 0.9, 0.9, 0.3), 0.0, 0.0),
        ("plastic_red", MaterialType.PLASTIC, (0.8, 0.2, 0.2, 1.0), 0.5, 0.0),
    ]
    
    for mat_name, mat_type, color, roughness, metallic in materials:
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {mat_name}")
        
        spec.material_settings = MaterialSettings(
            material_type=mat_type,
            color=color,
            roughness=roughness,
            metallic=metallic
        )
        spec.name = f"test_{mat_name}"
        
        render_settings = RenderSettings(
            resolution_x=600,
            resolution_y=600,
            engine="CYCLES",
            samples=128,
            preview_type="perspective",
            lighting_type="studio",
            preview_format="PNG"
        )
        
        result = engine.generate_preview(spec, render_settings)
        
        if result.success:
            logger.info(f"‚úÖ {mat_name}: {result.preview_file}")
        else:
            logger.error(f"‚ùå {mat_name}: {result.error_message}")

def test_high_quality_preview():
    """–¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é"""
    logger.info("üåü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é...")
    
    engine = BlenderEngine()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç
    spec = ObjectSpec(
        name="high_quality_test",
        object_type=ObjectType.ORGANIC_LAMP,
        dimensions=Dimensions(radius=50),
        mesh_settings=MeshSettings(subdivisions=3, segments=64),
        material_settings=MaterialSettings(
            material_type=MaterialType.GLASS,
            color=(0.9, 0.9, 1.0, 0.7),
            ior=1.52,
            transmission=0.95
        )
    )
    
    # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    render_settings = RenderSettings(
        resolution_x=1920,
        resolution_y=1080,
        engine="CYCLES",
        samples=512,
        preview_type="perspective",
        lighting_type="studio",
        enable_ao=True,
        enable_bloom=True,
        preview_format="PNG"
    )
    
    start_time = time.time()
    result = engine.generate_preview(spec, render_settings)
    execution_time = time.time() - start_time
    
    if result.success:
        logger.info(f"‚úÖ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é: {result.preview_file}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.error_message}")

def test_preview_caching():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–≤—å—é"""
    logger.info("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–≤—å—é...")
    
    engine = BlenderEngine()
    
    spec = ObjectSpec(
        name="cache_test",
        object_type=ObjectType.SPHERE,
        dimensions=Dimensions(radius=30),
        material_settings=MaterialSettings(
            material_type=MaterialType.PLASTIC,
            color=(0.8, 0.4, 0.2, 1.0)
        )
    )
    
    render_settings = RenderSettings(
        resolution_x=400,
        resolution_y=400,
        engine="BLENDER_EEVEE_NEXT",
        samples=16,
        preview_type="perspective",
        lighting_type="studio"
    )
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    logger.info("üîÑ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫...")
    start_time = time.time()
    result1 = engine.generate_preview(spec, render_settings)
    time1 = time.time() - start_time
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
    logger.info("üîÑ –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ (–∫—ç—à)...")
    start_time = time.time()
    result2 = engine.generate_preview(spec, render_settings)
    time2 = time.time() - start_time
    
    if result1.success and result2.success:
        logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {time1:.2f}—Å")
        logger.info(f"‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫: {time2:.2f}—Å")
        logger.info(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time1/time2:.1f}x")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Blender
    engine = BlenderEngine()
    if not engine.available:
        logger.error("‚ùå Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Blender —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return False
    
    logger.info(f"‚úÖ Blender –Ω–∞–π–¥–µ–Ω: {engine.blender_path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–≤—å—é", test_basic_preview),
        ("–¢–∏–ø—ã –ø—Ä–µ–≤—å—é", test_multiple_preview_types),
        ("–û—Å–≤–µ—â–µ–Ω–∏–µ", test_lighting_setups),
        ("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", test_material_previews),
        ("–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", test_high_quality_preview),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_preview_caching),
    ]
    
    results = []
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–µ—Å—Ç: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{status}: {test_name}")
    
    logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 