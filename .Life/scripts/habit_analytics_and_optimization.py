import os
import asyncio
from datetime import datetime, timedelta
from notion_client import AsyncClient
from dotenv import load_dotenv
import json

load_dotenv()

HABITS_DB = os.getenv('NOTION_DATABASE_ID_HABITS')
RITUALS_DB = os.getenv('NOTION_DATABASE_ID_RITUALS')
NOTION_TOKEN = os.getenv('NOTION_TOKEN')

class HabitAnalytics:
    def __init__(self):
        self.client = AsyncClient(auth=NOTION_TOKEN)
        self.analytics_data = {}
    
    async def collect_habit_data(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"""
        print("=== –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö ===")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        
        response = await self.client.databases.query(
            database_id=HABITS_DB,
            filter={
                "property": "–î–∞—Ç–∞",
                "date": {
                    "on_or_after": thirty_days_ago
                }
            }
        )
        
        habits = response.get('results', [])
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ 30 –¥–Ω–µ–π: {len(habits)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø—Ä–∏–≤—ã—á–∫—É
        habit_stats = {}
        for habit in habits:
            props = habit['properties']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            name = props.get('–ü—Ä–∏–≤—ã—á–∫–∞', {}).get('title', [])
            name_text = name[0]['plain_text'] if name else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            
            completed = props.get('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', {}).get('checkbox', False) if props.get('–í—ã–ø–æ–ª–Ω–µ–Ω–æ') else False
            energy = props.get('–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏', {}).get('number') if props.get('–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏') else None
            mood_select = props.get('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', {})
            mood = mood_select.get('select', {}).get('name') if mood_select and mood_select.get('select') else None
            duration = props.get('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', {}).get('number') if props.get('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å') else None
            comments = props.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', {}).get('rich_text', []) if props.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') else []
            comments_text = comments[0]['text']['content'] if comments else ''
            
            # –°–≤—è–∑—å —Å —Ä–∏—Ç—É–∞–ª–æ–º
            ritual_relation = props.get('–†–∏—Ç—É–∞–ª—ã', {}).get('relation', []) if props.get('–†–∏—Ç—É–∞–ª—ã') else []
            ritual_id = ritual_relation[0]['id'] if ritual_relation else None
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–∏–≤—ã—á–∫–∏ (—É–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)
            habit_type = name_text.split(' - ')[0] if ' - ' in name_text else name_text
            
            if habit_type not in habit_stats:
                habit_stats[habit_type] = {
                    'total': 0,
                    'completed': 0,
                    'energy_levels': [],
                    'moods': [],
                    'durations': [],
                    'comments': [],
                    'ritual_id': ritual_id
                }
            
            habit_stats[habit_type]['total'] += 1
            if completed:
                habit_stats[habit_type]['completed'] += 1
            
            if energy is not None:
                habit_stats[habit_type]['energy_levels'].append(energy)
            if mood:
                habit_stats[habit_type]['moods'].append(mood)
            if duration:
                habit_stats[habit_type]['durations'].append(duration)
            if comments_text:
                habit_stats[habit_type]['comments'].append(comments_text)
        
        self.analytics_data = habit_stats
        return habit_stats
    
    async def analyze_effectiveness(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—ã—á–µ–∫"""
        print("\n=== –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===")
        
        effectiveness_report = {}
        
        for habit_type, stats in self.analytics_data.items():
            completion_rate = (stats['completed'] / stats['total'] * 100) if stats['total'] > 0 else 0
            avg_energy = sum(stats['energy_levels']) / len(stats['energy_levels']) if stats['energy_levels'] else 0
            avg_duration = sum(stats['durations']) / len(stats['durations']) if stats['durations'] else 0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            mood_counts = {}
            for mood in stats['moods']:
                mood_counts[mood] = mood_counts.get(mood, 0) + 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å
            priority_score = 0
            if completion_rate >= 80:
                priority_score = 3  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            elif completion_rate >= 50:
                priority_score = 2  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            else:
                priority_score = 1  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
            effectiveness_report[habit_type] = {
                'completion_rate': completion_rate,
                'avg_energy': avg_energy,
                'avg_duration': avg_duration,
                'mood_distribution': mood_counts,
                'priority_score': priority_score,
                'total_attempts': stats['total'],
                'successful_attempts': stats['completed']
            }
            
            print(f"\n{habit_type}:")
            print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {completion_rate:.1f}% ({stats['completed']}/{stats['total']})")
            print(f"  –°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è: {avg_energy:.1f}")
            print(f"  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f} –º–∏–Ω")
            print(f"  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {'–í—ã—Å–æ–∫–∏–π' if priority_score == 3 else '–°—Ä–µ–¥–Ω–∏–π' if priority_score == 2 else '–ù–∏–∑–∫–∏–π'}")
        
        return effectiveness_report
    
    async def generate_optimization_suggestions(self, effectiveness_report):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\n=== –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ===")
        
        suggestions = []
        
        for habit_type, report in effectiveness_report.items():
            suggestions_for_habit = []
            
            # –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if report['completion_rate'] < 50:
                suggestions_for_habit.append("üî¥ –ù–∏–∑–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
            elif report['completion_rate'] < 80:
                suggestions_for_habit.append("üü° –°—Ä–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é")
            else:
                suggestions_for_habit.append("üü¢ –í—ã—Å–æ–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            
            # –ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–∏–∏
            if report['avg_energy'] < 5:
                suggestions_for_habit.append("üîã –ù–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è - –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å")
            elif report['avg_energy'] > 8:
                suggestions_for_habit.append("‚ö° –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if report['mood_distribution']:
                most_common_mood = max(report['mood_distribution'], key=report['mood_distribution'].get)
                if most_common_mood in ['–ü–ª–æ—Ö–æ', '–£—Å—Ç–∞–ª']:
                    suggestions_for_habit.append("üòî –ß–∞—Å—Ç–æ –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è")
                elif most_common_mood in ['–û—Ç–ª–∏—á–Ω–æ', '–í–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω']:
                    suggestions_for_habit.append("üòä –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —è–∫–æ—Ä—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫")
            
            suggestions.append({
                'habit_type': habit_type,
                'suggestions': suggestions_for_habit,
                'priority_score': report['priority_score']
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        suggestions.sort(key=lambda x: x['priority_score'], reverse=True)
        
        for suggestion in suggestions:
            print(f"\n{suggestion['habit_type']} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {suggestion['priority_score']}):")
            for s in suggestion['suggestions']:
                print(f"  {s}")
        
        return suggestions
    
    async def update_ritual_with_feedback(self, ritual_id, feedback_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∏—Ç—É–∞–ª —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
        if not ritual_id:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∏—Ç—É–∞–ª
            ritual = await self.client.pages.retrieve(page_id=ritual_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
            current_description = ritual['properties'].get('–û–ø–∏—Å–∞–Ω–∏–µ', {}).get('rich_text', [])
            current_text = current_description[0]['text']['content'] if current_description else ''
            
            feedback_text = f"\n\n=== –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ({datetime.now().strftime('%Y-%m-%d')}) ===\n"
            feedback_text += f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {feedback_data.get('effectiveness', '–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ')}\n"
            feedback_text += f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {feedback_data.get('difficulty', '–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ')}\n"
            feedback_text += f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {feedback_data.get('suggestions', '–ù–µ—Ç')}\n"
            
            new_description = current_text + feedback_text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Ç—É–∞–ª
            await self.client.pages.update(
                page_id=ritual_id,
                properties={
                    '–û–ø–∏—Å–∞–Ω–∏–µ': {'rich_text': [{'text': {'content': new_description}}]}
                }
            )
            
            print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∏—Ç—É–∞–ª")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞: {e}")
    
    async def create_weekly_report(self):
        """–°–æ–∑–¥–∞—ë—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç"""
        print("\n=== –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ===")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await self.collect_habit_data()
        effectiveness_report = await self.analyze_effectiveness()
        suggestions = await self.generate_optimization_suggestions(effectiveness_report)
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
        report = {
            'date': datetime.now().strftime('%Y-%m-%d'),
            'period': '30 –¥–Ω–µ–π',
            'total_habits': sum(stats['total'] for stats in self.analytics_data.values()),
            'completed_habits': sum(stats['completed'] for stats in self.analytics_data.values()),
            'overall_completion_rate': sum(stats['completed'] for stats in self.analytics_data.values()) / sum(stats['total'] for stats in self.analytics_data.values()) * 100 if sum(stats['total'] for stats in self.analytics_data.values()) > 0 else 0,
            'effectiveness_report': effectiveness_report,
            'suggestions': suggestions
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        with open(f"docs/habit_analytics_report_{datetime.now().strftime('%Y%m%d')}.json", 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: docs/habit_analytics_report_{datetime.now().strftime('%Y%m%d')}.json")
        
        return report

async def main():
    analytics = HabitAnalytics()
    
    # –°–æ–∑–¥–∞—ë–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    report = await analytics.create_weekly_report()
    
    print(f"\n=== –ò–¢–û–ì–ò ===")
    print(f"–û–±—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {report['overall_completion_rate']:.1f}%")
    print(f"–í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {report['total_habits']}")
    print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {report['completed_habits']}")
    
    # –¢–æ–ø-3 —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∏
    top_habits = sorted(report['effectiveness_report'].items(), 
                       key=lambda x: x[1]['completion_rate'], reverse=True)[:3]
    
    print(f"\n–¢–æ–ø-3 —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∏:")
    for i, (habit, stats) in enumerate(top_habits, 1):
        print(f"{i}. {habit}: {stats['completion_rate']:.1f}%")

if __name__ == '__main__':
    asyncio.run(main()) 