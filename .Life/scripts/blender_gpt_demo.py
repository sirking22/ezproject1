#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BlenderGPT –ø–ª–∞–≥–∏–Ω–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
"""

import subprocess
import tempfile
import json
from pathlib import Path

def create_blender_gpt_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ BlenderGPT"""
    script = '''
import bpy
import bmesh
import math
from mathutils import Vector

# –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Å–ø–∏—Ä–∞–ª—å–Ω—É—é –±–∞—à–Ω—é
def create_spiral_tower():
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    bpy.ops.mesh.primitive_cylinder_add(
        radius=3,
        depth=1,
        location=(0, 0, 0)
    )
    base = bpy.context.active_object
    base.name = "SpiralTower_Base"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Ä–∞–ª—å –∏–∑ –∫—É–±–æ–≤
    num_cubes = 20
    height_step = 0.5
    angle_step = math.pi * 2 / 8  # 8 –∫—É–±–æ–≤ –Ω–∞ –≤–∏—Ç–æ–∫
    
    for i in range(num_cubes):
        height = i * height_step + 1
        angle = i * angle_step
        radius = 2.5 - (i * 0.05)  # –°—É–∂–µ–Ω–∏–µ –∫ –≤–µ—Ä—Ö—É
        
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        z = height
        
        # –°–æ–∑–¥–∞–µ–º –∫—É–±
        bpy.ops.mesh.primitive_cube_add(
            size=0.4,
            location=(x, y, z)
        )
        cube = bpy.context.active_object
        cube.name = f"SpiralCube_{i+1}"
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫—É–±
        cube.rotation_euler = (0, 0, angle)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        if i % 3 == 0:
            color = (1.0, 0.3, 0.3)  # –ö—Ä–∞—Å–Ω—ã–π
        elif i % 3 == 1:
            color = (0.3, 1.0, 0.3)  # –ó–µ–ª–µ–Ω—ã–π
        else:
            color = (0.3, 0.3, 1.0)  # –°–∏–Ω–∏–π
            
        mat = bpy.data.materials.new(name=f"Material_{i}")
        mat.use_nodes = True
        mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (*color, 1.0)
        cube.data.materials.append(mat)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—É –±–∞—à–Ω–∏
    bpy.ops.mesh.primitive_cone_add(
        radius1=1.0,
        radius2=0.1,
        depth=2.0,
        location=(0, 0, num_cubes * height_step + 2)
    )
    top = bpy.context.active_object
    top.name = "SpiralTower_Top"
    
    # –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–µ—Ä—à–∏–Ω—ã (–∑–æ–ª–æ—Ç–æ–π)
    gold_mat = bpy.data.materials.new(name="Gold")
    gold_mat.use_nodes = True
    bsdf = gold_mat.node_tree.nodes["Principled BSDF"]
    bsdf.inputs[0].default_value = (1.0, 0.8, 0.2, 1.0)  # –ó–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç
    bsdf.inputs[4].default_value = 1.0  # Metallic
    bsdf.inputs[7].default_value = 0.1  # Roughness
    top.data.materials.append(gold_mat)

# –°–æ–∑–¥–∞–µ–º –±–∞—à–Ω—é
create_spiral_tower()

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
bpy.ops.object.light_add(type='SUN', location=(5, 5, 10))
sun = bpy.context.active_object
sun.data.energy = 3.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.samples = 64
scene.render.resolution_x = 1920
scene.render.resolution_y = 1080

# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É
bpy.ops.object.camera_add(location=(8, -8, 6))
camera = bpy.context.active_object
camera.rotation_euler = (1.1, 0, 0.785)
scene.camera = camera

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ STL
output_path = "output/blender/spiral_tower.stl"
bpy.ops.export_mesh.stl(
    filepath=output_path,
    use_selection=False,
    global_scale=1.0
)

print("SUCCESS: –°–ø–∏—Ä–∞–ª—å–Ω–∞—è –±–∞—à–Ω—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤:", output_path)

# –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–≤—å—é
scene.render.filepath = "output/blender/spiral_tower_render.png"
bpy.ops.render.render(write_still=True)

print("SUCCESS: –†–µ–Ω–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: output/blender/spiral_tower_render.png")
'''
    return script

def run_blender_script():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –≤ Blender"""
    script_content = create_blender_gpt_script()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
        f.write(script_content)
        script_path = f.name
    
    # –ü—É—Ç—å –∫ Blender
    blender_path = "Z:\\–ü—Ä–æ–≥—Ä–∞–º–º—ã\\Blender\\blender.exe"
    
    # –°–æ–∑–¥–∞–µ–º output –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = Path("output/blender")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å–Ω–æ–π –±–∞—à–Ω–∏ —á–µ—Ä–µ–∑ Blender...")
        print("üîÑ –ó–∞–ø—É—Å–∫ Blender...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Blender —Å –Ω–∞—à–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
        result = subprocess.run([
            blender_path,
            "--background",
            "--python", script_path
        ], capture_output=True, text=True, timeout=60)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        if result.stdout:
            print("Blender Output:")
            print(result.stdout)
        
        if result.stderr:
            print("Blender Errors:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ –°–ø–∏—Ä–∞–ª—å–Ω–∞—è –±–∞—à–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É output/blender/")
            print("   - spiral_tower.stl (3D –º–æ–¥–µ–ª—å)")
            print("   - spiral_tower_render.png (—Ä–µ–Ω–¥–µ—Ä)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–¥: {result.returncode})")
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(script_path).unlink(missing_ok=True)

if __name__ == "__main__":
    print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å–Ω–æ–π –±–∞—à–Ω–∏ —á–µ—Ä–µ–∑ Blender")
    print("=" * 50)
    
    run_blender_script()
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ output/blender/") 