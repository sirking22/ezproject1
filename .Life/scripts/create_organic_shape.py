#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ñ–∏–≥—É—Ä—ã —á–µ—Ä–µ–∑ Blender
"""

import subprocess
import tempfile
from pathlib import Path

def create_organic_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ñ–∏–≥—É—Ä—ã"""
    script = '''
import bpy
import bmesh
import math
import numpy as np
from mathutils import Vector

# –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

def create_organic_flower():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç–æ–∫"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    num_petals = 8
    base_radius = 3.0
    height_variation = 2.0
    
    vertices = []
    faces = []
    
    # –¶–µ–Ω—Ç—Ä —Ü–≤–µ—Ç–∫–∞
    center_vertices = []
    for i in range(16):
        angle = i * math.pi * 2 / 16
        x = 0.5 * math.cos(angle)
        y = 0.5 * math.sin(angle)
        z = 0.2 * math.sin(angle * 4)  # –í–æ–ª–Ω–∏—Å—Ç–æ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∞
        center_vertices.append((x, y, z))
        vertices.append((x, y, z))
    
    # –°–æ–∑–¥–∞–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏
    for petal in range(num_petals):
        petal_angle = petal * math.pi * 2 / num_petals
        
        # –ë–∞–∑–æ–≤—ã–µ —Ç–æ—á–∫–∏ –ª–µ–ø–µ—Å—Ç–∫–∞
        petal_vertices = []
        for i in range(20):
            t = i / 19.0  # –ü–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç 0 –¥–æ 1
            
            # –†–∞–¥–∏—É—Å –ª–µ–ø–µ—Å—Ç–∫–∞ (—à–∏—Ä–æ–∫–∏–π —É –æ—Å–Ω–æ–≤–∞–Ω–∏—è, —É–∑–∫–∏–π –Ω–∞ –∫–æ–Ω—Ü–µ)
            radius = base_radius * (1.0 - t * 0.7) * (1.0 + 0.3 * math.sin(t * math.pi))
            
            # –£–≥–æ–ª –ª–µ–ø–µ—Å—Ç–∫–∞
            angle_offset = (t - 0.5) * 0.6  # –ò–∑–≥–∏–± –ª–µ–ø–µ—Å—Ç–∫–∞
            angle = petal_angle + angle_offset
            
            # –í—ã—Å–æ—Ç–∞ –ª–µ–ø–µ—Å—Ç–∫–∞
            height = height_variation * t * (1.0 + 0.5 * math.sin(t * math.pi * 2))
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x = radius * math.cos(angle)
            y = radius * math.sin(angle)
            z = height
            
            vertices.append((x, y, z))
            petal_vertices.append(len(vertices) - 1)
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –ª–µ–ø–µ—Å—Ç–æ–∫ —Å —Ü–µ–Ω—Ç—Ä–æ–º
        center_start = 0
        petal_start = len(vertices) - 20
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏ –¥–ª—è –ª–µ–ø–µ—Å—Ç–∫–∞
        for i in range(19):
            # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–æ–º –∏ –ª–µ–ø–µ—Å—Ç–∫–æ–º
            if i < 16:
                faces.append([center_start + i, center_start + ((i + 1) % 16), petal_start + i])
            
            # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≤–¥–æ–ª—å –ª–µ–ø–µ—Å—Ç–∫–∞
            if i < 19:
                faces.append([petal_start + i, petal_start + i + 1, petal_start + min(i + 2, 19)])
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –≤–µ—Ä—à–∏–Ω
    mesh = bpy.data.meshes.new("OrganicFlower")
    obj = bpy.data.objects.new("OrganicFlower", mesh)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
    bpy.context.collection.objects.link(obj)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—à –¥–∞–Ω–Ω—ã–º–∏
    mesh.from_pydata(vertices, [], faces)
    mesh.update()
    
    # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    bpy.context.view_layer.objects.active = obj
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_all(action='SELECT')
    bpy.ops.mesh.faces_shade_smooth()
    bpy.ops.object.mode_set(mode='OBJECT')
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    mat = bpy.data.materials.new(name="FlowerMaterial")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    nodes.clear()
    
    # Principled BSDF
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    bsdf.inputs['Base Color'].default_value = (1.0, 0.4, 0.6, 1.0)  # –†–æ–∑–æ–≤—ã–π
    bsdf.inputs['Roughness'].default_value = 0.3
    bsdf.inputs['Subsurface'].default_value = 0.2  # –ü–æ–¥–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏–µ
    bsdf.inputs['Subsurface Color'].default_value = (1.0, 0.8, 0.9, 1.0)
    
    # Output
    output = nodes.new(type='ShaderNodeOutputMaterial')
    mat.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    obj.data.materials.append(mat)
    
    return obj

# –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç–æ–∫
flower = create_organic_flower()

# –û—Å–≤–µ—â–µ–Ω–∏–µ
bpy.ops.object.light_add(type='SUN', location=(5, 5, 10))
sun = bpy.context.active_object
sun.data.energy = 3.0

bpy.ops.object.light_add(type='AREA', location=(-3, 3, 8))
area_light = bpy.context.active_object
area_light.data.energy = 2.0
area_light.data.color = (1.0, 0.9, 0.8)  # –¢–µ–ø–ª—ã–π —Å–≤–µ—Ç

# –ö–∞–º–µ—Ä–∞
bpy.ops.object.camera_add(location=(8, -8, 6))
camera = bpy.context.active_object
camera.rotation_euler = (1.1, 0, 0.785)
bpy.context.scene.camera = camera

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.samples = 64
scene.render.resolution_x = 1920
scene.render.resolution_y = 1080

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ blend —Ñ–∞–π–ª
bpy.ops.wm.save_as_mainfile(filepath="output/blender/organic_flower.blend")

print("SUCCESS: –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω!")
print("SUCCESS: –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: output/blender/organic_flower.blend")

# –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Blender –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
'''
    return script

def run_organic_script():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ñ–∏–≥—É—Ä—ã"""
    script_content = create_organic_script()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
        f.write(script_content)
        script_path = f.name
    
    # –ü—É—Ç—å –∫ Blender
    blender_path = "Z:\\–ü—Ä–æ–≥—Ä–∞–º–º—ã\\Blender\\blender.exe"
    
    # –°–æ–∑–¥–∞–µ–º output –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = Path("output/blender")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        print("üå∏ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∫–∞...")
        print("üîÑ –ó–∞–ø—É—Å–∫ Blender...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Blender
        result = subprocess.run([
            blender_path,
            "--background",
            "--python", script_path
        ], capture_output=True, text=True, timeout=60)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        if result.stdout:
            # –ò—â–µ–º –Ω–∞—à–∏ SUCCESS —Å–æ–æ–±—â–µ–Ω–∏—è
            for line in result.stdout.split('\n'):
                if 'SUCCESS:' in line:
                    print(f"‚úÖ {line.replace('SUCCESS:', '').strip()}")
        
        if result.stderr and 'SUCCESS:' not in result.stderr:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:", result.stderr.split('\n')[0])
        
        if result.returncode == 0:
            print("\nüéâ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print("üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: output/blender/organic_flower.blend")
            print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Blender –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–¥: {result.returncode})")
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(script_path).unlink(missing_ok=True)

if __name__ == "__main__":
    print("üå∫ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∫–∞ —á–µ—Ä–µ–∑ Blender")
    print("=" * 50)
    
    run_organic_script()
    
    print("\nüé® –ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä–æ–π—Ç–µ output/blender/organic_flower.blend –≤ Blender") 