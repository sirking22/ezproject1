import os
import asyncio
from notion_client import AsyncClient
from dotenv import load_dotenv

load_dotenv()

HABITS_DB = os.getenv('NOTION_DATABASE_ID_HABITS')
RITUALS_DB = os.getenv('NOTION_DATABASE_ID_RITUALS')
NOTION_TOKEN = os.getenv('NOTION_TOKEN')

# Привычки, которые нужно удалить (лишние)
DELETE_HABITS = [
    'Трекер привычек',
    'Путешествия — планирование и отчёты',
    'Нейросети — обучение',
    'Видео для развития',
    'Велопрогулки по расписанию',
    'Шахматы по расписанию',
]

# Ритуалы, которые нужно удалить (лишние)
DELETE_RITUALS = [
    'Планировать новое путешествие раз в квартал',
    'Кататься на велосипеде 2 раза в неделю',
    'Играть в шахматы 3 раза в неделю',
    'Смотреть обучающее видео раз в неделю',
    'Изучать нейросети каждую неделю',
    'Внедрять новые привычки каждый месяц',
    'Блоки ритуалов: утренние, дневные, вечерние',
]

# Оптимизированные ритуалы (шаблоны для автогенерации привычек)
OPTIMIZED_RITUALS = [
    {
        'Название': 'Гениальное кино',
        'Описание': 'Смотреть гениальное кино раз в 2 недели с подробной рефлексией и изучением',
        'Категория': 'Фильмы',
        'Микрошаг': 'Выбрать фильм из списка гениальных, посмотреть, написать рефлексию',
        'Важность': 8,
        'Сейчас в работ/ на паузе': True,
        'Пошаговая инструкция': '1. Выбрать фильм из списка\n2. Посмотреть\n3. Написать рефлексию: впечатления, что понравилось, что можно применить\n4. Изучить контекст: режиссёр, эпоха, влияние',
        'Теги': ['#кино', '#рефлексия', '#развитие'],
    },
    {
        'Название': 'Чтение по расписанию',
        'Описание': 'Ежедневное чтение 5-10 минут для развития',
        'Категория': 'Книги',
        'Микрошаг': 'Открыть книгу и читать 5-10 минут',
        'Важность': 9,
        'Сейчас в работ/ на паузе': True,
        'Пошаговая инструкция': '1. Выбрать книгу\n2. Читать 5-10 минут\n3. Отметить прогресс\n4. При необходимости - пересказ прочитанного',
        'Теги': ['#чтение', '#ежедневно', '#развитие'],
    },
    {
        'Название': 'Гениальная музыка',
        'Описание': 'Изучать новые жанры, исполнителей, закреплять материал через опросы и нейросети',
        'Категория': 'Музыка',
        'Микрошаг': 'Найти новую музыку, изучить контекст, закрепить через нейросеть',
        'Важность': 7,
        'Сейчас в работ/ на паузе': True,
        'Пошаговая инструкция': '1. Найти новый жанр/исполнителя\n2. Послушать\n3. Изучить историю/контекст\n4. Пройти опрос/тест через нейросеть для закрепления',
        'Теги': ['#музыка', '#изучение', '#нейросеть'],
    },
    {
        'Название': 'Бокс',
        'Описание': 'Тренировки по боксу 3 раза в неделю: вторник, четверг, суббота 18:30-20:00',
        'Категория': 'Бокс',
        'Микрошаг': 'Прийти на тренировку в назначенное время',
        'Важность': 9,
        'Сейчас в работ/ на паузе': True,
        'Пошаговая инструкция': '1. Вторник 18:30-20:00\n2. Четверг 18:30-20:00\n3. Суббота 18:30-20:00\n4. Отметить посещение',
        'Теги': ['#бокс', '#спорт', '#регулярно'],
    },
    {
        'Название': 'Шахматы',
        'Описание': 'Играть в шахматы 3 раза в неделю для развития мышления',
        'Категория': 'Шахматы',
        'Микрошаг': 'Сыграть партию в шахматы',
        'Важность': 7,
        'Сейчас в работ/ на паузе': True,
        'Пошаговая инструкция': '1. Выбрать платформу/партнёра\n2. Сыграть партию\n3. Проанализировать ходы\n4. Отметить прогресс',
        'Теги': ['#шахматы', '#мышление', '#стратегия'],
    },
    {
        'Название': 'Inbox Review',
        'Описание': 'Регулярно разбирать задачи, картинки, ссылки, видео. Рабочий и личный inbox.',
        'Категория': 'Вечер',
        'Микрошаг': 'Выделить 15 минут для разбора inbox',
        'Важность': 8,
        'Сейчас в работ/ на паузе': True,
        'Пошаговая инструкция': '1. Открыть Telegram, email, браузер\n2. Разобрать задачи, картинки, ссылки\n3. Распределить по проектам/архиву\n4. Поддерживать чистоту',
        'Теги': ['#inbox', '#организация', '#вечер'],
    },
]

async def cleanup_and_optimize():
    if not NOTION_TOKEN or not HABITS_DB or not RITUALS_DB:
        print('NOTION_TOKEN или базы не найдены!')
        return
    
    client = AsyncClient(auth=NOTION_TOKEN)
    
    # 1. Удаляем лишние привычки
    print("=== Удаление лишних привычек ===")
    response = await client.databases.query(database_id=HABITS_DB)
    pages = response.get('results', [])
    
    for page in pages:
        name = page['properties']['Привычка'].get('title', [])
        if name:
            title = name[0]['plain_text']
            if title in DELETE_HABITS:
                await client.pages.update(page_id=page['id'], archived=True)
                print(f'Удалена привычка: {title}')
    
    # 2. Удаляем лишние ритуалы
    print("\n=== Удаление лишних ритуалов ===")
    response = await client.databases.query(database_id=RITUALS_DB)
    pages = response.get('results', [])
    
    for page in pages:
        name = page['properties']['Название'].get('title', [])
        if name:
            title = name[0]['plain_text']
            if title in DELETE_RITUALS:
                await client.pages.update(page_id=page['id'], archived=True)
                print(f'Удалён ритуал: {title}')
    
    # 3. Создаём/обновляем оптимизированные ритуалы
    print("\n=== Создание оптимизированных ритуалов ===")
    for ritual in OPTIMIZED_RITUALS:
        # Проверяем, есть ли уже такой ритуал
        exists = False
        for page in pages:
            name = page['properties']['Название'].get('title', [])
            if name and name[0]['plain_text'] == ritual['Название']:
                exists = True
                # Обновляем ритуал
                props = {
                    'Описание': {'rich_text': [{'text': {'content': ritual['Описание']}}]},
                    'Категория': {'select': {'name': ritual['Категория']}},
                    'Микрошаг': {'rich_text': [{'text': {'content': ritual['Микрошаг']}}]},
                    'Важность': {'number': ritual['Важность']},
                    'Сейчас в работ/ на паузе': {'checkbox': ritual['Сейчас в работ/ на паузе']},
                    'Пошаговая инструкция': {'rich_text': [{'text': {'content': ritual['Пошаговая инструкция']}}]},
                }
                await client.pages.update(page_id=page['id'], properties=props)
                print(f'Обновлён ритуал: {ritual["Название"]}')
                break
        
        if not exists:
            # Создаём новый ритуал
            props = {
                'Название': {'title': [{'text': {'content': ritual['Название']}}]},
                'Описание': {'rich_text': [{'text': {'content': ritual['Описание']}}]},
                'Категория': {'select': {'name': ritual['Категория']}},
                'Микрошаг': {'rich_text': [{'text': {'content': ritual['Микрошаг']}}]},
                'Важность': {'number': ritual['Важность']},
                'Сейчас в работ/ на паузе': {'checkbox': ritual['Сейчас в работ/ на паузе']},
                'Пошаговая инструкция': {'rich_text': [{'text': {'content': ritual['Пошаговая инструкция']}}]},
            }
            await client.pages.create(parent={'database_id': RITUALS_DB}, properties=props)
            print(f'Создан ритуал: {ritual["Название"]}')
    
    print("\n=== Ревизия завершена ===")
    print("Оставлены только нужные привычки и ритуалы.")
    print("Ритуалы готовы для автогенерации привычек.")

if __name__ == '__main__':
    asyncio.run(cleanup_and_optimize()) 