#!/usr/bin/env python3
"""
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ Blender —á–µ—Ä–µ–∑ Python API
"""

import socket
import json
import time
from pathlib import Path

def send_to_blender(script_content):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π Blender —á–µ—Ä–µ–∑ socket"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
    script_path = Path("temp_blender_script.py")
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"üìù –°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {script_path}")
    print("üéØ –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ Blender:")
    print(f"   - –û—Ç–∫—Ä–æ–π—Ç–µ Text Editor")
    print(f"   - –ù–∞–∂–º–∏—Ç–µ 'Open' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ: {script_path.absolute()}")
    print(f"   - –ù–∞–∂–º–∏—Ç–µ 'Run Script' (Alt+P)")
    print("")
    print("‚ú® –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ –≤ Blender Python Console:")
    print("=" * 50)
    print(script_content)
    print("=" * 50)

def create_edit_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω—ã"""
    script = '''
import bpy
import bmesh
import math
import random
from mathutils import Vector, Matrix

print("üîÆ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω—ã...")

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
active_obj = bpy.context.active_object
if active_obj:
    print(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç: {active_obj.name}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Å—Ç–∞–ª–ª - —É—Å–ª–æ–∂–Ω—è–µ–º –µ–≥–æ
    if "crystal" in active_obj.name.lower() or "sphere" in active_obj.name.lower():
        print("üíé –£—Å–ª–æ–∂–Ω—è–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bpy.context.view_layer.objects.active = active_obj
        bpy.ops.object.mode_set(mode='EDIT')
        
        # –ü–æ–ª—É—á–∞–µ–º bmesh
        bm = bmesh.from_mesh(active_obj.data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        for v in bm.verts:
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Å—Ç—É–ø—ã –∏ –≤–ø–∞–¥–∏–Ω—ã
            noise = random.uniform(-0.5, 0.5)
            v.co += v.normal * noise * 0.3
        
        # –û–±–Ω–æ–≤–ª—è–µ–º mesh
        bmesh.update_edit_mesh(active_obj.data)
        bpy.ops.object.mode_set(mode='OBJECT')
        
        # –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        if active_obj.data.materials:
            mat = active_obj.data.materials[0]
        else:
            mat = bpy.data.materials.new(name="EnhancedCrystal")
            active_obj.data.materials.append(mat)
        
        mat.use_nodes = True
        nodes = mat.node_tree.nodes
        links = mat.node_tree.links
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–¥—ã
        nodes.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
        bsdf.location = (0, 0)
        
        # Noise texture
        noise_tex = nodes.new(type='ShaderNodeTexNoise')
        noise_tex.location = (-400, 200)
        noise_tex.inputs['Scale'].default_value = 15.0
        noise_tex.inputs['Detail'].default_value = 10.0
        
        # Color ramp
        color_ramp = nodes.new(type='ShaderNodeValToRGB')
        color_ramp.location = (-200, 200)
        color_ramp.color_ramp.elements[0].position = 0.3
        color_ramp.color_ramp.elements[1].position = 0.7
        
        # Emission
        emission = nodes.new(type='ShaderNodeEmission')
        emission.location = (0, 200)
        emission.inputs['Color'].default_value = (0.6, 0.8, 1.0, 1.0)
        emission.inputs['Strength'].default_value = 2.5
        
        # Mix shader
        mix_shader = nodes.new(type='ShaderNodeMixShader')
        mix_shader.location = (200, 0)
        mix_shader.inputs['Fac'].default_value = 0.4
        
        # Output
        output = nodes.new(type='ShaderNodeOutputMaterial')
        output.location = (400, 0)
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º
        links.new(noise_tex.outputs['Color'], color_ramp.inputs['Fac'])
        links.new(color_ramp.outputs['Color'], bsdf.inputs['Roughness'])
        links.new(bsdf.outputs['BSDF'], mix_shader.inputs[1])
        links.new(emission.outputs['Emission'], mix_shader.inputs[2])
        links.new(mix_shader.outputs['Shader'], output.inputs['Surface'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        bsdf.inputs['Base Color'].default_value = (0.7, 0.9, 1.0, 1.0)
        bsdf.inputs['Transmission'].default_value = 0.9
        bsdf.inputs['IOR'].default_value = 1.6
        
        print("‚úÖ –ö—Ä–∏—Å—Ç–∞–ª–ª —É—Å–ª–æ–∂–Ω–µ–Ω!")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ü–µ–Ω—É
print("‚ú® –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã
for i in range(20):
    angle = i * 18 * math.pi / 180  # 18 –≥—Ä–∞–¥—É—Å–æ–≤ –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏
    radius = 6.0 + random.uniform(-1, 1)
    height = random.uniform(-2, 4)
    
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    z = height
    
    bpy.ops.mesh.primitive_uv_sphere_add(
        radius=random.uniform(0.1, 0.3),
        location=(x, y, z)
    )
    particle = bpy.context.active_object
    particle.name = f"Particle_{i+1}"
    
    # –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—à—Ç–∞–±
    scale = random.uniform(0.5, 1.5)
    particle.scale = (scale, scale, scale)
    
    # –°–≤–µ—Ç—è—â–∏–π—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª
    mat = bpy.data.materials.new(name=f"ParticleMat_{i}")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    nodes.clear()
    
    emission = nodes.new(type='ShaderNodeEmission')
    output = nodes.new(type='ShaderNodeOutputMaterial')
    
    # –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
    colors = [
        (1.0, 0.3, 0.3),  # –ö—Ä–∞—Å–Ω—ã–π
        (0.3, 1.0, 0.3),  # –ó–µ–ª–µ–Ω—ã–π
        (0.3, 0.3, 1.0),  # –°–∏–Ω–∏–π
        (1.0, 1.0, 0.3),  # –ñ–µ–ª—Ç—ã–π
        (1.0, 0.3, 1.0),  # –ú–∞–≥–µ–Ω—Ç–∞
        (0.3, 1.0, 1.0),  # –¶–∏–∞–Ω
    ]
    
    color = random.choice(colors)
    emission.inputs['Color'].default_value = (*color, 1.0)
    emission.inputs['Strength'].default_value = random.uniform(2.0, 6.0)
    
    mat.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])
    particle.data.materials.append(mat)

# –°–æ–∑–¥–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª—å—Ü–∞
for i in range(3):
    bpy.ops.mesh.primitive_torus_add(
        major_radius=3.0 + i * 1.5,
        minor_radius=0.2,
        major_segments=48,
        minor_segments=12,
        location=(0, 0, 1 + i * 1.2)
    )
    ring = bpy.context.active_object
    ring.name = f"EnergyRing_{i+1}"
    
    # –ù–∞–∫–ª–æ–Ω
    ring.rotation_euler = (math.radians(15 + i * 10), 0, math.radians(i * 30))
    
    # –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
    mat = bpy.data.materials.new(name=f"RingMat_{i}")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    nodes.clear()
    
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    output = nodes.new(type='ShaderNodeOutputMaterial')
    
    # –†–∞–∑–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã
    metals = [
        (1.0, 0.8, 0.2),  # –ó–æ–ª–æ—Ç–æ
        (0.9, 0.9, 0.9),  # –°–µ—Ä–µ–±—Ä–æ
        (0.8, 0.4, 0.1),  # –ú–µ–¥—å
    ]
    
    bsdf.inputs['Base Color'].default_value = (*metals[i], 1.0)
    bsdf.inputs['Metallic'].default_value = 1.0
    bsdf.inputs['Roughness'].default_value = 0.1
    
    mat.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
    ring.data.materials.append(mat)

# –£–ª—É—á—à–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
print("üí° –£–ª—É—á—à–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ...")

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
light_positions = [
    (5, 5, 8),
    (-5, -5, 8),
    (8, 0, 5),
    (-8, 0, 5),
]

for i, pos in enumerate(light_positions):
    bpy.ops.object.light_add(type='POINT', location=pos)
    light = bpy.context.active_object
    light.name = f"ExtraLight_{i+1}"
    light.data.energy = 150.0
    light.data.color = (0.8, 0.9, 1.0)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.samples = 128
scene.cycles.use_denoising = True

print("‚úÖ –°—Ü–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∞!")
print("üé® –î–æ–±–∞–≤–ª–µ–Ω–æ:")
print("   - 20 —Å–≤–µ—Ç—è—â–∏—Ö—Å—è —á–∞—Å—Ç–∏—Ü")
print("   - 3 –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª—å—Ü–∞")
print("   - 4 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞")
print("   - –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
print("")
print("üéØ –ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É! F12 –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞.")
'''
    return script

def create_animation_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
    script = '''
import bpy
import math

print("üé¨ –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é...")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
scene = bpy.context.scene
scene.frame_start = 1
scene.frame_end = 120  # 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 24 fps

# –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
crystal = None
for obj in bpy.data.objects:
    if "crystal" in obj.name.lower() or "sphere" in obj.name.lower():
        crystal = obj
        break

if crystal:
    print(f"üé≠ –ê–Ω–∏–º–∏—Ä—É–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª: {crystal.name}")
    
    # –í—Ä–∞—â–µ–Ω–∏–µ –ø–æ Z
    crystal.rotation_euler = (0, 0, 0)
    crystal.keyframe_insert(data_path="rotation_euler", frame=1)
    
    crystal.rotation_euler = (0, 0, 2 * math.pi)
    crystal.keyframe_insert(data_path="rotation_euler", frame=120)
    
    # –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    for fcurve in crystal.animation_data.action.fcurves:
        for keyframe in fcurve.keyframe_points:
            keyframe.interpolation = 'LINEAR'

# –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü
particles = [obj for obj in bpy.data.objects if "particle" in obj.name.lower()]
for i, particle in enumerate(particles):
    print(f"‚ú® –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—É {i+1}")
    
    # –ü–ª–∞–≤–∞—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    start_pos = particle.location.copy()
    
    # –ö–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã
    particle.keyframe_insert(data_path="location", frame=1)
    
    # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    import random
    random.seed(i)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    for frame in range(30, 121, 30):
        offset = Vector((
            random.uniform(-1, 1),
            random.uniform(-1, 1),
            random.uniform(-0.5, 0.5)
        ))
        particle.location = start_pos + offset
        particle.keyframe_insert(data_path="location", frame=frame)
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    particle.location = start_pos
    particle.keyframe_insert(data_path="location", frame=120)
    
    # –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    if particle.animation_data and particle.animation_data.action:
        for fcurve in particle.animation_data.action.fcurves:
            for keyframe in fcurve.keyframe_points:
                keyframe.interpolation = 'BEZIER'

# –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–ª–µ—Ü
rings = [obj for obj in bpy.data.objects if "ring" in obj.name.lower()]
for i, ring in enumerate(rings):
    print(f"üîÑ –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–æ–ª—å—Ü–æ {i+1}")
    
    # –í—Ä–∞—â–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
    speed = 1 + i * 0.5  # –†–∞–∑–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª—å—Ü–∞
    
    ring.rotation_euler = (0, 0, 0)
    ring.keyframe_insert(data_path="rotation_euler", frame=1)
    
    ring.rotation_euler = (0, 0, 2 * math.pi * speed)
    ring.keyframe_insert(data_path="rotation_euler", frame=120)
    
    # –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    if ring.animation_data and ring.animation_data.action:
        for fcurve in ring.animation_data.action.fcurves:
            for keyframe in fcurve.keyframe_points:
                keyframe.interpolation = 'LINEAR'

# –ê–Ω–∏–º–∞—Ü–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ç–∞
lights = [obj for obj in bpy.data.objects if "light" in obj.name.lower()]
for i, light in enumerate(lights):
    if light.type == 'LIGHT':
        print(f"üí° –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–≤–µ—Ç {i+1}")
        
        # –ü—É–ª—å—Å–∞—Ü–∏—è
        light.data.energy = 100
        light.data.keyframe_insert(data_path="energy", frame=1)
        
        light.data.energy = 200
        light.data.keyframe_insert(data_path="energy", frame=60)
        
        light.data.energy = 100
        light.data.keyframe_insert(data_path="energy", frame=120)
        
        # –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        if light.data.animation_data and light.data.animation_data.action:
            for fcurve in light.data.animation_data.action.fcurves:
                for keyframe in fcurve.keyframe_points:
                    keyframe.interpolation = 'BEZIER'

print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
print("üé¨ 120 –∫–∞–¥—Ä–æ–≤ (5 —Å–µ–∫—É–Ω–¥)")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
print("üìπ –ù–∞–∂–º–∏—Ç–µ Ctrl+F12 –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏")
'''
    return script

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÆ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Blender")
    print("=" * 50)
    
    print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –£–ª—É—á—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ü–µ–Ω—É")
    print("2. –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é")
    print("3. –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice == "1":
        script = create_edit_script()
        send_to_blender(script)
    elif choice == "2":
        script = create_animation_script()
        send_to_blender(script)
    elif choice == "3":
        script = create_edit_script() + "\n\n" + create_animation_script()
        send_to_blender(script)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 