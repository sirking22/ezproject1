#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Quick Voice Assistant
"""

import asyncio
import json
import requests
import time
from datetime import datetime
from typing import Dict, Any, List

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_CONFIG = {
    "server_url": "http://localhost:8000",
    "timeout": 10,
    "retry_attempts": 3
}

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
TEST_COMMANDS = [
    {
        "query": "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –º–µ–¥–∏—Ç–∞—Ü–∏—è",
        "expected_action": "create_task",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
    },
    {
        "query": "–∑–∞–ø–∏—à–∏ –º—ã—Å–ª—å –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "expected_action": "save_reflection",
        "description": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"
    },
    {
        "query": "—Å–æ–∑–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏",
        "expected_action": "create_habit",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"
    },
    {
        "query": "–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å",
        "expected_action": "get_progress",
        "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
    },
    {
        "query": "–∫–∞–∫ –º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
        "expected_action": "health_analysis",
        "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
    }
]

class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.server_url = TEST_CONFIG["server_url"]
        self.timeout = TEST_CONFIG["timeout"]
        self.results = []
        
    def print_header(self):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üß™" + "="*50)
        print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QUICK VOICE ASSISTANT")
        print("="*52)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåê –°–µ—Ä–≤–µ—Ä: {self.server_url}")
        print("="*52)
    
    def print_result(self, test_name: str, success: bool, details: str = ""):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} | {test_name}")
        if details:
            print(f"   üìù {details}")
        print()
    
    def test_server_availability(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.server_url}/ping", timeout=self.timeout)
            if response.status_code == 200:
                data = response.json()
                if data.get("status") == "ok":
                    self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞", True)
                    return True
        except Exception as e:
            self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_health_endpoint(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            response = requests.get(f"{self.server_url}/health", timeout=self.timeout)
            if response.status_code == 200:
                data = response.json()
                components = data.get("components", {})
                
                details = []
                if components.get("llm"):
                    details.append("LLM: ‚úÖ")
                else:
                    details.append("LLM: ‚ùå")
                
                if components.get("notion"):
                    details.append("Notion: ‚úÖ")
                else:
                    details.append("Notion: ‚ùå")
                
                if components.get("telegram"):
                    details.append("Telegram: ‚úÖ")
                else:
                    details.append("Telegram: ‚ùå")
                
                self.print_result("–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è", True, " | ".join(details))
                return True
        except Exception as e:
            self.print_result("–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_voice_command(self, command: Dict[str, Any]) -> bool:
        """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        try:
            payload = {
                "query": command["query"],
                "context": "test",
                "timestamp": int(time.time()),
                "user_id": "test_user"
            }
            
            response = requests.post(
                f"{self.server_url}/watch/voice",
                json=payload,
                timeout=self.timeout
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if all(key in data for key in ["response", "timestamp"]):
                    details = f"–û—Ç–≤–µ—Ç: {data['response'][:50]}..."
                    if data.get("action"):
                        details += f" | –î–µ–π—Å—Ç–≤–∏–µ: {data['action']}"
                    
                    self.print_result(
                        command["description"], 
                        True, 
                        details
                    )
                    return True
                else:
                    self.print_result(
                        command["description"], 
                        False, 
                        "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞"
                    )
                    return False
            else:
                self.print_result(
                    command["description"], 
                    False, 
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.print_result(
                command["description"], 
                False, 
                f"–û—à–∏–±–∫–∞: {e}"
            )
            return False
    
    def test_telegram_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"""
        try:
            payload = {
                "message": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Quick Voice Assistant",
                "source": "system_test"
            }
            
            response = requests.post(
                f"{self.server_url}/telegram/send",
                json=payload,
                timeout=self.timeout
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("status") in ["sent", "failed"]:
                    details = f"–°—Ç–∞—Ç—É—Å: {data['status']}"
                    self.print_result("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram", True, details)
                    return True
                else:
                    self.print_result(
                        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram", 
                        False, 
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞"
                    )
                    return False
            else:
                self.print_result(
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram", 
                    False, 
                    f"HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.print_result(
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram", 
                False, 
                f"–û—à–∏–±–∫–∞: {e}"
            )
            return False
    
    def test_metrics_endpoint(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
        try:
            response = requests.get(f"{self.server_url}/metrics", timeout=self.timeout)
            if response.status_code == 200:
                data = response.json()
                if "uptime" in data:
                    details = f"Uptime: {data['uptime']}s"
                    self.print_result("–ú–µ—Ç—Ä–∏–∫–∏", True, details)
                    return True
                else:
                    self.print_result("–ú–µ—Ç—Ä–∏–∫–∏", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç—Ä–∏–∫–∏")
                    return False
            else:
                self.print_result("–ú–µ—Ç—Ä–∏–∫–∏", False, f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.print_result("–ú–µ—Ç—Ä–∏–∫–∏", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.print_header()
        
        test_results = {
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "details": []
        }
        
        # –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        test_results["total_tests"] += 1
        if self.test_server_availability():
            test_results["passed_tests"] += 1
        else:
            test_results["failed_tests"] += 1
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: ./start_server.sh")
            return test_results
        
        # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        test_results["total_tests"] += 1
        if self.test_health_endpoint():
            test_results["passed_tests"] += 1
        else:
            test_results["failed_tests"] += 1
        
        # –¢–µ—Å—Ç 3: –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for command in TEST_COMMANDS:
            test_results["total_tests"] += 1
            if self.test_voice_command(command):
                test_results["passed_tests"] += 1
            else:
                test_results["failed_tests"] += 1
        
        # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram
        test_results["total_tests"] += 1
        if self.test_telegram_integration():
            test_results["passed_tests"] += 1
        else:
            test_results["failed_tests"] += 1
        
        # –¢–µ—Å—Ç 5: –ú–µ—Ç—Ä–∏–∫–∏
        test_results["total_tests"] += 1
        if self.test_metrics_endpoint():
            test_results["passed_tests"] += 1
        else:
            test_results["failed_tests"] += 1
        
        return test_results
    
    def print_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä" + "="*50)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*52)
        
        total = results["total_tests"]
        passed = results["passed_tests"]
        failed = results["failed_tests"]
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        
        if total > 0:
            success_rate = (passed / total) * 100
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print("="*52)
        
        if failed == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏")
        
        print("="*52)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SystemTester()
    
    try:
        results = tester.run_all_tests()
        tester.print_summary(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
        with open("test_results.json", "w", encoding="utf-8") as f:
            json.dump({
                "timestamp": datetime.now().isoformat(),
                "results": results
            }, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    main() 