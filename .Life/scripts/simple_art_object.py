#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ Blender
"""

import subprocess
import tempfile
from pathlib import Path

def create_art_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
    script = '''
import bpy
import bmesh
import math

# –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
def create_art_composition():
    objects_created = []
    
    # 1. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞
    bpy.ops.mesh.primitive_uv_sphere_add(
        radius=2.0,
        location=(0, 0, 2)
    )
    sphere = bpy.context.active_object
    sphere.name = "CentralSphere"
    objects_created.append(sphere)
    
    # –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ñ–µ—Ä—ã - —Å—Ç–µ–∫–ª–æ
    mat_glass = bpy.data.materials.new(name="Glass")
    mat_glass.use_nodes = True
    nodes = mat_glass.node_tree.nodes
    bsdf = nodes["Principled BSDF"]
    bsdf.inputs['Base Color'].default_value = (0.9, 0.95, 1.0, 1.0)
    bsdf.inputs['Transmission'].default_value = 0.9
    bsdf.inputs['Roughness'].default_value = 0.1
    sphere.data.materials.append(mat_glass)
    
    # 2. –ö–æ–ª—å—Ü–∞ –≤–æ–∫—Ä—É–≥ —Å—Ñ–µ—Ä—ã
    for i in range(3):
        angle = i * 120 * math.pi / 180  # 120 –≥—Ä–∞–¥—É—Å–æ–≤
        radius = 5.0
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        z = 2.5 + i * 0.5
        
        bpy.ops.mesh.primitive_torus_add(
            major_radius=1.5,
            minor_radius=0.3,
            location=(x, y, z)
        )
        ring = bpy.context.active_object
        ring.name = f"Ring_{i+1}"
        ring.rotation_euler = (math.pi/2, 0, angle)
        objects_created.append(ring)
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª - –º–µ—Ç–∞–ª–ª
        mat_metal = bpy.data.materials.new(name=f"Metal_{i}")
        mat_metal.use_nodes = True
        bsdf_metal = mat_metal.node_tree.nodes["Principled BSDF"]
        colors = [(0.8, 0.6, 0.2, 1.0), (0.7, 0.7, 0.7, 1.0), (0.9, 0.4, 0.2, 1.0)]
        bsdf_metal.inputs['Base Color'].default_value = colors[i]
        bsdf_metal.inputs['Metallic'].default_value = 0.9
        bsdf_metal.inputs['Roughness'].default_value = 0.2
        ring.data.materials.append(mat_metal)
    
    # 3. –û—Å–Ω–æ–≤–∞–Ω–∏–µ
    bpy.ops.mesh.primitive_cylinder_add(
        radius=8.0,
        depth=0.5,
        location=(0, 0, -0.25)
    )
    base = bpy.context.active_object
    base.name = "Base"
    objects_created.append(base)
    
    # –ú–∞—Ç–µ—Ä–∏–∞–ª - –¥–µ—Ä–µ–≤–æ
    mat_wood = bpy.data.materials.new(name="Wood")
    mat_wood.use_nodes = True
    bsdf_wood = mat_wood.node_tree.nodes["Principled BSDF"]
    bsdf_wood.inputs['Base Color'].default_value = (0.6, 0.4, 0.2, 1.0)
    bsdf_wood.inputs['Roughness'].default_value = 0.8
    base.data.materials.append(mat_wood)
    
    # 4. –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for i in range(6):
        angle = i * 60 * math.pi / 180
        radius = 3.5
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        z = 0.5
        
        bpy.ops.mesh.primitive_cube_add(
            size=0.5,
            location=(x, y, z)
        )
        cube = bpy.context.active_object
        cube.name = f"DecorCube_{i+1}"
        cube.rotation_euler = (0, 0, angle)
        objects_created.append(cube)
        
        # –Ø—Ä–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
        mat_bright = bpy.data.materials.new(name=f"Bright_{i}")
        mat_bright.use_nodes = True
        bsdf_bright = mat_bright.node_tree.nodes["Principled BSDF"]
        # –†–∞–∑–Ω—ã–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
        bright_colors = [
            (1.0, 0.2, 0.2, 1.0),  # –ö—Ä–∞—Å–Ω—ã–π
            (0.2, 1.0, 0.2, 1.0),  # –ó–µ–ª–µ–Ω—ã–π
            (0.2, 0.2, 1.0, 1.0),  # –°–∏–Ω–∏–π
            (1.0, 1.0, 0.2, 1.0),  # –ñ–µ–ª—Ç—ã–π
            (1.0, 0.2, 1.0, 1.0),  # –ú–∞–≥–µ–Ω—Ç–∞
            (0.2, 1.0, 1.0, 1.0),  # –ì–æ–ª—É–±–æ–π
        ]
        bsdf_bright.inputs['Base Color'].default_value = bright_colors[i]
        bsdf_bright.inputs['Emission'].default_value = bright_colors[i]
        bsdf_bright.inputs['Emission Strength'].default_value = 0.5
        cube.data.materials.append(mat_bright)
    
    return objects_created

# –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
objects = create_art_composition()

# –û—Å–≤–µ—â–µ–Ω–∏–µ
bpy.ops.object.light_add(type='SUN', location=(10, 10, 10))
sun = bpy.context.active_object
sun.data.energy = 3.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
bpy.ops.object.light_add(type='AREA', location=(-5, 5, 8))
area = bpy.context.active_object
area.data.energy = 2.0
area.data.color = (1.0, 0.9, 0.8)

# –ö–∞–º–µ—Ä–∞
bpy.ops.object.camera_add(location=(12, -12, 8))
camera = bpy.context.active_object
# –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ —Ü–µ–Ω—Ç—Ä
camera.rotation_euler = (1.1, 0, 0.785)
bpy.context.scene.camera = camera

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.samples = 32  # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–Ω–¥–µ—Ä
scene.render.resolution_x = 1080
scene.render.resolution_y = 1080

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –æ–¥–∏–Ω STL
output_stl = "output/blender/art_composition.stl"

# –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –Ω–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã
bpy.ops.object.select_all(action='DESELECT')
for obj in objects:
    obj.select_set(True)

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
bpy.ops.object.join()
combined = bpy.context.active_object
combined.name = "ArtComposition"

# –†—É—á–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç STL
import bmesh

# –ü–æ–ª—É—á–∞–µ–º mesh –¥–∞–Ω–Ω—ã–µ
bm = bmesh.new()
bm.from_mesh(combined.data)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
bmesh.ops.transform(bm, matrix=combined.matrix_world, verts=bm.verts)

# –¢—Ä–µ—É–≥—É–ª–∏—Ä—É–µ–º
bmesh.ops.triangulate(bm, faces=bm.faces)

# –°–æ–∑–¥–∞–µ–º STL –¥–∞–Ω–Ω—ã–µ
stl_data = []
for face in bm.faces:
    # –ù–æ—Ä–º–∞–ª—å –≥—Ä–∞–Ω–∏
    normal = face.normal
    stl_data.append(f"facet normal {normal.x} {normal.y} {normal.z}")
    stl_data.append("  outer loop")
    for vert in face.verts:
        v = vert.co
        stl_data.append(f"    vertex {v.x} {v.y} {v.z}")
    stl_data.append("  endloop")
    stl_data.append("endfacet")

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ASCII STL
import os
os.makedirs("output/blender", exist_ok=True)

with open(output_stl, 'w') as f:
    f.write("solid ArtComposition\\n")
    for line in stl_data:
        f.write(line + "\\n")
    f.write("endsolid ArtComposition\\n")

bm.free()

print("SUCCESS: –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
print(f"SUCCESS: STL —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {output_stl}")
print(f"SUCCESS: –û–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {len(objects)}")

# –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–≤—å—é
scene.render.filepath = "output/blender/art_composition_render"
bpy.ops.render.render(write_still=True)
print("SUCCESS: –†–µ–Ω–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: output/blender/art_composition_render.png")
'''
    return script

def run_art_script():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
    script_content = create_art_script()
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
        f.write(script_content)
        script_path = f.name
    
    blender_path = "Z:\\–ü—Ä–æ–≥—Ä–∞–º–º—ã\\Blender\\blender.exe"
    
    # –°–æ–∑–¥–∞–µ–º output –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = Path("output/blender")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏...")
        print("üîÑ –ó–∞–ø—É—Å–∫ Blender...")
        
        result = subprocess.run([
            blender_path,
            "--background",
            "--python", script_path
        ], capture_output=True, text=True, timeout=90)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        if result.stdout:
            for line in result.stdout.split('\n'):
                if 'SUCCESS:' in line:
                    print(f"‚úÖ {line.replace('SUCCESS:', '').strip()}")
        
        if result.returncode == 0:
            print("\nüéâ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
            print("üìÅ –§–∞–π–ª—ã –≤ output/blender/:")
            print("   - art_composition.stl (3D –º–æ–¥–µ–ª—å)")
            print("   - art_composition_render.png (—Ä–µ–Ω–¥–µ—Ä)")
        else:
            print(f"‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode}")
            if result.stderr:
                print("–û—à–∏–±–∫–∏:", result.stderr[:500])
                
    except subprocess.TimeoutExpired:
        print("‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        Path(script_path).unlink(missing_ok=True)

if __name__ == "__main__":
    print("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
    print("=" * 50)
    
    run_art_script()
    
    print("\nüåü –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ output/blender/") 