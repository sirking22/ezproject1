#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Blender API –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω—å—é
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent.parent / 'src'))

from integrations.blender_integration import BlenderIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_blender_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Blender API"""
    logger.info("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Blender API")
    
    blender = BlenderIntegration()
    status = blender.get_status()
    
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å Blender: {status}")
    
    if status['available']:
        logger.info("‚úÖ Blender API –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    else:
        logger.warning("‚ö†Ô∏è Blender API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Blender —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH")
        return False

def test_organic_lamp_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ª–∞–º–ø—ã"""
    logger.info("\nüß™ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ª–∞–º–ø—ã")
    
    blender = BlenderIntegration()
    
    if not blender.is_available():
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫—É—é –ª–∞–º–ø—É
    result = blender.generate_3d_object({
        'type': 'organic_lamp',
        'base_radius': 80.0,
        'complexity': 1.5
    })
    
    if result['success']:
        logger.info(f"‚úÖ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞ —Å–æ–∑–¥–∞–Ω–∞: {result['filepath']}")
        logger.info(f"üì∏ –ü—Ä–µ–≤—å—é: {result['preview_path']}")
        logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {result['object_info']}")
        return True
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞–º–ø—ã: {result['error']}")
        return False

def test_precise_objects():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    logger.info("\nüß™ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
    
    blender = BlenderIntegration()
    
    if not blender.is_available():
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç –∫—É–±–∞
    logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∫—É–±–∞...")
    cube_result = blender.create_precise_object(
        object_type='cube',
        dimensions={'width': 100, 'height': 100, 'depth': 100},
        name='TestCube'
    )
    
    if cube_result['success']:
        logger.info(f"‚úÖ –ö—É–± —Å–æ–∑–¥–∞–Ω: {cube_result['filepath']}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–±–∞: {cube_result['error']}")
    
    # –¢–µ—Å—Ç —Ü–∏–ª–∏–Ω–¥—Ä–∞
    logger.info("üîµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Ü–∏–ª–∏–Ω–¥—Ä–∞...")
    cylinder_result = blender.create_precise_object(
        object_type='cylinder',
        dimensions={'radius': 50, 'height': 100},
        name='TestCylinder'
    )
    
    if cylinder_result['success']:
        logger.info(f"‚úÖ –¶–∏–ª–∏–Ω–¥—Ä —Å–æ–∑–¥–∞–Ω: {cylinder_result['filepath']}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–ª–∏–Ω–¥—Ä–∞: {cylinder_result['error']}")
    
    # –¢–µ—Å—Ç —Å—Ñ–µ—Ä—ã
    logger.info("‚ö™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π —Å—Ñ–µ—Ä—ã...")
    sphere_result = blender.create_precise_object(
        object_type='sphere',
        dimensions={'radius': 40},
        name='TestSphere'
    )
    
    if sphere_result['success']:
        logger.info(f"‚úÖ –°—Ñ–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {sphere_result['filepath']}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã: {sphere_result['error']}")
    
    return all([
        cube_result['success'],
        cylinder_result['success'],
        sphere_result['success']
    ])

def test_batch_generation():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    logger.info("\nüß™ –¢–µ—Å—Ç 4: –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    
    blender = BlenderIntegration()
    
    if not blender.is_available():
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    batch_data = [
        {
            'type': 'cube',
            'dimensions': {'width': 50, 'height': 50, 'depth': 50},
            'name': 'SmallCube'
        },
        {
            'type': 'sphere',
            'dimensions': {'radius': 30},
            'name': 'TestSphere'
        },
        {
            'type': 'organic_lamp',
            'base_radius': 40.0,
            'complexity': 0.8
        }
    ]
    
    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(batch_data)} –æ–±—ä–µ–∫—Ç–æ–≤...")
    results = blender.batch_generate(batch_data)
    
    success_count = sum(1 for r in results if r['success'])
    logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
    
    for i, result in enumerate(results):
        if result['success']:
            logger.info(f"  ‚úÖ –û–±—ä–µ–∫—Ç {i+1}: {result.get('filepath', 'N/A')}")
        else:
            logger.error(f"  ‚ùå –û–±—ä–µ–∫—Ç {i+1}: {result['error']}")
    
    return success_count == len(results)

def test_integration_with_existing_system():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    logger.info("\nüß™ –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        from core.life_management_system import LifeManagementSystem
        
        lms = LifeManagementSystem()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Blender –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if hasattr(lms, 'blender_integration'):
            logger.info("‚úÖ Blender –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            result = lms.generate_3d_object({
                'type': 'organic_lamp',
                'base_radius': 60.0,
                'complexity': 1.0
            })
            
            if result['success']:
                logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É: {result['filepath']}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É: {result['error']}")
                return False
        else:
            logger.warning("‚ö†Ô∏è Blender –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
            return False
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Blender API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    logger.info("=" * 60)
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = 5
    passed_tests = 0
    
    # –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if test_blender_availability():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 2: –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–∞
    if test_organic_lamp_generation():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 3: –¢–æ—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    if test_precise_objects():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 4: –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if test_batch_generation():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    if test_integration_with_existing_system():
        passed_tests += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Blender API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif passed_tests > 0:
        logger.info("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Blender")
    else:
        logger.error("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Blender")
    
    logger.info("=" * 60)

if __name__ == "__main__":
    main() 