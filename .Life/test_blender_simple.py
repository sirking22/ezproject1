#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Blender CLI
"""

import subprocess
import tempfile
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_blender_path():
    """–¢–µ—Å—Ç –ø—É—Ç–∏ –∫ Blender"""
    blender_path = r"Z:\–ü—Ä–æ–≥—Ä–∞–º–º—ã\Blender\blender.exe"
    
    if os.path.exists(blender_path):
        logger.info(f"‚úÖ Blender –Ω–∞–π–¥–µ–Ω: {blender_path}")
        return blender_path
    else:
        logger.error(f"‚ùå Blender –Ω–µ –Ω–∞–π–¥–µ–Ω: {blender_path}")
        return None

def create_simple_cube_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∫—É–±–∞"""
    script_content = '''
import bpy
import os

# –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∞
bpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))
cube = bpy.context.active_object
cube.name = "TestCube"

# –í—ã–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç
bpy.context.view_layer.objects.active = cube
cube.select_set(True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
bpy.context.scene.unit_settings.system = 'METRIC'
bpy.context.scene.unit_settings.length_unit = 'MILLIMETERS'

# –≠–∫—Å–ø–æ—Ä—Ç –≤ STL
output_dir = r"test_output"
os.makedirs(output_dir, exist_ok=True)

stl_path = os.path.join(output_dir, "test_cube.stl")

# –í–∫–ª—é—á–∞–µ–º –∞–¥–¥–æ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ STL
bpy.ops.preferences.addon_enable(module="io_mesh_stl")

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
bpy.ops.export_mesh.stl(
    filepath=stl_path,
    use_selection=True,
    global_scale=1.0,
    use_scene_unit=True,
    ascii=False
)

print("SUCCESS: Cube created and exported")
'''
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
        f.write(script_content)
        return f.name

def test_blender_execution():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Blender"""
    blender_path = test_blender_path()
    if not blender_path:
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
    os.makedirs('test_output', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    script_path = create_simple_cube_script()
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Blender...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Blender
        cmd = [
            blender_path,
            '--background',
            '--python', script_path
        ]
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=60,
            encoding='utf-8'
        )
        
        logger.info(f"üìä –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        logger.info(f"üì§ STDOUT: {result.stdout}")
        if result.stderr:
            logger.info(f"üì• STDERR: {result.stderr}")
        
        if result.returncode == 0:
            logger.info("‚úÖ Blender –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            stl_file = "test_output/test_cube.stl"
            if os.path.exists(stl_file):
                logger.info(f"‚úÖ STL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {stl_file}")
                return True
            else:
                logger.error(f"‚ùå STL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {stl_file}")
                return False
        else:
            logger.error("‚ùå Blender –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Blender")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        if os.path.exists(script_path):
            os.unlink(script_path)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Blender CLI")
    logger.info("=" * 50)
    
    success = test_blender_execution()
    
    if success:
        logger.info("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! Blender —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Blender")
    
    logger.info("=" * 50)

if __name__ == "__main__":
    main() 