
import bpy
import bmesh
import math
import random
from mathutils import Vector, Matrix

print("üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Blender...")

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ
all_objects = list(bpy.data.objects)
print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(all_objects)}")

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å
crystals = [obj for obj in all_objects if "crystal" in obj.name.lower()]
spheres = [obj for obj in all_objects if "sphere" in obj.name.lower()]
rings = [obj for obj in all_objects if "ring" in obj.name.lower()]
lights = [obj for obj in all_objects if obj.type == 'LIGHT']

print(f"üíé –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: {len(crystals)}")
print(f"‚ö° –°—Ñ–µ—Ä: {len(spheres)}")
print(f"üîÑ –ö–æ–ª–µ—Ü: {len(rings)}")
print(f"üí° –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞: {len(lights)}")

# –£–ª—É—á—à–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
def enhance_crystal(crystal):
    """–£–ª—É—á—à–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª"""
    print(f"‚ú® –£–ª—É—á—à–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª: {crystal.name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º subdivision surface –µ—Å–ª–∏ –Ω–µ—Ç
    if "Subdivision" not in [mod.name for mod in crystal.modifiers]:
        subsurf = crystal.modifiers.new(name="Subdivision", type='SUBSURF')
        subsurf.levels = 2
        subsurf.render_levels = 3
    
    # –î–æ–±–∞–≤–ª—è–µ–º displacement
    if "Displacement" not in [mod.name for mod in crystal.modifiers]:
        displace = crystal.modifiers.new(name="Displacement", type='DISPLACE')
        tex = bpy.data.textures.new(f"{crystal.name}_Displacement", type='VORONOI')
        tex.noise_scale = 2.0
        displace.texture = tex
        displace.strength = 0.2
    
    # –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    if crystal.data.materials:
        mat = crystal.data.materials[0]
    else:
        mat = bpy.data.materials.new(name=f"{crystal.name}_Enhanced")
        crystal.data.materials.append(mat)
    
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    links = mat.node_tree.links
    
    # –û—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    nodes.clear()
    
    # Principled BSDF
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    bsdf.location = (0, 0)
    
    # Noise texture
    noise = nodes.new(type='ShaderNodeTexNoise')
    noise.location = (-400, 200)
    noise.inputs['Scale'].default_value = 12.0
    noise.inputs['Detail'].default_value = 8.0
    
    # Color ramp
    color_ramp = nodes.new(type='ShaderNodeValToRGB')
    color_ramp.location = (-200, 200)
    color_ramp.color_ramp.elements[0].position = 0.4
    color_ramp.color_ramp.elements[1].position = 0.6
    
    # Emission
    emission = nodes.new(type='ShaderNodeEmission')
    emission.location = (0, 200)
    emission.inputs['Color'].default_value = (0.5, 0.7, 1.0, 1.0)
    emission.inputs['Strength'].default_value = 2.0
    
    # Mix shader
    mix_shader = nodes.new(type='ShaderNodeMixShader')
    mix_shader.location = (200, 0)
    mix_shader.inputs['Fac'].default_value = 0.3
    
    # Output
    output = nodes.new(type='ShaderNodeOutputMaterial')
    output.location = (400, 0)
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º
    links.new(noise.outputs['Color'], color_ramp.inputs['Fac'])
    links.new(color_ramp.outputs['Color'], bsdf.inputs['Roughness'])
    links.new(bsdf.outputs['BSDF'], mix_shader.inputs[1])
    links.new(emission.outputs['Emission'], mix_shader.inputs[2])
    links.new(mix_shader.outputs['Shader'], output.inputs['Surface'])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    bsdf.inputs['Base Color'].default_value = (0.6, 0.8, 1.0, 1.0)
    bsdf.inputs['Transmission'].default_value = 0.8
    bsdf.inputs['IOR'].default_value = 1.5

def enhance_sphere(sphere):
    """–£–ª—É—á—à–∞–µ–º —Å—Ñ–µ—Ä—É"""
    print(f"‚ö° –£–ª—É—á—à–∞–µ–º —Å—Ñ–µ—Ä—É: {sphere.name}")
    
    # –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    if sphere.data.materials:
        mat = sphere.data.materials[0]
    else:
        mat = bpy.data.materials.new(name=f"{sphere.name}_Enhanced")
        sphere.data.materials.append(mat)
    
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    links = mat.node_tree.links
    nodes.clear()
    
    # Principled BSDF
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    bsdf.location = (0, 0)
    
    # Wave texture –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    wave = nodes.new(type='ShaderNodeTexWave')
    wave.location = (-400, 200)
    wave.inputs['Scale'].default_value = 20.0
    wave.inputs['Distortion'].default_value = 2.0
    
    # Color ramp
    wave_ramp = nodes.new(type='ShaderNodeValToRGB')
    wave_ramp.location = (-200, 200)
    wave_ramp.color_ramp.elements[0].color = (0.0, 0.0, 0.0, 1.0)
    wave_ramp.color_ramp.elements[1].color = (1.0, 1.0, 1.0, 1.0)
    
    # Emission
    emission = nodes.new(type='ShaderNodeEmission')
    emission.location = (0, 200)
    
    # Mix shader
    mix_shader = nodes.new(type='ShaderNodeMixShader')
    mix_shader.location = (200, 0)
    
    # Output
    output = nodes.new(type='ShaderNodeOutputMaterial')
    output.location = (400, 0)
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º
    links.new(wave.outputs['Color'], wave_ramp.inputs['Fac'])
    links.new(wave_ramp.outputs['Color'], emission.inputs['Color'])
    links.new(wave_ramp.outputs['Color'], mix_shader.inputs['Fac'])
    links.new(bsdf.outputs['BSDF'], mix_shader.inputs[1])
    links.new(emission.outputs['Emission'], mix_shader.inputs[2])
    links.new(mix_shader.outputs['Shader'], output.inputs['Surface'])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    emission.inputs['Strength'].default_value = 5.0
    bsdf.inputs['Transmission'].default_value = 0.9
    bsdf.inputs['IOR'].default_value = 1.4

def enhance_ring(ring):
    """–£–ª—É—á—à–∞–µ–º –∫–æ–ª—å—Ü–æ"""
    print(f"üîÑ –£–ª—É—á—à–∞–µ–º –∫–æ–ª—å—Ü–æ: {ring.name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º subdivision surface
    if "Subdivision" not in [mod.name for mod in ring.modifiers]:
        subsurf = ring.modifiers.new(name="Subdivision", type='SUBSURF')
        subsurf.levels = 1
        subsurf.render_levels = 2
    
    # –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    if ring.data.materials:
        mat = ring.data.materials[0]
    else:
        mat = bpy.data.materials.new(name=f"{ring.name}_Enhanced")
        ring.data.materials.append(mat)
    
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    nodes.clear()
    
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    output = nodes.new(type='ShaderNodeOutputMaterial')
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    bsdf.inputs['Base Color'].default_value = (0.9, 0.9, 0.9, 1.0)
    bsdf.inputs['Metallic'].default_value = 1.0
    bsdf.inputs['Roughness'].default_value = 0.05
    bsdf.inputs['Clearcoat'].default_value = 1.0
    bsdf.inputs['Clearcoat Roughness'].default_value = 0.1
    
    mat.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])

# –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è...")

for crystal in crystals:
    enhance_crystal(crystal)

for sphere in spheres:
    enhance_sphere(sphere)

for ring in rings:
    enhance_ring(ring)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
print("‚ú® –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")

# –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
for i in range(15):
    angle = i * 24 * math.pi / 180
    radius = 8.0 + random.uniform(-2, 2)
    height = random.uniform(-3, 5)
    
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    z = height
    
    bpy.ops.mesh.primitive_uv_sphere_add(
        radius=random.uniform(0.05, 0.15),
        location=(x, y, z)
    )
    particle = bpy.context.active_object
    particle.name = f"ExtraParticle_{i+1}"
    
    # –°–≤–µ—Ç—è—â–∏–π—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª
    mat = bpy.data.materials.new(name=f"ParticleMat_{i}")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    nodes.clear()
    
    emission = nodes.new(type='ShaderNodeEmission')
    output = nodes.new(type='ShaderNodeOutputMaterial')
    
    # –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
    colors = [
        (1.0, 0.2, 0.2),  # –ö—Ä–∞—Å–Ω—ã–π
        (0.2, 1.0, 0.2),  # –ó–µ–ª–µ–Ω—ã–π
        (0.2, 0.2, 1.0),  # –°–∏–Ω–∏–π
        (1.0, 1.0, 0.2),  # –ñ–µ–ª—Ç—ã–π
        (1.0, 0.2, 1.0),  # –ú–∞–≥–µ–Ω—Ç–∞
        (0.2, 1.0, 1.0),  # –¶–∏–∞–Ω
    ]
    
    color = random.choice(colors)
    emission.inputs['Color'].default_value = (*color, 1.0)
    emission.inputs['Strength'].default_value = random.uniform(1.0, 3.0)
    
    mat.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])
    particle.data.materials.append(mat)

# –°–æ–∑–¥–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª—É—á–∏
for i in range(8):
    angle = i * 45 * math.pi / 180
    radius = 6.0
    
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    
    bpy.ops.mesh.primitive_cylinder_add(
        radius=0.05,
        depth=4.0,
        location=(x, y, 0)
    )
    ray = bpy.context.active_object
    ray.name = f"EnergyRay_{i+1}"
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫ —Ü–µ–Ω—Ç—Ä—É
    direction = Vector((-x, -y, 0)).normalized()
    ray.rotation_euler = direction.to_track_quat('-Z', 'Y').to_euler()
    
    # –°–≤–µ—Ç—è—â–∏–π—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª
    mat = bpy.data.materials.new(name=f"RayMat_{i}")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    nodes.clear()
    
    emission = nodes.new(type='ShaderNodeEmission')
    output = nodes.new(type='ShaderNodeOutputMaterial')
    
    emission.inputs['Color'].default_value = (0.8, 0.9, 1.0, 1.0)
    emission.inputs['Strength'].default_value = 3.0
    
    mat.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])
    ray.data.materials.append(mat)

# –£–ª—É—á—à–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
print("üí° –£–ª—É—á—à–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ...")

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
extra_lights = [
    (6, 6, 6),
    (-6, 6, 6),
    (6, -6, 6),
    (-6, -6, 6),
]

for i, pos in enumerate(extra_lights):
    bpy.ops.object.light_add(type='POINT', location=pos)
    light = bpy.context.active_object
    light.name = f"ExtraLight_{i+1}"
    light.data.energy = 100.0
    light.data.color = (0.8, 0.9, 1.0)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.samples = 512  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
scene.cycles.use_denoising = True
scene.cycles.denoiser = 'OPTIX'

print("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("üé® –£–ª—É—á—à–µ–Ω–∏—è:")
print("   - üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –ø–æ–ª—É—á–∏–ª–∏ displacement –∏ subdivision")
print("   - ‚ö° –°—Ñ–µ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ wave —Ç–µ–∫—Å—Ç—É—Ä—ã")
print("   - üîÑ –ö–æ–ª—å—Ü–∞ –ø–æ–ª—É—á–∏–ª–∏ subdivision –∏ clearcoat")
print("   - ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ 15 –Ω–æ–≤—ã—Ö —á–∞—Å—Ç–∏—Ü")
print("   - üåü –î–æ–±–∞–≤–ª–µ–Ω–æ 8 —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ª—É—á–µ–π")
print("   - üí° –î–æ–±–∞–≤–ª–µ–Ω–æ 4 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞")
print("   - üé≠ –£–ª—É—á—à–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞ (512 —Å—ç–º–ø–ª–æ–≤)")
print("")
print("üéØ –ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É! F12 –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞.")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ü–µ–Ω—É
bpy.ops.wm.save_as_mainfile(filepath="output/blender/edited_running_scene.blend")
print("üíæ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: output/blender/edited_running_scene.blend")
