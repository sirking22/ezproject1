#!/usr/bin/env python3
"""
–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –≥–∞–π–¥–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏
"""

import os
import requests
import logging

logger = logging.getLogger(__name__)
import time

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_BASE_URL = "https://api.notion.com/v1"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# Database IDs
GUIDES_DB = "47c6086858d442ebaeceb4fad1b23ba3"
TEMPLATES_DB = "1f2ace03d9ff806db364e869f27d83de"

# –°–≤—è–∑–∏ –≥–∞–π–¥–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º)
GUIDE_TEMPLATE_LINKS = {
    "üé® –ì–∞–π–¥: –õ–∏—Å—Ç–æ–≤–∫–∞ A4": ["–õ–∏—Å—Ç–æ–≤–∫–∞ A4"],
    "üí≥ –ì–∞–π–¥: –í–∏–∑–∏—Ç–∫–∏": ["–í–∏–∑–∏—Ç–∫–∏"],
    "üìÑ –ì–∞–π–¥: –§–ª–∞–µ—Ä": ["–§–ª–∞–µ—Ä"],
    "üìë –ì–∞–π–¥: –ë—É–∫–ª–µ—Ç": ["–ë—É–∫–ª–µ—Ç"],
    "üñºÔ∏è –ì–∞–π–¥: –ë–∞–Ω–Ω–µ—Ä": ["–ë–∞–Ω–Ω–µ—Ä"],
    "üì¶ –ì–∞–π–¥: –£–ø–∞–∫–æ–≤–∫–∞": ["–£–ø–∞–∫–æ–≤–∫–∞"],
    "üìñ –ì–∞–π–¥: –ö–∞—Ç–∞–ª–æ–≥": ["–ö–∞—Ç–∞–ª–æ–≥"]
}

def get_database_pages(db_id, title_field="Name"):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        pages = {}
        has_more = True
        start_cursor = None
        
        while has_more:
            query_params = {"page_size": 100}
            if start_cursor:
                query_params["start_cursor"] = start_cursor
            
            try:
        response = requests.post(
                f"{NOTION_BASE_URL}/databases/{db_id}/query", 
                headers=HEADERS, 
                json=query_params
            )
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {{e}}")
        return None
    
    response
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                break
            
            data = response.json()
            
            for page in data["results"]:
                title_prop = page["properties"].get(title_field, {})
                
                if title_prop.get("type") == "title":
                    title_list = title_prop.get("title", [])
                    if title_list:
                        title = title_list[0].get("plain_text", "")
                        pages[title] = page["id"]
                        
            has_more = data.get("has_more", False)
            start_cursor = data.get("next_cursor")
            
            time.sleep(0.1)  # Rate limiting
        
        return pages
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –±–∞–∑—ã {db_id}: {e}")
        return {}

def check_templates_guides_relation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É TEMPLATES –∏ GUIDES"""
    
    try:
        try:
        response = requests.get(f"{NOTION_BASE_URL}/databases/{TEMPLATES_DB}", headers=HEADERS)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {{e}}")
        return None
    
    response
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ: {response.status_code}")
            return None
        
        db_info = response.json()
        properties = db_info.get('properties', {})
        
        # –ò—â–µ–º —Å–≤—è–∑—å —Å GUIDES
        guides_relation = None
        for prop_name, prop_data in properties.items():
            if prop_data.get('type') == 'relation':
                target_db = prop_data.get('relation', {}).get('database_id')
                if target_db == GUIDES_DB:
                    guides_relation = prop_name
                    break
        
        if guides_relation:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å TEMPLATES ‚Üí GUIDES: {guides_relation}")
            return guides_relation
        else:
            print("‚ùå –°–≤—è–∑—å TEMPLATES ‚Üí GUIDES –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏: {e}")
        return None

def create_templates_guides_relation():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É TEMPLATES –∏ GUIDES –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    
    print("üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ TEMPLATES ‚Üí GUIDES...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ —Å–≤—è–∑–∏ —Å –≥–∞–π–¥–∞–º–∏
        new_property = {
            "–°–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∞–π–¥—ã": {
                "type": "relation",
                "relation": {
                    "database_id": GUIDES_DB
                }
            }
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É
        try:
        response = requests.patch(
            f"{NOTION_BASE_URL}/databases/{TEMPLATES_DB}",
            headers=HEADERS,
            json={"properties": new_property}
        )
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
        
        
            print("‚úÖ –°–≤—è–∑—å TEMPLATES ‚Üí GUIDES —Å–æ–∑–¥–∞–Ω–∞")
            return "–°–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∞–π–¥—ã"
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏: {response.status_code}")
            return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏: {e}")
        return None

def link_guide_to_templates(guide_id, template_ids, relation_field):
    """–°–≤—è–∑—ã–≤–∞–µ—Ç –≥–∞–π–¥ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ relation –ø–æ–ª–µ"""
    
    try:
        success_count = 0
        
        for template_id in template_ids:
            try:
        response = requests.patch(
                f"{NOTION_BASE_URL}/pages/{template_id}",
                headers=HEADERS,
                json={
                    "properties": {
                        relation_field: {
                            "relation": [{"id": guide_id}]
                        }
                    }
                }
            )
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in PATCH request: {{e}}")
        return None
    
    response
            
            
                success_count += 1
            
            time.sleep(0.1)  # Rate limiting
        
        return success_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: {e}")
        return 0

def link_all_guides_to_templates():
    """–°–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≥–∞–π–¥—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"""
    
    print("üöÄ –°–í–Ø–ó–´–í–ê–ù–ò–ï –ì–ê–ô–î–û–í –° –®–ê–ë–õ–û–ù–ê–ú–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –±–∞–∑–∞–º–∏
    relation_field = check_templates_guides_relation()
    
    if not relation_field:
        relation_field = create_templates_guides_relation()
        
    if not relation_field:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑...")
    guides_pages = get_database_pages(GUIDES_DB, "Name")
    templates_pages = get_database_pages(TEMPLATES_DB, "Name")
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –≥–∞–π–¥–æ–≤: {len(guides_pages)}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates_pages)}")
    
    # –°–≤—è–∑—ã–≤–∞–µ–º –≥–∞–π–¥—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    print(f"\nüîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π:")
    total_links = 0
    
    for guide_name, template_names in GUIDE_TEMPLATE_LINKS.items():
        if guide_name in guides_pages:
            guide_id = guides_pages[guide_name]
            
            # –ù–∞—Ö–æ–¥–∏–º ID —à–∞–±–ª–æ–Ω–æ–≤
            template_ids = []
            for template_name in template_names:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
                found_template = None
                for existing_name in templates_pages.keys():
                    if template_name.lower() in existing_name.lower():
                        found_template = existing_name
                        break
                
                if found_template:
                    template_ids.append(templates_pages[found_template])
                else:
                    print(f"   ‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_name}")
            
            if template_ids:
                linked_count = link_guide_to_templates(guide_id, template_ids, relation_field)
                total_links += linked_count
                print(f"   ‚úÖ {guide_name} ‚Üí {len(template_ids)} —à–∞–±–ª–æ–Ω–æ–≤")
            else:
                print(f"   ‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è: {guide_name}")
        else:
            print(f"   ‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {guide_name}")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {total_links}")
    
    if total_links > 0:
        print(f"\nüéâ –ê–í–¢–û–ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ù–û!")
        print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω—ã: https://www.notion.so/{TEMPLATES_DB.replace('-', '')}")
        
        print(f"\nüéØ –¢–ï–ü–ï–†–¨ –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ó–ê–î–ê–ß:")
        print("1. –í—ã–±–∏—Ä–∞–µ—à—å —à–∞–±–ª–æ–Ω –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏")
        print("2. –ì–∞–π–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è")
        print("3. –í—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥ —Ä—É–∫–æ–π")
        print("4. –ß–µ–∫–ª–∏—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    else:
        print(f"\n‚ö†Ô∏è –°–≤—è–∑–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")

def create_dashboard_view():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è dashboard –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏"""
    
    print(f"\nüìä DASHBOARD –ü–û–õ–ò–ì–†–ê–§–ò–ò")
    print("=" * 40)
    
    print(f"üéØ –í –±–∞–∑–µ TEMPLATES —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
    print(f"https://www.notion.so/{TEMPLATES_DB.replace('-', '')}")
    
    print(f"\n1. üìã '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è Dashboard':")
    print("   - –§–∏–ª—å—Ç—Ä: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é")
    print("   - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –ø–æ —Ç–∏–ø—É —à–∞–±–ª–æ–Ω–∞")
    print("   - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∞–π–¥—ã")
    
    print(f"\n2. üìä '–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏':")
    print("   - –°–∞–º—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã")
    print("   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("   - –°–≤—è–∑—å —Å KPI —Å–∏—Å—Ç–µ–º–æ–π")

if __name__ == "__main__":
    # –°–≤—è–∑—ã–≤–∞–µ–º –≥–∞–π–¥—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    link_all_guides_to_templates()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è dashboard
    create_dashboard_view() 