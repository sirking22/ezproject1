"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö Notion
–° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏ –∑–∞–ø—É—Å–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import os
import json
import logging
import smtplib
import requests
from typing import Dict, List, Set, Any, Optional
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from pathlib import Path

from notion_client import Client
from notion_database_schemas import get_database_schema, get_all_schemas

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('schema_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class MonitoringResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    success: bool
    changes_detected: int
    errors: List[str]
    execution_time: float
    timestamp: str
    last_run_file: str = "last_monitoring_run.json"

class EnhancedNotionSchemaMonitor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ö–µ–º–∞—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Notion"""
    
    def __init__(self):
        self.notion = Client(auth=os.getenv("NOTION_TOKEN"))
        self.changes_file = "schema_changes.json"
        self.backup_file = "schema_backup.json"
        self.status_file = "monitoring_status.json"
        self.last_run_file = "last_monitoring_run.json"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.slack_webhook = os.getenv("SLACK_WEBHOOK_URL")
        self.email_enabled = os.getenv("EMAIL_NOTIFICATIONS", "false").lower() == "true"
        self.telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.telegram_chat_id = os.getenv("TELEGRAM_CHAT_ID")
        
    def log_execution_start(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        execution_data = {
            "start_time": datetime.now().isoformat(),
            "status": "running",
            "attempts": self.get_attempt_count() + 1
        }
        
        with open(self.last_run_file, "w", encoding="utf-8") as f:
            json.dump(execution_data, f, indent=2)
        
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ #{execution_data['attempts']})")
    
    def log_execution_end(self, success: bool, changes: int, errors: List[str]):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        execution_data = {
            "end_time": datetime.now().isoformat(),
            "status": "completed" if success else "failed",
            "changes_detected": changes,
            "errors": errors,
            "success": success
        }
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        if os.path.exists(self.last_run_file):
            with open(self.last_run_file, "r", encoding="utf-8") as f:
                existing_data = json.load(f)
            execution_data.update(existing_data)
        
        with open(self.last_run_file, "w", encoding="utf-8") as f:
            json.dump(execution_data, f, indent=2)
        
        logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: {'—É—Å–ø–µ—à–Ω–æ' if success else '—Å –æ—à–∏–±–∫–∞–º–∏'}")
    
    def get_attempt_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞"""
        if os.path.exists(self.last_run_file):
            try:
                with open(self.last_run_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                return data.get("attempts", 0)
            except:
                return 0
        return 0
    
    def check_last_run(self) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫"""
        if os.path.exists(self.last_run_file):
            try:
                with open(self.last_run_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except:
                return None
        return None
    
    def should_run_monitoring(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        last_run = self.check_last_run()
        
        if not last_run:
            logger.info("üìù –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        if "end_time" in last_run:
            last_run_time = datetime.fromisoformat(last_run["end_time"])
            today = datetime.now().date()
            
            if last_run_time.date() == today:
                logger.info("üìù –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        attempts = last_run.get("attempts", 0)
        if attempts > 5:
            logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ({attempts}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
            return False
        
        return True
    
    def send_notification(self, message: str, is_error: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        emoji = "üö®" if is_error else "üì¢"
        full_message = f"{emoji} {message}"
        
        # Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.slack_webhook:
            try:
                payload = {"text": full_message}
                response = requests.post(self.slack_webhook, json=payload, timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack: {response.status_code}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.telegram_bot_token and self.telegram_chat_id:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
                payload = {
                    "chat_id": self.telegram_chat_id,
                    "text": full_message,
                    "parse_mode": "HTML"
                }
                response = requests.post(url, json=payload, timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def get_current_schema_from_notion(self, database_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion API"""
        try:
            database = self.notion.databases.retrieve(database_id=database_id)
            return database["properties"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –¥–ª—è {database_id}: {e}")
            return {}
    
    def extract_schema_info(self, properties: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ Notion"""
        schema_info = {
            "properties": {},
            "status_options": {},
            "select_options": {},
            "multi_select_options": {}
        }
        
        for prop_name, prop_data in properties.items():
            prop_type = prop_data.get("type", "unknown")
            schema_info["properties"][prop_name] = {"type": prop_type}
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            if prop_type == "status":
                status_options = prop_data.get("status", {}).get("options", [])
                schema_info["status_options"][prop_name] = [
                    option["name"] for option in status_options
                ]
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ select –æ–ø—Ü–∏–π
            elif prop_type == "select":
                select_options = prop_data.get("select", {}).get("options", [])
                schema_info["select_options"][prop_name] = [
                    option["name"] for option in select_options
                ]
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ multi_select –æ–ø—Ü–∏–π
            elif prop_type == "multi_select":
                multi_select_options = prop_data.get("multi_select", {}).get("options", [])
                schema_info["multi_select_options"][prop_name] = [
                    option["name"] for option in multi_select_options
                ]
        
        return schema_info
    
    def compare_schemas(self, current_schema: Dict[str, Any], stored_schema: Dict[str, Any]) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π"""
        diff = {
            "added_properties": [],
            "removed_properties": [],
            "added_status_options": {},
            "removed_status_options": {},
            "added_select_options": {},
            "removed_select_options": {},
            "added_multi_select_options": {},
            "removed_multi_select_options": {}
        }
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
        current_props = set(current_schema.get("properties", {}).keys())
        stored_props = set(stored_schema.get("properties", {}).keys())
        
        diff["added_properties"] = list(current_props - stored_props)
        diff["removed_properties"] = list(stored_props - current_props)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        current_status = current_schema.get("status_options", {})
        stored_status = stored_schema.get("status_options", {})
        
        for prop_name in set(current_status.keys()) | set(stored_status.keys()):
            current_options = set(current_status.get(prop_name, []))
            stored_options = set(stored_status.get(prop_name, []))
            
            added = list(current_options - stored_options)
            removed = list(stored_options - current_options)
            
            if added:
                diff["added_status_options"][prop_name] = added
            if removed:
                diff["removed_status_options"][prop_name] = removed
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ select –æ–ø—Ü–∏–π
        current_select = current_schema.get("select_options", {})
        stored_select = stored_schema.get("select_options", {})
        
        for prop_name in set(current_select.keys()) | set(stored_select.keys()):
            current_options = set(current_select.get(prop_name, []))
            stored_options = set(stored_select.get(prop_name, []))
            
            added = list(current_options - stored_options)
            removed = list(stored_options - current_options)
            
            if added:
                diff["added_select_options"][prop_name] = added
            if removed:
                diff["removed_select_options"][prop_name] = removed
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ multi_select –æ–ø—Ü–∏–π
        current_multi = current_schema.get("multi_select_options", {})
        stored_multi = stored_schema.get("multi_select_options", {})
        
        for prop_name in set(current_multi.keys()) | set(stored_multi.keys()):
            current_options = set(current_multi.get(prop_name, []))
            stored_options = set(stored_multi.get(prop_name, []))
            
            added = list(current_options - stored_options)
            removed = list(stored_options - current_options)
            
            if added:
                diff["added_multi_select_options"][prop_name] = added
            if removed:
                diff["removed_multi_select_options"][prop_name] = removed
        
        return diff
    
    def detect_changes(self) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö"""
        changes = []
        all_schemas = get_all_schemas()
        errors = []
        
        for db_name, schema in all_schemas.items():
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ {db_name}...")
            
            try:
                # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –∏–∑ Notion
                current_properties = self.get_current_schema_from_notion(schema.database_id)
                if not current_properties:
                    errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –¥–ª—è {db_name}")
                    continue
                
                current_schema = self.extract_schema_info(current_properties)
                
                # –°—Ä–∞–≤–Ω–∏—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π
                stored_schema = {
                    "properties": schema.properties,
                    "status_options": schema.status_options,
                    "select_options": schema.select_options,
                    "multi_select_options": schema.multi_select_options
                }
                
                diff = self.compare_schemas(current_schema, stored_schema)
                
                # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                for prop_name in diff["added_properties"]:
                    changes.append({
                        "database_name": db_name,
                        "change_type": "new_property",
                        "property_name": prop_name,
                        "new_value": current_schema["properties"][prop_name]["type"],
                        "timestamp": datetime.now().isoformat()
                    })
                
                for prop_name, options in diff["added_status_options"].items():
                    for option in options:
                        changes.append({
                            "database_name": db_name,
                            "change_type": "new_status",
                            "property_name": prop_name,
                            "new_value": option,
                            "timestamp": datetime.now().isoformat()
                        })
                
                for prop_name, options in diff["added_select_options"].items():
                    for option in options:
                        changes.append({
                            "database_name": db_name,
                            "change_type": "new_select_option",
                            "property_name": prop_name,
                            "new_value": option,
                            "timestamp": datetime.now().isoformat()
                        })
                
                for prop_name, options in diff["added_multi_select_options"].items():
                    for option in options:
                        changes.append({
                            "database_name": db_name,
                            "change_type": "new_multi_select_option",
                            "property_name": prop_name,
                            "new_value": option,
                            "timestamp": datetime.now().isoformat()
                        })
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {db_name}: {e}"
                errors.append(error_msg)
                logger.error(error_msg)
        
        return changes, errors
    
    def save_changes(self, changes: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        changes_data = changes
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        existing_changes = []
        if os.path.exists(self.changes_file):
            with open(self.changes_file, "r", encoding="utf-8") as f:
                existing_changes = json.load(f)
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        all_changes = existing_changes + changes_data
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        with open(self.changes_file, "w", encoding="utf-8") as f:
            json.dump(all_changes, f, indent=2, ensure_ascii=False)
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ {self.changes_file}")
    
    def create_backup(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö —Å—Ö–µ–º"""
        all_schemas = get_all_schemas()
        backup_data = {}
        
        for db_name, schema in all_schemas.items():
            backup_data[db_name] = {
                "name": schema.name,
                "database_id": schema.database_id,
                "description": schema.description,
                "properties": schema.properties,
                "status_options": schema.status_options,
                "select_options": schema.select_options,
                "multi_select_options": schema.multi_select_options,
                "relations": schema.relations
            }
        
        with open(self.backup_file, "w", encoding="utf-8") as f:
            json.dump(backup_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_file}")
    
    def run_enhanced_monitoring(self) -> MonitoringResult:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        start_time = datetime.now()
        errors = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å
            if not self.should_run_monitoring():
                return MonitoringResult(
                    success=True,
                    changes_detected=0,
                    errors=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è"],
                    execution_time=(datetime.now() - start_time).total_seconds(),
                    timestamp=datetime.now().isoformat()
                )
            
            # –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            self.log_execution_start()
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            self.send_notification("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ö–µ–º Notion")
            
            # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.create_backup()
            
            # –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            changes, detection_errors = self.detect_changes()
            errors.extend(detection_errors)
            
            if changes:
                logger.info(f"üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
                for change in changes:
                    logger.info(f"  - {change['database_name']}: {change['change_type']} - {change['property_name']} = {change['new_value']}")
                
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.save_changes(changes)
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                change_summary = ", ".join([f"{c['change_type']} –≤ {c['database_name']}" for c in changes[:3]])
                if len(changes) > 3:
                    change_summary += f" –∏ –µ—â—ë {len(changes) - 3}"
                
                self.send_notification(f"üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π: {change_summary}")
                
            else:
                logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                self.send_notification("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ö–µ–º–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            # –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            execution_time = (datetime.now() - start_time).total_seconds()
            self.log_execution_end(True, len(changes), errors)
            
            return MonitoringResult(
                success=True,
                changes_detected=len(changes),
                errors=errors,
                execution_time=execution_time,
                timestamp=datetime.now().isoformat()
            )
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}"
            errors.append(error_msg)
            logger.error(error_msg)
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self.send_notification(f"üö® –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", is_error=True)
            
            # –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            execution_time = (datetime.now() - start_time).total_seconds()
            self.log_execution_end(False, 0, errors)
            
            return MonitoringResult(
                success=False,
                changes_detected=0,
                errors=errors,
                execution_time=execution_time,
                timestamp=datetime.now().isoformat()
            )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–•–ï–ú NOTION")
    print("=" * 50)
    
    monitor = EnhancedNotionSchemaMonitor()
    result = monitor.run_enhanced_monitoring()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print(f"‚úÖ –£—Å–ø–µ—Ö: {result.success}")
    print(f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–π: {result.changes_detected}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f} —Å–µ–∫")
    
    if result.errors:
        print(f"‚ùå –û—à–∏–±–∫–∏: {len(result.errors)}")
        for error in result.errors:
            print(f"  - {error}")
    
    if result.changes_detected > 0:
        print(f"\nüéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {result.changes_detected} –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª schema_changes.json")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python auto_update_schemas.py")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Å—Ç—ã: python test_schemas_integration.py")
    else:
        print("\n‚úÖ –í—Å–µ —Å—Ö–µ–º—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã")

if __name__ == "__main__":
    main() 