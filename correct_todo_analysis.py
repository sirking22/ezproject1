import os
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
TASKS_DB_ID = os.getenv("NOTION_TASKS_DB_ID", "9c5f4269d61449b6a7485579a3c21da3")

if not NOTION_TOKEN:
    raise RuntimeError("NOTION_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class CorrectTodoAnalyzer:
    """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á ToDo –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.headers = {
            "Authorization": f"Bearer {NOTION_TOKEN}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        self.designers = {
            "–ú–∞—Ä–∏—è –ë–µ–∑—Ä–æ–¥–Ω–∞—è": {"tasks": [], "count": 0},
            "Arsentiy": {"tasks": [], "count": 0},  # –ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä
            "–í–∏–∫—Ç–æ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞": {"tasks": [], "count": 0},
            "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –¢—Ä—É—Å–æ–≤": {"tasks": [], "count": 0},
            "–ê–Ω–Ω–∞ –ö–æ–≥—É—Ç": {"tasks": [], "count": 0}
        }
        self.todo_tasks = []
        self.week_start = datetime.now().date() - timedelta(days=datetime.now().weekday())
        self.week_end = self.week_start + timedelta(days=6)
        
    def load_todo_tasks(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ ToDo"""
        print(f"üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ ToDo –Ω–∞ –Ω–µ–¥–µ–ª—é {self.week_start} - {self.week_end}...")
        url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
        
        results = []
        payload = {}
        while True:
            response = requests.post(url, headers=self.headers, json=payload)
            data = response.json()
            results.extend(data.get('results', []))
            if not data.get('has_more'):
                break
            payload = {"start_cursor": data.get('next_cursor')}
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ: {len(results)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ToDo –∑–∞–¥–∞—á–∏
        for task in results:
            props = task.get("properties", {})
            task_info = self._extract_task_info(task, props)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å ToDo
            status = task_info["status"].lower()
            if status in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]:
                self.todo_tasks.append(task_info)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ ToDo: {len(self.todo_tasks)}")
    
    def _extract_task_info(self, task, props):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
        title = ""
        for field in ["–ó–∞–¥–∞—á–∏", "–ó–∞–¥–∞—á–∞", "Name", "Title", "–ù–∞–∑–≤–∞–Ω–∏–µ"]:
            if field in props and props[field].get("title"):
                title = props[field]["title"][0]["plain_text"]
                break
        
        status = ""
        for field in [" –°—Ç–∞—Ç—É—Å", "–°—Ç–∞—Ç—É—Å", "Status"]:
            if field in props:
                s = props[field]
                if s.get("status"):
                    status = s["status"]["name"]
                elif s.get("select"):
                    status = s["select"]["name"]
                break
        
        assignees = []
        for field in ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "Assignee", "Responsible"]:
            if field in props and props[field].get("people"):
                assignees = [p.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") for p in props[field]["people"]]
                break
        
        deadline = ""
        for field in ["–î–µ–¥–ª–∞–π–Ω", "Due Date", "–î–∞—Ç–∞", "Deadline"]:
            if field in props and props[field].get("date"):
                deadline = props[field]["date"]["start"]
                break
        
        priority = ""
        for field in ["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "Priority"]:
            if field in props:
                p = props[field]
                if p.get("select"):
                    priority = p["select"]["name"]
                break
        
        return {
            "id": task["id"],
            "title": title,
            "status": status,
            "assignees": assignees,
            "deadline": deadline,
            "priority": priority,
            "properties": props
        }
    
    def analyze_designer_workload(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
        print(f"\nüé® –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò –î–ò–ó–ê–ô–ù–ï–†–û–í (–¢–û–õ–¨–ö–û TODO)")
        print("=" * 70)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º
        for task in self.todo_tasks:
            for assignee_name in task["assignees"]:
                # –ò—Å–∫–ª—é—á–∞–µ–º Account (–æ–±—â–∏–π —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç)
                if assignee_name.lower() == "account":
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º
                if assignee_name in self.designers:
                    self.designers[assignee_name]["tasks"].append(task)
                    self.designers[assignee_name]["count"] += 1
                else:
                    # –ï—Å–ª–∏ –Ω–µ –¥–∏–∑–∞–π–Ω–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –≤ "–¥—Ä—É–≥–∏–µ"
                    if "–¥—Ä—É–≥–∏–µ" not in self.designers:
                        self.designers["–¥—Ä—É–≥–∏–µ"] = {"tasks": [], "count": 0}
                    self.designers["–¥—Ä—É–≥–∏–µ"]["tasks"].append(task)
                    self.designers["–¥—Ä—É–≥–∏–µ"]["count"] += 1
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüë• –ù–ê–ì–†–£–ó–ö–ê –ü–û –î–ò–ó–ê–ô–ù–ï–†–ê–ú:")
        total_designer_tasks = 0
        
        for designer_name, data in self.designers.items():
            if data["count"] > 0:
                print(f"\nüé® {designer_name}: {data['count']} –∑–∞–¥–∞—á ToDo")
                total_designer_tasks += data["count"]
                
                if data["tasks"]:
                    print("   –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:")
                    for task in data["tasks"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        deadline_info = f" (–¥–æ {task['deadline']})" if task['deadline'] else ""
                        priority_info = f" [{task['priority']}]" if task['priority'] else ""
                        print(f"   ‚Ä¢ {task['title'][:50]}{deadline_info}{priority_info}")
                    if len(data["tasks"]) > 3:
                        print(f"   ... –∏ –µ—â–µ {len(data['tasks']) - 3} –∑–∞–¥–∞—á")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á ToDo: {len(self.todo_tasks)}")
        print(f"   ‚Ä¢ –£ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤: {total_designer_tasks}")
        print(f"   ‚Ä¢ –£ –¥—Ä—É–≥–∏—Ö: {len(self.todo_tasks) - total_designer_tasks}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priorities = defaultdict(int)
        for task in self.todo_tasks:
            priorities[task["priority"] or "–ù–µ —É–∫–∞–∑–∞–Ω"] += 1
        
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–´:")
        for priority, count in priorities.items():
            print(f"   ‚Ä¢ {priority}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        deadlines = defaultdict(int)
        for task in self.todo_tasks:
            if task["deadline"]:
                try:
                    deadline_date = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                    if deadline_date <= self.week_end:
                        deadlines["–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"] += 1
                    else:
                        deadlines["–ü–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏"] += 1
                except:
                    deadlines["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"] += 1
            else:
                deadlines["–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"] += 1
        
        print(f"\nüìÖ –î–ï–î–õ–ê–ô–ù–´:")
        for deadline_type, count in deadlines.items():
            print(f"   ‚Ä¢ {deadline_type}: {count}")
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Æ")
        print("=" * 50)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏
        active_designers = {name: data for name, data in self.designers.items() if data["count"] > 0}
        
        if len(active_designers) > 1:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
            sorted_designers = sorted(active_designers.items(), key=lambda x: x[1]["count"], reverse=True)
            
            max_load = sorted_designers[0]
            min_load = sorted_designers[-1]
            
            print(f"üìä –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò:")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {max_load[0]} ({max_load[1]['count']} –∑–∞–¥–∞—á)")
            print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {min_load[0]} ({min_load[1]['count']} –∑–∞–¥–∞—á)")
            
            if max_load[1]["count"] - min_load[1]["count"] > 5:
                print(f"\nüîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –ü–ï–†–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Æ:")
                print(f"   ‚Ä¢ –ü–µ—Ä–µ–¥–∞—Ç—å {max_load[0]} ‚Üí {min_load[0]}")
                print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏: {min(10, max_load[1]['count'] - min_load[1]['count'])}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
        low_priority_count = sum(1 for task in self.todo_tasks if not task["priority"] or task["priority"] == "–ù–µ —É–∫–∞–∑–∞–Ω")
        if low_priority_count > 0:
            print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø:")
            print(f"   ‚Ä¢ {low_priority_count} –∑–∞–¥–∞—á –±–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º
        overdue_count = 0
        today = datetime.now().date()
        for task in self.todo_tasks:
            if task["deadline"]:
                try:
                    deadline_date = datetime.fromisoformat(task["deadline"].split("T")[0]).date()
                    if deadline_date < today:
                        overdue_count += 1
                except:
                    pass
        
        if overdue_count > 0:
            print(f"\n‚è∞ –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:")
            print(f"   ‚Ä¢ {overdue_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
    
    def create_weekly_plan(self):
        """–°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        print(f"\nüìã –ü–õ–ê–ù –ù–ê –ù–ï–î–ï–õ–Æ {self.week_start} - {self.week_end}")
        print("=" * 60)
        
        total_todo = len(self.todo_tasks)
        designer_tasks = sum(data["count"] for data in self.designers.values())
        
        print(f"üéØ –¶–ï–õ–ò –ù–ê –ù–ï–î–ï–õ–Æ:")
        print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å {total_todo} –∑–∞–¥–∞—á ToDo")
        print(f"   ‚Ä¢ –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å {designer_tasks} –∑–∞–¥–∞—á –º–µ–∂–¥—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏")
        print(f"   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á")
        
        print(f"\nüìä –ú–ï–¢–†–ò–ö–ò:")
        if designer_tasks > 0:
            avg_tasks = designer_tasks / len([d for d in self.designers.values() if d["count"] > 0])
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞: {avg_tasks:.1f} –∑–∞–¥–∞—á")
        
        max_tasks = max([d["count"] for d in self.designers.values()]) if self.designers else 0
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {max_tasks} –∑–∞–¥–∞—á")
        
        print(f"\n‚úÖ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
        print(f"   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ ToDo –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫ –∫–æ–Ω—Ü—É –Ω–µ–¥–µ–ª–∏")
        print(f"   ‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ (¬±3 –∑–∞–¥–∞—á–∏)")
        print(f"   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß TODO –î–õ–Ø –î–ò–ó–ê–ô–ù–ï–†–û–í")
    print("=" * 70)
    
    analyzer = CorrectTodoAnalyzer()
    
    try:
        analyzer.load_todo_tasks()
        analyzer.analyze_designer_workload()
        analyzer.generate_recommendations()
        analyzer.create_weekly_plan()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 