#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –î–í–£–•–£–†–û–í–ù–ï–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò –°–û–¶–°–ï–¢–ï–ô

–£–†–û–í–ï–ù–¨ 1: –ü–õ–ê–¢–§–û–†–ú–´ (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
–£–†–û–í–ï–ù–¨ 2: –ü–û–°–¢–´ (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞) 

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–∞–∑–∞–º–∏ Notion
"""

import os
import asyncio
import aiohttp
import requests
import logging

logger = logging.getLogger(__name__)
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dotenv import load_dotenv

load_dotenv()

# ===== –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
PLATFORMS_DB = os.getenv('NOTION_PLATFORMS_DB_ID')
CONTENT_DB = os.getenv('NOTION_CONTENT_PLAN_DB_ID') 
NOTION_TOKEN = os.getenv('NOTION_TOKEN')

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

class DatabaseInspector:
    """–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Notion"""
    
    def __init__(self):
        if not NOTION_TOKEN:
            raise ValueError("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        if not PLATFORMS_DB:
            print("‚ö†Ô∏è NOTION_PLATFORMS_DB_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        if not CONTENT_DB:
            print("‚ö†Ô∏è NOTION_CONTENT_PLAN_DB_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    def inspect_database(self, db_id: str, db_name: str):
        """–ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        
        if not db_id:
            print(f"‚ùå {db_name}: ID –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ë–ê–ó–´: {db_name}")
        print(f"üìä ID: {db_id}")
        print("=" * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã
            try:
        response = requests.get(
                f"https://api.notion.com/v1/databases/{db_id}",
                headers=HEADERS
            )
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in GET request: {{e}}")
        return None
    
    response
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return None
            
            db_data = response.json()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            title = db_data.get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
            properties = db_data.get('properties', {})
            print(f"üîß –ü–æ–ª–µ–π: {len(properties)}")
            print()
            
            print("üìã –°–¢–†–£–ö–¢–£–†–ê –ü–û–õ–ï–ô:")
            for field_name, field_info in properties.items():
                field_type = field_info.get('type', 'unknown')
                
                print(f"   ‚Ä¢ {field_name} ({field_type})")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è select –ø–æ–ª–µ–π
                if field_type == 'select' and 'select' in field_info:
                    options = field_info['select'].get('options', [])
                    if options:
                        option_names = [opt.get('name', '') for opt in options]
                        print(f"     –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(option_names[:3])}{'...' if len(option_names) > 3 else ''}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è multi_select –ø–æ–ª–µ–π
                elif field_type == 'multi_select' and 'multi_select' in field_info:
                    options = field_info['multi_select'].get('options', [])
                    if options:
                        option_names = [opt.get('name', '') for opt in options]
                        print(f"     –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(option_names[:3])}{'...' if len(option_names) > 3 else ''}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
            print(f"\nüìÑ –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô:")
            
            query_try:
        response = requests.post(
                f"https://api.notion.com/v1/databases/{db_id}/query",
                headers=HEADERS,
                json={"page_size": 3}
            )
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error in POST request: {{e}}")
        return None
    
    response
            
            if query_response.status_code == 200:
                records = query_response.json().get('results', [])
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
                
                for i, record in enumerate(records, 1):
                    print(f"\n   {i}. –ó–∞–ø–∏—Å—å:")
                    props = record.get('properties', {})
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                    for field_name, field_data in props.items():
                        if field_name in ['–ù–∞–∑–≤–∞–Ω–∏–µ', 'Name', 'title', '–ó–∞–≥–æ–ª–æ–≤–æ–∫']:
                            if field_data.get('type') == 'title':
                                title_content = field_data.get('title', [{}])[0].get('text', {}).get('content', '')
                                if title_content:
                                    print(f"      üìù {field_name}: {title_content}")
                        
                        elif field_data.get('type') == 'select':
                            select_value = field_data.get('select', {})
                            if select_value:
                                print(f"      üîπ {field_name}: {select_value.get('name', '')}")
                        
                        elif field_data.get('type') == 'multi_select':
                            multi_values = field_data.get('multi_select', [])
                            if multi_values:
                                names = [v.get('name', '') for v in multi_values]
                                print(f"      üî∏ {field_name}: {', '.join(names)}")
                        
                        elif field_data.get('type') == 'number':
                            number_value = field_data.get('number')
                            if number_value is not None:
                                print(f"      üî¢ {field_name}: {number_value}")
            
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {query_response.status_code}")
            
            return db_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã: {e}")
            return None
    
    def analyze_both_databases(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        
        print("üöÄ –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ë–ê–ó –î–ê–ù–ù–´–•")
        print("üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print("=" * 80)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platforms_data = self.inspect_database(PLATFORMS_DB, "–ü–õ–ê–¢–§–û–†–ú–´")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_data = self.inspect_database(CONTENT_DB, "–ö–û–ù–¢–ï–ù–¢-–ü–õ–ê–ù")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:")
        print("=" * 60)
        
        self.generate_recommendations(platforms_data, content_data)
        
        return platforms_data, content_data
    
    def generate_recommendations(self, platforms_data, content_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        if platforms_data:
            print("üìä –ë–ê–ó–ê –ü–õ–ê–¢–§–û–†–ú:")
            platform_props = platforms_data.get('properties', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            required_platform_fields = [
                '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–û—Ö–≤–∞—Ç', 'Engagement Rate', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
            ]
            
            missing_fields = []
            for field in required_platform_fields:
                if not any(field.lower() in prop_name.lower() for prop_name in platform_props.keys()):
                    missing_fields.append(field)
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
                print("   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞")
            else:
                print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        
        if content_data:
            print("\nüìù –ë–ê–ó–ê –ö–û–ù–¢–ï–ù–¢–ê:")
            content_props = content_data.get('properties', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ—Å—Ç–æ–≤
            required_content_fields = [
                '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–õ–∞–π–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–†–µ–ø–æ—Å—Ç—ã', 'URL'
            ]
            
            missing_fields = []
            for field in required_content_fields:
                if not any(field.lower() in prop_name.lower() for prop_name in content_props.keys()):
                    missing_fields.append(field)
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
                print("   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            else:
                print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        
        print(f"\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ –±–∞–∑—ã")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π")  
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

class SocialMediaAnalytics:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π"""
    
    def __init__(self):
        self.platforms_db = PLATFORMS_DB
        self.content_db = CONTENT_DB
        
        # API —Ç–æ–∫–µ–Ω—ã
        self.instagram_token = os.getenv('INSTAGRAM_ACCESS_TOKEN')
        self.instagram_account = os.getenv('INSTAGRAM_BUSINESS_ACCOUNT_ID')
        self.youtube_key = os.getenv('YOUTUBE_API_KEY')
        self.youtube_channel = os.getenv('YOUTUBE_CHANNEL_ID')
        self.telegram_bot = os.getenv('TELEGRAM_BOT_TOKEN')
        self.telegram_channel = os.getenv('TELEGRAM_CHANNEL_ID')
        self.vk_token = os.getenv('VK_ACCESS_TOKEN')
        self.vk_group = os.getenv('VK_GROUP_ID')
    
    def check_api_setup(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–µ–π"""
        
        print("\nüîë –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô:")
        print("=" * 40)
        
        apis = {
            'Instagram': (self.instagram_token, self.instagram_account),
            'YouTube': (self.youtube_key, self.youtube_channel),
            'Telegram': (self.telegram_bot, self.telegram_channel),
            'VK': (self.vk_token, self.vk_group)
        }
        
        for platform, (token, account) in apis.items():
            if token and account:
                print(f"‚úÖ {platform}: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
            elif token:
                print(f"‚ö†Ô∏è {platform}: –¢–æ–∫–µ–Ω –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞/–∫–∞–Ω–∞–ª–∞")
            else:
                print(f"‚ùå {platform}: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        return apis
    
    async def collect_instagram_data(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Instagram"""
        
        if not self.instagram_token or not self.instagram_account:
            return {"error": "Instagram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        try:
            url = f"https://graph.facebook.com/v18.0/{self.instagram_account}"
            params = {
                'fields': 'followers_count,media_count,name,username',
                'access_token': self.instagram_token
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {
                            'platform': 'Instagram',
                            'followers': data.get('followers_count', 0),
                            'content_count': data.get('media_count', 0),
                            'name': data.get('name', ''),
                            'username': data.get('username', '')
                        }
                    else:
                        return {"error": f"Instagram API error: {response.status}"}
        except Exception as e:
            return {"error": f"Instagram error: {e}"}
    
    async def test_all_integrations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ô:")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Instagram
        instagram_result = await self.collect_instagram_data()
        if 'error' in instagram_result:
            print(f"‚ùå Instagram: {instagram_result['error']}")
        else:
            print(f"‚úÖ Instagram: @{instagram_result['username']} - {instagram_result['followers']:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        
        return {
            'instagram': instagram_result
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üéØ –î–í–£–•–£–†–û–í–ù–ï–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –°–û–¶–°–ï–¢–ï–ô")
    print("üìä –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Notion")
    print()
    
    # –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    inspector = DatabaseInspector()
    platforms_data, content_data = inspector.analyze_both_databases()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    analytics = SocialMediaAnalytics()
    apis_status = analytics.check_api_setup()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async def test_apis():
        return await analytics.test_all_integrations()
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...")
    try:
        results = asyncio.run(test_apis())
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print(f"\nüìã –ò–¢–û–ì–ò –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 50)
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("‚úÖ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    print("üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ü–µ–Ω–µ–Ω–∞")
    print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞")

if __name__ == "__main__":
    main() 