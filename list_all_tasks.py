#!/usr/bin/env python3
"""
–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã
"""

import asyncio
import json
import logging
from notion_mcp_server import NotionMCPServer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def list_all_tasks():
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞
    server = NotionMCPServer()
    
    logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–≤—ã–µ 50)
    tasks_result = await server.get_pages({
        "database_id": "d09df250ce7e4e0d9fbe4e036d320def",
        "page_size": 50
    })
    
    if not tasks_result:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    tasks_data = json.loads(tasks_result[0].text)
    tasks = tasks_data.get("results", [])
    
    logger.info(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    
    for i, task in enumerate(tasks, 1):
        task_id = task["id"]
        task_title = ""
        task_status = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Å—Ç–∞—Ç—É—Å
        for prop_name, prop_value in task["properties"].items():
            if prop_name == "–ó–∞–¥–∞—á–∞" and prop_value.get("type") == "title" and prop_value.get("title"):
                task_title = prop_value["title"][0]["plain_text"]
            elif prop_name == "–°—Ç–∞—Ç—É—Å" and prop_value.get("status"):
                task_status = prop_value["status"]["name"]
        
        logger.info(f"{i}. {task_title}")
        logger.info(f"   –°—Ç–∞—Ç—É—Å: {task_status}")
        logger.info(f"   ID: {task_id}")
        logger.info("")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await list_all_tasks()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 