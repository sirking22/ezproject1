#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–¥–∑–∞–¥–∞—á –≤ Notion
"""

import json
import os
import sys
from notion_client import Client

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    notion_token = os.getenv("NOTION_TOKEN")
    if not notion_token:
        raise ValueError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    return notion_token

def find_subtask_by_title(title: str):
    """–ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∑–∞–¥–∞—á—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    notion_token = load_env()
    client = Client(auth=notion_token)
    
    # ID –±–∞–∑—ã –ø–æ–¥–∑–∞–¥–∞—á
    subtasks_db_id = "9c5f4269d61449b6a7485579a3c21da3"
    
    try:
        response = client.databases.query(
            database_id=subtasks_db_id,
            filter={
                "property": "–ü–æ–¥–∑–∞–¥–∞—á–∏",
                "title": {
                    "contains": title
                }
            }
        )
        
        if response["results"]:
            return response["results"][0]
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏: {e}")
        return None

def main():
    print("üîç –î–ï–¢–ê–õ–ò –ü–û–î–ó–ê–î–ê–ß–ò")
    print("=" * 40)
    
    # –ò—â–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É —Å –ê—Ä—Å–µ–Ω—Ç–∏–µ–º
    subtask = find_subtask_by_title("–ê—Ä—Å")
    if not subtask:
        print("‚ùå –ü–æ–¥–∑–∞–¥–∞—á–∞ —Å '–ê—Ä—Å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"ID –ø–æ–¥–∑–∞–¥–∞—á–∏: {subtask['id']}")
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ
    title_prop = subtask["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]
    if title_prop.get("title"):
        title = title_prop["title"][0]["plain_text"]
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
    print("\nüìã –í–°–ï –°–í–û–ô–°–¢–í–ê:")
    for prop_name, prop_value in subtask["properties"].items():
        print(f"\n{prop_name}:")
        print(f"  –¢–∏–ø: {prop_value.get('type', 'unknown')}")
        print(f"  –ó–Ω–∞—á–µ–Ω–∏–µ: {json.dumps(prop_value, indent=2, ensure_ascii=False)}")
    
    # –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    if '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' in subtask["properties"]:
        assignee = subtask["properties"]["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]
        print(f"\nüë§ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨:")
        print(f"  –¢–∏–ø: {assignee.get('type')}")
        if assignee.get('people'):
            for person in assignee['people']:
                print(f"  - {person.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {person.get('id')})")
                print(f"    Email: {person.get('person', {}).get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"    –¢–∏–ø: {person.get('type')}")
        else:
            print("  –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    
    # –°—Ç–∞—Ç—É—Å
    if ' –°—Ç–∞—Ç—É—Å' in subtask["properties"]:
        status = subtask["properties"][" –°—Ç–∞—Ç—É—Å"]
        print(f"\nüìä –°–¢–ê–¢–£–°:")
        print(f"  –¢–∏–ø: {status.get('type')}")
        if status.get('status'):
            print(f"  - {status['status']['name']} (ID: {status['status']['id']})")
        else:
            print("  –°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main() 