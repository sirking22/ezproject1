name: Schema Monitoring

on:
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  monitor-schemas:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install notion-client
        pip install -r requirements.txt
        
    - name: Configure environment
      run: |
        echo "NOTION_TOKEN=${{ secrets.NOTION_TOKEN }}" >> $GITHUB_ENV
        
    - name: Run schema monitoring
      run: |
        python notion_schema_monitor.py
        
    - name: Check for changes
      id: check-changes
      run: |
        if [ -f schema_changes.json ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ö–µ–º–∞—Ö:"
          cat schema_changes.json
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        fi
        
    - name: Create Pull Request if changes detected
      if: steps.check-changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "feat: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º Notion"
        body: |
          üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ö–µ–º–∞—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Notion
          
          ## –ò–∑–º–µ–Ω–µ–Ω–∏—è:
          ```json
          $(cat schema_changes.json)
          ```
          
          ## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
          1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ `schema_changes.json`
          2. –ó–∞–ø—É—Å—Ç–∏—Ç—å `python auto_update_schemas.py`
          3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Å—Ç—ã: `python test_schemas_integration.py`
          4. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          
          **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ö–µ–º**
        branch: feature/auto-schema-update
        commit-message: "feat: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        
    - name: Upload schema changes as artifact
      if: steps.check-changes.outputs.changes == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: schema-changes
        path: |
          schema_changes.json
          update_schemas.py
          schema_backup.json
        retention-days: 7
        
    - name: Comment on PR
      if: steps.check-changes.outputs.changes == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const changes = JSON.parse(fs.readFileSync('schema_changes.json', 'utf8'));
          
          let comment = '## üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ö–µ–º–∞—Ö\n\n';
          
          const changesByDb = {};
          changes.forEach(change => {
            if (!changesByDb[change.database_name]) {
              changesByDb[change.database_name] = [];
            }
            changesByDb[change.database_name].push(change);
          });
          
          for (const [dbName, dbChanges] of Object.entries(changesByDb)) {
            comment += `### üìä ${dbName}\n`;
            dbChanges.forEach(change => {
              comment += `- **${change.change_type}**: ${change.property_name} = \`${change.new_value}\`\n`;
            });
            comment += '\n';
          }
          
          comment += '### üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n';
          comment += '1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π\n';
          comment += '2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n';
          comment += '3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Å—Ç—ã\n';
          comment += '4. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 