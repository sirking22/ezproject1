import os
import asyncio
import logging
from typing import Dict, List, Any, Optional, Union, Tuple
from datetime import datetime
from notion_client import AsyncClient
from notion_database_schemas import get_database_schema, get_database_schema_by_id, get_select_options, get_select_options_by_id, get_multi_select_options, get_multi_select_options_by_id, get_database_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SafeDatabaseOperations:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Notion —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    
    def __init__(self):
        self.client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
        self.logger = logger
    
    # ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–¶–ò–ô ====================
    
    async def add_select_option(self, database_id: str, property_name: str, new_option: str) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ select –ø–æ–ª–µ —á–µ—Ä–µ–∑ Notion API"""
        try:
            self.logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è '{new_option}' –≤ –ø–æ–ª–µ '{property_name}' –±–∞–∑—ã {database_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –±–∞–∑—ã
            response = await self.client.databases.retrieve(database_id=database_id)
            properties = response.get("properties", {})
            
            if property_name not in properties:
                return {"success": False, "error": f"–ü–æ–ª–µ '{property_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ"}
            
            property_config = properties[property_name]
            if property_config.get("type") != "select":
                return {"success": False, "error": f"–ü–æ–ª–µ '{property_name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è select –ø–æ–ª–µ–º"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
            current_options = property_config.get("select", {}).get("options", [])
            existing_names = [opt.get("name", "") for opt in current_options]
            
            if new_option in existing_names:
                return {"success": True, "message": f"–ó–Ω–∞—á–µ–Ω–∏–µ '{new_option}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–µ '{property_name}'"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–ø—Ü–∏—é
            new_option_config = {
                "name": new_option,
                "color": "default"
            }
            
            updated_options = current_options + [new_option_config]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã
            update_response = await self.client.databases.update(
                database_id=database_id,
                properties={
                    property_name: {
                        "select": {
                            "options": updated_options
                        }
                    }
                }
            )
            
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_option}' –≤ –ø–æ–ª–µ '{property_name}'")
            return {
                "success": True, 
                "message": f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_option}' –≤ –ø–æ–ª–µ '{property_name}'",
                "database_id": database_id,
                "property_name": property_name,
                "new_option": new_option
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è '{new_option}' –≤ –ø–æ–ª–µ '{property_name}': {str(e)}"
            self.logger.error(error_msg)
            return {"success": False, "error": error_msg}
    
    async def add_multi_select_option(self, database_id: str, property_name: str, new_option: str) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ multi_select –ø–æ–ª–µ —á–µ—Ä–µ–∑ Notion API"""
        try:
            self.logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è '{new_option}' –≤ multi_select –ø–æ–ª–µ '{property_name}' –±–∞–∑—ã {database_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –±–∞–∑—ã
            response = await self.client.databases.retrieve(database_id=database_id)
            properties = response.get("properties", {})
            
            if property_name not in properties:
                return {"success": False, "error": f"–ü–æ–ª–µ '{property_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ"}
            
            property_config = properties[property_name]
            if property_config.get("type") != "multi_select":
                return {"success": False, "error": f"–ü–æ–ª–µ '{property_name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è multi_select –ø–æ–ª–µ–º"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
            current_options = property_config.get("multi_select", {}).get("options", [])
            existing_names = [opt.get("name", "") for opt in current_options]
            
            if new_option in existing_names:
                return {"success": True, "message": f"–ó–Ω–∞—á–µ–Ω–∏–µ '{new_option}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–µ '{property_name}'"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–ø—Ü–∏—é
            new_option_config = {
                "name": new_option,
                "color": "default"
            }
            
            updated_options = current_options + [new_option_config]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã
            update_response = await self.client.databases.update(
                database_id=database_id,
                properties={
                    property_name: {
                        "multi_select": {
                            "options": updated_options
                        }
                    }
                }
            )
            
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_option}' –≤ multi_select –ø–æ–ª–µ '{property_name}'")
            return {
                "success": True, 
                "message": f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_option}' –≤ multi_select –ø–æ–ª–µ '{property_name}'",
                "database_id": database_id,
                "property_name": property_name,
                "new_option": new_option
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è '{new_option}' –≤ multi_select –ø–æ–ª–µ '{property_name}': {str(e)}"
            self.logger.error(error_msg)
            return {"success": False, "error": error_msg}
    
    async def ensure_select_option_exists(self, database_id: str, property_name: str, option: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ select –ø–æ–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ –∏–∑ —Å—Ö–µ–º—ã
            current_options = get_select_options_by_id(database_id, property_name)
            
            if option in current_options:
                return {"success": True, "message": f"–ó–Ω–∞—á–µ–Ω–∏–µ '{option}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–µ '{property_name}'"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return await self.add_select_option(database_id, property_name, option)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è '{option}' –≤ select –ø–æ–ª–µ '{property_name}': {str(e)}"
            self.logger.error(error_msg)
            return {"success": False, "error": error_msg}
    
    async def ensure_multi_select_option_exists(self, database_id: str, property_name: str, option: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ multi_select –ø–æ–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ –∏–∑ —Å—Ö–µ–º—ã
            current_options = get_multi_select_options_by_id(database_id, property_name)
            
            if option in current_options:
                return {"success": True, "message": f"–ó–Ω–∞—á–µ–Ω–∏–µ '{option}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–µ '{property_name}'"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return await self.add_multi_select_option(database_id, property_name, option)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è '{option}' –≤ multi_select –ø–æ–ª–µ '{property_name}': {str(e)}"
            self.logger.error(error_msg)
            return {"success": False, "error": error_msg}
    
    async def add_multiple_options(self, database_id: str, property_name: str, new_options: List[str], field_type: str = "select") -> Dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ select –∏–ª–∏ multi_select –ø–æ–ª–µ"""
        try:
            self.logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(new_options)} –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ {field_type} –ø–æ–ª–µ '{property_name}' –±–∞–∑—ã {database_id}")
            
            results = []
            for option in new_options:
                if field_type == "select":
                    result = await self.add_select_option(database_id, property_name, option)
                else:
                    result = await self.add_multi_select_option(database_id, property_name, option)
                results.append(result)
            
            successful = [r for r in results if r["success"]]
            failed = [r for r in results if not r["success"]]
            
            return {
                "success": len(failed) == 0,
                "message": f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(successful)} –∏–∑ {len(new_options)} –∑–Ω–∞—á–µ–Ω–∏–π",
                "successful": successful,
                "failed": failed,
                "total": len(new_options)
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –≤ {field_type} –ø–æ–ª–µ '{property_name}': {str(e)}"
            self.logger.error(error_msg)
            return {"success": False, "error": error_msg}
    
    # ==================== –ë–ï–ó–û–ü–ê–°–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô ====================
    
    async def validate_payload(self, database_name: str, properties: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è payload –ø–æ —Å—Ö–µ–º–µ –±–∞–∑—ã"""
        errors = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã
            schema = get_database_schema(database_name)
            if not schema:
                errors.append(f"–°—Ö–µ–º–∞ –±–∞–∑—ã '{database_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False, errors
            
            schema_properties = schema.properties
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            for field_name, field_value in properties.items():
                if field_name not in schema_properties:
                    errors.append(f"–ü–æ–ª–µ '{field_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ –±–∞–∑—ã '{database_name}'")
                    continue
                
                field_schema = schema_properties[field_name]
                field_type = field_schema.get("type")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
                if not self._validate_field_type(field_name, field_value, field_type, schema):
                    errors.append(f"–ü–æ–ª–µ '{field_name}' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
                    continue
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è select/multi_select –∑–Ω–∞—á–µ–Ω–∏–π
                if field_type in ["select", "multi_select"]:
                    if not self._validate_select_values(field_name, field_value, schema):
                        errors.append(f"–ü–æ–ª–µ '{field_name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                        continue
            
            return len(errors) == 0, errors
            
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}")
            return False, errors
    
    def _validate_field_type(self, field_name: str, field_value: Any, field_type: Optional[str], schema: Any) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –ø–æ–ª—è"""
        try:
            if field_type == "title":
                return isinstance(field_value, dict) and "title" in field_value
            elif field_type == "rich_text":
                return isinstance(field_value, dict) and "rich_text" in field_value
            elif field_type == "number":
                return isinstance(field_value, dict) and "number" in field_value
            elif field_type == "select":
                return isinstance(field_value, dict) and "select" in field_value
            elif field_type == "multi_select":
                return isinstance(field_value, dict) and "multi_select" in field_value
            elif field_type == "date":
                return isinstance(field_value, dict) and "date" in field_value
            elif field_type == "checkbox":
                return isinstance(field_value, dict) and "checkbox" in field_value
            elif field_type == "url":
                return isinstance(field_value, dict) and "url" in field_value
            elif field_type == "email":
                return isinstance(field_value, dict) and "email" in field_value
            elif field_type == "phone_number":
                return isinstance(field_value, dict) and "phone_number" in field_value
            elif field_type == "relation":
                return isinstance(field_value, dict) and "relation" in field_value
            else:
                return True  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                
        except Exception:
            return False
    
    def _validate_select_values(self, field_name: str, field_value: Any, schema: Any) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π select/multi_select"""
        try:
            schema_properties = schema.properties
            field_schema = schema_properties.get(field_name, {})
            
            if field_schema.get("type") == "select":
                select_options = schema.select_options.get(field_name, [])
                if field_value.get("select", {}).get("name") not in select_options:
                    return False
                    
            elif field_schema.get("type") == "multi_select":
                multi_select_options = schema.multi_select_options.get(field_name, [])
                field_values = field_value.get("multi_select", [])
                for value in field_values:
                    if value.get("name") not in multi_select_options:
                        return False
            
            return True
            
        except Exception:
            return False
    
    async def safe_create_page(self, database_name: str, properties: Dict[str, Any]) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ post-check"""
        result = {
            "success": False,
            "page_id": None,
            "errors": [],
            "warnings": [],
            "validation_passed": False,
            "post_check_passed": False
        }
        
        try:
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è payload
            self.logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è payload –¥–ª—è –±–∞–∑—ã '{database_name}'")
            validation_passed, validation_errors = await self.validate_payload(database_name, properties)
            result["validation_passed"] = validation_passed
            result["errors"].extend(validation_errors)
            
            if not validation_passed:
                self.logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {validation_errors}")
                return result
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ ID –±–∞–∑—ã
            database_id = get_database_id(database_name)
            if not database_id:
                result["errors"].append(f"–ë–∞–∑–∞ '{database_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return result
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑–µ '{database_name}'")
            response = await self.client.pages.create(
                parent={"database_id": database_id},
                properties=properties
            )
            
            # 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_id = response.get("id")
            result["page_id"] = page_id
            
            if not page_id:
                result["errors"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return result
            
            # 5. Post-check - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            self.logger.info(f"üîç Post-check –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}")
            post_check_passed, post_check_errors = await self._post_check_page(database_name, page_id, properties)
            result["post_check_passed"] = post_check_passed
            result["warnings"].extend(post_check_errors)
            
            if post_check_passed:
                self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                result["success"] = True
            else:
                self.logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_id} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ post-check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {post_check_errors}")
                result["success"] = True  # –°–æ–∑–¥–∞–Ω–∞, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
            
            return result
            
        except Exception as e:
            result["errors"].append(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return result
    
    async def safe_create_page_with_auto_options(self, database_id: str, properties: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ select/multi_select –ø–æ–ª—è"""
        try:
            self.logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ {database_id} —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø—Ü–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã
            schema = get_database_schema_by_id(database_id)
            if not schema:
                return {"success": False, "error": f"–°—Ö–µ–º–∞ –¥–ª—è –±–∞–∑—ã {database_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è select –ø–æ–ª–µ–π
            for property_name, property_value in properties.items():
                if property_name in schema.select_options:
                    if isinstance(property_value, dict) and "select" in property_value:
                        option_name = property_value["select"].get("name")
                        if option_name:
                            result = await self.ensure_select_option_exists(database_id, property_name, option_name)
                            if not result["success"]:
                                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é '{option_name}' –≤ –ø–æ–ª–µ '{property_name}': {result['error']}")
                
                elif property_name in schema.multi_select_options:
                    if isinstance(property_value, dict) and "multi_select" in property_value:
                        options = property_value["multi_select"]
                        if isinstance(options, list):
                            for option in options:
                                if isinstance(option, dict) and "name" in option:
                                    option_name = option["name"]
                                    result = await self.ensure_multi_select_option_exists(database_id, property_name, option_name)
                                    if not result["success"]:
                                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é '{option_name}' –≤ multi_select –ø–æ–ª–µ '{property_name}': {result['error']}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            response = await self.client.pages.create(
                parent={"database_id": database_id},
                properties=properties
            )
            
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å {response['id']} –≤ –±–∞–∑–µ {database_id}")
            return {
                "success": True,
                "message": "–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø—Ü–∏–π",
                "page_id": response["id"],
                "database_id": database_id
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø—Ü–∏–π: {str(e)}"
            self.logger.error(error_msg)
            return {"success": False, "error": error_msg}
    
    async def _post_check_page(self, database_name: str, page_id: str, expected_properties: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """Post-check: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        errors = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = await self.client.pages.retrieve(page_id=page_id)
            actual_properties = response.get("properties", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–ª–µ
            for field_name, expected_value in expected_properties.items():
                if field_name not in actual_properties:
                    errors.append(f"–ü–æ–ª–µ '{field_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    continue
                
                actual_value = actual_properties[field_name]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                if self._is_field_empty(actual_value):
                    errors.append(f"–ü–æ–ª–µ '{field_name}' –ø—É—Å—Ç–æ–µ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
                if field_name == "Name" and expected_value.get("title"):
                    expected_title = expected_value["title"][0]["text"]["content"]
                    actual_title = actual_value.get("title", [{}])[0].get("text", {}).get("content", "")
                    if expected_title != actual_title:
                        errors.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_title}', –ø–æ–ª—É—á–µ–Ω–æ '{actual_title}'")
            
            return len(errors) == 0, errors
            
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ post-check: {e}")
            return False, errors
    
    def _is_field_empty(self, field_value: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ"""
        if not field_value:
            return True
        
        if isinstance(field_value, dict):
            if "title" in field_value:
                return not field_value["title"] or not field_value["title"][0].get("text", {}).get("content")
            elif "rich_text" in field_value:
                return not field_value["rich_text"] or not field_value["rich_text"][0].get("text", {}).get("content")
            elif "select" in field_value:
                return not field_value["select"]
            elif "multi_select" in field_value:
                return not field_value["multi_select"]
            elif "number" in field_value:
                return field_value["number"] is None
            elif "date" in field_value:
                return not field_value["date"]
        
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
safe_operations = SafeDatabaseOperations() 