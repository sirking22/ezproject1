#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô –ë–û–¢ –ü–†–û–ï–ö–¢–ê - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –æ—Ç—á–µ—Ç—ã + –∏–¥–µ–∏ + –∫–æ–Ω—Ü–µ–ø—Ç—ã + –º–∞—Ç–µ—Ä–∏–∞–ª—ã + –∑–∞–¥–∞—á–∏
"""

import os
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
from services.designer_report_service import DesignerReportService, WorkReport
from services.notion_bot_service import NotionBotService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('main_project_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class MainProjectBot:
    """–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–æ–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.telegram_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.report_service = DesignerReportService()
        self.notion_service = NotionBotService()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        logger.info("‚úÖ Main Project Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìù –û—Ç—á–µ—Ç—ã", callback_data="reports")],
            [InlineKeyboardButton("üí° –ò–¥–µ–∏", callback_data="ideas")],
            [InlineKeyboardButton("üé® –ö–æ–Ω—Ü–µ–ø—Ç—ã", callback_data="concepts")],
            [InlineKeyboardButton("üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="materials")],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="tasks")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéØ **–ì–õ–ê–í–ù–´–ô –ë–û–¢ –ü–†–û–ï–ö–¢–ê**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n\n"
            "üìù **–û—Ç—á–µ—Ç—ã** - —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–∞–±–æ—Ç–µ\n"
            "üí° **–ò–¥–µ–∏** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ—è–º–∏ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏\n"
            "üé® **–ö–æ–Ω—Ü–µ–ø—Ç—ã** - —Ä–∞–±–æ—Ç–∞ —Å –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ç–∞–º–∏\n"
            "üìÅ **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã** - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "üìã **–ó–∞–¥–∞—á–∏** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "reports":
            await self.show_reports_menu(query)
        elif query.data == "ideas":
            await self.show_ideas_menu(query)
        elif query.data == "concepts":
            await self.show_concepts_menu(query)
        elif query.data == "materials":
            await self.show_materials_menu(query)
        elif query.data == "tasks":
            await self.show_tasks_menu(query)
        elif query.data == "stats":
            await self.show_stats_menu(query)
        elif query.data == "back_to_main":
            await self.show_main_menu(query)
        elif query.data == "quick_report":
            await self.start_quick_report(query)
        elif query.data == "add_idea":
            await self.start_add_idea(query)
        elif query.data == "add_concept":
            await self.start_add_concept(query)
        elif query.data == "add_material":
            await self.start_add_material(query)

    async def show_reports_menu(self, query):
        """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç", callback_data="quick_report")],
            [InlineKeyboardButton("üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã", callback_data="my_reports")],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="reports_analytics")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìù **–†–ê–ó–î–ï–õ –û–¢–ß–ï–¢–û–í**\n\n"
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
            "üìä **–ú–æ–∏ –æ—Ç—á–µ—Ç—ã** - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
            "üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã –æ—Ç—á–µ—Ç–æ–≤:**\n"
            "‚Ä¢ `–ü—Ä–æ–µ–∫—Ç –ó–∞–¥–∞—á–∞ 2—á –û–ø–∏—Å–∞–Ω–∏–µ`\n"
            "‚Ä¢ `TASK-123 1.5—á done –†–∞–±–æ—Ç–∞ —Å Figma`\n"
            "‚Ä¢ `–ë—Ä–µ–Ω–¥–∏–Ω–≥ –õ–æ–≥–æ—Ç–∏–ø 3—á https://figma.com/file/abc123`",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_ideas_menu(self, query):
        """–ú–µ–Ω—é –∏–¥–µ–π"""
        keyboard = [
            [InlineKeyboardButton("üí° –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data="add_idea")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∏–¥–µ–∏", callback_data="my_ideas")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∏–¥–µ–π", callback_data="search_ideas")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üí° **–†–ê–ó–î–ï–õ –ò–î–ï–ô**\n\n"
            "üí° **–î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é** - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é\n"
            "üìã **–ú–æ–∏ –∏–¥–µ–∏** - –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–¥–µ–∏\n"
            "üîç **–ü–æ–∏—Å–∫ –∏–¥–µ–π** - –Ω–∞–π—Ç–∏ –∏–¥–µ–∏ –ø–æ —Ç–µ–≥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n"
            "**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π:**\n"
            "‚Ä¢ –î–∏–∑–∞–π–Ω –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥\n"
            "‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞\n"
            "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã –∏ —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_concepts_menu(self, query):
        """–ú–µ–Ω—é –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üé® –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç", callback_data="add_concept")],
            [InlineKeyboardButton("üìÅ –ú–æ–∏ –∫–æ–Ω—Ü–µ–ø—Ç—ã", callback_data="my_concepts")],
            [InlineKeyboardButton("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã", callback_data="active_concepts")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üé® **–†–ê–ó–î–ï–õ –ö–û–ù–¶–ï–ü–¢–û–í**\n\n"
            "üé® **–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç** - —Å–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ç\n"
            "üìÅ **–ú–æ–∏ –∫–æ–Ω—Ü–µ–ø—Ç—ã** - –≤–∞—à–∏ –∫–æ–Ω—Ü–µ–ø—Ç—ã –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã\n"
            "üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã** - –∫–æ–Ω—Ü–µ–ø—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            "**–¢–∏–ø—ã –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:**\n"
            "‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø—ã –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥\n"
            "‚Ä¢ –í–µ–±-–¥–∏–∑–∞–π–Ω –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã\n"
            "‚Ä¢ –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è –∏ —É–ø–∞–∫–æ–≤–∫–∞\n"
            "‚Ä¢ –†–µ–∫–ª–∞–º–∞ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_materials_menu(self, query):
        """–ú–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üìÅ –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="add_material")],
            [InlineKeyboardButton("üìö –ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="my_materials")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="search_materials")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìÅ **–†–ê–ó–î–ï–õ –ú–ê–¢–ï–†–ò–ê–õ–û–í**\n\n"
            "üìÅ **–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª** - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É\n"
            "üìö **–ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã** - –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "üîç **–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤** - –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–≥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ Figma —Ñ–∞–π–ª—ã –∏ —Å—Å—ã–ª–∫–∏\n"
            "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG, SVG)\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC)\n"
            "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_tasks_menu(self, query):
        """–ú–µ–Ω—é –∑–∞–¥–∞—á"""
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
            [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", callback_data="project_management")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìã **–†–ê–ó–î–ï–õ –ó–ê–î–ê–ß**\n\n"
            "üìã **–ú–æ–∏ –∑–∞–¥–∞—á–∏** - –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚ûï **–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É** - –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç\n"
            "üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏** - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å\n\n"
            "**–¢–∏–ø—ã –∑–∞–¥–∞—á:**\n"
            "‚Ä¢ –î–∏–∑–∞–π–Ω –∏ –≤–µ—Ä—Å—Ç–∫–∞\n"
            "‚Ä¢ –ë—Ä–µ–Ω–¥–∏–Ω–≥ –∏ –ª–æ–≥–æ—Ç–∏–ø—ã\n"
            "‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_stats_menu(self, query):
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="general_stats")],
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="reports_stats")],
            [InlineKeyboardButton("üí° –ò–¥–µ–∏", callback_data="ideas_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–†–ê–ó–î–ï–õ –°–¢–ê–¢–ò–°–¢–ò–ö–ò**\n\n"
            "üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
            "üìä **–û—Ç—á–µ—Ç—ã** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤\n"
            "üí° **–ò–¥–µ–∏** - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–¥–µ–π –∏ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤\n\n"
            "**–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_main_menu(self, query):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìù –û—Ç—á–µ—Ç—ã", callback_data="reports")],
            [InlineKeyboardButton("üí° –ò–¥–µ–∏", callback_data="ideas")],
            [InlineKeyboardButton("üé® –ö–æ–Ω—Ü–µ–ø—Ç—ã", callback_data="concepts")],
            [InlineKeyboardButton("üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="materials")],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="tasks")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ **–ì–õ–ê–í–ù–´–ô –ë–û–¢ –ü–†–û–ï–ö–¢–ê**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n\n"
            "üìù **–û—Ç—á–µ—Ç—ã** - —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–∞–±–æ—Ç–µ\n"
            "üí° **–ò–¥–µ–∏** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ—è–º–∏ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏\n"
            "üé® **–ö–æ–Ω—Ü–µ–ø—Ç—ã** - —Ä–∞–±–æ—Ç–∞ —Å –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ç–∞–º–∏\n"
            "üìÅ **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã** - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "üìã **–ó–∞–¥–∞—á–∏** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def start_quick_report(self, query):
        """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç"""
        user_id = query.from_user.id
        self.user_states[user_id] = {"state": "awaiting_report"}
        
        await query.edit_message_text(
            "üìù **–ë–´–°–¢–†–´–ô –û–¢–ß–ï–¢**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 –í–µ—Ä—Å—Ç–∫–∞ 2—á –°–¥–µ–ª–∞–ª –º–∞–∫–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏`\n"
            "‚Ä¢ `–ë—Ä–µ–Ω–¥–∏–Ω–≥ –õ–æ–≥–æ—Ç–∏–ø 1.5—á –°–æ–∑–¥–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–∞ https://figma.com/file/abc123`\n"
            "‚Ä¢ `TASK-123 3—á done –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã https://prnt.sc/xyz789`\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
            "‚Ä¢ Figma —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ LightShot —Å–∫—Ä–∏–Ω—à–æ—Ç—ã\n"
            "‚Ä¢ –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            parse_mode='Markdown'
        )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id, {})
        
        if user_state.get("state") == "awaiting_report":
            await self.process_report(update, text)
        elif user_state.get("state") == "awaiting_idea":
            await self.process_idea(update, text)
        elif user_state.get("state") == "awaiting_concept":
            await self.process_concept(update, text)
        elif user_state.get("state") == "awaiting_material":
            await self.process_material(update, text)
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ—Ç—á–µ—Ç
            if await self.try_parse_report(update, text):
                return
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.start_command(update, context)

    async def process_report(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
            report = self.report_service.parse_quick_report(text)
            
            if report:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = update.effective_user
                report.designer_name = user.username or user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
                success, message = self.report_service.process_report(report)
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ **–û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù!**\n\n"
                        f"üìã **–ü—Ä–æ–µ–∫—Ç:** {report.project_name}\n"
                        f"üéØ **–ó–∞–¥–∞—á–∞:** {report.task_name}\n"
                        f"‚è± **–í—Ä–µ–º—è:** {report.time_spent_hours}—á\n"
                        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {report.work_description}\n\n"
                        f"üíæ {message}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞:**\n{message}",
                        parse_mode='Markdown'
                    )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.user_states[update.effective_user.id] = {}
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )

    async def try_parse_report(self, update: Update, text: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç—á–µ—Ç"""
        try:
            report = self.report_service.parse_quick_report(text)
            if report:
                await self.process_report(update, text)
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    async def process_idea(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–¥–µ–π
        await update.message.reply_text(
            "üí° **–ò–î–ï–Ø –°–û–•–†–ê–ù–ï–ù–ê!**\n\n"
            f"üìù {text}\n\n"
            "‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            parse_mode='Markdown'
        )
        self.user_states[update.effective_user.id] = {}

    async def process_concept(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ç–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        await update.message.reply_text(
            "üé® **–ö–û–ù–¶–ï–ü–¢ –°–û–•–†–ê–ù–ï–ù!**\n\n"
            f"üìù {text}\n\n"
            "‚úÖ –ö–æ–Ω—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            parse_mode='Markdown'
        )
        self.user_states[update.effective_user.id] = {}

    async def process_material(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        await update.message.reply_text(
            "üìÅ **–ú–ê–¢–ï–†–ò–ê–õ –°–û–•–†–ê–ù–ï–ù!**\n\n"
            f"üìù {text}\n\n"
            "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            parse_mode='Markdown'
        )
        self.user_states[update.effective_user.id] = {}

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ Main Project Bot –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = MainProjectBot()
    bot.run()

if __name__ == "__main__":
    main() 