#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Notion
"""

import asyncio
import json
import logging
import os
from typing import Any, Dict, List

import mcp
from mcp.server import Server
from mcp.server.stdio import stdio_server
from mcp.types import Tool, TextContent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Notion –∫–ª–∏–µ–Ω—Ç–∞
try:
    from notion_client import Client
    notion = Client(auth=os.getenv("NOTION_TOKEN"))
    logger.info("‚úÖ Notion –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Notion: {e}")
    notion = None

# ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
KPI_DB = "1d6ace03d9ff80bfb809ed21dfd2150c"
RDT_DB = "195ace03d9ff80c1a1b0d236ec3564d2"

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server = Server("notion-mcp-server")

@server.list_tools()
async def handle_list_tools():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    return [
        Tool(
            name="create_kpi_record",
            description="–°–æ–∑–¥–∞—Ç—å KPI –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            inputSchema={
                "type": "object",
                "properties": {
                    "name": {"type": "string"},
                    "kpi_type": {"type": "string"},
                    "target_value": {"type": "number"},
                    "employee_id": {"type": "string"},
                    "period_start": {"type": "string"},
                    "period_end": {"type": "string"},
                    "comment": {"type": "string"}
                },
                "required": ["name", "kpi_type", "target_value", "employee_id"]
            }
        ),
        Tool(
            name="get_employee_id",
            description="–ü–æ–ª—É—á–∏—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏",
            inputSchema={
                "type": "object",
                "properties": {
                    "employee_name": {"type": "string"}
                },
                "required": ["employee_name"]
            }
        ),
        Tool(
            name="list_kpi_records",
            description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ KPI –∑–∞–ø–∏—Å–µ–π",
            inputSchema={
                "type": "object",
                "properties": {
                    "page_size": {"type": "integer", "default": 10}
                }
            }
        )
    ]

@server.call_tool()
async def handle_call_tool(name: str, arguments: Dict[str, Any]):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    try:
        if name == "create_kpi_record":
            return await create_kpi_record(arguments)
        elif name == "get_employee_id":
            return await get_employee_id(arguments)
        elif name == "list_kpi_records":
            return await list_kpi_records(arguments)
        else:
            return [TextContent(type="text", text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {name}: {e}")
        return [TextContent(type="text", text=f"–û—à–∏–±–∫–∞: {str(e)}")]

async def create_kpi_record(args: Dict[str, Any]):
    """–°–æ–∑–¥–∞—Ç—å KPI –∑–∞–ø–∏—Å—å"""
    name = args.get("name")
    kpi_type = args.get("kpi_type")
    target_value = args.get("target_value")
    employee_id = args.get("employee_id")
    period_start = args.get("period_start", "2025-07-01")
    period_end = args.get("period_end", "2025-07-31")
    comment = args.get("comment", "")
    
    properties = {
        "Name": {"title": [{"text": {"content": name}}]},
        "–¢–∏–ø KPI": {"select": {"name": kpi_type}},
        "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": {"number": target_value},
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏": {"relation": [{"id": employee_id}]},
        "–ü–µ—Ä–∏–æ–¥": {"date": {"start": period_start, "end": period_end}},
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {"rich_text": [{"text": {"content": comment}}]}
    }
    
    try:
        response = notion.pages.create(
            parent={"database_id": KPI_DB},
            properties=properties
        )
        return [TextContent(type="text", text=f"‚úÖ KPI —Å–æ–∑–¥–∞–Ω: {response['id']}")]
    except Exception as e:
        return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è KPI: {str(e)}")]

async def get_employee_id(args: Dict[str, Any]):
    """–ü–æ–ª—É—á–∏—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    employee_name = args.get("employee_name", "").lower()
    
    try:
        response = notion.databases.query(
            database_id=RDT_DB,
            page_size=100
        )
        
        for page in response.get("results", []):
            props = page.get("properties", {})
            title = props.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", {}).get("title", [])
            if title:
                name = title[0]["plain_text"].lower()
                if employee_name in name or name in employee_name:
                    return [TextContent(type="text", text=f"ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}: {page['id']}")]
        
        return [TextContent(type="text", text=f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")]
    except Exception as e:
        return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}")]

async def list_kpi_records(args: Dict[str, Any]):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ KPI –∑–∞–ø–∏—Å–µ–π"""
    page_size = args.get("page_size", 10)
    
    try:
        response = notion.databases.query(
            database_id=KPI_DB,
            page_size=page_size
        )
        
        records = []
        for page in response.get("results", []):
            page_id = page["id"]
            page_url = page["url"]
            records.append(f"- {page_id}: {page_url}")
        
        return [TextContent(type="text", text=f"üìã KPI –∑–∞–ø–∏—Å–∏:\n" + "\n".join(records))]
    except Exception as e:
        return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è KPI: {str(e)}")]

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ MCP Notion Server")
    
    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
        )

if __name__ == "__main__":
    asyncio.run(main()) 