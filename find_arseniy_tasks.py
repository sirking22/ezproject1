#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ê—Ä—Å–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ To do –∏–ª–∏ In Progress
"""

import asyncio
import json
import logging
from notion_mcp_server import NotionMCPServer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def find_arseniy_tasks():
    """–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –ê—Ä—Å–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞
    server = NotionMCPServer()
    
    logger.info("üîç –ò—â–µ–º –∑–∞–¥–∞—á–∏ –ê—Ä—Å–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ To do –∏–ª–∏ In Progress...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ To do –∏–ª–∏ In Progress
    tasks_result = await server.get_pages({
        "database_id": "d09df250ce7e4e0d9fbe4e036d320def",
        "filter": {
            "or": [
                {
                    "property": "–°—Ç–∞—Ç—É—Å",
                    "status": {
                        "equals": "To do"
                    }
                },
                {
                    "property": "–°—Ç–∞—Ç—É—Å",
                    "status": {
                        "equals": "In Progress"
                    }
                }
            ]
        }
    })
    
    if not tasks_result:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    tasks_data = json.loads(tasks_result[0].text)
    tasks = tasks_data.get("results", [])
    
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ To do/In Progress: {len(tasks)}")
    
    arseniy_tasks = []
    
    for task in tasks:
        task_id = task["id"]
        task_title = ""
        task_status = ""
        participants = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, —Å—Ç–∞—Ç—É—Å –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for prop_name, prop_value in task["properties"].items():
            if prop_name == "–ó–∞–¥–∞—á–∞" and prop_value.get("type") == "title" and prop_value.get("title"):
                task_title = prop_value["title"][0]["plain_text"]
            elif prop_name == "–°—Ç–∞—Ç—É—Å" and prop_value.get("status"):
                task_status = prop_value["status"]["name"]
            elif prop_name == "–£—á–∞—Å—Ç–Ω–∏–∫–∏" and prop_value.get("people"):
                participants = [p.get("name", "") for p in prop_value["people"]]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ê—Ä—Å–µ–Ω–∏–π —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if "Arsentiy" in participants or any("–∞—Ä—Å" in p.lower() for p in participants):
            arseniy_tasks.append({
                "title": task_title,
                "status": task_status,
                "id": task_id,
                "participants": participants
            })
    
    logger.info(f"üéØ –ó–∞–¥–∞—á –ê—Ä—Å–µ–Ω–∏—è: {len(arseniy_tasks)}")
    
    for i, task in enumerate(arseniy_tasks, 1):
        logger.info(f"{i}. {task['title']}")
        logger.info(f"   –°—Ç–∞—Ç—É—Å: {task['status']}")
        logger.info(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(task['participants'])}")
        logger.info(f"   ID: {task['id']}")
        logger.info(f"   URL: https://notion.so/{task['id'].replace('-', '')}")
        logger.info("")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await find_arseniy_tasks()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 