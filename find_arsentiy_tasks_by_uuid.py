#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á Arsentiy —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env_vars():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")
    subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")
    
    if not token or not tasks_db_id or not subtasks_db_id:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    return {
        "token": token,
        "tasks_db_id": tasks_db_id,
        "subtasks_db_id": subtasks_db_id
    }

def get_arsentiy_uuid():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Arsentiy"""
    print("\nüîç –ü–û–õ–£–ß–ï–ù–ò–ï UUID ARSENTIY")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = client.users.list()
        
        arsentiy_uuid = None
        for user in users["results"]:
            if user["name"] == "Arsentiy":
                arsentiy_uuid = user["id"]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω Arsentiy: {user['name']} (ID: {user['id']})")
                break
        
        if not arsentiy_uuid:
            print("‚ùå Arsentiy –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Notion")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("1. Arsentiy –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Notion")
            print("2. –ò–º—è –Ω–∞–ø–∏—Å–∞–Ω–æ –ø–æ-–¥—Ä—É–≥–æ–º—É")
            print("3. Arsentiy —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç")
            
            print(f"\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for user in users["results"]:
                print(f"  - {user['name']} (ID: {user['id']})")
        
        return arsentiy_uuid
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UUID: {e}")
        return None

def find_arsentiy_tasks_by_uuid(arsentiy_uuid: str):
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á Arsentiy –ø–æ UUID –≤ —Å—Ç–∞—Ç—É—Å–µ To do –∏–ª–∏ In Progress"""
    print(f"\nüîç –ü–û–ò–°–ö –ó–ê–î–ê–ß ARSENTIY –ü–û UUID")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ Arsentiy
        response = client.databases.query(
            database_id=env_vars["tasks_db_id"],
            filter={
                "and": [
                    {
                        "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                        "people": {
                            "contains": arsentiy_uuid
                        }
                    },
                    {
                        "or": [
                            {
                                "property": "–°—Ç–∞—Ç—É—Å",
                                "status": {
                                    "equals": "To do"
                                }
                            },
                            {
                                "property": "–°—Ç–∞—Ç—É—Å",
                                "status": {
                                    "equals": "In Progress"
                                }
                            }
                        ]
                    }
                ]
            },
            page_size=100
        )
        
        tasks = response["results"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á Arsentiy –≤ —Å—Ç–∞—Ç—É—Å–µ To do / In Progress")
        
        if tasks:
            print(f"\nüéØ –ó–ê–î–ê–ß–ò ARSENTIY:")
            for i, task in enumerate(tasks, 1):
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                title = task["properties"]["–ó–∞–¥–∞—á–∞"]["title"][0]["plain_text"] if task["properties"]["–ó–∞–¥–∞—á–∞"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                # –°—Ç–∞—Ç—É—Å
                status = task["properties"]["–°—Ç–∞—Ç—É—Å"]["status"]["name"] if task["properties"]["–°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
                # –£—á–∞—Å—Ç–Ω–∏–∫–∏
                assignees = task["properties"]["–£—á–∞—Å—Ç–Ω–∏–∫–∏"]["people"]
                assignee_names = [person["name"] for person in assignees]
                
                print(f"{i}. {title}")
                print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(assignee_names)}")
                print(f"   –°—Å—ã–ª–∫–∞: {task['url']}")
                print()
        else:
            print("‚ùå –ó–∞–¥–∞—á–∏ Arsentiy –≤ —Å—Ç–∞—Ç—É—Å–µ To do / In Progress –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return tasks
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def find_arsentiy_subtasks_by_uuid(arsentiy_uuid: str):
    """–ü–æ–∏—Å–∫ –ø–æ–¥–∑–∞–¥–∞—á Arsentiy –ø–æ UUID –≤ —Å—Ç–∞—Ç—É—Å–µ To do –∏–ª–∏ In Progress"""
    print(f"\nüîç –ü–û–ò–°–ö –ü–û–î–ó–ê–î–ê–ß ARSENTIY –ü–û UUID")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ Arsentiy
        response = client.databases.query(
            database_id=env_vars["subtasks_db_id"],
            filter={
                "and": [
                    {
                        "property": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                        "people": {
                            "contains": arsentiy_uuid
                        }
                    },
                    {
                        "or": [
                            {
                                "property": " –°—Ç–∞—Ç—É—Å",
                                "status": {
                                    "equals": "To do"
                                }
                            },
                            {
                                "property": " –°—Ç–∞—Ç—É—Å",
                                "status": {
                                    "equals": "In Progress"
                                }
                            }
                        ]
                    }
                ]
            },
            page_size=100
        )
        
        subtasks = response["results"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á Arsentiy –≤ —Å—Ç–∞—Ç—É—Å–µ To do / In Progress")
        
        if subtasks:
            print(f"\nüìù –ü–û–î–ó–ê–î–ê–ß–ò ARSENTIY:")
            for i, subtask in enumerate(subtasks, 1):
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                title = subtask["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"][0]["plain_text"] if subtask["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                # –°—Ç–∞—Ç—É—Å (—Å –ø—Ä–æ–±–µ–ª–æ–º!)
                status = subtask["properties"][" –°—Ç–∞—Ç—É—Å"]["status"]["name"] if subtask["properties"][" –°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
                # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                assignees = subtask["properties"]["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]["people"]
                assignee_names = [person["name"] for person in assignees]
                
                print(f"{i}. {title}")
                print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                print(f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {', '.join(assignee_names)}")
                print(f"   –°—Å—ã–ª–∫–∞: {subtask['url']}")
                print()
        else:
            print("‚ùå –ü–æ–¥–∑–∞–¥–∞—á–∏ Arsentiy –≤ —Å—Ç–∞—Ç—É—Å–µ To do / In Progress –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return subtasks
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–û–ò–°–ö –ó–ê–î–ê–ß ARSENTIY –ü–û UUID")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º UUID Arsentiy
    arsentiy_uuid = get_arsentiy_uuid()
    
    if not arsentiy_uuid:
        print("\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –±–µ–∑ UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–∑–∞–¥–∞—á–∏
    tasks = find_arsentiy_tasks_by_uuid(arsentiy_uuid)
    subtasks = find_arsentiy_subtasks_by_uuid(arsentiy_uuid)
    
    print(f"\nüìä –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê:")
    print(f"   –ó–∞–¥–∞—á–∏ To do / In Progress: {len(tasks)}")
    print(f"   –ü–æ–¥–∑–∞–¥–∞—á–∏ To do / In Progress: {len(subtasks)}")
    
    if not tasks and not subtasks:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. Arsentiy –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á (Backlog, Done)")
        print("3. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")
        print("4. Arsentiy –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç")
    
    print(f"\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main() 