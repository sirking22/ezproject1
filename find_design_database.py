#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ü–û–ò–°–ö –ë–ê–ó–´ –î–ê–ù–ù–´–• –° –ü–û–õ–ï–ú "–î–ò–ó–ê–ô–ù"
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

async def find_design_database():
    """–ù–∞—Ö–æ–¥–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–µ–º '–î–∏–∑–∞–π–Ω'"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"üîç –ü–û–ò–°–ö –ë–ê–ó–´ –° –ü–û–õ–ï–ú '–î–ò–ó–ê–ô–ù'")
    print("=" * 50)
    
    try:
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        search_response = await client.search(
            query="",
            filter={"property": "object", "value": "database"}
        )
        
        databases = search_response.get('results', [])
        print(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(databases)}")
        
        design_databases = []
        
        for db in databases:
            db_id = db['id']
            db_title = db.get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            try:
                db_schema = await client.databases.retrieve(database_id=db_id)
                properties = db_schema.get('properties', {})
                
                # –ò—â–µ–º –ø–æ–ª–µ "–î–∏–∑–∞–π–Ω"
                if "–î–∏–∑–∞–π–Ω" in properties:
                    prop_data = properties["–î–∏–∑–∞–π–Ω"]
                    prop_type = prop_data.get('type', 'unknown')
                    
                    print(f"‚úÖ –ù–ê–ô–î–ï–ù–ê –ë–ê–ó–ê: {db_title}")
                    print(f"   üìã ID: {db_id}")
                    print(f"   üîó –ü–æ–ª–µ '–î–∏–∑–∞–π–Ω': {prop_type}")
                    
                    if prop_type == 'relation':
                        relation_info = prop_data.get('relation', {})
                        target_db = relation_info.get('database_id', 'unknown')
                        print(f"   üéØ –°–≤—è–∑–∞–Ω–∞ —Å –±–∞–∑–æ–π: {target_db}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –±–∞–∑—É
                        try:
                            target_schema = await client.databases.retrieve(database_id=target_db)
                            target_title = target_schema.get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            print(f"   üìä –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑—ã: {target_title}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ
                            target_properties = target_schema.get('properties', {})
                            print(f"   üìã –ü–æ–ª—è –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ:")
                            for prop_name, prop_info in target_properties.items():
                                prop_type = prop_info.get('type', 'unknown')
                                print(f"      ‚Ä¢ {prop_name} ({prop_type})")
                            
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑—ã: {e}")
                    
                    design_databases.append({
                        'id': db_id,
                        'title': db_title,
                        'design_field_type': prop_type
                    })
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã {db_title}: {e}")
                continue
        
        print(f"\nüìä –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê:")
        print(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∑ —Å –ø–æ–ª–µ–º '–î–∏–∑–∞–π–Ω': {len(design_databases)}")
        
        if design_databases:
            print(f"\nüìã –°–ü–ò–°–û–ö –ë–ê–ó:")
            for i, db in enumerate(design_databases, 1):
                print(f"{i}. {db['title']} ({db['id']}) - {db['design_field_type']}")
        
        return design_databases
        
    except Exception as e:
        print(f"‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return []

async def test_formula_on_design_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –Ω–∞ –±–∞–∑–µ —Å –ø–æ–ª–µ–º '–î–∏–∑–∞–π–Ω'"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –ë–ê–ó–ï –° –ü–û–õ–ï–ú '–î–ò–ó–ê–ô–ù'")
    print("=" * 55)
    
    # –ù–∞–π–¥–µ–º –±–∞–∑—É —Å –ø–æ–ª–µ–º "–î–∏–∑–∞–π–Ω"
    design_dbs = await find_design_database()
    
    if not design_dbs:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–∞–∑ —Å –ø–æ–ª–µ–º '–î–∏–∑–∞–π–Ω'")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –±–∞–∑—É
    test_db = design_dbs[0]
    print(f"\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú –ù–ê –ë–ê–ó–ï: {test_db['title']} ({test_db['id']})")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–æ—Ä–º—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_formulas = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π map",
            "formula": 'prop("–î–∏–∑–∞–π–Ω").map(current.prop("–ß–∞—Å—ã"))'
        },
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π filter",
            "formula": 'prop("–î–∏–∑–∞–π–Ω").filter(current.prop("–°—Ç–∞—Ç—É—Å") == "Done")'
        },
        {
            "name": "Map —Å filter",
            "formula": 'prop("–î–∏–∑–∞–π–Ω").filter(current.prop("–°—Ç–∞—Ç—É—Å") == "Done").map(current.prop("–ß–∞—Å—ã"))'
        },
        {
            "name": "–°—É–º–º–∞ —Å map",
            "formula": 'prop("–î–∏–∑–∞–π–Ω").map(current.prop("–ß–∞—Å—ã")).sum()'
        }
    ]
    
    results = []
    for i, test in enumerate(test_formulas, 1):
        print(f"\nüìù –¢–ï–°–¢ {i}: {test['name']}")
        print(f"–§–æ—Ä–º—É–ª–∞: {test['formula']}")
        
        test_field_name = f"–¢–µ—Å—Ç_–î–∏–∑–∞–π–Ω_{i}"
        
        test_property = {
            test_field_name: {
                "type": "formula",
                "formula": {
                    "expression": test['formula']
                }
            }
        }
        
        try:
            await client.databases.update(
                database_id=test_db['id'],
                properties=test_property
            )
            print(f"‚úÖ –£–°–ü–ï–®–ù–û!")
            results.append({"test": test['name'], "status": "success"})
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            await client.databases.update(
                database_id=test_db['id'],
                properties={test_field_name: None}
            )
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            results.append({"test": test['name'], "status": "error", "error": str(e)})
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê –ë–ê–ó–ï –° '–î–ò–ó–ê–ô–ù':")
    successful = [r for r in results if r['status'] == 'success']
    failed = [r for r in results if r['status'] == 'error']
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {len(failed)}")
    
    if successful:
        print(f"\nüéâ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –§–û–†–ú–£–õ–´:")
        for success in successful:
            print(f"   ‚Ä¢ {success['test']}")
    
    if failed:
        print(f"\n‚ùå –ù–ï–†–ê–ë–û–¢–ê–Æ–©–ò–ï –§–û–†–ú–£–õ–´:")
        for fail in failed:
            print(f"   ‚Ä¢ {fail['test']}: {fail['error']}")
    
    return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ü–û–ò–°–ö –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó –° –ü–û–õ–ï–ú '–î–ò–ó–ê–ô–ù'")
    print("=" * 60)
    
    # 1. –ü–æ–∏—Å–∫ –±–∞–∑ —Å –ø–æ–ª–µ–º "–î–∏–∑–∞–π–Ω"
    design_dbs = await find_design_database()
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –±–∞–∑–µ
    if design_dbs:
        results = await test_formula_on_design_database()
        
        print(f"\nüéØ –í–´–í–û–î–´:")
        print("=" * 20)
        
        if any(r['status'] == 'success' for r in results):
            print(f"‚úÖ –°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –†–ê–ë–û–¢–ê–Æ–¢ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–µ!")
            print(f"üîß –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ –≤—ã–±–æ—Ä–µ –±–∞–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            print(f"‚ùå –°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç –¥–∞–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–µ")
            print(f"üîß API –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    else:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–∞–∑ —Å –ø–æ–ª–µ–º '–î–∏–∑–∞–π–Ω'")

if __name__ == "__main__":
    asyncio.run(main()) 