#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Arsentiy —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env_vars():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    token = os.getenv("NOTION_TOKEN")
    tasks_db_id = os.getenv("NOTION_DESIGN_TASKS_DB_ID")
    subtasks_db_id = os.getenv("NOTION_SUBTASKS_DB_ID")
    
    if not token or not tasks_db_id or not subtasks_db_id:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    return {
        "token": token,
        "tasks_db_id": tasks_db_id,
        "subtasks_db_id": subtasks_db_id
    }

def check_tasks_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Tasks Database"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê TASKS DATABASE")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        response = client.databases.query(
            database_id=env_vars["tasks_db_id"],
            page_size=100
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response['results'])} –∑–∞–¥–∞—á")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞—á –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Arsentiy
        arsentiy_found = False
        all_assignees = set()
        
        for i, page in enumerate(response["results"][:10]):
            print(f"\n–ó–∞–¥–∞—á–∞ {i+1}:")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title = page["properties"]["–ó–∞–¥–∞—á–∞"]["title"][0]["plain_text"] if page["properties"]["–ó–∞–¥–∞—á–∞"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
            
            # –°—Ç–∞—Ç—É—Å
            status = page["properties"]["–°—Ç–∞—Ç—É—Å"]["status"]["name"] if page["properties"]["–°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
            print(f"  –°—Ç–∞—Ç—É—Å: {status}")
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏
            assignees = page["properties"]["–£—á–∞—Å—Ç–Ω–∏–∫–∏"]["people"]
            assignee_names = [person["name"] for person in assignees]
            print(f"  –£—á–∞—Å—Ç–Ω–∏–∫–∏: {assignee_names}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            for name in assignee_names:
                all_assignees.add(name)
                if name == "Arsentiy":
                    arsentiy_found = True
                    print(f"  üéØ –ù–ê–ô–î–ï–ù ARSENTIY!")
        
        print(f"\nüë• –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ –ø–µ—Ä–≤—ã—Ö 10 –∑–∞–¥–∞—á–∞—Ö:")
        for assignee in sorted(all_assignees):
            print(f"  - {assignee}")
        
        if arsentiy_found:
            print("\n‚úÖ Arsentiy –Ω–∞–π–¥–µ–Ω –≤ Tasks Database!")
        else:
            print("\n‚ùå Arsentiy –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã—Ö 10 –∑–∞–¥–∞—á–∞—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_subtasks_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Subtasks Database"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê SUBTASKS DATABASE")
    print("=" * 50)
    
    try:
        from notion_client import Client
        
        env_vars = load_env_vars()
        client = Client(auth=env_vars["token"])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
        response = client.databases.query(
            database_id=env_vars["subtasks_db_id"],
            page_size=100
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response['results'])} –ø–æ–¥–∑–∞–¥–∞—á")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–¥–∑–∞–¥–∞—á –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Arsentiy
        arsentiy_found = False
        all_assignees = set()
        
        for i, page in enumerate(response["results"][:10]):
            print(f"\n–ü–æ–¥–∑–∞–¥–∞—á–∞ {i+1}:")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title = page["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"][0]["plain_text"] if page["properties"]["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
            
            # –°—Ç–∞—Ç—É—Å (—Å –ø—Ä–æ–±–µ–ª–æ–º!)
            status = page["properties"][" –°—Ç–∞—Ç—É—Å"]["status"]["name"] if page["properties"][" –°—Ç–∞—Ç—É—Å"]["status"] else "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
            print(f"  –°—Ç–∞—Ç—É—Å: {status}")
            
            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            assignees = page["properties"]["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]["people"]
            assignee_names = [person["name"] for person in assignees]
            print(f"  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_names}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            for name in assignee_names:
                all_assignees.add(name)
                if name == "Arsentiy":
                    arsentiy_found = True
                    print(f"  üéØ –ù–ê–ô–î–ï–ù ARSENTIY!")
        
        print(f"\nüë• –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö:")
        for assignee in sorted(all_assignees):
            print(f"  - {assignee}")
        
        if arsentiy_found:
            print("\n‚úÖ Arsentiy –Ω–∞–π–¥–µ–Ω –≤ Subtasks Database!")
        else:
            print("\n‚ùå Arsentiy –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê ARSENTIY")
    print("=" * 50)
    
    check_tasks_database()
    check_subtasks_database()
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main() 