// Cloudflare Worker: –ü—Ä–æ–∫—Å–∏ –¥–ª—è Notion API + webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
addEventListener('fetch', event => {
    event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {
    const url = new URL(request.url)

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ Notion API (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /v1/)
    if (url.pathname.startsWith('/v1/')) {
        return handleNotionProxy(request);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ webhook –æ—Ç Notion (POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ /v1/)
    if (request.method === 'POST' && !url.pathname.startsWith('/v1/')) {
        return handleWebhook(request);
    }

    return new Response('Method Not Allowed', { status: 405 });
}

async function handleNotionProxy(request) {
    const url = new URL(request.url)
    const notionUrl = `https://api.notion.com${url.pathname}${url.search}`

    console.log(`üîó –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Notion: ${notionUrl}`);
    console.log(`üîó –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: ${request.method}`);
    console.log(`üîó URL –∑–∞–ø—Ä–æ—Å–∞: ${request.url}`);

    // –ü–æ–ª—É—á–∞–µ–º Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const authHeader = request.headers.get('Authorization');
    console.log(`üîó –ü–æ–ª—É—á–µ–Ω Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${authHeader ? authHeader.substring(0, 30) + '...' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);

    // –°–æ–∑–¥–∞–µ–º –ß–ò–°–¢–´–ï –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Notion, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å IP –Ø–Ω–¥–µ–∫—Å–∞
    const headers = new Headers({
        'Authorization': authHeader,
        'Notion-Version': request.headers.get('Notion-Version') || '2022-06-28',
        'Content-Type': request.headers.get('Content-Type') || 'application/json',
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare –∑–∞—â–∏—Ç—ã Notion
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
    });

    console.log(`üîó Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ headers: ${headers.get('Authorization') ? headers.get('Authorization').substring(0, 30) + '...' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    console.log(`üîó Notion-Version –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${headers.get('Notion-Version')}`);
    console.log(`üîó Content-Type –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${headers.get('Content-Type')}`);

    try {
        console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Notion: ${notionUrl}`);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Request –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const newRequest = new Request(notionUrl, {
            method: request.method,
            headers: headers,
            body: (request.method !== 'GET' && request.method !== 'HEAD') ? request.body : null
        });

        const response = await fetch(newRequest);

        console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ –æ—Ç–≤–µ—Ç: ${response.status}`);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç Notion: ${response.status} ${response.statusText}`);

        if (response.status !== 200) {
            const errorText = await response.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ Notion: ${response.status} - ${errorText}`);
            return new Response(errorText, {
                status: response.status,
                headers: response.headers
            });
        }

        const responseBody = await response.text();
        console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç: ${response.status}`);
        return new Response(responseBody, {
            status: response.status,
            headers: response.headers
        });

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: ${error}`);
        return new Response('Proxy Error', { status: 500 });
    }
}

async function handleWebhook(request) {
    console.log('üöÄ –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ NOTION!');
    console.log('üìä URL –∑–∞–ø—Ä–æ—Å–∞:', request.url);
    console.log('üìä –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', request.method);
    console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(request.headers.entries()));

    try {
        const data = await request.json();
        console.log('üìä –¢–ï–õ–û WEBHOOK:', JSON.stringify(data, null, 2));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Notion
        if (data.type === 'url_verification') {
            console.log('üîê –ü—Ä–æ–π–¥–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Notion:', data.challenge);
            return new Response(JSON.stringify({ challenge: data.challenge }), {
                headers: { 'Content-Type': 'application/json' }
            });
        }

        // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ webhook –≤ –Ø–Ω–¥–µ–∫—Å.–§—É–Ω–∫—Ü–∏—é
        const yandexUrl = 'https://functions.yandexcloud.net/d4e3265b135595i9nec6'; // notion-updates (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)

        console.log('üîó –ü–µ—Ä–µ—Å—ã–ª–∫–∞ webhook –≤ –Ø–Ω–¥–µ–∫—Å.–ö–ª–∞—É–¥...');
        console.log('üìä –î–∞–Ω–Ω—ã–µ webhook:', JSON.stringify(data, null, 2));
        console.log('üìä –¢–∏–ø —Å–æ–±—ã—Ç–∏—è:', data.type);

        const yandexResponse = await fetch(yandexUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        if (!yandexResponse.ok) {
            const errorText = await yandexResponse.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–ª–∞—É–¥: ${yandexResponse.status}`, errorText);
        } else {
            console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω.');
        }

        return new Response(JSON.stringify({ success: true }), {
            headers: { 'Content-Type': 'application/json' }
        });

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ:', error);
        return new Response('Internal Server Error', { status: 500 });
    }
}
