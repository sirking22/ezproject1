#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–°–¢–ï–ú–´
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

async def debug_system_issue():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    task_id = "21dace03-d9ff-8191-bcb0-ce64de65980e"
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        task = await client.pages.retrieve(page_id=task_id)
        task_title = task['properties'].get('–ó–∞–¥–∞—á–∞', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        print(f"üìã –ó–∞–¥–∞—á–∞: {task_title}")
        print(f"üÜî ID: {task_id}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —Å –≥–∞–π–¥–∞–º–∏
        guides_relation = task['properties'].get('üì¨ –ì–∞–π–¥—ã', {}).get('relation', [])
        print(f"üìö –°–≤—è–∑–∞–Ω–æ —Å –≥–∞–π–¥–∞–º–∏: {len(guides_relation)}")
        
        for i, guide in enumerate(guides_relation, 1):
            guide_id = guide.get('id', 'N/A')
            print(f"{i}. ID: {guide_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ–±—ä–µ–∫—Ç
            try:
                obj = await client.pages.retrieve(page_id=guide_id)
                parent_type = obj.get('parent', {}).get('type', '')
                parent_id = obj.get('parent', {}).get('database_id', '')
                
                if parent_type == 'database_id':
                    if parent_id == "47c60868-58d4-42eb-aece-b4fad1b23ba3":  # –ì–∞–π–¥—ã
                        obj_type = "–ì–ê–ô–î"
                    elif parent_id == "47c6086858d442ebaeceb4fad1b23ba3":  # –ß–µ–∫–ª–∏—Å—Ç—ã
                        obj_type = "–ü–û–î–ó–ê–î–ê–ß–ê"
                    else:
                        obj_type = f"–î–†–£–ì–û–ï ({parent_id})"
                else:
                    obj_type = "–ù–ï –ë–ê–ó–ê –î–ê–ù–ù–´–•"
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                name_prop = obj.get('properties', {}).get('Name', {})
                if name_prop and name_prop.get('type') == 'title':
                    title_array = name_prop.get('title', [])
                    if title_array:
                        title = title_array[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    else:
                        title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                else:
                    title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                
                print(f"   –¢–∏–ø: {obj_type}")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                print()
                
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {e}")
                print()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–ª–µ
        print(f"üîç –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–î–ó–ê–î–ê–ß–ò –í –ë–ê–ó–ï –ß–ï–ö–õ–ò–°–¢–û–í:")
        
        subtasks_query = await client.databases.query(
            database_id="47c6086858d442ebaeceb4fad1b23ba3",  # –ß–µ–∫–ª–∏—Å—Ç—ã
            filter={
                "property": "–î–∏–∑–∞–π–Ω –∑–∞–¥–∞—á–∏",
                "relation": {
                    "contains": task_id
                }
            }
        )
        
        task_subtasks = subtasks_query.get('results', [])
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(task_subtasks)}")
        
        for i, subtask in enumerate(task_subtasks, 1):
            title = subtask['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"{i}. {title}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    asyncio.run(debug_system_issue()) 