#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ subprocess
"""

import asyncio
import json
import logging
from typing import Dict, Any
from minimal_mcp_server import MinimalMCPServer
from mcp.server import NotificationOptions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def test_mcp_directly():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("üß™ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ MCP –°–ï–†–í–ï–†–ê (v0.9.1)")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞...")
        server = MinimalMCPServer()
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω: {server.server.name}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        tools = server.tools
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
        
        for tool in tools:
            print(f"   - {tool.name}: {tool.description}")
            print(f"     –°—Ö–µ–º–∞: {list(tool.inputSchema.get('properties', {}).keys())}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º capabilities
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ capabilities...")
        capabilities = server.server.get_capabilities(
            notification_options=NotificationOptions(),
            experimental_capabilities={},
        )
        print(f"‚úÖ Capabilities –ø–æ–ª—É—á–µ–Ω—ã: {capabilities}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéâ MCP –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ subprocess/stdio, –∞ –Ω–µ –≤ –ª–æ–≥–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_mcp_directly()) 