#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤—É–º—è –ø–æ–ª—è–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ Notion
"""

import json
import os
import sys
from notion_client import Client
from typing import Dict, List, Set

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    notion_token = os.getenv("NOTION_TOKEN")
    if not notion_token:
        raise ValueError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    return notion_token

class AssigneeFieldAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.notion_token = load_env()
        self.client = Client(auth=self.notion_token)
        
        # ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.tasks_db_id = "d09df250ce7e4e0d9fbe4e036d320def"
        self.subtasks_db_id = "9c5f4269d61449b6a7485579a3c21da3"
        self.teams_db_id = "1d6ace03d9ff805787b9ec31f5b4dde7"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.tasks_analysis = {}
        self.subtasks_analysis = {}
        self.teams_analysis = {}
    
    def analyze_tasks_assignee_fields(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö"""
        print("üîç –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô –í –ó–ê–î–ê–ß–ê–•")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            response = self.client.databases.query(
                database_id=self.tasks_db_id,
                page_size=10
            )
            
            tasks = response["results"]
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
            
            for i, task in enumerate(tasks, 1):
                print(f"\nüìã –ó–ê–î–ê–ß–ê {i}:")
                
                properties = task.get("properties", {})
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                title_prop = properties.get("–ó–∞–¥–∞—á–∞", {})
                if title_prop.get("title"):
                    title = title_prop["title"][0]["plain_text"]
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                
                # –ü–æ–ª–µ "–£—á–∞—Å—Ç–Ω–∏–∫–∏" (people)
                participants_prop = properties.get("–£—á–∞—Å—Ç–Ω–∏–∫–∏", {})
                print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (people):")
                if participants_prop.get("people"):
                    for person in participants_prop["people"]:
                        print(f"  - {person.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {person.get('id')})")
                        print(f"    Email: {person.get('person', {}).get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                else:
                    print("  –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                
                # –ü–æ–ª–µ "–£—á–∞—Å—Ç–Ω–∏–∫ (—Å—Ç–∞—Ç–∞)" (relation)
                stats_prop = properties.get("–£—á–∞—Å—Ç–Ω–∏–∫ (—Å—Ç–∞—Ç–∞)", {})
                print(f"üìä –£—á–∞—Å—Ç–Ω–∏–∫ (—Å—Ç–∞—Ç–∞) (relation):")
                if stats_prop.get("relation"):
                    for relation in stats_prop["relation"]:
                        print(f"  - ID: {relation.get('id')}")
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                        try:
                            related_page = self.client.pages.retrieve(relation["id"])
                            related_props = related_page.get("properties", {})
                            related_name = related_props.get("Name", {})
                            if related_name.get("title"):
                                name = related_name["title"][0]["plain_text"]
                                print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                        except Exception as e:
                            print(f"    –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
                else:
                    print("  –ù–µ—Ç —Å–≤—è–∑–µ–π")
                
                print("-" * 40)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á: {e}")
    
    def analyze_subtasks_assignee_fields(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô –í –ü–û–î–ó–ê–î–ê–ß–ê–•")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            response = self.client.databases.query(
                database_id=self.subtasks_db_id,
                page_size=10
            )
            
            subtasks = response["results"]
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(subtasks)}")
            
            for i, subtask in enumerate(subtasks, 1):
                print(f"\nüìã –ü–û–î–ó–ê–î–ê–ß–ê {i}:")
                
                properties = subtask.get("properties", {})
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                title_prop = properties.get("–ü–æ–¥–∑–∞–¥–∞—á–∏", {})
                if title_prop.get("title"):
                    title = title_prop["title"][0]["plain_text"]
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                
                # –ü–æ–ª–µ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" (people)
                assignee_prop = properties.get("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", {})
                print(f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (people):")
                if assignee_prop.get("people"):
                    for person in assignee_prop["people"]:
                        print(f"  - {person.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {person.get('id')})")
                        print(f"    Email: {person.get('person', {}).get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                else:
                    print("  –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
                
                # –ü–æ–ª–µ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å—Ç–∞—Ç–∞)" (relation)
                stats_prop = properties.get("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å—Ç–∞—Ç–∞)", {})
                print(f"üìä –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å—Ç–∞—Ç–∞) (relation):")
                if stats_prop.get("relation"):
                    for relation in stats_prop["relation"]:
                        print(f"  - ID: {relation.get('id')}")
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                        try:
                            related_page = self.client.pages.retrieve(relation["id"])
                            related_props = related_page.get("properties", {})
                            related_name = related_props.get("Name", {})
                            if related_name.get("title"):
                                name = related_name["title"][0]["plain_text"]
                                print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                        except Exception as e:
                            print(f"    –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
                else:
                    print("  –ù–µ—Ç —Å–≤—è–∑–µ–π")
                
                print("-" * 40)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∑–∞–¥–∞—á: {e}")
    
    def analyze_teams_database(self):
        """–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã Teams"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ TEAMS")
        print("=" * 50)
        
        try:
            response = self.client.databases.query(
                database_id=self.teams_db_id,
                page_size=100
            )
            
            teams = response["results"]
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ Teams: {len(teams)}")
            
            print("\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï –ë–ê–ó–´ TEAMS:")
            for i, team in enumerate(teams, 1):
                properties = team.get("properties", {})
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                name_prop = properties.get("Name", {})
                if name_prop.get("title"):
                    name = name_prop["title"][0]["plain_text"]
                    print(f"{i}. {name}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    description_prop = properties.get("–û–ø–∏—Å–∞–Ω–∏–µ", {})
                    if description_prop.get("rich_text"):
                        description = description_prop["rich_text"][0]["plain_text"]
                        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                    
                    manager_prop = properties.get("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", {})
                    if manager_prop.get("rich_text"):
                        manager = manager_prop["rich_text"][0]["plain_text"]
                        print(f"   –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {manager}")
            
            print("\nüö® –í–´–í–û–î:")
            print("–ë–∞–∑–∞ Teams —Å–æ–¥–µ—Ä–∂–∏—Ç –û–¢–î–ï–õ–´, –∞ –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!")
            print("–≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–ª–µ–º '—Å—Ç–∞—Ç–∞' - –æ–Ω–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—ã, –∞ –Ω–µ –Ω–∞ –ª—é–¥–µ–π.")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Teams: {e}")
    
    def find_arsentiy_tasks(self):
        """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ê—Ä—Å–µ–Ω—Ç–∏—é"""
        print("\nüîç –ü–û–ò–°–ö –ó–ê–î–ê–ß –ê–†–°–ï–ù–¢–ò–Æ")
        print("=" * 50)
        
        try:
            # –ü–æ–∏—Å–∫ –≤ –∑–∞–¥–∞—á–∞—Ö
            tasks_response = self.client.databases.query(
                database_id=self.tasks_db_id,
                filter={
                    "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                    "people": {
                        "contains": "Arsentiy"
                    }
                }
            )
            
            tasks = tasks_response["results"]
            print(f"üìä –ó–∞–¥–∞—á —Å –ê—Ä—Å–µ–Ω—Ç–∏–µ–º: {len(tasks)}")
            
            for i, task in enumerate(tasks[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                properties = task.get("properties", {})
                
                title_prop = properties.get("–ó–∞–¥–∞—á–∞", {})
                if title_prop.get("title"):
                    title = title_prop["title"][0]["plain_text"]
                    print(f"{i}. {title}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ —Å—Ç–∞—Ç–∞
                    stats_prop = properties.get("–£—á–∞—Å—Ç–Ω–∏–∫ (—Å—Ç–∞—Ç–∞)", {})
                    if stats_prop.get("relation"):
                        print(f"   –°—Ç–∞—Ç–∞: –ï—Å—Ç—å —Å–≤—è–∑—å —Å {len(stats_prop['relation'])} –∑–∞–ø–∏—Å—å—é")
                    else:
                        print(f"   –°—Ç–∞—Ç–∞: –ù–µ—Ç —Å–≤—è–∑–∏")
            
            # –ü–æ–∏—Å–∫ –≤ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö
            subtasks_response = self.client.databases.query(
                database_id=self.subtasks_db_id,
                filter={
                    "property": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                    "people": {
                        "contains": "Arsentiy"
                    }
                }
            )
            
            subtasks = subtasks_response["results"]
            print(f"\nüìä –ü–æ–¥–∑–∞–¥–∞—á —Å –ê—Ä—Å–µ–Ω—Ç–∏–µ–º: {len(subtasks)}")
            
            for i, subtask in enumerate(subtasks[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                properties = subtask.get("properties", {})
                
                title_prop = properties.get("–ü–æ–¥–∑–∞–¥–∞—á–∏", {})
                if title_prop.get("title"):
                    title = title_prop["title"][0]["plain_text"]
                    print(f"{i}. {title}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ —Å—Ç–∞—Ç–∞
                    stats_prop = properties.get("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å—Ç–∞—Ç–∞)", {})
                    if stats_prop.get("relation"):
                        print(f"   –°—Ç–∞—Ç–∞: –ï—Å—Ç—å —Å–≤—è–∑—å —Å {len(stats_prop['relation'])} –∑–∞–ø–∏—Å—å—é")
                    else:
                        print(f"   –°—Ç–∞—Ç–∞: –ù–µ—Ç —Å–≤—è–∑–∏")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –ê—Ä—Å–µ–Ω—Ç–∏—é: {e}")
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 50)
        
        print("1. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
        print("   - –ü–æ–ª–µ '—Å—Ç–∞—Ç–∞' —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –±–∞–∑—É Teams (–æ—Ç–¥–µ–ª—ã), –∞ –Ω–µ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print("   - –≠—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        print("\n2. üîß –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ people –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        print("   - –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ relation '—Å—Ç–∞—Ç–∞' –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        print("   - –°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π registry –¥–ª—è –≥–æ—Å—Ç–µ–π")
        
        print("\n3. üéØ –î–û–õ–ì–û–°–†–û–ß–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("   - –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –±–∞–∑—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ Employees")
        print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ '—Å—Ç–∞—Ç–∞' –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print("   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é people ‚Üí relation")
        print("   - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Å—Ç–µ–π –≤ –ø–æ–ª–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print("\n4. üìä –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
        print("   –ù–µ–¥–µ–ª—è 1: –°–æ–∑–¥–∞—Ç—å Employees –±–∞–∑—É, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—è")
        print("   –ù–µ–¥–µ–ª—è 2: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
        print("   –ù–µ–¥–µ–ª—è 3: –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Å—Ç–µ–π, –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã")
        print("   –ù–µ–¥–µ–ª—è 4: –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –î–í–£–ú–Ø –ü–û–õ–Ø–ú–ò –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô")
    print("=" * 60)
    
    analyzer = AssigneeFieldAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã
    analyzer.analyze_tasks_assignee_fields()
    analyzer.analyze_subtasks_assignee_fields()
    analyzer.analyze_teams_database()
    analyzer.find_arsentiy_tasks()
    analyzer.generate_recommendations()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main() 