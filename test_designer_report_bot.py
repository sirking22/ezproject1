"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á—ë—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion
"""

import os
import sys
import logging
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.designer_report_service import service, WorkReport
from config.designer_bot_config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    if not config.validate():
        print("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print(f"üìã –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  - –ó–∞–¥–∞—á–∏: {config.notion.tasks_database_id}")
    print(f"  - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {config.notion.materials_database_id}")
    print(f"  - –ü—Ä–æ–µ–∫—Ç—ã: {config.notion.projects_database_id}")
    
    return True

def test_quick_report_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç—á—ë—Ç–æ–≤...")
    
    test_cases = [
        "–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 - –≤–µ—Ä—Å—Ç–∫–∞ 2 —á–∞—Å–∞",
        "–ë—Ä–µ–Ω–¥–∏–Ω–≥ –ª–æ–≥–æ—Ç–∏–ø–∞ 3.5 —á–∞—Å–∞",
        "–î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞ - –∞–¥–∞–ø—Ç–∏–≤–∫–∞ 1.5 —á–∞—Å–∞",
        "RMP04 –≤–µ—Ä—Å—Ç–∫–∞ 2—á",
        "–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 - –≤–µ—Ä—Å—Ç–∫–∞ 2 —á–∞—Å–∞ + –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞"
    ]
    
    for i, text in enumerate(test_cases, 1):
        print(f"\n{i}. –¢–µ—Å—Ç: '{text}'")
        
        report = service.parse_quick_report(text)
        
        if report:
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:")
            print(f"   –ü—Ä–æ–µ–∫—Ç: {report.project_name}")
            print(f"   –ó–∞–¥–∞—á–∞: {report.task_name}")
            print(f"   –í—Ä–µ–º—è: {report.time_spent_hours} —á")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {report.work_description}")
        else:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
    
    return True

def test_report_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤"""
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤...")
    
    # –í–∞–ª–∏–¥–Ω—ã–π –æ—Ç—á—ë—Ç
    valid_report = WorkReport(
        designer_name="–ê—Ä—Å–µ–Ω–∏–π",
        project_name="–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04",
        task_name="–í–µ—Ä—Å—Ç–∫–∞",
        work_description="–°–æ–∑–¥–∞–ª –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å—Ç–∫—É",
        time_spent_hours=2.0
    )
    
    is_valid, error_msg = service.validate_report(valid_report)
    print(f"–í–∞–ª–∏–¥–Ω—ã–π –æ—Ç—á—ë—Ç: {'‚úÖ' if is_valid else '‚ùå'} {error_msg}")
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç—á—ë—Ç
    invalid_report = WorkReport(
        designer_name="",
        project_name="",
        task_name="",
        work_description="",
        time_spent_hours=0
    )
    
    is_valid, error_msg = service.validate_report(invalid_report)
    print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç—á—ë—Ç: {'‚úÖ' if is_valid else '‚ùå'} {error_msg}")
    
    return True

def test_notion_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion...")
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
        projects = service.get_active_projects()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ({len(projects)}):")
        for project in projects[:5]:
            print(f"   - {project}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if projects:
            tasks = service.get_tasks_for_project(projects[0])
            print(f"‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{projects[0]}' ({len(tasks)}):")
            for task in tasks[:3]:
                print(f"   - {task}")
        
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion: {e}")
        return False

def test_link_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫...")
    
    test_texts = [
        "–°–æ–∑–¥–∞–ª –º–∞–∫–µ—Ç –≤ Figma: https://figma.com/file/abc123",
        "–ó–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª –Ω–∞ Google Drive: https://drive.google.com/file/d/xyz",
        "–°–æ—Ö—Ä–∞–Ω–∏–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: https://disk.yandex.ru/d/123",
        "–î–æ–±–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: image.jpg –∏ –≤–∏–¥–µ–æ: video.mp4",
        "–¢–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫"
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n{i}. –¢–µ–∫—Å—Ç: '{text}'")
        
        links = service.extract_links_from_text(text)
        materials = service.extract_materials_from_text(text)
        
        print(f"   –°—Å—ã–ª–∫–∏: {links}")
        print(f"   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {materials}")
    
    return True

def test_report_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á—ë—Ç–∞"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á—ë—Ç–∞...")
    
    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    report = WorkReport(
        designer_name="–ê—Ä—Å–µ–Ω–∏–π",
        project_name="–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04",
        task_name="–í–µ—Ä—Å—Ç–∫–∞",
        work_description="–°–æ–∑–¥–∞–ª –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å—Ç–∫—É –≤ Figma: https://figma.com/file/abc123",
        time_spent_hours=2.0
    )
    
    print(f"üìã –û—Ç—á—ë—Ç:")
    print(f"   –î–∏–∑–∞–π–Ω–µ—Ä: {report.designer_name}")
    print(f"   –ü—Ä–æ–µ–∫—Ç: {report.project_name}")
    print(f"   –ó–∞–¥–∞—á–∞: {report.task_name}")
    print(f"   –í—Ä–µ–º—è: {report.time_spent_hours} —á")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {report.work_description}")
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—á—ë—Ç
    success, message = service.process_report(report)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'‚úÖ' if success else '‚ùå'} {message}")
    
    return success

def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –û–¢–ß–Å–¢–û–í –î–ò–ó–ê–ô–ù–ï–†–û–í")
    print("=" * 50)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ü–∞—Ä—Å–∏–Ω–≥ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç—á—ë—Ç–æ–≤", test_quick_report_parsing),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤", test_report_validation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion", test_notion_integration),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫", test_link_extraction),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–æ–≤", test_report_processing)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name} {'='*20}")
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï")
        return False

def demo_quick_reports():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–´–°–¢–†–´–• –û–¢–ß–Å–¢–û–í")
    print("=" * 40)
    
    examples = [
        "–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 - –≤–µ—Ä—Å—Ç–∫–∞ 2 —á–∞—Å–∞",
        "–ë—Ä–µ–Ω–¥–∏–Ω–≥ –ª–æ–≥–æ—Ç–∏–ø–∞ 3.5 —á–∞—Å–∞",
        "–î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞ - –∞–¥–∞–ø—Ç–∏–≤–∫–∞ 1.5 —á–∞—Å–∞",
        "RMP04 –≤–µ—Ä—Å—Ç–∫–∞ 2—á",
        "–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 - –≤–µ—Ä—Å—Ç–∫–∞ 2 —á–∞—Å–∞ + –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –º–∞–∫–µ—Ç—É"
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. –ü—Ä–∏–º–µ—Ä: '{example}'")
        
        report = service.parse_quick_report(example)
        
        if report:
            print(f"   üìã –ü—Ä–æ–µ–∫—Ç: {report.project_name}")
            print(f"   üìù –ó–∞–¥–∞—á–∞: {report.task_name}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {report.time_spent_hours} —á")
            print(f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {report.work_description}")
            
            # –ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            if report.work_description:
                links = service.extract_links_from_text(report.work_description)
                materials = service.extract_materials_from_text(report.work_description)
                
                if links:
                    print(f"   üîó –°—Å—ã–ª–∫–∏: {links}")
                if materials:
                    print(f"   üìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {materials}")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ["NOTION_TOKEN", "TELEGRAM_BOT_TOKEN"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    success = run_all_tests()
    
    if success:
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        demo_quick_reports()
        
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python designer_report_bot.py")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º") 