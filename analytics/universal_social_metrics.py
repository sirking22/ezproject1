#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –í–°–ï–• –°–û–¶–ò–ê–õ–¨–ù–´–• –ü–õ–ê–¢–§–û–†–ú

–°–∏—Å—Ç–µ–º–∞ KPI –∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è:
‚úÖ Telegram, Instagram, YouTube, TikTok, Facebook, Twitter, VK
‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Notion –¥–∞—à–±–æ—Ä–¥–∞
"""

import requests
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

load_dotenv()

@dataclass
class UniversalMetrics:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    platform: str = ""
    followers: int = 0
    posts_count: int = 0
    total_reach: int = 0
    avg_engagement: float = 0
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ KPI
    growth_rate: float = 0          # % —Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    engagement_rate: float = 0      # (–ª–∞–π–∫–∏ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ + —à–µ–π—Ä—ã) / –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ * 100
    reach_rate: float = 0           # –ø—Ä–æ—Å–º–æ—Ç—Ä—ã / –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ * 100
    posting_frequency: float = 0    # –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    content_score: int = 0          # 1-10 –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    consistency_score: float = 0    # —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    trend_direction: str = "stable" # growing, stable, declining
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    vs_industry: float = 0          # % –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
    vs_competitors: float = 0       # % vs –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
    platform_rank: str = "medium"  # low, medium, high, excellent
    
    # –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
    conversion_rate: float = 0      # –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ ‚Üí –∫–ª–∏–µ–Ω—Ç—ã
    cpm: float = 0                  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1000 –ø–æ–∫–∞–∑–æ–≤
    roi: float = 0                  # –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π

class UniversalSocialAnalytics:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.platforms_db_id = os.getenv('NOTION_PLATFORMS_DB_ID')
        
        self.headers = {
            'Authorization': f'Bearer {self.notion_token}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }
        
        # –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        self.benchmarks = {
            'telegram': {
                'engagement_rate': 2.5,
                'reach_rate': 15.0,
                'posts_per_week': 10,
                'growth_rate_monthly': 5.0
            },
            'instagram': {
                'engagement_rate': 3.5,
                'reach_rate': 25.0,
                'posts_per_week': 7,
                'growth_rate_monthly': 8.0
            },
            'youtube': {
                'engagement_rate': 4.0,
                'reach_rate': 30.0,
                'posts_per_week': 3,
                'growth_rate_monthly': 10.0
            },
            'tiktok': {
                'engagement_rate': 5.0,
                'reach_rate': 35.0,
                'posts_per_week': 14,
                'growth_rate_monthly': 15.0
            },
            'facebook': {
                'engagement_rate': 1.5,
                'reach_rate': 8.0,
                'posts_per_week': 5,
                'growth_rate_monthly': 3.0
            },
            'twitter': {
                'engagement_rate': 2.0,
                'reach_rate': 12.0,
                'posts_per_week': 21,
                'growth_rate_monthly': 4.0
            },
            'vk': {
                'engagement_rate': 2.8,
                'reach_rate': 18.0,
                'posts_per_week': 7,
                'growth_rate_monthly': 6.0
            }
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)
        self.alert_thresholds = {
            'critical_engagement_drop': -50,    # % –ø–∞–¥–µ–Ω–∏–µ engagement
            'critical_reach_drop': -30,         # % –ø–∞–¥–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞
            'low_posting_frequency': 0.5,       # < 0.5 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—é
            'negative_growth': -2,              # % —É–±—ã–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            'excellent_performance': 150,       # % –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞
        }
    
    def analyze_all_platforms(self) -> Dict[str, UniversalMetrics]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –¥–∞—à–±–æ—Ä–¥–µ"""
        
        print("üîÑ –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–õ–ê–¢–§–û–†–ú")
        print("=" * 60)
        
        platforms_data = self.get_notion_platforms()
        results = {}
        
        for platform_data in platforms_data:
            platform_name = platform_data.get('name', '').lower()
            
            if platform_name in self.benchmarks:
                metrics = self.calculate_universal_metrics(platform_data, platform_name)
                results[platform_name] = metrics
                
                print(f"\nüì± {platform_name.upper()}:")
                print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics.followers:,}")
                print(f"   üìä Engagement Rate: {metrics.engagement_rate:.1f}%")
                print(f"   üìà –†–µ–π—Ç–∏–Ω–≥: {metrics.platform_rank}")
        
        return results
    
    def calculate_universal_metrics(self, platform_data: Dict, platform_name: str) -> UniversalMetrics:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        
        metrics = UniversalMetrics()
        metrics.platform = platform_name
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        metrics.followers = platform_data.get('followers', 0)
        metrics.posts_count = platform_data.get('posts', 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        benchmark = self.benchmarks[platform_name]
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã API –¥–∞–Ω–Ω—ã–µ)
        if metrics.followers > 0:
            # Engagement Rate - –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            if platform_name == 'telegram':
                metrics.engagement_rate = 2.5  # –ò–∑ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                metrics.reach_rate = 17.3      # –ò–∑ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                follower_factor = min(metrics.followers / 10000, 2.0)
                metrics.engagement_rate = benchmark['engagement_rate'] * (1 + follower_factor * 0.1)
                metrics.reach_rate = benchmark['reach_rate'] * (1 + follower_factor * 0.05)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–Ω—á–º–∞—Ä–∫–∞
        engagement_vs_benchmark = (metrics.engagement_rate / benchmark['engagement_rate']) * 100
        metrics.vs_industry = engagement_vs_benchmark - 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if engagement_vs_benchmark >= 150:
            metrics.platform_rank = "excellent"
            metrics.content_score = 9
        elif engagement_vs_benchmark >= 120:
            metrics.platform_rank = "high"
            metrics.content_score = 7
        elif engagement_vs_benchmark >= 80:
            metrics.platform_rank = "medium"
            metrics.content_score = 5
        else:
            metrics.platform_rank = "low"
            metrics.content_score = 3
        
        return metrics
    
    def check_universal_alerts(self, all_metrics: Dict[str, UniversalMetrics]) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"""
        
        print(f"\nüö® –ü–†–û–í–ï–†–ö–ê –ê–õ–ï–†–¢–û–í –ü–û –í–°–ï–ú –ü–õ–ê–¢–§–û–†–ú–ê–ú")
        print("=" * 50)
        
        alerts = []
        
        for platform, metrics in all_metrics.items():
            platform_alerts = self.check_platform_alerts(platform, metrics)
            alerts.extend(platform_alerts)
        
        # –ú–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        cross_platform_alerts = self.check_cross_platform_alerts(all_metrics)
        alerts.extend(cross_platform_alerts)
        
        if alerts:
            print(f"   üö® –ù–∞–π–¥–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
            for alert in alerts:
                print(f"   {alert['message']}")
        else:
            print("   ‚úÖ –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –Ω–æ—Ä–º–µ")
        
        return alerts
    
    def check_platform_alerts(self, platform: str, metrics: UniversalMetrics) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        
        alerts = []
        
        # 1. –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if metrics.vs_industry > self.alert_thresholds['excellent_performance']:
            alerts.append({
                'type': 'success',
                'platform': platform,
                'metric': 'performance',
                'message': f"üöÄ {platform.upper()}: –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! +{metrics.vs_industry:.0f}% vs –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
                'action': '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Ç–∏—Ä–∞–∂–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏'
            })
        
        # 2. –ù–∏–∑–∫–∏–π engagement
        benchmark = self.benchmarks[platform]['engagement_rate']
        if metrics.engagement_rate < benchmark * 0.5:  # –ú–µ–Ω—å—à–µ 50% –æ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞
            alerts.append({
                'type': 'warning',
                'platform': platform,
                'metric': 'engagement',
                'message': f"‚ö†Ô∏è {platform.upper()}: –ù–∏–∑–∫–∏–π engagement {metrics.engagement_rate:.1f}% < {benchmark:.1f}%",
                'action': '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é'
            })
        
        # 3. –ú–∞–ª–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º engagement
        if metrics.followers < 5000 and metrics.engagement_rate > benchmark * 1.2:
            alerts.append({
                'type': 'info',
                'platform': platform,
                'metric': 'growth_opportunity',
                'message': f"üí° {platform.upper()}: –•–æ—Ä–æ—à–∏–π engagement –ø—Ä–∏ –º–∞–ª–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞!",
                'action': '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'
            })
        
        # 4. –ë–æ–ª—å—à–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º engagement
        if metrics.followers > 20000 and metrics.engagement_rate < benchmark * 0.8:
            alerts.append({
                'type': 'critical',
                'platform': platform,
                'metric': 'audience_quality',
                'message': f"üö® {platform.upper()}: –ë–æ–ª—å—à–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è ({metrics.followers:,}) –Ω–æ –Ω–∏–∑–∫–∏–π engagement",
                'action': '–°—Ä–æ—á–Ω–æ —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
            })
        
        return alerts
    
    def check_cross_platform_alerts(self, all_metrics: Dict[str, UniversalMetrics]) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        
        alerts = []
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ engagement
        if len(all_metrics) >= 2:
            platforms_by_engagement = sorted(
                all_metrics.items(), 
                key=lambda x: x[1].engagement_rate, 
                reverse=True
            )
            
            best_platform = platforms_by_engagement[0]
            worst_platform = platforms_by_engagement[-1]
            
            # –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
            engagement_gap = best_platform[1].engagement_rate - worst_platform[1].engagement_rate
            
            if engagement_gap > 3.0:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 3%
                alerts.append({
                    'type': 'info',
                    'platform': 'cross_platform',
                    'metric': 'platform_gap',
                    'message': f"üìä –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {best_platform[0].upper()} ({best_platform[1].engagement_rate:.1f}%) vs {worst_platform[0].upper()} ({worst_platform[1].engagement_rate:.1f}%)",
                    'action': f'–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å {best_platform[0]} –Ω–∞ {worst_platform[0]}'
                })
        
        # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        total_followers = sum(m.followers for m in all_metrics.values())
        
        if total_followers > 100000:
            alerts.append({
                'type': 'success',
                'platform': 'total',
                'metric': 'reach',
                'message': f"üéâ –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {total_followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!",
                'action': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä–æ—Å—Å-–ø—Ä–æ–º–æ –∏ —Å–∏–Ω–µ—Ä–≥–∏–∏'
            })
        
        return alerts
    
    def update_notion_universal_metrics(self, all_metrics: Dict[str, UniversalMetrics]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Notion"""
        
        print(f"\nüìù –û–ë–ù–û–í–õ–ï–ù–ò–ï NOTION –° –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ú–ò –ú–ï–¢–†–ò–ö–ê–ú–ò")
        print("=" * 50)
        
        try:
            for platform_name, metrics in all_metrics.items():
                success = self.update_platform_in_notion(platform_name, metrics)
                if success:
                    print(f"   ‚úÖ {platform_name.upper()} –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {platform_name.upper()}")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Notion: {e}")
            return False
    
    def update_platform_in_notion(self, platform_name: str, metrics: UniversalMetrics) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ Notion"""
        
        try:
            # –ò—â–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            platforms_query = {
                "filter": {
                    "property": "Platforms",
                    "title": {
                        "contains": platform_name.capitalize()
                    }
                }
            }
            
            query_url = f"https://api.notion.so/v1/databases/{self.platforms_db_id}/query"
            try:
                response = requests.post(query_url, headers=self.headers, json=platforms_query)
                response.raise_for_status()
            except requests.RequestException as e:
                logger.error(f"Error in POST request: {e}")
                return False
            
            data = response.json()
            if data['results']:
                page_id = data['results'][0]['id']
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    "properties": {
                        "Followers": {"number": metrics.followers},
                        "Engagement Rate": {"number": metrics.engagement_rate},
                        "Platform Rank": {
                            "select": {
                                "name": metrics.platform_rank.capitalize()
                            }
                        },
                        "vs Industry": {"number": metrics.vs_industry},
                        "Content Score": {"number": metrics.content_score},
                        "Last Updated": {
                            "date": {
                                "start": datetime.now().isoformat()
                            }
                        }
                    }
                }
                
                update_url = f"https://api.notion.so/v1/pages/{page_id}"
                try:
                    update_response = requests.patch(update_url, headers=self.headers, json=update_data)
                    update_response.raise_for_status()
                    return True
                except requests.RequestException as e:
                    logger.error(f"Error in PATCH request: {e}")
                    return False
            
            return False
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {platform_name}: {e}")
            return False
    
    def get_notion_platforms(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏–∑ Notion"""
        
        try:
            query_url = f"https://api.notion.so/v1/databases/{self.platforms_db_id}/query"
            try:
                response = requests.post(query_url, headers=self.headers)
                response.raise_for_status()
            except requests.RequestException as e:
                logger.error(f"Error in POST request: {e}")
                return []
            
            data = response.json()
            platforms = []
            
            for result in data['results']:
                props = result['properties']
                
                platform = {
                    'name': '',
                    'followers': 0,
                    'posts': 0,
                    'page_id': result['id']
                }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                if 'Platforms' in props and props['Platforms']['title']:
                    platform['name'] = props['Platforms']['title'][0]['text']['content']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if 'Followers' in props and props['Followers']['number']:
                    platform['followers'] = props['Followers']['number']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                if 'Posts' in props and props['Posts']['number']:
                    platform['posts'] = props['Posts']['number']
                
                platforms.append(platform)
            
            return platforms
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")
            return []
    
    def generate_universal_report(self, all_metrics: Dict[str, UniversalMetrics], alerts: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"""
        
        total_followers = sum(m.followers for m in all_metrics.values())
        avg_engagement = sum(m.engagement_rate for m in all_metrics.values()) / len(all_metrics)
        
        # –¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        top_by_followers = max(all_metrics.items(), key=lambda x: x[1].followers)
        top_by_engagement = max(all_metrics.items(), key=lambda x: x[1].engagement_rate)
        
        report = f"""
üìä –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ü–õ–ê–¢–§–û–†–ú–ê–ú
{'='*60}
üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}

üéØ –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
   üë• –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {total_followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
   üìä –°—Ä–µ–¥–Ω–∏–π Engagement: {avg_engagement:.1f}%
   üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(all_metrics)}

üèÜ –õ–ò–î–ï–†–´:
   üë• –ü–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {top_by_followers[0].upper()} ({top_by_followers[1].followers:,})
   üìä –ü–æ engagement: {top_by_engagement[0].upper()} ({top_by_engagement[1].engagement_rate:.1f}%)

üìà –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú:
"""
        
        for platform, metrics in all_metrics.items():
            status_icon = {
                'excellent': 'üî•',
                'high': '‚úÖ', 
                'medium': 'üìä',
                'low': '‚ö†Ô∏è'
            }.get(metrics.platform_rank, 'üìä')
            
            report += f"""
   {status_icon} {platform.upper()}:
      üë• {metrics.followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      üìä {metrics.engagement_rate:.1f}% engagement
      üéØ {metrics.platform_rank} —Ä–µ–π—Ç–∏–Ω–≥
      üìà {metrics.vs_industry:+.0f}% vs –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
"""
        
        if alerts:
            report += f"\nüö® –ê–õ–ï–†–¢–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(alerts)}):\n"
            for alert in alerts:
                icon = {"critical": "üö®", "warning": "‚ö†Ô∏è", "info": "üí°", "success": "üöÄ"}
                report += f"   {icon.get(alert['type'], 'üìä')} {alert['message']}\n"
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report += f"\nüí° –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if total_followers < 50000:
            report += "   üìà –§–æ–∫—É—Å –Ω–∞ —Ä–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –±–æ–ª—å—à–æ–π\n"
        
        if avg_engagement > 3.0:
            report += "   üöÄ –û—Ç–ª–∏—á–Ω—ã–π engagement - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n"
        elif avg_engagement < 2.0:
            report += "   üéØ –ù–∏–∑–∫–∏–π engagement - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        low_performers = [p for p, m in all_metrics.items() if m.platform_rank == 'low']
        if low_performers:
            report += f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(p.upper() for p in low_performers)}\n"
        
        excellent_performers = [p for p, m in all_metrics.items() if m.platform_rank == 'excellent']
        if excellent_performers:
            report += f"   üèÜ –ó–≤–µ–∑–¥–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(p.upper() for p in excellent_performers)} - —Ç–∏—Ä–∞–∂–∏—Ä–æ–≤–∞—Ç—å –æ–ø—ã—Ç\n"
        
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    
    print("üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –í–°–ï–• –°–û–¶–ò–ê–õ–¨–ù–´–• –ü–õ–ê–¢–§–û–†–ú")
    print("=" * 80)
    
    analyzer = UniversalSocialAnalytics()
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    all_metrics = analyzer.analyze_all_platforms()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    alerts = analyzer.check_universal_alerts(all_metrics)
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º Notion
    analyzer.update_notion_universal_metrics(all_metrics)
    
    # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = analyzer.generate_universal_report(all_metrics, alerts)
    print(report)
    
    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"universal_social_report_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

if __name__ == "__main__":
    main() 