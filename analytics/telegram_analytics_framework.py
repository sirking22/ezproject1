#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò TELEGRAM

–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤:
‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ KPI
‚úÖ Engagement –º–µ—Ç—Ä–∏–∫–∏  
‚úÖ –†–æ—Å—Ç –∏ —Ä–µ—Ç–µ–Ω—à–Ω
‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
"""

import requests
import os
import json
import logging
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import Dict, List, Optional
import statistics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class TelegramMetrics:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç—Ä–∏–∫ Telegram –∫–∞–Ω–∞–ª–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    subscribers: int = 0
    posts_count: int = 0
    avg_views: float = 0
    total_views: int = 0
    
    # Engagement –º–µ—Ç—Ä–∏–∫–∏
    engagement_rate: float = 0  # (–ª–∞–π–∫–∏ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) / –ø—Ä–æ—Å–º–æ—Ç—Ä—ã * 100
    view_rate: float = 0  # –ø—Ä–æ—Å–º–æ—Ç—Ä—ã / –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ * 100
    comment_rate: float = 0  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ / –ø—Ä–æ—Å–º–æ—Ç—Ä—ã * 100
    forward_rate: float = 0  # —Ä–µ–ø–æ—Å—Ç—ã / –ø—Ä–æ—Å–º–æ—Ç—Ä—ã * 100
    
    # –†–æ—Å—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    subscriber_growth: int = 0
    subscriber_growth_rate: float = 0  # % —Ä–æ—Å—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
    posts_frequency: float = 0  # –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    top_post_views: int = 0
    worst_post_views: int = 0
    content_consistency: float = 0  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    industry_benchmark: float = 0
    competitor_performance: float = 0
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    peak_activity_hour: str = ""
    best_posting_day: str = ""

class TelegramAnalyticsFramework:
    """–§—Ä–µ–π–º–≤–æ—Ä–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫"""
    
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.platforms_db_id = os.getenv('NOTION_PLATFORMS_DB_ID')
        self.content_db_id = os.getenv('NOTION_CONTENT_PLAN_DB_ID')
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        
        self.headers = {
            'Authorization': f'Bearer {self.notion_token}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }
        
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ (—Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
        self.industry_benchmarks = {
            'view_rate': 15.0,  # 15% –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–º–æ—Ç—Ä—è—Ç –ø–æ—Å—Ç
            'engagement_rate': 2.5,  # 2.5% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            'posts_per_day': 1.5,  # 1-2 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å
            'subscriber_growth_monthly': 5.0  # 5% —Ä–æ—Å—Ç –≤ –º–µ—Å—è—Ü
        }
    
    def get_comprehensive_metrics(self, channel="rawmid") -> TelegramMetrics:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        
        print("üìä –†–ê–°–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –ú–ï–¢–†–ò–ö")
        print("=" * 60)
        
        metrics = TelegramMetrics()
        
        # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        channel_data = self.get_channel_basic_data(channel)
        if channel_data:
            metrics.subscribers = channel_data.get('subscribers', 0)
            print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics.subscribers:,}")
        
        # 2. –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤
        posts_data = self.get_posts_analytics(channel)
        if posts_data:
            metrics.posts_count = len(posts_data)
            metrics.total_views = sum(p.get('views', 0) for p in posts_data)
            metrics.avg_views = metrics.total_views / metrics.posts_count if metrics.posts_count > 0 else 0
            
            views_list = [p.get('views', 0) for p in posts_data if p.get('views', 0) > 0]
            if views_list:
                metrics.top_post_views = max(views_list)
                metrics.worst_post_views = min(views_list)
                metrics.content_consistency = statistics.stdev(views_list) if len(views_list) > 1 else 0
            
            print(f"   üìù –ü–æ—Å—Ç–æ–≤: {metrics.posts_count}")
            print(f"   üëÄ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics.total_views:,}")
            print(f"   üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics.avg_views:,.0f}")
        
        # 3. –†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö KPI
        metrics = self.calculate_key_kpis(metrics)
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
        metrics = self.analyze_growth_metrics(metrics, channel)
        
        # 5. –ö–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        metrics = self.analyze_content_performance(metrics, posts_data)
        
        return metrics
    
    def calculate_key_kpis(self, metrics: TelegramMetrics) -> TelegramMetrics:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ KPI"""
        
        print(f"\nüéØ –†–ê–°–ß–ï–¢ –ö–õ–Æ–ß–ï–í–´–• KPI")
        print("=" * 40)
        
        # View Rate (–æ—Ö–≤–∞—Ç) - % –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—è—Ç –ø–æ—Å—Ç—ã
        if metrics.subscribers > 0 and metrics.avg_views > 0:
            metrics.view_rate = (metrics.avg_views / metrics.subscribers) * 100
            print(f"   üìà View Rate: {metrics.view_rate:.1f}%")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º
            benchmark_diff = metrics.view_rate - self.industry_benchmarks['view_rate']
            status = "‚úÖ –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ" if benchmark_diff > 0 else "‚ö†Ô∏è –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
            print(f"   üìä vs –ë–µ–Ω—á–º–∞—Ä–∫ ({self.industry_benchmarks['view_rate']}%): {benchmark_diff:+.1f}% {status}")
        
        # Consistency Score (–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        if metrics.avg_views > 0 and metrics.content_consistency > 0:
            consistency_score = 100 - (metrics.content_consistency / metrics.avg_views * 100)
            print(f"   üéØ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {consistency_score:.1f}%")
        
        return metrics
    
    def analyze_growth_metrics(self, metrics: TelegramMetrics, channel: str) -> TelegramMetrics:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–æ—Å—Ç–∞"""
        
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –†–û–°–¢–ê")
        print("=" * 40)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–º–µ–µ–º 15 –ø–æ—Å—Ç–æ–≤ –∑–∞ ~10 –¥–Ω–µ–π
        estimated_days = 10  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        metrics.posts_frequency = metrics.posts_count / estimated_days if estimated_days > 0 else 0
        
        print(f"   üìù –ß–∞—Å—Ç–æ—Ç–∞: {metrics.posts_frequency:.1f} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å")
        
        benchmark_freq = self.industry_benchmarks['posts_per_day']
        if metrics.posts_frequency > benchmark_freq:
            print(f"   ‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –≤—ã—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π ({benchmark_freq}/–¥–µ–Ω—å)")
        else:
            print(f"   ‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø–æ—Å—Ç–∏–Ω–≥–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ {benchmark_freq}/–¥–µ–Ω—å)")
        
        return metrics
    
    def analyze_content_performance(self, metrics: TelegramMetrics, posts_data: List) -> TelegramMetrics:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        print(f"\nüìù –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê")
        print("=" * 40)
        
        if not posts_data:
            return metrics
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        views_list = [p.get('views', 0) for p in posts_data if p.get('views', 0) > 0]
        
        if views_list:
            # –ú–µ–¥–∏–∞–Ω–∞ –∏ –∫–≤–∞—Ä—Ç–∏–ª–∏
            median_views = statistics.median(views_list)
            q75 = statistics.quantiles(views_list, n=4)[2] if len(views_list) >= 4 else max(views_list)
            q25 = statistics.quantiles(views_list, n=4)[0] if len(views_list) >= 4 else min(views_list)
            
            print(f"   üìä –ú–µ–¥–∏–∞–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {median_views:,.0f}")
            print(f"   üèÜ –¢–æ–ø 25% –ø–æ—Å—Ç–æ–≤: >{q75:,.0f} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
            print(f"   üìâ –ù–∏–∑–∫–∏–µ 25% –ø–æ—Å—Ç–æ–≤: <{q25:,.0f} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç "–≤–∏—Ä—É—Å–Ω—ã—Ö" –ø–æ—Å—Ç–æ–≤ (–≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ 1.5 —Ä–∞–∑–∞)
            viral_threshold = metrics.avg_views * 1.5
            viral_posts = len([v for v in views_list if v > viral_threshold])
            viral_percentage = (viral_posts / len(views_list)) * 100
            
            print(f"   üöÄ '–í–∏—Ä—É—Å–Ω—ã–µ' –ø–æ—Å—Ç—ã (>{viral_threshold:,.0f}): {viral_posts} ({viral_percentage:.1f}%)")
        
        return metrics
    
    def get_channel_basic_data(self, channel: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bot API
            chat_url = f"https://api.telegram.org/bot{self.bot_token}/getChat"
            count_url = f"https://api.telegram.org/bot{self.bot_token}/getChatMemberCount"
            
            chat_response = requests.get(chat_url, params={'chat_id': f'@{channel}'}, timeout=10)
            count_response = requests.get(count_url, params={'chat_id': f'@{channel}'}, timeout=10)
            
            subscribers = 0
            if count_response.status_code == 200:
                count_data = count_response.json()
                if count_data.get('ok'):
                    subscribers = count_data['result']
            
            return {'subscribers': subscribers}
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def get_posts_analytics(self, channel: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤"""
        
        try:
            url = f"https://t.me/s/{channel}"
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=15)
            
            if response.status_code == 200:
                from bs4 import BeautifulSoup
                soup = BeautifulSoup(response.content, 'html.parser')
                posts_elements = soup.find_all('div', class_='tgme_widget_message')
                
                posts_data = []
                for post_elem in posts_elements:
                    views_elem = post_elem.find('span', class_='tgme_widget_message_views')
                    if views_elem:
                        views_text = views_elem.text.strip()
                        views = self.convert_count_to_number(views_text)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
                        date_elem = post_elem.find('time', class_='datetime')
                        post_date = None
                        if date_elem:
                            datetime_attr = date_elem.get('datetime', '')
                            if datetime_attr:
                                try:
                                    post_date = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                                except:
                                    pass
                        
                        posts_data.append({
                            'views': views,
                            'date': post_date,
                            'url': f"https://t.me/{channel}/{post_elem.get('data-post', '').split('/')[-1]}"
                        })
                
                return posts_data
            
            return []
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return []
    
    def convert_count_to_number(self, count_str: str) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—á–µ—Ç—á–∏–∫–∞ –≤ —á–∏—Å–ª–æ"""
        
        if not count_str:
            return 0
        
        count_str = str(count_str).replace(' ', '').replace(',', '').lower()
        
        import re
        match = re.search(r'([\d.,]+[km]?)', count_str)
        if not match:
            return 0
        
        number_str = match.group(1)
        
        try:
            if 'k' in number_str:
                return int(float(number_str.replace('k', '')) * 1000)
            elif 'm' in number_str:
                return int(float(number_str.replace('m', '')) * 1000000)
            else:
                return int(float(number_str))
        except:
            return 0
    
    def generate_recommendations(self, metrics: TelegramMetrics) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ View Rate
        if metrics.view_rate < self.industry_benchmarks['view_rate']:
            recommendations.append(
                f"üìà –£–ª—É—á—à–∏—Ç—å –æ—Ö–≤–∞—Ç: —Ç–µ–∫—É—â–∏–π {metrics.view_rate:.1f}% < {self.industry_benchmarks['view_rate']}% (–±–µ–Ω—á–º–∞—Ä–∫)"
            )
            recommendations.append("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            recommendations.append("   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—Ä–µ–≤—å—é")
            recommendations.append("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ (–æ–ø—Ä–æ—Å—ã, –≤–æ–ø—Ä–æ—Å—ã)")
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –ø–æ—Å—Ç–∏–Ω–≥–∞
        if metrics.posts_frequency < self.industry_benchmarks['posts_per_day']:
            recommendations.append(
                f"üìù –£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É: {metrics.posts_frequency:.1f} < {self.industry_benchmarks['posts_per_day']} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å"
            )
            recommendations.append("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å")
            recommendations.append("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (UGC)")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        if metrics.content_consistency > metrics.avg_views * 0.5:  # –í—ã—Å–æ–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            recommendations.append("üéØ –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            recommendations.append("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø-–ø–æ—Å—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã")
            recommendations.append("   ‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if metrics.subscribers < 10000:
            recommendations.append("üë• –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞ –¥–æ 10K –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:")
            recommendations.append("   ‚Ä¢ –ö—Ä–æ—Å—Å-–ø—Ä–æ–º–æ —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏")
            recommendations.append("   ‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
            recommendations.append("   ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        
        return recommendations
    
    def create_analytics_report(self, metrics: TelegramMetrics) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        
        report = f"""
üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ TELEGRAM
{'='*50}
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üì± –ö–∞–Ω–∞–ª: @rawmid

üéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics.subscribers:,}
   üìù –ü–æ—Å—Ç–æ–≤: {metrics.posts_count}
   üëÄ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics.total_views:,}
   üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics.avg_views:,.0f}

üìà PERFORMANCE –ú–ï–¢–†–ò–ö–ò:
   üéØ View Rate: {metrics.view_rate:.1f}% (–æ—Ö–≤–∞—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
   üìù –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞: {metrics.posts_frequency:.1f} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å
   üèÜ –õ—É—á—à–∏–π –ø–æ—Å—Ç: {metrics.top_post_views:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   üìâ –•—É–¥—à–∏–π –ø–æ—Å—Ç: {metrics.worst_post_views:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

üèÜ –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–ï–ù–ß–ú–ê–†–ö–ê–ú–ò:
   üìä View Rate: {metrics.view_rate:.1f}% vs {self.industry_benchmarks['view_rate']}% (–∏–Ω–¥—É—Å—Ç—Ä–∏—è)
   üìù –ß–∞—Å—Ç–æ—Ç–∞: {metrics.posts_frequency:.1f} vs {self.industry_benchmarks['posts_per_day']} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ)

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""
        
        recommendations = self.generate_recommendations(metrics)
        for rec in recommendations:
            report += f"{rec}\n"
        
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò TELEGRAM")
    print("=" * 80)
    
    analyzer = TelegramAnalyticsFramework()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = analyzer.get_comprehensive_metrics("rawmid")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = analyzer.create_analytics_report(metrics)
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"telegram_analytics_report_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    print(f"\nüîÑ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print(f"   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print(f"   2. –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ Notion")
    print(f"   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø–æ KPI")
    print(f"   4. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

if __name__ == "__main__":
    main() 