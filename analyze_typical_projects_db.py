#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ "–¢–ò–ü–û–í–´–ï –ü–†–û–ï–ö–¢–´" –ò –°–û–ó–î–ê–ù–ò–ï –§–û–†–ú–£–õ–´
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

async def analyze_typical_projects_database():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã '–¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã'"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"üîç –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ '–¢–ò–ü–û–í–´–ï –ü–†–û–ï–ö–¢–´'")
    print("=" * 50)
    
    # ID –±–∞–∑—ã "–¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"
    TYPICAL_PROJECTS_DB = "21dace03-d9ff-8086-a520-c5eef064fe3b"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã
        db_schema = await client.databases.retrieve(database_id=TYPICAL_PROJECTS_DB)
        properties = db_schema.get('properties', {})
        
        print(f"üìã –ü–û–õ–Ø –í –ë–ê–ó–ï '–¢–ò–ü–û–í–´–ï –ü–†–û–ï–ö–¢–´':")
        print(f"–í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(properties)}")
        print()
        
        relation_fields = []
        status_fields = []
        number_fields = []
        
        for prop_name, prop_data in properties.items():
            prop_type = prop_data.get('type', 'unknown')
            
            print(f"‚Ä¢ {prop_name} ({prop_type})")
            
            if prop_type == 'relation':
                relation_info = prop_data.get('relation', {})
                target_db = relation_info.get('database_id', 'unknown')
                print(f"  üîó –°–≤—è–∑–∞–Ω–∞ —Å –±–∞–∑–æ–π: {target_db}")
                relation_fields.append({
                    'name': prop_name,
                    'target_db': target_db,
                    'data': prop_data
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ
                try:
                    target_schema = await client.databases.retrieve(database_id=target_db)
                    target_title = target_schema.get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    print(f"  üìä –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑—ã: {target_title}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ
                    target_properties = target_schema.get('properties', {})
                    print(f"  üìã –ü–æ–ª—è –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ:")
                    for target_prop_name, target_prop_info in target_properties.items():
                        target_prop_type = target_prop_info.get('type', 'unknown')
                        print(f"      - {target_prop_name} ({target_prop_type})")
                        
                        if target_prop_type == 'status':
                            status_fields.append(f"{target_prop_name} (–≤ {target_title})")
                        elif target_prop_type == 'number':
                            number_fields.append(f"{target_prop_name} (–≤ {target_title})")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π –±–∞–∑—ã: {e}")
            
            elif prop_type == 'status':
                status_options = prop_data.get('status', {}).get('options', [])
                print(f"  üìä –°—Ç–∞—Ç—É—Å—ã: {[opt.get('name') for opt in status_options]}")
                status_fields.append(prop_name)
            
            elif prop_type == 'number':
                number_fields.append(prop_name)
            
            print()
        
        print(f"üìä –ê–ù–ê–õ–ò–ó –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –§–û–†–ú–£–õ–´:")
        print(f"üîó Relation –ø–æ–ª—è: {len(relation_fields)}")
        for rel in relation_fields:
            print(f"   ‚Ä¢ {rel['name']} ‚Üí {rel['target_db']}")
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—è: {status_fields}")
        print(f"üî¢ –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è: {number_fields}")
        
        return {
            'relation_fields': relation_fields,
            'status_fields': status_fields,
            'number_fields': number_fields,
            'properties': properties
        }
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return None

async def suggest_formulas(analysis):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã"""
    
    print(f"\nüßÆ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –§–û–†–ú–£–õ")
    print("=" * 50)
    
    if not analysis:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    relation_fields = analysis['relation_fields']
    status_fields = analysis['status_fields']
    number_fields = analysis['number_fields']
    
    print(f"üéØ –í–û–ó–ú–û–ñ–ù–´–ï –§–û–†–ú–£–õ–´:")
    print()
    
    # –§–æ—Ä–º—É–ª–∞ 1: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "Done"
    if relation_fields and any('Done' in status for status in status_fields):
        print(f"1Ô∏è‚É£ –°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –ü–û –ó–ê–í–ï–†–®–ï–ù–ù–´–ú –ü–†–û–ï–ö–¢–ê–ú:")
        print(f"   prop('–ü—Ä–æ–µ–∫—Ç—ã').filter(current.prop('–°—Ç–∞—Ç—É—Å') == 'Done').map(current.prop('–í—Ä–µ–º—è')).average()")
        print()
    
    # –§–æ—Ä–º—É–ª–∞ 2: –°—É–º–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    if relation_fields and any('Production' in status for status in status_fields):
        print(f"2Ô∏è‚É£ –°–£–ú–ú–ê –í–†–ï–ú–ï–ù–ò –ü–û –ü–†–û–ï–ö–¢–ê–ú –í –ü–†–û–î–ê–ö–®–ï–ù–ï:")
        print(f"   prop('–ü—Ä–æ–µ–∫—Ç—ã').filter(current.prop('–°—Ç–∞—Ç—É—Å') == 'In Production').map(current.prop('–í—Ä–µ–º—è')).sum()")
        print()
    
    # –§–æ—Ä–º—É–ª–∞ 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    if relation_fields:
        print(f"3Ô∏è‚É£ –ö–û–õ–ò–ß–ï–°–¢–í–û –ê–ö–¢–ò–í–ù–´–• –ü–†–û–ï–ö–¢–û–í:")
        print(f"   prop('–ü—Ä–æ–µ–∫—Ç—ã').filter(current.prop('–°—Ç–∞—Ç—É—Å') == 'In Progress').length()")
        print()
    
    # –§–æ—Ä–º—É–ª–∞ 4: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º
    if relation_fields and number_fields:
        print(f"4Ô∏è‚É£ –°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –ü–û –í–°–ï–ú –ü–†–û–ï–ö–¢–ê–ú:")
        print(f"   prop('–ü—Ä–æ–µ–∫—Ç—ã').map(current.prop('–ß–∞—Å—ã')).average()")
        print()
    
    # –§–æ—Ä–º—É–ª–∞ 5: –í—Ä–µ–º—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    if relation_fields:
        print(f"5Ô∏è‚É£ –í–†–ï–ú–Ø –ó–ê –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶:")
        print(f"   prop('–ü—Ä–æ–µ–∫—Ç—ã').filter(current.prop('–î–∞—Ç–∞').formatDate('M') == formatDate(now(), 'M') and current.prop('–î–∞—Ç–∞').formatDate('YYYY') == formatDate(now(), 'YYYY')).map(current.prop('–ß–∞—Å—ã')).sum()")
        print()

async def create_manual_formula_guide():
    """–°–æ–∑–¥–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ñ–æ—Ä–º—É–ª—ã –≤—Ä—É—á–Ω—É—é"""
    
    print(f"\nüìù –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –°–û–ó–î–ê–ù–ò–Æ –§–û–†–ú–£–õ–´ –í–†–£–ß–ù–£–Æ")
    print("=" * 60)
    
    print(f"üéØ –®–ê–ì–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –§–û–†–ú–£–õ–´ –í NOTION UI:")
    print()
    
    print(f"1Ô∏è‚É£ –û–¢–ö–†–û–ô–¢–ï –ë–ê–ó–£ '–¢–ò–ü–û–í–´–ï –ü–†–û–ï–ö–¢–´'")
    print(f"   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Notion")
    print(f"   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –±–∞–∑—É '–¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã'")
    print()
    
    print(f"2Ô∏è‚É£ –°–û–ó–î–ê–ô–¢–ï –ù–û–í–û–ï –ü–û–õ–ï")
    print(f"   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '+' —Ä—è–¥–æ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
    print(f"   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ 'Formula'")
    print(f"   ‚Ä¢ –î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è')")
    print()
    
    print(f"3Ô∏è‚É£ –í–í–ï–î–ò–¢–ï –§–û–†–ú–£–õ–£")
    print(f"   ‚Ä¢ –í –ø–æ–ª–µ —Ñ–æ—Ä–º—É–ª—ã –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª")
    print(f"   ‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä:")
    print(f"     prop('–ü—Ä–æ–µ–∫—Ç—ã').filter(current.prop('–°—Ç–∞—Ç—É—Å') == 'Done').map(current.prop('–ß–∞—Å—ã')).average()")
    print()
    
    print(f"4Ô∏è‚É£ –ü–†–û–í–ï–†–¨–¢–ï –†–ï–ó–£–õ–¨–¢–ê–¢")
    print(f"   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –≤–Ω–µ –ø–æ–ª—è")
    print(f"   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print()
    
    print(f"5Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–¢–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï")
    print(f"   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
    print(f"   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π")
    print()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ò –°–û–ó–î–ê–ù–ò–ï –§–û–†–ú–£–õ–´ –î–õ–Ø '–¢–ò–ü–û–í–´–ï –ü–†–û–ï–ö–¢–´'")
    print("=" * 70)
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã
    analysis = await analyze_typical_projects_database()
    
    # 2. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
    await suggest_formulas(analysis)
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
    await create_manual_formula_guide()
    
    print(f"\nüéØ –ì–û–¢–û–í–û!")
    print("=" * 20)
    print(f"üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É –≤—Ä—É—á–Ω—É—é –≤ Notion UI")
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∫–∞–∫ –æ—Å–Ω–æ–≤—É")
    print(f"‚úÖ –í—Å–µ —Å–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ UI")

if __name__ == "__main__":
    asyncio.run(main()) 