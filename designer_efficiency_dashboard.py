"""
üé® Designer Efficiency Dashboard
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤, –º–µ—Ç—Ä–∏–∫ –∏ KPI –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ç—á—ë—Ç—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
"""

import os
import sys
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from notion_client import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class DesignerKPI:
    """KPI –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
    designer_name: str
    efficiency: float = 0.0  # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (0-1)
    overdue_tasks: float = 0.0  # –ü—Ä–æ—Å—Ä–æ—á–∫–∏ (0-1)
    quality: float = 0.0  # –ö–∞—á–µ—Å—Ç–≤–æ (0-1)
    report_coverage: float = 0.0  # –ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ç—á—ë—Ç–∞–º–∏ (0-1)
    total_time_hours: float = 0.0
    tasks_completed: int = 0
    projects_active: int = 0
    
    def calculate_bonus(self, base_salary: float = 100000) -> float:
        """–†–∞—Å—á—ë—Ç –±–æ–Ω—É—Å–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ"""
        bonus_multiplier = (1 + self.efficiency * 0.2 + self.quality * 0.3 - self.overdue_tasks * 0.3)
        return base_salary * bonus_multiplier

@dataclass
class WorkReport:
    """–û—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–µ –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
    designer_name: str
    project_name: str
    task_name: str
    work_description: str
    time_spent_hours: float
    materials_added: List[str] = None
    links_added: List[str] = None
    comments: str = ""
    timestamp: str = None
    status_changed: Optional[str] = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()
        if self.materials_added is None:
            self.materials_added = []
        if self.links_added is None:
            self.links_added = []

@dataclass
class DesignerSession:
    """–°–µ—Å—Å–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
    user_id: int
    designer_name: str
    current_project: str = ""
    current_task: str = ""
    reports_today: List[WorkReport] = None
    state: str = "idle"
    temp_description: str = ""
    
    def __post_init__(self):
        if self.reports_today is None:
            self.reports_today = []

class DesignerEfficiencyDashboard:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = ["TELEGRAM_BOT_TOKEN", "NOTION_TOKEN"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        
        self.bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
        self.notion = Client(auth=os.getenv("NOTION_TOKEN"))
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.tasks_database_id = os.getenv("NOTION_TASKS_DB_ID", "d09df250ce7e4e0d9fbe4e036d320def")
        self.materials_database_id = os.getenv("NOTION_MATERIALS_DB_ID", "1d9ace03d9ff804191a4d35aeedcbbd4")
        self.projects_database_id = os.getenv("NOTION_PROJECTS_DB_ID", "342f18c67a5e41fead73dcec00770f4e")
        self.time_log_database_id = os.getenv("NOTION_TIME_LOG_DB_ID", "")  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
        
        # –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.sessions: Dict[int, DesignerSession] = {}
        
        # KPI –∫—ç—à
        self.kpi_cache: Dict[str, DesignerKPI] = {}
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("üé® Designer Efficiency Dashboard initialized")
        logger.info(f"  Tasks DB: {self.tasks_database_id}")
        logger.info(f"  Materials DB: {self.materials_database_id}")
        logger.info(f"  Projects DB: {self.projects_database_id}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.message_handler(commands=['start'])
        def start_command(message: Message):
            self.handle_start(message)
        
        @self.bot.message_handler(commands=['report'])
        def report_command(message: Message):
            self.handle_report(message)
        
        @self.bot.message_handler(commands=['today'])
        def today_command(message: Message):
            self.handle_today(message)
        
        @self.bot.message_handler(commands=['kpi'])
        def kpi_command(message: Message):
            self.handle_kpi(message)
        
        @self.bot.message_handler(commands=['tasks'])
        def tasks_command(message: Message):
            self.handle_tasks(message)
        
        @self.bot.message_handler(commands=['efficiency'])
        def efficiency_command(message: Message):
            self.handle_efficiency(message)
        
        @self.bot.message_handler(commands=['help'])
        def help_command(message: Message):
            self.handle_help(message)
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_text(message: Message):
            self.handle_text_message(message)
        
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call: CallbackQuery):
            self.handle_callback_query(call)
    
    def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        designer_name = message.from_user.first_name
        
        # –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
        if user_id not in self.sessions:
            self.sessions[user_id] = DesignerSession(
                user_id=user_id,
                designer_name=designer_name
            )
        
        welcome_text = f"""
üé® –ü—Ä–∏–≤–µ—Ç, {designer_name}! 

–Ø - Designer Efficiency Dashboard - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è:
üìä –û—Ç—á—ë—Ç–æ–≤ –æ —Ä–∞–±–æ—Ç–µ
üìà KPI –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
üéØ –ú–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/report - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–µ
/today - –û—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/kpi - –¢–≤–æ–∏ KPI –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
/tasks - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
/efficiency - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

üí° –ü—Ä–∏–º–µ—Ä –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞:
"–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 - –≤–µ—Ä—Å—Ç–∫–∞ 2 —á–∞—Å–∞"

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ /report
        """
        
        self.bot.reply_to(message, welcome_text.strip())
    
    def handle_report(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report"""
        user_id = message.from_user.id
        
        if user_id not in self.sessions:
            self.sessions[user_id] = DesignerSession(
                user_id=user_id,
                designer_name=message.from_user.first_name
            )
        
        session = self.sessions[user_id]
        session.state = "waiting_project"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        projects = self.get_active_projects()
        keyboard = InlineKeyboardMarkup()
        
        for project in projects[:8]:
            keyboard.add(InlineKeyboardButton(
                text=project,
                callback_data=f"project:{project}"
            ))
        
        keyboard.add(InlineKeyboardButton(
            text="‚ûï –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
            callback_data="project:manual"
        ))
        
        self.bot.reply_to(
            message,
            "üìã –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=keyboard
        )
    
    def handle_today(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = message.from_user.id
        
        if user_id not in self.sessions:
            self.bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å–µ—Å—Å–∏—é: /start")
            return
        
        session = self.sessions[user_id]
        reports = session.reports_today
        
        if not reports:
            self.bot.reply_to(message, "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ù–∞—á–Ω–∏ —Å /report")
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç
        total_time = sum(r.time_spent_hours for r in reports)
        
        report_text = f"üìä –û—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({len(reports)} –∑–∞–¥–∞—á):\n\n"
        
        for i, report in enumerate(reports, 1):
            report_text += f"{i}. {report.project_name} - {report.task_name}\n"
            report_text += f"   ‚è±Ô∏è {report.time_spent_hours} —á\n"
            report_text += f"   üìù {report.work_description}\n"
            
            if report.materials_added:
                report_text += f"   üìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {', '.join(report.materials_added)}\n"
            
            if report.links_added:
                report_text += f"   üîó –°—Å—ã–ª–∫–∏: {', '.join(report.links_added)}\n"
            
            report_text += "\n"
        
        report_text += f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time} —á–∞—Å–æ–≤"
        
        self.bot.reply_to(message, report_text)
    
    def handle_kpi(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å KPI –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        user_id = message.from_user.id
        
        if user_id not in self.sessions:
            self.bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å–µ—Å—Å–∏—é: /start")
            return
        
        session = self.sessions[user_id]
        designer_name = session.designer_name
        
        # –ü–æ–ª—É—á–∏—Ç—å KPI
        kpi = self.calculate_designer_kpi(designer_name)
        
        kpi_text = f"""
üìà KPI –¥–ª—è {designer_name}

üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {kpi.efficiency:.1%}
‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∏: {kpi.overdue_tasks:.1%}
‚ú® –ö–∞—á–µ—Å—Ç–≤–æ: {kpi.quality:.1%}
üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ç—á—ë—Ç–∞–º–∏: {kpi.report_coverage:.1%}

üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {kpi.total_time_hours:.1f} —á
‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {kpi.tasks_completed}
üìÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {kpi.projects_active}

üí∞ –†–∞—Å—á—ë—Ç–Ω—ã–π –±–æ–Ω—É—Å: {kpi.calculate_bonus():,.0f} ‚ÇΩ
        """
        
        self.bot.reply_to(message, kpi_text.strip())
    
    def handle_tasks(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        user_id = message.from_user.id
        
        if user_id not in self.sessions:
            self.bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å–µ—Å—Å–∏—é: /start")
            return
        
        session = self.sessions[user_id]
        designer_name = session.designer_name
        
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞
        tasks = self.get_designer_tasks(designer_name)
        
        if not tasks:
            self.bot.reply_to(message, "üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
        
        tasks_text = f"üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è {designer_name}:\n\n"
        
        for i, task in enumerate(tasks[:10], 1):
            tasks_text += f"{i}. {task['name']}\n"
            tasks_text += f"   üìÅ –ü—Ä–æ–µ–∫—Ç: {task['project']}\n"
            tasks_text += f"   üìä –°—Ç–∞—Ç—É—Å: {task['status']}\n"
            tasks_text += f"   ‚è±Ô∏è –í—Ä–µ–º—è: {task['time_spent']} –º–∏–Ω\n"
            tasks_text += "\n"
        
        if len(tasks) > 10:
            tasks_text += f"... –∏ –µ—â—ë {len(tasks) - 10} –∑–∞–¥–∞—á"
        
        self.bot.reply_to(message, tasks_text)
    
    def handle_efficiency(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        user_id = message.from_user.id
        
        if user_id not in self.sessions:
            self.bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å–µ—Å—Å–∏—é: /start")
            return
        
        session = self.sessions[user_id]
        designer_name = session.designer_name
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = self.get_designer_analytics(designer_name)
        
        analytics_text = f"""
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {designer_name}

‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {analytics['avg_time_per_task']:.1f} –º–∏–Ω
   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {analytics['planning_efficiency']:.1%}
   –í—Ä–µ–º—è –≤ –ø–æ—Ç–æ–∫–µ: {analytics['flow_time']:.1f} —á

üìà –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
   –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {analytics['completion_rate']:.1%}
   –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {analytics['avg_quality']:.1f}/5
   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤–∏–∑–∏–π: {analytics['revisions_count']}

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{analytics['recommendations']}
        """
        
        self.bot.reply_to(message, analytics_text.strip())
    
    def handle_help(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üé® Designer Efficiency Dashboard - –°–ø—Ä–∞–≤–∫–∞

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/report - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–µ
/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/kpi - –¢–≤–æ–∏ KPI –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
/tasks - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
/efficiency - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –§–æ—Ä–º–∞—Ç—ã –æ—Ç—á—ë—Ç–æ–≤:

1. –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç:
"–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04 - –≤–µ—Ä—Å—Ç–∫–∞ 2 —á–∞—Å–∞"

2. –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
–ü—Ä–æ–µ–∫—Ç: –ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04
–ó–∞–¥–∞—á–∞: –í–µ—Ä—Å—Ç–∫–∞ –º–∞–∫–µ—Ç–∞
–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–ª –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å—Ç–∫—É
–í—Ä–µ–º—è: 2 —á–∞—Å–∞
–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: figma.com/file/abc123
–°—Å—ã–ª–∫–∏: drive.google.com/file/xyz

3. –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏:
"RMP04 - –≤–µ—Ä—Å—Ç–∫–∞ 2—á + –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –º–∞–∫–µ—Ç—É"

üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ Notion:
- –í—Ä–µ–º—è –≤ –∑–∞–¥–∞—á–∞—Ö
- –°—Ç–∞—Ç—É—Å—ã
- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- KPI –∏ –º–µ—Ç—Ä–∏–∫–∏

üìä KPI —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
–±–æ–Ω—É—Å = base * (1 + —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*0.2 + –∫–∞—á–µ—Å—Ç–≤–æ*0.3 ‚àí –ø—Ä–æ—Å—Ä–æ—á–∫–∏*0.3)
        """
        
        self.bot.reply_to(message, help_text.strip())
    
    def handle_text_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        text = message.text.strip()
        
        if user_id not in self.sessions:
            self.bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å–µ—Å—Å–∏—é: /start")
            return
        
        session = self.sessions[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        if self.is_quick_report_format(text):
            self.process_quick_report(message, text)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if session.state == "waiting_project":
            session.current_project = text
            session.state = "waiting_task"
            self.bot.reply_to(message, "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        
        elif session.state == "waiting_task":
            session.current_task = text
            session.state = "waiting_description"
            self.bot.reply_to(message, "üìù –û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª:")
        
        elif session.state == "waiting_description":
            session.state = "waiting_time"
            session.temp_description = text
            self.bot.reply_to(message, "‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5 —á–∞—Å–∞)")
        
        elif session.state == "waiting_time":
            time_match = re.search(r'(\d+(?:\.\d+)?)', text)
            if time_match:
                time_spent = float(time_match.group(1))
                
                # –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç
                report = WorkReport(
                    designer_name=session.designer_name,
                    project_name=session.current_project,
                    task_name=session.current_task,
                    work_description=session.temp_description,
                    time_spent_hours=time_spent
                )
                
                # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ—Å—Å–∏—é
                session.reports_today.append(report)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –≤ Notion
                self.update_notion_task(report)
                
                # –û–±–Ω–æ–≤–∏—Ç—å KPI
                self.update_designer_kpi(session.designer_name)
                
                # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                session.state = "idle"
                session.current_project = ""
                session.current_task = ""
                session.temp_description = ""
                
                self.bot.reply_to(
                    message,
                    f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
                    f"üìã –ü—Ä–æ–µ–∫—Ç: {report.project_name}\n"
                    f"üìù –ó–∞–¥–∞—á–∞: {report.task_name}\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: {report.time_spent_hours} —á\n"
                    f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {report.work_description}\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? /report"
                )
            else:
                self.bot.reply_to(message, "‚ùå –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):")
    
    def handle_callback_query(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = call.from_user.id
        data = call.data
        
        if user_id not in self.sessions:
            self.bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        session = self.sessions[user_id]
        
        if data.startswith("project:"):
            project = data.split(":", 1)[1]
            
            if project == "manual":
                session.state = "waiting_project"
                self.bot.edit_message_text(
                    "üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            else:
                session.current_project = project
                session.state = "waiting_task"
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
                tasks = self.get_tasks_for_project(project)
                keyboard = InlineKeyboardMarkup()
                
                for task in tasks[:8]:
                    keyboard.add(InlineKeyboardButton(
                        text=task,
                        callback_data=f"task:{task}"
                    ))
                
                keyboard.add(InlineKeyboardButton(
                    text="‚ûï –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                    callback_data="task:manual"
                ))
                
                self.bot.edit_message_text(
                    f"üìã –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project}':",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=keyboard
                )
        
        elif data.startswith("task:"):
            task = data.split(":", 1)[1]
            
            if task == "manual":
                session.state = "waiting_task"
                self.bot.edit_message_text(
                    "üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            else:
                session.current_task = task
                session.state = "waiting_description"
                
                self.bot.edit_message_text(
                    f"üìù –û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª –¥–ª—è –∑–∞–¥–∞—á–∏ '{task}':",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
    
    def is_quick_report_format(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –±—ã—Å—Ç—Ä—ã–º –æ—Ç—á—ë—Ç–æ–º"""
        import re
        patterns = [
            r'.+ - .+ \d+(?:\.\d+)?\s*(?:—á–∞—Å|—á|—á–∞—Å–∞|—á–∞—Å–æ–≤)',
            r'.+ \d+(?:\.\d+)?\s*(?:—á–∞—Å|—á|—á–∞—Å–∞|—á–∞—Å–æ–≤)',
            r'.+ - \d+(?:\.\d+)?\s*(?:—á–∞—Å|—á|—á–∞—Å–∞|—á–∞—Å–æ–≤)'
        ]
        
        for pattern in patterns:
            if re.match(pattern, text, re.IGNORECASE):
                return True
        
        return False
    
    def process_quick_report(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç"""
        import re
        user_id = message.from_user.id
        session = self.sessions[user_id]
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        parts = text.split(' - ')
        
        if len(parts) >= 2:
            project_task = parts[0].strip()
            description_time = parts[1].strip()
            
            # –ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è
            time_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:—á–∞—Å|—á|—á–∞—Å–∞|—á–∞—Å–æ–≤)', description_time, re.IGNORECASE)
            if time_match:
                time_spent = float(time_match.group(1))
                description = re.sub(r'\d+(?:\.\d+)?\s*(?:—á–∞—Å|—á|—á–∞—Å–∞|—á–∞—Å–æ–≤)', '', description_time).strip()
                
                # –†–∞–∑–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–¥–∞—á—É
                project_parts = project_task.split()
                if len(project_parts) >= 2:
                    task = project_parts[-1]
                    project = ' '.join(project_parts[:-1])
                else:
                    project = project_task
                    task = "–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"
                
                # –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç
                report = WorkReport(
                    designer_name=session.designer_name,
                    project_name=project,
                    task_name=task,
                    work_description=description,
                    time_spent_hours=time_spent
                )
                
                # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ—Å—Å–∏—é
                session.reports_today.append(report)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –≤ Notion
                self.update_notion_task(report)
                
                # –û–±–Ω–æ–≤–∏—Ç—å KPI
                self.update_designer_kpi(session.designer_name)
                
                self.bot.reply_to(
                    message,
                    f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
                    f"üìã –ü—Ä–æ–µ–∫—Ç: {report.project_name}\n"
                    f"üìù –ó–∞–¥–∞—á–∞: {report.task_name}\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: {report.time_spent_hours} —á\n"
                    f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {report.work_description}\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? /report"
                )
            else:
                self.bot.reply_to(message, "‚ùå –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è –≤ –æ—Ç—á—ë—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: '–ü—Ä–æ–µ–∫—Ç - –æ–ø–∏—Å–∞–Ω–∏–µ 2 —á–∞—Å–∞'")
        else:
            self.bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: '–ü—Ä–æ–µ–∫—Ç - –æ–ø–∏—Å–∞–Ω–∏–µ 2 —á–∞—Å–∞'")
    
    def get_active_projects(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            response = self.notion.databases.query(
                database_id=self.projects_database_id,
                filter={
                    "property": "–°—Ç–∞—Ç—É—Å",
                    "status": {
                        "does_not_equal": "–ó–∞–≤–µ—Ä—à—ë–Ω"
                    }
                }
            )
            
            projects = []
            for page in response["results"]:
                name_prop = page["properties"].get("Name", {})
                if name_prop.get("title"):
                    projects.append(name_prop["title"][0]["plain_text"])
            
            return projects[:10]
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return ["–ö–æ—Ä–æ–±–∫–∏ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏ RMP04", "–ë—Ä–µ–Ω–¥–∏–Ω–≥", "–î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞"]
    
    def get_tasks_for_project(self, project_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç
            project_response = self.notion.databases.query(
                database_id=self.projects_database_id,
                filter={
                    "property": "Name",
                    "title": {
                        "equals": project_name
                    }
                }
            )
            
            if not project_response["results"]:
                return ["–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"]
            
            project_id = project_response["results"][0]["id"]
            
            # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            tasks_response = self.notion.databases.query(
                database_id=self.tasks_database_id,
                filter={
                    "property": "–ü—Ä–æ–µ–∫—Ç",
                    "relation": {
                        "contains": project_id
                    }
                }
            )
            
            tasks = []
            for page in tasks_response["results"]:
                name_prop = page["properties"].get("–ó–∞–¥–∞—á–∞", {})
                if name_prop.get("title"):
                    tasks.append(name_prop["title"][0]["plain_text"])
            
            return tasks[:8] if tasks else ["–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"]
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return ["–í–µ—Ä—Å—Ç–∫–∞", "–î–∏–∑–∞–π–Ω", "–ë—Ä–µ–Ω–¥–∏–Ω–≥", "–û–±—â–∞—è —Ä–∞–±–æ—Ç–∞"]
    
    def update_notion_task(self, report: WorkReport):
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Notion"""
        try:
            # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            response = self.notion.databases.query(
                database_id=self.tasks_database_id,
                filter={
                    "property": "–ó–∞–¥–∞—á–∞",
                    "title": {
                        "contains": report.task_name
                    }
                }
            )
            
            if response["results"]:
                task_id = response["results"][0]["id"]
                
                # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å
                update_data = {
                    "properties": {
                        "–ó–∞—Ç—Ä–∞—á–µ–Ω–æ_–º–∏–Ω—É—Ç": {
                            "number": int(report.time_spent_hours * 60)
                        }
                    }
                }
                
                # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                if report.work_description:
                    update_data["properties"]["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"] = {
                        "rich_text": [
                            {
                                "text": {
                                    "content": f"{datetime.now().strftime('%H:%M')} - {report.work_description}"
                                }
                            }
                        ]
                    }
                
                self.notion.pages.update(page_id=task_id, **update_data)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {report.task_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    def calculate_designer_kpi(self, designer_name: str) -> DesignerKPI:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å KPI –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ KPI –∏–∑ Notion
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return DesignerKPI(
            designer_name=designer_name,
            efficiency=0.85,
            overdue_tasks=0.05,
            quality=0.95,
            report_coverage=0.90,
            total_time_hours=8.5,
            tasks_completed=5,
            projects_active=3
        )
    
    def update_designer_kpi(self, designer_name: str):
        """–û–±–Ω–æ–≤–∏—Ç—å KPI –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        # –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à KPI
        self.kpi_cache[designer_name] = self.calculate_designer_kpi(designer_name)
    
    def get_designer_tasks(self, designer_name: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        try:
            response = self.notion.databases.query(
                database_id=self.tasks_database_id,
                filter={
                    "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                    "people": {
                        "contains": designer_name
                    }
                }
            )
            
            tasks = []
            for page in response["results"]:
                task = {
                    "name": page["properties"].get("–ó–∞–¥–∞—á–∞", {}).get("title", [{}])[0].get("plain_text", ""),
                    "project": "–ù–µ —É–∫–∞–∑–∞–Ω",
                    "status": page["properties"].get("–°—Ç–∞—Ç—É—Å", {}).get("status", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                    "time_spent": page["properties"].get("–ó–∞—Ç—Ä–∞—á–µ–Ω–æ_–º–∏–Ω—É—Ç", {}).get("number", 0)
                }
                tasks.append(task)
            
            return tasks[:10]
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–∏–∑–∞–π–Ω–µ—Ä–∞: {e}")
            return []
    
    def get_designer_analytics(self, designer_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        return {
            "avg_time_per_task": 120.0,
            "planning_efficiency": 0.85,
            "flow_time": 6.5,
            "completion_rate": 0.92,
            "avg_quality": 4.8,
            "revisions_count": 2,
            "recommendations": "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞."
        }
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Designer Efficiency Dashboard...")
        self.bot.polling(none_stop=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dashboard = DesignerEfficiencyDashboard()
    dashboard.run()

if __name__ == "__main__":
    main() 