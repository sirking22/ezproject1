"""
Content Manager - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
–§—É–Ω–∫—Ü–∏–∏: —á–µ—Ä–Ω–æ–≤–∏–∫–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ–¥–∏–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

import asyncio
import logging
import os
from typing import Dict, List, Any, Optional, Union
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import uuid

from notion_client import AsyncClient
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class ContentType(Enum):
    POST = "üìù –ü–æ—Å—Ç"
    STORY = "üì∏ –ò—Å—Ç–æ—Ä–∏—è"
    VIDEO = "üé• –í–∏–¥–µ–æ"
    CAROUSEL = "üñºÔ∏è –ö–∞—Ä—É—Å–µ–ª—å"
    REEL = "üé¨ Reels"
    ARTICLE = "üìÑ –°—Ç–∞—Ç—å—è"

class ContentStatus(Enum):
    DRAFT = "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫"
    REVIEW = "üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
    APPROVED = "‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    SCHEDULED = "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
    PUBLISHED = "üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
    ARCHIVED = "üìÅ –ê—Ä—Ö–∏–≤"

class Platform(Enum):
    INSTAGRAM = "üì∑ Instagram"
    TELEGRAM = "üí¨ Telegram"
    VK = "üîµ VKontakte"
    FACEBOOK = "üë§ Facebook"
    TIKTOK = "üéµ TikTok"
    YOUTUBE = "üì∫ YouTube"
    WEBSITE = "üåê –°–∞–π—Ç"

@dataclass
class MediaFile:
    id: str
    filename: str
    file_type: str  # image, video, document
    file_size: int
    url: str
    thumbnail_url: Optional[str] = None
    alt_text: Optional[str] = None
    tags: List[str] = None
    uploaded_at: datetime = None

@dataclass
class ContentPiece:
    id: str
    title: str
    content_type: ContentType
    status: ContentStatus
    text_content: str
    media_files: List[MediaFile]
    platforms: List[Platform]
    hashtags: List[str]
    scheduled_time: Optional[datetime]
    created_at: datetime
    updated_at: datetime
    author_id: str
    reviewer_id: Optional[str] = None
    notes: str = ""
    engagement_target: Optional[Dict[str, int]] = None  # likes, comments, views
    
class ContentCalendar:
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.scheduled_content: Dict[str, List[ContentPiece]] = {}  # date -> content list
        
    def add_content(self, content: ContentPiece):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        if content.scheduled_time:
            date_key = content.scheduled_time.strftime("%Y-%m-%d")
            if date_key not in self.scheduled_content:
                self.scheduled_content[date_key] = []
            self.scheduled_content[date_key].append(content)
    
    def get_content_for_date(self, date: datetime) -> List[ContentPiece]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
        date_key = date.strftime("%Y-%m-%d")
        return self.scheduled_content.get(date_key, [])
    
    def get_week_content(self, start_date: datetime) -> Dict[str, List[ContentPiece]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        week_content = {}
        for i in range(7):
            current_date = start_date + timedelta(days=i)
            date_key = current_date.strftime("%Y-%m-%d")
            week_content[date_key] = self.get_content_for_date(current_date)
        return week_content

class ContentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self, notion_token: str, content_db_id: str, media_db_id: str):
        self.notion = AsyncClient(auth=notion_token)
        self.content_db_id = content_db_id
        self.media_db_id = media_db_id
        self.calendar = ContentCalendar()
        self.content_templates = {}
        
    async def create_content_draft(
        self,
        title: str,
        content_type: ContentType,
        text_content: str = "",
        platforms: List[Platform] = None,
        hashtags: List[str] = None,
        media_files: List[str] = None,  # file URLs or IDs
        author_telegram_id: str = None,
        scheduled_time: Optional[datetime] = None
    ) -> ContentPiece:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_objects = []
        if media_files:
            for media_id in media_files:
                media = await self.get_media_file(media_id)
                if media:
                    media_objects.append(media)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = ContentPiece(
            id=str(uuid.uuid4()),
            title=title,
            content_type=content_type,
            status=ContentStatus.DRAFT,
            text_content=text_content,
            media_files=media_objects,
            platforms=platforms or [],
            hashtags=hashtags or [],
            scheduled_time=scheduled_time,
            created_at=datetime.now(),
            updated_at=datetime.now(),
            author_id=author_telegram_id or "unknown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Notion
        await self._save_content_to_notion(content)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –µ—Å–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
        if scheduled_time:
            self.calendar.add_content(content)
            
        return content
    
    async def update_content(
        self,
        content_id: str,
        title: Optional[str] = None,
        text_content: Optional[str] = None,
        status: Optional[ContentStatus] = None,
        platforms: Optional[List[Platform]] = None,
        hashtags: Optional[List[str]] = None,
        scheduled_time: Optional[datetime] = None,
        notes: Optional[str] = None,
        updater_telegram_id: Optional[str] = None
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        content = await self.get_content(content_id)
        if not content:
            return False
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        if title:
            content.title = title
        if text_content is not None:
            content.text_content = text_content
        if status:
            content.status = status
        if platforms is not None:
            content.platforms = platforms
        if hashtags is not None:
            content.hashtags = hashtags
        if scheduled_time:
            content.scheduled_time = scheduled_time
            self.calendar.add_content(content)
        if notes is not None:
            content.notes = notes
            
        content.updated_at = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await self._save_content_to_notion(content)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        if status:
            await self._notify_content_status_change(content, updater_telegram_id)
            
        return True
    
    async def get_content(self, content_id: str) -> Optional[ContentPiece]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ ID"""
        try:
            # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ Notion
            response = await self.notion.databases.query(
                database_id=self.content_db_id,
                filter={
                    "property": "ID",
                    "rich_text": {"equals": content_id}
                }
            )
            
            if response["results"]:
                return await self._parse_content_from_notion(response["results"][0])
                
        except Exception as e:
            logger.error(f"Error getting content {content_id}: {e}")
            
        return None
    
    async def get_content_by_status(self, status: ContentStatus) -> List[ContentPiece]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        try:
            response = await self.notion.databases.query(
                database_id=self.content_db_id,
                filter={
                    "property": "–°—Ç–∞—Ç—É—Å",
                    "select": {"equals": status.value}
                },
                sorts=[{"property": "–û–±–Ω–æ–≤–ª–µ–Ω–æ", "direction": "descending"}]
            )
            
            content_list = []
            for page in response["results"]:
                content = await self._parse_content_from_notion(page)
                if content:
                    content_list.append(content)
                    
            return content_list
            
        except Exception as e:
            logger.error(f"Error getting content by status {status}: {e}")
            return []
    
    async def get_scheduled_content(self, date: datetime) -> List[ContentPiece]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –¥–∞—Ç—É"""
        try:
            start_date = date.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = start_date + timedelta(days=1)
            
            response = await self.notion.databases.query(
                database_id=self.content_db_id,
                filter={
                    "and": [
                        {
                            "property": "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                            "date": {"on_or_after": start_date.isoformat()}
                        },
                        {
                            "property": "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",  
                            "date": {"before": end_date.isoformat()}
                        },
                        {
                            "property": "–°—Ç–∞—Ç—É—Å",
                            "select": {"equals": ContentStatus.SCHEDULED.value}
                        }
                    ]
                },
                sorts=[{"property": "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "direction": "ascending"}]
            )
            
            content_list = []
            for page in response["results"]:
                content = await self._parse_content_from_notion(page)
                if content:
                    content_list.append(content)
                    
            return content_list
            
        except Exception as e:
            logger.error(f"Error getting scheduled content: {e}")
            return []
    
    async def upload_media_file(
        self,
        file_data: bytes,
        filename: str,
        file_type: str,
        alt_text: Optional[str] = None,
        tags: List[str] = None,
        uploader_telegram_id: Optional[str] = None
    ) -> MediaFile:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
        file_id = str(uuid.uuid4())
        file_url = f"https://storage.example.com/{file_id}/{filename}"
        
        media_file = MediaFile(
            id=file_id,
            filename=filename,
            file_type=file_type,
            file_size=len(file_data),
            url=file_url,
            alt_text=alt_text,
            tags=tags or [],
            uploaded_at=datetime.now()
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ Notion
        await self._save_media_to_notion(media_file, uploader_telegram_id)
        
        return media_file
    
    async def get_media_file(self, media_id: str) -> Optional[MediaFile]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        try:
            response = await self.notion.databases.query(
                database_id=self.media_db_id,
                filter={
                    "property": "ID",
                    "rich_text": {"equals": media_id}
                }
            )
            
            if response["results"]:
                return await self._parse_media_from_notion(response["results"][0])
                
        except Exception as e:
            logger.error(f"Error getting media file {media_id}: {e}")
            
        return None
    
    async def search_media(
        self,
        query: Optional[str] = None,
        file_type: Optional[str] = None,
        tags: List[str] = None
    ) -> List[MediaFile]:
        """–ü–æ–∏—Å–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"""
        
        filters = []
        
        if query:
            filters.append({
                "property": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "rich_text": {"contains": query}
            })
            
        if file_type:
            filters.append({
                "property": "–¢–∏–ø",
                "select": {"equals": file_type}
            })
            
        if tags:
            for tag in tags:
                filters.append({
                    "property": "–¢–µ–≥–∏",
                    "multi_select": {"contains": tag}
                })
        
        try:
            filter_condition = {"and": filters} if len(filters) > 1 else filters[0] if filters else {}
            
            response = await self.notion.databases.query(
                database_id=self.media_db_id,
                filter=filter_condition,
                sorts=[{"property": "–ó–∞–≥—Ä—É–∂–µ–Ω–æ", "direction": "descending"}]
            )
            
            media_list = []
            for page in response["results"]:
                media = await self._parse_media_from_notion(page)
                if media:
                    media_list.append(media)
                    
            return media_list
            
        except Exception as e:
            logger.error(f"Error searching media: {e}")
            return []
    
    async def create_content_template(
        self,
        name: str,
        content_type: ContentType,
        template_text: str,
        default_platforms: List[Platform],
        default_hashtags: List[str],
        creator_telegram_id: str
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        template_id = str(uuid.uuid4())
        
        self.content_templates[template_id] = {
            "name": name,
            "content_type": content_type,
            "template_text": template_text,
            "default_platforms": default_platforms,
            "default_hashtags": default_hashtags,
            "creator_id": creator_telegram_id,
            "created_at": datetime.now()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Notion (–±–∞–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤)
        await self._save_template_to_notion(template_id, self.content_templates[template_id])
        
        return template_id
    
    async def use_template(self, template_id: str, title: str, custom_text: str = "") -> ContentPiece:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        template = self.content_templates.get(template_id)
        if not template:
            return None
            
        # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
        final_text = template["template_text"]
        if custom_text:
            final_text = final_text.replace("{CUSTOM_TEXT}", custom_text)
        final_text = final_text.replace("{DATE}", datetime.now().strftime("%d.%m.%Y"))
        
        return await self.create_content_draft(
            title=title,
            content_type=template["content_type"],
            text_content=final_text,
            platforms=template["default_platforms"],
            hashtags=template["default_hashtags"],
            author_telegram_id=template["creator_id"]
        )
    
    def generate_content_keyboard(self, content: ContentPiece) -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        
        keyboard = []
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å—Ç–∞—Ç—É—Å—ã
        status_row = []
        if content.status == ContentStatus.DRAFT:
            status_row.append(InlineKeyboardButton("üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"content_status_{content.id}_review"))
        elif content.status == ContentStatus.REVIEW:
            status_row.append(InlineKeyboardButton("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"content_status_{content.id}_approved"))
            status_row.append(InlineKeyboardButton("üìù –í —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data=f"content_status_{content.id}_draft"))
        elif content.status == ContentStatus.APPROVED:
            status_row.append(InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"content_schedule_{content.id}"))
            
        if status_row:
            keyboard.append(status_row)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        keyboard.append([
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"content_edit_{content.id}"),
            InlineKeyboardButton("üñºÔ∏è –ú–µ–¥–∏–∞", callback_data=f"content_media_{content.id}")
        ])
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        keyboard.append([
            InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f"content_details_{content.id}"),
            InlineKeyboardButton("üóÇÔ∏è –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"content_duplicate_{content.id}")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    def format_content_message(self, content: ContentPiece, detailed: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
        
        msg = f"**{content.title}**\n\n"
        msg += f"üìù –¢–∏–ø: {content.content_type.value}\n"
        msg += f"üìä –°—Ç–∞—Ç—É—Å: {content.status.value}\n"
        
        if content.platforms:
            platform_names = [p.value for p in content.platforms]
            msg += f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(platform_names)}\n"
        
        if content.scheduled_time:
            msg += f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {content.scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        
        if content.media_files:
            msg += f"üñºÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {len(content.media_files)}\n"
        
        if content.hashtags:
            msg += f"#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {' '.join(['#' + tag for tag in content.hashtags])}\n"
        
        if detailed and content.text_content:
            preview = content.text_content[:200] + "..." if len(content.text_content) > 200 else content.text_content
            msg += f"\nüìÑ –¢–µ–∫—Å—Ç:\n{preview}\n"
        
        if detailed and content.notes:
            msg += f"\nüìù –ó–∞–º–µ—Ç–∫–∏: {content.notes}\n"
        
        msg += f"\nüïê –°–æ–∑–¥–∞–Ω–æ: {content.created_at.strftime('%d.%m.%Y %H:%M')}"
        
        return msg
    
    def format_calendar_week(self, week_content: Dict[str, List[ContentPiece]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        
        msg = "üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é**\n\n"
        
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        
        for i, (date_key, content_list) in enumerate(week_content.items()):
            date_obj = datetime.strptime(date_key, "%Y-%m-%d")
            day_name = days[date_obj.weekday()]
            
            msg += f"**{day_name} {date_obj.strftime('%d.%m')}**\n"
            
            if content_list:
                for content in content_list:
                    time_str = content.scheduled_time.strftime("%H:%M") if content.scheduled_time else "?"
                    platforms = " ".join([p.value.split()[0] for p in content.platforms])
                    msg += f"  {time_str} - {content.title} {platforms}\n"
            else:
                msg += "  _–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞_\n"
                
            msg += "\n"
        
        return msg
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion
    async def _save_content_to_notion(self, content: ContentPiece):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Notion"""
        
        properties = {
            "ID": {"rich_text": [{"text": {"content": content.id}}]},
            "–ù–∞–∑–≤–∞–Ω–∏–µ": {"title": [{"text": {"content": content.title}}]},
            "–¢–∏–ø": {"select": {"name": content.content_type.value}},
            "–°—Ç–∞—Ç—É—Å": {"select": {"name": content.status.value}},
            "–¢–µ–∫—Å—Ç": {"rich_text": [{"text": {"content": content.text_content}}]},
            "–°–æ–∑–¥–∞–Ω–æ": {"date": {"start": content.created_at.isoformat()}},
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ": {"date": {"start": content.updated_at.isoformat()}}
        }
        
        if content.scheduled_time:
            properties["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] = {"date": {"start": content.scheduled_time.isoformat()}}
            
        if content.platforms:
            properties["–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"] = {"multi_select": [{"name": p.value} for p in content.platforms]}
            
        if content.hashtags:
            properties["–•–µ—à—Ç–µ–≥–∏"] = {"rich_text": [{"text": {"content": " ".join(["#" + tag for tag in content.hashtags])}}]}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            existing = await self.notion.databases.query(
                database_id=self.content_db_id,
                filter={
                    "property": "ID",
                    "rich_text": {"equals": content.id}
                }
            )
            
            if existing["results"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                await self.notion.pages.update(
                    page_id=existing["results"][0]["id"],
                    properties=properties
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                await self.notion.pages.create(
                    parent={"database_id": self.content_db_id},
                    properties=properties
                )
                
        except Exception as e:
            logger.error(f"Error saving content to Notion: {e}")
    
    async def _save_media_to_notion(self, media: MediaFile, uploader_id: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ Notion"""
        
        properties = {
            "ID": {"rich_text": [{"text": {"content": media.id}}]},
            "–ù–∞–∑–≤–∞–Ω–∏–µ": {"title": [{"text": {"content": media.filename}}]},
            "–¢–∏–ø": {"select": {"name": media.file_type}}, 
            "–†–∞–∑–º–µ—Ä": {"number": media.file_size},
            "URL": {"url": media.url},
            "–ó–∞–≥—Ä—É–∂–µ–Ω–æ": {"date": {"start": media.uploaded_at.isoformat()}}
        }
        
        if media.alt_text:
            properties["Alt —Ç–µ–∫—Å—Ç"] = {"rich_text": [{"text": {"content": media.alt_text}}]}
            
        if media.tags:
            properties["–¢–µ–≥–∏"] = {"multi_select": [{"name": tag} for tag in media.tags]}
        
        try:
            await self.notion.pages.create(
                parent={"database_id": self.media_db_id},
                properties=properties
            )
        except Exception as e:
            logger.error(f"Error saving media to Notion: {e}")
    
    async def _parse_content_from_notion(self, page: Dict) -> Optional[ContentPiece]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ Notion –≤ –æ–±—ä–µ–∫—Ç ContentPiece
        return None
    
    async def _parse_media_from_notion(self, page: Dict) -> Optional[MediaFile]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ Notion –≤ –æ–±—ä–µ–∫—Ç MediaFile
        return None
    
    async def _notify_content_status_change(self, content: ContentPiece, updater_id: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
        pass
    
    async def _save_template_to_notion(self, template_id: str, template_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ Notion"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        pass 