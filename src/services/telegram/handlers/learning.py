import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../shared_code')))

from integrations.notion import NotionClient
from integrations.yandex_cloud import YandexCloudClient
from utils.logging_utils import get_logger

logger = get_logger("life_bot.learning")
notion = NotionClient()
yandex = YandexCloudClient()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ....models.base import LearningProgress
from ....repositories.notion_repository import NotionLearningRepository
from datetime import datetime
from ....utils.date_utils import calculate_next_review
from typing import Optional

class LearningHandler:
    """Handler for learning-related commands"""
    
    def __init__(self, learning_repository: NotionLearningRepository):
        self.learning_repository = learning_repository
    
    async def learn_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /learn command"""
        keyboard = [
            [
                InlineKeyboardButton("üìö –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="learn_start"),
                InlineKeyboardButton("üìã –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="learn_progress")
            ],
            [
                InlineKeyboardButton("üîÑ –ù–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", callback_data="learn_review"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="learn_stats")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def start_learning(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start learning session"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å
        tasks = await self.learning_repository.list({
            "status": {"equals": "Not Started"}
        })
        
        if not tasks:
            await update.callback_query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è! "
                "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /task"
            )
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
        current_task = tasks[0]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        keyboard = [
            [
                InlineKeyboardButton("üòï –ù–µ —É–≤–µ—Ä–µ–Ω (20%)", callback_data="confidence_20"),
                InlineKeyboardButton("ü§î –ß–∞—Å—Ç–∏—á–Ω–æ (40%)", callback_data="confidence_40")
            ],
            [
                InlineKeyboardButton("üëç –•–æ—Ä–æ—à–æ (70%)", callback_data="confidence_70"),
                InlineKeyboardButton("üí™ –û—Ç–ª–∏—á–Ω–æ (95%)", callback_data="confidence_95")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["current_learning_task"] = current_task.id
        
        await update.callback_query.message.reply_text(
            f"üìö *–ò–∑—É—á–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª*\n\n"
            f"–ó–∞–¥–∞—á–∞: *{current_task.title}*\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    async def handle_confidence_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle confidence rating selection"""
        query = update.callback_query
        confidence = int(query.data.split("_")[1])
        task_id = context.user_data.get("current_learning_task")
        
        if not task_id:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress = LearningProgress(
            id="",  # ID –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω Notion
            task_id=task_id,
            status="In Progress",
            last_review=datetime.utcnow(),
            next_review=calculate_next_review(confidence),
            confidence_level=confidence,
            notes=None
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Notion
        created_progress = await self.learning_repository.create(progress)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop("current_learning_task", None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
        next_review = created_progress.next_review
        next_review_text = (
            f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_review.strftime('%d.%m.%Y')}"
            if next_review else "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        )
        
        await query.message.reply_text(
            f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence}%\n"
            f"{next_review_text}\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /learn"
        )
    
    async def show_progress(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show learning progress"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_records = await self.learning_repository.list()
        
        if not progress_records:
            await update.callback_query.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è. "
                "–ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /learn"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_groups = {
            "–ù–∞—á–∞–ª—å–Ω—ã–π (0-30%)": 0,
            "–°—Ä–µ–¥–Ω–∏–π (31-60%)": 0,
            "–•–æ—Ä–æ—à–∏–π (61-85%)": 0,
            "–û—Ç–ª–∏—á–Ω—ã–π (86-100%)": 0
        }
        
        for record in progress_records:
            conf = record.confidence_level
            if conf <= 30:
                confidence_groups["–ù–∞—á–∞–ª—å–Ω—ã–π (0-30%)"] += 1
            elif conf <= 60:
                confidence_groups["–°—Ä–µ–¥–Ω–∏–π (31-60%)"] += 1
            elif conf <= 85:
                confidence_groups["–•–æ—Ä–æ—à–∏–π (61-85%)"] += 1
            else:
                confidence_groups["–û—Ç–ª–∏—á–Ω—ã–π (86-100%)"] += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—É—á–µ–Ω–∏–∏*\n\n"
        for group, count in confidence_groups.items():
            message += f"{group}: {count} —Ç–µ–º\n"
        
        message += f"\n–í—Å–µ–≥–æ —Ç–µ–º: {len(progress_records)}"
        
        await update.callback_query.message.reply_text(
            message,
            parse_mode="Markdown"
        )
    
    async def show_review_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show tasks that need review"""
        now = datetime.utcnow()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        progress_records = await self.learning_repository.list({
            "next_review": {"before": now.isoformat()}
        })
        
        if not progress_records:
            await update.callback_query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! "
                "–í—Å–µ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è —Å–≤–µ–∂–∏ –≤ –ø–∞–º—è—Ç–∏ üéâ"
            )
            return
        
        message = "üîÑ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n\n"
        for i, record in enumerate(progress_records, 1):
            message += (
                f"{i}. –ó–∞–¥–∞—á–∞: *{record.task_id}*\n"
                f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {record.last_review.strftime('%d.%m.%Y')}\n"
                f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {record.confidence_level}%\n\n"
            )
        
        keyboard = [[
            InlineKeyboardButton("üìö –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", callback_data="learn_start_review")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        ) 