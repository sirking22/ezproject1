"""
üîß –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Notion
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any, Union, TypeVar, Generic
from datetime import datetime
from dataclasses import dataclass
from enum import Enum

try:
    from notion_client import AsyncClient
    from notion_client.errors import NotionClientError, APIResponseError
except ImportError:
    # Fallback –µ—Å–ª–∏ notion_client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    AsyncClient = None
    NotionClientError = Exception
    APIResponseError = Exception

from ..models.notion_models import NotionPage, NotionDatabase
try:
    from ..config import get_settings
except ImportError:
    # Fallback –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    def get_settings():
        return type('Settings', (), {'NOTION_TOKEN': ''})()

try:
    from notion_database_schemas import (
        get_database_schema, 
        get_database_id, 
        validate_property_value,
        get_status_options,
        get_select_options,
        get_multi_select_options,
        DatabaseSchema
    )
except ImportError:
    # Fallback —Ñ—É–Ω–∫—Ü–∏–∏
    def get_database_schema(db_name): return None
    def get_database_id(db_name): return ""
    def validate_property_value(db_name, field_name, value): return True
    def get_status_options(db_name, field_name): return []
    def get_select_options(db_name, field_name): return []
    def get_multi_select_options(db_name, field_name): return []
    DatabaseSchema = None

logger = logging.getLogger(__name__)

# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
T = TypeVar('T')

class NotionError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Notion"""
    pass

class ValidationError(NotionError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class DatabaseNotFoundError(NotionError):
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"""
    pass

class OperationResult(Generic[T]):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    def __init__(self, success: bool, data: Optional[T] = None, error: Optional[str] = None):
        self.success = success
        self.data = data
        self.error = error
        self.timestamp = datetime.now()
    
    def __bool__(self) -> bool:
        return self.success

@dataclass
class FilterCondition:
    """–£—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    property: str
    condition: str  # equals, contains, not_equals, etc.
    value: Any

@dataclass
class SortCondition:
    """–£—Å–ª–æ–≤–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    property: str
    direction: str = "ascending"  # ascending, descending

class NotionManager:
    """
    üéØ –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        self.settings = get_settings()
        self.client = AsyncClient(auth=self.settings.NOTION_TOKEN)
        self._schema_cache: Dict[str, DatabaseSchema] = {}
        self._stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'databases_accessed': set()
        }
        
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NotionManager...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            await self.client.users.me()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Notion API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Notion API: {e}")
            raise NotionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Notion API: {e}")
    
    async def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self.client, 'close'):
            await self.client.close()
        logger.info("üßπ NotionManager –æ—á–∏—â–µ–Ω")
    
    # ===== –†–ê–ë–û–¢–ê –° –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–• =====
    
    async def get_database_info(self, db_name: str) -> OperationResult[Dict[str, Any]]:
        """
        üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ö–µ–º—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            schema = get_database_schema(db_name)
            if not schema:
                return OperationResult(False, error=f"–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            self._stats['total_requests'] += 1
            self._stats['databases_accessed'].add(db_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Notion
            database = await self.client.databases.retrieve(database_id=schema.database_id)
            
            self._stats['successful_requests'] += 1
            
            info = {
                'id': database['id'],
                'title': database['title'],
                'description': schema.description,
                'properties_count': len(database['properties']),
                'schema': schema,
                'notion_metadata': database
            }
            
            return OperationResult(True, data=info)
            
        except Exception as e:
            self._stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '{db_name}': {e}")
            return OperationResult(False, error=str(e))
    
    # ===== –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ï–ô =====
    
    async def create_record(
        self, 
        db_name: str, 
        data: Dict[str, Any], 
        validate: bool = True
    ) -> OperationResult[Dict[str, Any]]:
        """
        ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            validate: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        """
        try:
            schema = get_database_schema(db_name)
            if not schema:
                return OperationResult(False, error=f"–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if validate:
                validation_result = self._validate_data(db_name, data)
                if not validation_result.success:
                    return validation_result
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Notion
            properties = self._convert_to_notion_properties(db_name, data)
            
            self._stats['total_requests'] += 1
            self._stats['databases_accessed'].add(db_name)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            response = await self.client.pages.create(
                parent={"database_id": schema.database_id},
                properties=properties
            )
            
            self._stats['successful_requests'] += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            result_data = self._convert_from_notion_page(response)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ '{db_name}': {result_data.get('id', 'unknown')}")
            
            return OperationResult(True, data=result_data)
            
        except Exception as e:
            self._stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ '{db_name}': {e}")
            return OperationResult(False, error=str(e))
    
    # ===== –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô =====
    
    async def get_record(self, db_name: str, record_id: str) -> OperationResult[Dict[str, Any]]:
        """
        üîç –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID
        
        Args:
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            record_id: ID –∑–∞–ø–∏—Å–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        """
        try:
            self._stats['total_requests'] += 1
            self._stats['databases_accessed'].add(db_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
            response = await self.client.pages.retrieve(page_id=record_id)
            
            self._stats['successful_requests'] += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            result_data = self._convert_from_notion_page(response)
            
            return OperationResult(True, data=result_data)
            
        except Exception as e:
            self._stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ '{record_id}' –∏–∑ –±–∞–∑—ã '{db_name}': {e}")
            return OperationResult(False, error=str(e))
    
    async def query_records(
        self,
        db_name: str,
        filters: Optional[List[FilterCondition]] = None,
        sorts: Optional[List[SortCondition]] = None,
        limit: Optional[int] = None
    ) -> OperationResult[List[Dict[str, Any]]]:
        """
        üîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        
        Args:
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            filters: –£—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            sorts: –£—Å–ª–æ–≤–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            limit: –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–µ–π
        """
        try:
            schema = get_database_schema(db_name)
            if not schema:
                return OperationResult(False, error=f"–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
            query = {
                "database_id": schema.database_id,
                "page_size": limit or 100
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if filters:
                filter_conditions = []
                for f in filters:
                    filter_conditions.append(self._build_filter_condition(f))
                
                if len(filter_conditions) == 1:
                    query["filter"] = filter_conditions[0]
                else:
                    query["filter"] = {"and": filter_conditions}
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            if sorts:
                query["sorts"] = [
                    {
                        "property": s.property,
                        "direction": s.direction
                    }
                    for s in sorts
                ]
            
            self._stats['total_requests'] += 1
            self._stats['databases_accessed'].add(db_name)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await self.client.databases.query(**query)
            
            self._stats['successful_requests'] += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = []
            for page in response.get("results", []):
                try:
                    result_data = self._convert_from_notion_page(page)
                    results.append(result_data)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
                    continue
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã '{db_name}'")
            
            return OperationResult(True, data=results)
            
        except Exception as e:
            self._stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã '{db_name}': {e}")
            return OperationResult(False, error=str(e))
    
    # ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô =====
    
    async def update_record(
        self, 
        db_name: str, 
        record_id: str, 
        data: Dict[str, Any],
        validate: bool = True
    ) -> OperationResult[Dict[str, Any]]:
        """
        ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
        
        Args:
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            record_id: ID –∑–∞–ø–∏—Å–∏
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            validate: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        """
        try:
            schema = get_database_schema(db_name)
            if not schema:
                return OperationResult(False, error=f"–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if validate:
                validation_result = self._validate_data(db_name, data)
                if not validation_result.success:
                    return validation_result
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Notion
            properties = self._convert_to_notion_properties(db_name, data)
            
            self._stats['total_requests'] += 1
            self._stats['databases_accessed'].add(db_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            response = await self.client.pages.update(
                page_id=record_id,
                properties=properties
            )
            
            self._stats['successful_requests'] += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            result_data = self._convert_from_notion_page(response)
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å '{record_id}' –≤ –±–∞–∑–µ '{db_name}'")
            
            return OperationResult(True, data=result_data)
            
        except Exception as e:
            self._stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ '{record_id}' –≤ –±–∞–∑–µ '{db_name}': {e}")
            return OperationResult(False, error=str(e))
    
    # ===== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô =====
    
    async def delete_record(self, db_name: str, record_id: str) -> OperationResult[bool]:
        """
        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å)
        
        Args:
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            record_id: ID –∑–∞–ø–∏—Å–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        """
        try:
            self._stats['total_requests'] += 1
            self._stats['databases_accessed'].add(db_name)
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
            await self.client.pages.update(
                page_id=record_id,
                archived=True
            )
            
            self._stats['successful_requests'] += 1
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å '{record_id}' –∏–∑ –±–∞–∑—ã '{db_name}'")
            
            return OperationResult(True, data=True)
            
        except Exception as e:
            self._stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ '{record_id}' –∏–∑ –±–∞–∑—ã '{db_name}': {e}")
            return OperationResult(False, error=str(e))
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def _validate_data(self, db_name: str, data: Dict[str, Any]) -> OperationResult[bool]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Notion"""
        try:
            schema = get_database_schema(db_name)
            if not schema:
                return OperationResult(False, error=f"–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            errors = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            for field_name, field_value in data.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ
                if field_name not in schema.properties:
                    errors.append(f"–ü–æ–ª–µ '{field_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    continue
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if not validate_property_value(db_name, field_name, field_value):
                    valid_options = (
                        get_status_options(db_name, field_name) or
                        get_select_options(db_name, field_name) or
                        get_multi_select_options(db_name, field_name)
                    )
                    if valid_options:
                        errors.append(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{field_value}' –¥–ª—è –ø–æ–ª—è '{field_name}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {valid_options}")
                    else:
                        errors.append(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{field_value}' –¥–ª—è –ø–æ–ª—è '{field_name}'")
            
            if errors:
                return OperationResult(False, error=f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'; '.join(errors)}")
            
            return OperationResult(True, data=True)
            
        except Exception as e:
            return OperationResult(False, error=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    def _convert_to_notion_properties(self, db_name: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç Notion"""
        schema = get_database_schema(db_name)
        if not schema:
            raise ValueError(f"–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        properties = {}
        
        for field_name, field_value in data.items():
            if field_name not in schema.properties:
                continue
            
            property_config = schema.properties[field_name]
            property_type = property_config.get('type')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if property_type == 'title':
                properties[field_name] = {
                    "title": [{"text": {"content": str(field_value)}}]
                }
            elif property_type == 'rich_text':
                properties[field_name] = {
                    "rich_text": [{"text": {"content": str(field_value)}}]
                }
            elif property_type == 'select':
                properties[field_name] = {
                    "select": {"name": str(field_value)}
                }
            elif property_type == 'multi_select':
                if isinstance(field_value, list):
                    properties[field_name] = {
                        "multi_select": [{"name": str(v)} for v in field_value]
                    }
                else:
                    properties[field_name] = {
                        "multi_select": [{"name": str(field_value)}]
                    }
            elif property_type == 'number':
                properties[field_name] = {
                    "number": float(field_value) if field_value is not None else None
                }
            elif property_type == 'date':
                if isinstance(field_value, str):
                    properties[field_name] = {
                        "date": {"start": field_value}
                    }
                elif isinstance(field_value, datetime):
                    properties[field_name] = {
                        "date": {"start": field_value.isoformat()}
                    }
            elif property_type == 'url':
                properties[field_name] = {
                    "url": str(field_value) if field_value else None
                }
            elif property_type == 'status':
                properties[field_name] = {
                    "status": {"name": str(field_value)}
                }
            elif property_type == 'people':
                if isinstance(field_value, list):
                    properties[field_name] = {
                        "people": [{"id": str(v)} for v in field_value]
                    }
                else:
                    properties[field_name] = {
                        "people": [{"id": str(field_value)}]
                    }
            elif property_type == 'relation':
                if isinstance(field_value, list):
                    properties[field_name] = {
                        "relation": [{"id": str(v)} for v in field_value]
                    }
                else:
                    properties[field_name] = {
                        "relation": [{"id": str(field_value)}]
                    }
        
        return properties
    
    def _convert_from_notion_page(self, page: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç"""
        result = {
            'id': page['id'],
            'created_time': page['created_time'],
            'last_edited_time': page['last_edited_time'],
            'archived': page.get('archived', False),
            'url': page.get('url', ''),
            'properties': {}
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        for prop_name, prop_data in page.get('properties', {}).items():
            prop_type = prop_data.get('type')
            
            if prop_type == 'title' and prop_data.get('title'):
                result['properties'][prop_name] = prop_data['title'][0]['text']['content']
            elif prop_type == 'rich_text' and prop_data.get('rich_text'):
                result['properties'][prop_name] = prop_data['rich_text'][0]['text']['content']
            elif prop_type == 'select' and prop_data.get('select'):
                result['properties'][prop_name] = prop_data['select']['name']
            elif prop_type == 'multi_select':
                result['properties'][prop_name] = [item['name'] for item in prop_data.get('multi_select', [])]
            elif prop_type == 'number':
                result['properties'][prop_name] = prop_data.get('number')
            elif prop_type == 'date' and prop_data.get('date'):
                result['properties'][prop_name] = prop_data['date']['start']
            elif prop_type == 'url':
                result['properties'][prop_name] = prop_data.get('url')
            elif prop_type == 'status' and prop_data.get('status'):
                result['properties'][prop_name] = prop_data['status']['name']
            elif prop_type == 'people':
                result['properties'][prop_name] = [person['id'] for person in prop_data.get('people', [])]
            elif prop_type == 'relation':
                result['properties'][prop_name] = [rel['id'] for rel in prop_data.get('relation', [])]
        
        return result
    
    def _build_filter_condition(self, filter_condition: FilterCondition) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è Notion API"""
        prop_name = filter_condition.property
        condition = filter_condition.condition
        value = filter_condition.value
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤–æ–π—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —á–µ—Ä–µ–∑ —Å—Ö–µ–º—É)
        if condition in ['equals', 'does_not_equal']:
            return {
                "property": prop_name,
                "select": {condition: value}
            }
        elif condition == 'contains':
            return {
                "property": prop_name,
                "multi_select": {"contains": value}
            }
        elif condition in ['is_empty', 'is_not_empty']:
            return {
                "property": prop_name,
                "rich_text": {condition: True}
            }
        else:
            # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π
            return {
                "property": prop_name,
                "rich_text": {"contains": str(value)}
            }
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            'total_requests': self._stats['total_requests'],
            'successful_requests': self._stats['successful_requests'],
            'failed_requests': self._stats['failed_requests'],
            'success_rate': (
                self._stats['successful_requests'] / max(self._stats['total_requests'], 1) * 100
            ),
            'databases_accessed': list(self._stats['databases_accessed']),
            'databases_count': len(self._stats['databases_accessed'])
        }
    
    def reset_stats(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self._stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'databases_accessed': set()
        }