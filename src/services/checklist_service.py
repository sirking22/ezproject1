#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –£–ü–†–û–©–ï–ù–ù–´–ô –°–ï–†–í–ò–° –ß–ï–ö–õ–ò–°–¢–û–í

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç Notion-Telegram-LLM.
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π.
"""

import re
import asyncio
from typing import List, Dict, Any, Optional
from notion_client import AsyncClient

from ..core.config import settings
from ..models.base import BaseModel
from src.utils.logging_utils import get_logger

logger = get_logger(__name__)

print('DEBUG: checklist_service.py loaded')

class ChecklistService(BaseModel):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.client = AsyncClient(auth=settings.NOTION_TOKEN)
        
        # ID –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.databases = {
            'tasks': 'd09df250ce7e4e0d9fbe4e036d320def',
            'guides': '47c6086858d442ebaeceb4fad1b23ba3',
            'checklists': '9c5f4269d61449b6a7485579a3c21da3'
        }
    
    async def extract_checklists_from_guide(self, guide_content: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–µ–∫–ª–∏—Å—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–∞–π–¥–∞"""
        
        checklists = []
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤
        patterns = [
            r'## ‚úÖ –ß–µ–∫–ª–∏—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞:(.*?)(?=##|\Z)',
            r'## üìã –ß–µ–∫–ª–∏—Å—Ç:(.*?)(?=##|\Z)',
            r'## ‚úÖ –ß–µ–∫–ª–∏—Å—Ç:(.*?)(?=##|\Z)',
            r'### –ß–µ–∫–ª–∏—Å—Ç:(.*?)(?=###|\Z)',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, guide_content, re.DOTALL | re.IGNORECASE)
            for match in matches:
                if match.strip():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
                    items = re.findall(r'- \[ \] (.*?)(?=\n- \[ \]|\n##|\n###|\Z)', match, re.DOTALL)
                    if items:
                        checklists.append({
                            'title': '–ß–µ–∫–ª–∏—Å—Ç –∏–∑ –≥–∞–π–¥–∞',
                            'items': [item.strip() for item in items if item.strip()]
                        })
        
        return checklists
    
    async def create_checklist_item(self, title: str, items: List[str], task_id: str, guide_id: str = None) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å —á–µ–∫–ª–∏—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è)"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ–∫–ª–∏—Å—Ç–∞
            checklist_content = []
            for item in items:
                checklist_content.append({
                    "type": "to_do",
                    "to_do": {
                        "rich_text": [{"type": "text", "text": {"content": item}}],
                        "checked": False
                    }
                })
            
            # –¢–û–õ–¨–ö–û –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ü–û–õ–Ø
            properties = {
                "–ü–æ–¥–∑–∞–¥–∞—á–∏": {
                    "title": [{"text": {"content": title}}]
                },
                "–°—Ç–∞—Ç—É—Å": {
                    "status": {"name": "To do"}
                },
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": {
                    "select": {"name": "–°—Ä–µ–¥–Ω–∏–π"}
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
            if task_id:
                properties["–ó–∞–¥–∞—á–∏"] = {
                    "relation": [{"id": task_id}]
                }
            
            if guide_id:
                properties["üì¨ –ì–∞–π–¥—ã"] = {
                    "relation": [{"id": guide_id}]
                }
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ–∫–ª–∏—Å—Ç–∞
            response = await self.client.pages.create(
                parent={"database_id": self.databases['checklists']},
                properties=properties,
                children=[
                    {
                        "type": "heading_2",
                        "heading_2": {
                            "rich_text": [{"type": "text", "text": {"content": "–ß–µ–∫–ª–∏—Å—Ç"}}]
                        }
                    },
                    *checklist_content,
                    {
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∫ –∫–æ–ø–∏—è –∏–∑ –≥–∞–π–¥–∞. –ü—É–Ω–∫—Ç–æ–≤: {len(items)}"}}]
                        }
                    }
                ]
            )
            
            checklist_id = response['id']
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫–ª–∏—Å—Ç: {title} ({len(items)} –ø—É–Ω–∫—Ç–æ–≤)")
            
            return checklist_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–∞: {e}")
            return None
    
    async def process_task_creation(self, task_id: str) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {task_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task = await self.client.pages.retrieve(page_id=task_id)
            task_properties = task.get('properties', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∞–π–¥—ã
            guides_relation = task_properties.get('üì¨ –ì–∞–π–¥—ã', {}).get('relation', [])
            
            if not guides_relation:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≥–∞–π–¥–æ–≤ - —á–µ–∫–ª–∏—Å—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
                return 0
            
            logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≥–∞–π–¥–æ–≤: {len(guides_relation)}")
            
            total_checklists = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≥–∞–π–¥
            for guide_relation in guides_relation:
                guide_id = guide_relation['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≥–∞–π–¥–∞
                guide = await self.client.pages.retrieve(page_id=guide_id)
                guide_title = guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–∞–π–¥')
                
                logger.info(f"üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞–π–¥–∞: {guide_title}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≥–∞–π–¥–∞
                guide_content = await self.get_guide_content(guide_id)
                
                if guide_content:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–µ–∫–ª–∏—Å—Ç—ã
                    checklists = await self.extract_checklists_from_guide(guide_content)
                    
                    if checklists:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklists)}")
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ —á–µ–∫–ª–∏—Å—Ç–æ–≤
                        for checklist in checklists:
                            checklist_title = f"–ß–µ–∫–ª–∏—Å—Ç: {guide_title}"
                            checklist_id = await self.create_checklist_item(
                                title=checklist_title,
                                items=checklist['items'],
                                task_id=task_id,
                                guide_id=guide_id
                            )
                            
                            if checklist_id:
                                total_checklists += 1
                    else:
                        logger.info("‚ÑπÔ∏è –ß–µ–∫–ª–∏—Å—Ç—ã –≤ –≥–∞–π–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    logger.info("‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç –≥–∞–π–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            logger.info(f"üìä –ò–¢–û–ì–û: –°–æ–∑–¥–∞–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {total_checklists}")
            return total_checklists
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
            return 0
    
    async def get_guide_content(self, guide_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≥–∞–π–¥–∞"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –≥–∞–π–¥–∞
            blocks = await self.client.blocks.children.list(block_id=guide_id)
            
            content = []
            for block in blocks.get('results', []):
                if block['type'] == 'paragraph':
                    rich_text = block['paragraph'].get('rich_text', [])
                    if rich_text:
                        content.append(rich_text[0]['text']['content'])
                elif block['type'] == 'heading_2':
                    rich_text = block['heading_2'].get('rich_text', [])
                    if rich_text:
                        content.append(f"## {rich_text[0]['text']['content']}")
                elif block['type'] == 'heading_3':
                    rich_text = block['heading_3'].get('rich_text', [])
                    if rich_text:
                        content.append(f"### {rich_text[0]['text']['content']}")
                elif block['type'] == 'to_do':
                    rich_text = block['to_do'].get('rich_text', [])
                    checked = block['to_do'].get('checked', False)
                    if rich_text:
                        checkbox = "[x]" if checked else "[ ]"
                        content.append(f"- {checkbox} {rich_text[0]['text']['content']}")
            
            return "\n".join(content)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–∞–π–¥–∞: {e}")
            return None
    
    async def setup_checklist_automation(self) -> bool:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
        
        logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —á–µ–∫–ª–∏—Å—Ç–æ–≤")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É —á–µ–∫–ª–∏—Å—Ç–æ–≤
            database = await self.client.databases.retrieve(
                database_id=self.databases['checklists']
            )
            logger.info(f"‚úÖ –ë–∞–∑–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–∞: {database['title'][0]['text']['content']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
            properties = database.get('properties', {})
            required_fields = ['–ü–æ–¥–∑–∞–¥–∞—á–∏', '–°—Ç–∞—Ç—É—Å', '–ó–∞–¥–∞—á–∏']
            
            missing_fields = []
            for field in required_fields:
                if field not in properties:
                    missing_fields.append(field)
            
            if missing_fields:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
                return False
            
            logger.info("‚úÖ –ë–∞–∑–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False

    async def copy_checklists_from_guides_to_task(self, task_id: str) -> int:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —á–µ–∫–ª–∏—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞—á–µ–π –≥–∞–π–¥–æ–≤ –≤ –∑–∞–¥–∞—á—É (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)"""
        return await self.process_task_creation(task_id)

    # process_task_creation –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    process_task_creation = copy_checklists_from_guides_to_task


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
checklist_service = ChecklistService() 