"""
üîß –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion
–ß–µ—Ç–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Notion –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass 
class NotionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Notion"""
    success: bool
    data: Optional[Any] = None
    error: Optional[str] = None
    
    def __bool__(self) -> bool:
        return self.success

class SimpleNotionManager:
    """
    üéØ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion
    
    –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, notion_client, database_schemas):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å—Ö–µ–º–∞–º–∏
        
        Args:
            notion_client: –ì–æ—Ç–æ–≤—ã–π AsyncClient –¥–ª—è Notion
            database_schemas: –°–ª–æ–≤–∞—Ä—å —Å—Ö–µ–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        """
        self.client = notion_client
        self.schemas = database_schemas
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0
        }
        
    # ===== –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ï–ô =====
    
    async def create_task(self, task_data: Dict[str, Any]) -> NotionResult:
        """
        ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
        
        Args:
            task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                - title: str - –Ω–∞–∑–≤–∞–Ω–∏–µ
                - status: str - —Å—Ç–∞—Ç—É—Å
                - description: str - –æ–ø–∏—Å–∞–Ω–∏–µ
                - participants: List[str] - —É—á–∞—Å—Ç–Ω–∏–∫–∏
                - priority: str - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                
        Returns:
            NotionResult —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é
        """
        try:
            schema = self.schemas.get("tasks")
            if not schema:
                return NotionResult(False, error="–°—Ö–µ–º–∞ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Notion
            properties = {}
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
            if "title" in task_data:
                properties["–ó–∞–¥–∞—á–∞"] = {
                    "title": [{"text": {"content": str(task_data["title"])}}]
                }
            
            # –°—Ç–∞—Ç—É—Å
            if "status" in task_data:
                properties["–°—Ç–∞—Ç—É—Å"] = {
                    "status": {"name": str(task_data["status"])}
                }
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if "description" in task_data:
                properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {
                    "rich_text": [{"text": {"content": str(task_data["description"])}}]
                }
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏
            if "participants" in task_data:
                participants = task_data["participants"]
                if isinstance(participants, list):
                    properties["–£—á–∞—Å—Ç–Ω–∏–∫–∏"] = {
                        "people": [{"id": str(p)} for p in participants]
                    }
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if "priority" in task_data:
                properties["! –ó–∞–¥–∞—á–∏"] = {
                    "multi_select": [{"name": str(task_data["priority"])}]
                }
            
            # –î–∞—Ç–∞
            if "date" in task_data:
                properties["–î–∞—Ç–∞"] = {
                    "date": {"start": str(task_data["date"])}
                }
                
            self.stats['total_requests'] += 1
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            response = await self.client.pages.create(
                parent={"database_id": schema.database_id},
                properties=properties
            )
            
            self.stats['successful_requests'] += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç
            result = self._convert_page_to_dict(response)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {result.get('id')}")
            return NotionResult(True, data=result)
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return NotionResult(False, error=str(e))
    
    async def create_idea(self, idea_data: Dict[str, Any]) -> NotionResult:
        """
        üí° –°–æ–∑–¥–∞—Ç—å –∏–¥–µ—é
        
        Args:
            idea_data: –î–∞–Ω–Ω—ã–µ –∏–¥–µ–∏
                - name: str - –Ω–∞–∑–≤–∞–Ω–∏–µ
                - description: str - –æ–ø–∏—Å–∞–Ω–∏–µ
                - tags: List[str] - —Ç–µ–≥–∏
                - importance: int - –≤–∞–∂–Ω–æ—Å—Ç—å (1-10)
                - url: str - —Å—Å—ã–ª–∫–∞
                
        Returns:
            NotionResult —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é
        """
        try:
            schema = self.schemas.get("ideas")
            if not schema:
                return NotionResult(False, error="–°—Ö–µ–º–∞ –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            properties = {}
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            if "name" in idea_data:
                properties["Name"] = {
                    "title": [{"text": {"content": str(idea_data["name"])}}]
                }
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if "description" in idea_data:
                properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {
                    "rich_text": [{"text": {"content": str(idea_data["description"])}}]
                }
            
            # –¢–µ–≥–∏
            if "tags" in idea_data:
                tags = idea_data["tags"]
                if isinstance(tags, list):
                    properties["–¢–µ–≥–∏"] = {
                        "multi_select": [{"name": str(tag)} for tag in tags]
                    }
                elif isinstance(tags, str):
                    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
                    tag_list = [tag.strip() for tag in tags.split(",")]
                    properties["–¢–µ–≥–∏"] = {
                        "multi_select": [{"name": tag} for tag in tag_list if tag]
                    }
            
            # –í–∞–∂–Ω–æ—Å—Ç—å
            if "importance" in idea_data:
                properties["–í–µ—Å"] = {
                    "number": float(idea_data["importance"])
                }
            
            # URL
            if "url" in idea_data:
                properties["URL"] = {
                    "url": str(idea_data["url"])
                }
            
            # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            properties["–°—Ç–∞—Ç—É—Å"] = {
                "status": {"name": "To do"}
            }
            
            self.stats['total_requests'] += 1
            
            response = await self.client.pages.create(
                parent={"database_id": schema.database_id},
                properties=properties
            )
            
            self.stats['successful_requests'] += 1
            
            result = self._convert_page_to_dict(response)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–¥–µ—è: {result.get('id')}")
            return NotionResult(True, data=result)
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: {e}")
            return NotionResult(False, error=str(e))
    
    async def create_material(self, material_data: Dict[str, Any]) -> NotionResult:
        """
        üìÅ –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
        
        Args:
            material_data: –î–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                - name: str - –Ω–∞–∑–≤–∞–Ω–∏–µ
                - description: str - –æ–ø–∏—Å–∞–Ω–∏–µ
                - url: str - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
                - tags: List[str] - —Ç–µ–≥–∏
                
        Returns:
            NotionResult —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é
        """
        try:
            schema = self.schemas.get("materials")
            if not schema:
                return NotionResult(False, error="–°—Ö–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            properties = {}
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            if "name" in material_data:
                properties["Name"] = {
                    "title": [{"text": {"content": str(material_data["name"])}}]
                }
            
            # URL
            if "url" in material_data:
                properties["URL"] = {
                    "url": str(material_data["url"])
                }
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if "description" in material_data:
                properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {
                    "rich_text": [{"text": {"content": str(material_data["description"])}}]
                }
            
            # –¢–µ–≥–∏
            if "tags" in material_data:
                tags = material_data["tags"]
                if isinstance(tags, list):
                    properties["–¢–µ–≥–∏"] = {
                        "multi_select": [{"name": str(tag)} for tag in tags]
                    }
            
            # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            properties["–°—Ç–∞—Ç—É—Å"] = {
                "status": {"name": "–û–∫"}
            }
            
            self.stats['total_requests'] += 1
            
            response = await self.client.pages.create(
                parent={"database_id": schema.database_id},
                properties=properties
            )
            
            self.stats['successful_requests'] += 1
            
            result = self._convert_page_to_dict(response)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {result.get('id')}")
            return NotionResult(True, data=result)
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
            return NotionResult(False, error=str(e))
    
    # ===== –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô =====
    
    async def get_tasks(self, filters: Optional[Dict[str, Any]] = None, limit: int = 50) -> NotionResult:
        """
        üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã (status, participant, etc.)
            limit: –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            NotionResult —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        """
        try:
            schema = self.schemas.get("tasks")
            if not schema:
                return NotionResult(False, error="–°—Ö–µ–º–∞ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            query = {
                "database_id": schema.database_id,
                "page_size": limit
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if filters:
                filter_conditions = []
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if "status" in filters:
                    filter_conditions.append({
                        "property": "–°—Ç–∞—Ç—É—Å",
                        "status": {"equals": filters["status"]}
                    })
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫—É
                if "participant" in filters:
                    filter_conditions.append({
                        "property": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                        "people": {"contains": filters["participant"]}
                    })
                
                if filter_conditions:
                    if len(filter_conditions) == 1:
                        query["filter"] = filter_conditions[0]
                    else:
                        query["filter"] = {"and": filter_conditions}
            
            self.stats['total_requests'] += 1
            
            response = await self.client.databases.query(**query)
            
            self.stats['successful_requests'] += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            tasks = []
            for page in response.get("results", []):
                task_dict = self._convert_page_to_dict(page)
                tasks.append(task_dict)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
            return NotionResult(True, data=tasks)
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return NotionResult(False, error=str(e))
    
    async def get_ideas(self, limit: int = 50) -> NotionResult:
        """üìù –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏"""
        try:
            schema = self.schemas.get("ideas")
            if not schema:
                return NotionResult(False, error="–°—Ö–µ–º–∞ –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            query = {
                "database_id": schema.database_id,
                "page_size": limit,
                "sorts": [{"property": "–í–µ—Å", "direction": "descending"}]
            }
            
            self.stats['total_requests'] += 1
            
            response = await self.client.databases.query(**query)
            
            self.stats['successful_requests'] += 1
            
            ideas = []
            for page in response.get("results", []):
                idea_dict = self._convert_page_to_dict(page)
                ideas.append(idea_dict)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ideas)} –∏–¥–µ–π")
            return NotionResult(True, data=ideas)
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π: {e}")
            return NotionResult(False, error=str(e))
    
    # ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô =====
    
    async def update_task_status(self, task_id: str, status: str) -> NotionResult:
        """
        ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            
        Returns:
            NotionResult —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é
        """
        try:
            properties = {
                "–°—Ç–∞—Ç—É—Å": {
                    "status": {"name": status}
                }
            }
            
            self.stats['total_requests'] += 1
            
            response = await self.client.pages.update(
                page_id=task_id,
                properties=properties
            )
            
            self.stats['successful_requests'] += 1
            
            result = self._convert_page_to_dict(response)
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ {status}")
            return NotionResult(True, data=result)
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
            return NotionResult(False, error=str(e))
    
    async def set_cover_image(self, page_id: str, image_url: str) -> NotionResult:
        """
        üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            NotionResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É
            cover_data = {
                "cover": {
                    "type": "external",
                    "external": {"url": image_url}
                }
            }
            
            self.stats['total_requests'] += 1
            
            response = await self.client.pages.update(
                page_id=page_id,
                **cover_data
            )
            
            self.stats['successful_requests'] += 1
            
            logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}")
            return NotionResult(True, data={"cover_url": image_url})
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
            return NotionResult(False, error=str(e))
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def _convert_page_to_dict(self, page: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å"""
        result = {
            'id': page['id'],
            'created_time': page['created_time'],
            'last_edited_time': page['last_edited_time'],
            'archived': page.get('archived', False),
            'url': page.get('url', ''),
            'cover': page.get('cover', {}),
            'properties': {}
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        for prop_name, prop_data in page.get('properties', {}).items():
            prop_type = prop_data.get('type')
            
            try:
                if prop_type == 'title' and prop_data.get('title'):
                    result['properties'][prop_name] = prop_data['title'][0]['text']['content']
                elif prop_type == 'rich_text' and prop_data.get('rich_text'):
                    if prop_data['rich_text']:
                        result['properties'][prop_name] = prop_data['rich_text'][0]['text']['content']
                    else:
                        result['properties'][prop_name] = ""
                elif prop_type == 'select' and prop_data.get('select'):
                    result['properties'][prop_name] = prop_data['select']['name']
                elif prop_type == 'status' and prop_data.get('status'):
                    result['properties'][prop_name] = prop_data['status']['name']
                elif prop_type == 'multi_select':
                    result['properties'][prop_name] = [item['name'] for item in prop_data.get('multi_select', [])]
                elif prop_type == 'number':
                    result['properties'][prop_name] = prop_data.get('number')
                elif prop_type == 'date' and prop_data.get('date'):
                    result['properties'][prop_name] = prop_data['date']['start']
                elif prop_type == 'url':
                    result['properties'][prop_name] = prop_data.get('url')
                elif prop_type == 'people':
                    result['properties'][prop_name] = [
                        {"id": person['id'], "name": person.get('name', '')}
                        for person in prop_data.get('people', [])
                    ]
                elif prop_type == 'relation':
                    result['properties'][prop_name] = [rel['id'] for rel in prop_data.get('relation', [])]
                else:
                    # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    result['properties'][prop_name] = prop_data
            except (IndexError, KeyError, TypeError) as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ {prop_name}: {e}")
                result['properties'][prop_name] = None
        
        return result
    
    def get_stats(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total = self.stats['total_requests']
        successful = self.stats['successful_requests']
        
        return {
            'total_requests': total,
            'successful_requests': successful,
            'failed_requests': self.stats['failed_requests'],
            'success_rate': (successful / max(total, 1)) * 100
        }
    
    def reset_stats(self) -> None:
        """üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0
        }