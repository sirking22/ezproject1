#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô TELEGRAM –ë–û–¢
–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Yandex.Disk + —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ Notion
"""

import os
import logging
from datetime import datetime
from typing import Dict, Any, Optional
import time
import asyncio
import difflib
import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from notion_client import AsyncClient
import aiohttp
import httpx
from dotenv import load_dotenv
import tempfile
import cv2
from functools import lru_cache

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_MATERIALS_DB_ID = os.getenv('NOTION_MATERIALS_DB_ID', '1d9ace03d9ff804191a4d35aeedcbbd4')
NOTION_IDEAS_DB_ID = os.getenv('NOTION_IDEAS_DB_ID', 'ad92a6e21485428c84de8587706b3be1')
YA_TOKEN = os.getenv('YA_ACCESS_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-DzPhbaSCgP7_YPxOuPvMOA')
DEEPSEEK_BASE_URL = os.getenv('DEEPSEEK_BASE_URL', 'https://hubai.loe.gg/v1')
ASSEMBLYAI_API_KEY = os.getenv("ASSEMBLYAI_API_KEY", "")

if not all([NOTION_TOKEN, YA_TOKEN, TELEGRAM_TOKEN]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã!")
    exit(1)

logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class LLMProcessor:
    def __init__(self):
        self.api_key = DEEPSEEK_API_KEY
        self.base_url = DEEPSEEK_BASE_URL
        self.total_tokens_used = 0
        self.total_requests = 0
    
    async def parse_natural_language(self, text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ —Å LLM"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if self._is_structured_input(text):
            logger.info("ü§ñ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥) - 0 —Ç–æ–∫–µ–Ω–æ–≤")
            return self._parse_structured(text)
        elif self._is_simple_input(text):
            logger.info("ü§ñ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–ø—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥) - 0 —Ç–æ–∫–µ–Ω–æ–≤")
            return self._parse_simple(text)
        else:
            # –°–ª–æ–∂–Ω—ã–π –≤–≤–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
            result = await self._llm_parse(text)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if 'desc' in result and 'description' not in result:
                result['description'] = result.pop('desc')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'purpose' not in result:
                result['purpose'] = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ LLM"
            if 'benefits' not in result:
                result['benefits'] = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ LLM"
            
            return result
    
    def _is_structured_input(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥ (—Å –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏)"""
        return ':' in text and any(keyword in text.lower() for keyword in [
            '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ç–µ–≥–∏', '–≤–∞–∂–Ω–æ—Å—Ç—å', '—Å—Ç–∞—Ç—É—Å', 'name', 'description', 'tags'
        ])
    
    def _is_simple_input(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥ (–∫–æ—Ä–æ—Ç–∫–∏–π, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π)"""
        return (
            len(text) < 50 and 
            not any(char in text for char in [',', ';', '–∏', '–∏–ª–∏']) and
            not any(keyword in text.lower() for keyword in ['–≤–∞–∂–Ω–æ—Å—Ç—å', '–≤–∞–∂–Ω–æ', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '—Ç–µ–≥–∏'])
        )
    
    def _parse_structured(self, text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (0 —Ç–æ–∫–µ–Ω–æ–≤)"""
        fields = {}
        lines = text.split('\n')
        
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip().lower()
                value = value.strip()
                
                if key in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name']:
                    fields['name'] = value
                elif key in ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description']:
                    fields['description'] = value
                elif key in ['—Ç–µ–≥–∏', 'tags']:
                    fields['tags'] = value
                elif key in ['–≤–∞–∂–Ω–æ—Å—Ç—å', 'importance']:
                    try:
                        fields['importance'] = int(value)
                    except:
                        fields['importance'] = 3
                elif key in ['—Å—Ç–∞—Ç—É—Å', 'status']:
                    fields['status'] = value
        
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        if 'name' not in fields and lines:
            fields['name'] = lines[0].strip()
        
        return fields
    
    def _parse_simple(self, text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞ (0 —Ç–æ–∫–µ–Ω–æ–≤)"""
        return {
            'name': text.strip(),
            'description': '',
            'tags': '',
            'importance': 3
        }
    
    async def _llm_parse(self, text: str) -> Dict[str, Any]:
        """LLM –ø–∞—Ä—Å–∏–Ω–≥ (100 —Ç–æ–∫–µ–Ω–æ–≤) - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤
            prompt = f"""
            –ê–Ω–∞–ª–∏–∑ –∏–¥–µ–∏: '{text}'
            
            –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ –±–∞–∑–µ: ['–±–æ—Ç—ã', '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', '–≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–º–æ–±–∏–ª—å–Ω—ã–µ', '–¥–∏–∑–∞–π–Ω', '–∫–æ–Ω—Ç–µ–Ω—Ç', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ø—Ä–æ–¥–∞–∂–∏', '–æ–±—É—á–µ–Ω–∏–µ', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', 'API', '–≤–µ–±', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', '—Å–µ—Ä–≤–∏—Å—ã', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏']
            
            –ó–∞–ø–æ–ª–Ω–∏ JSON:
            - name: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏
            - description: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            - purpose: –¥–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ? (—Ü–µ–ª—å –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ)
            - benefits: —á—Ç–æ –∫–ª–∞—Å—Å–Ω–æ –≤ —ç—Ç–æ–π –∏–¥–µ–µ? (–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å)
            - tags: –≤—ã–±–µ—Ä–∏ 3-5 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–≥–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö (—Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ). –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ —Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.
            - importance: –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10
            
            –ü—Ä–∏–º–µ—Ä: "–•–æ—á—É –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö" ‚Üí {{"name": "–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤", "description": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π", "purpose": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö", "benefits": "–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏, –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å", "tags": ["–±–æ—Ç—ã", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"], "importance": 8}}
            """
            
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "deepseek-chat",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.1,
                        "max_tokens": 400
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    content = result['choices'][0]['message']['content']
                    
                    usage = result.get('usage', {})
                    total_tokens = usage.get('total_tokens', 0)
                    self.total_tokens_used += total_tokens
                    self.last_tokens_used = total_tokens
                    
                    logger.info(f"üí∞ –¢–æ–∫–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–¥–µ–∏: {total_tokens} | –í—Å–µ–≥–æ: {self.total_tokens_used}")
                    
                    import json
                    try:
                        start = content.find('{')
                        end = content.rfind('}') + 1
                        if start != -1 and end != 0:
                            analysis = json.loads(content[start:end])
                            analysis['total_tokens'] = total_tokens
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            logger.info(f"LLM —Ä–∞—Å–ø–∞—Ä—Å–∏–ª: {analysis}")
                            return analysis
                    except json.JSONDecodeError:
                        pass
                    return self._parse_simple(text)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                    return self._parse_simple(text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return self._parse_simple(text)
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
        return {
            'total_tokens': self.total_tokens_used,
            'total_requests': self.total_requests,
            'avg_tokens_per_request': self.total_tokens_used / max(self.total_requests, 1)
        }
    
    async def analyze_design(self, image_url: str, context: str = "") -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI (100 —Ç–æ–∫–µ–Ω–æ–≤)"""
        try:
            # –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∑–∞–π–Ω–∞
            prompt = f"""
            –ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç–∞: {image_url}
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ 1-10:
            - –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –±–∞–ª–∞–Ω—Å
            - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞  
            - –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
            - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å
            - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            
            –í–µ—Ä–Ω–∏ JSON: {{"composition": 8, "colors": 7, "typography": 9, "modernity": 8, "functionality": 7, "overall": 8, "issues": ["–ø—Ä–æ–±–ª–µ–º–∞1"], "suggestions": ["—Å–æ–≤–µ—Ç1"]}}
            """
            
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "deepseek-chat",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.1,
                        "max_tokens": 300
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    content = result['choices'][0]['message']['content']
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
                    usage = result.get('usage', {})
                    total_tokens = usage.get('total_tokens', 0)
                    self.total_tokens_used += total_tokens
                    
                    logger.info(f"üí∞ –¢–æ–∫–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω–∞: {total_tokens} | –í—Å–µ–≥–æ: {self.total_tokens_used}")
                    
                    # –ü–∞—Ä—Å–∏–º JSON
                    import json
                    try:
                        start = content.find('{')
                        end = content.rfind('}') + 1
                        if start != -1 and end != 0:
                            analysis = json.loads(content[start:end])
                            return analysis
                    except json.JSONDecodeError:
                        pass
                    
                    # Fallback
                    return self._default_design_analysis()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∑–∞–π–Ω–∞: {response.status_code}")
                    return self._default_design_analysis()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∑–∞–π–Ω–∞: {e}")
            return self._default_design_analysis()
    
    def _default_design_analysis(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "composition": 5,
            "colors": 5,
            "typography": 5,
            "modernity": 5,
            "functionality": 5,
            "overall": 5,
            "issues": ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"],
            "suggestions": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
        }

    def _filter_to_existing_options(self, value_list, options):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ options (case-insensitive)"""
        result = []
        options_lower = {opt.lower(): opt for opt in options}
        for val in value_list:
            match = options_lower.get(val.lower())
            if match:
                result.append(match)
    return result

    def _fuzzy_tag_match(self, tag, options):
        """Fuzzy match: –µ—Å–ª–∏ –ø–æ—Ö–æ–∂–∏–π —Ç–µ–≥ —É–∂–µ –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ None"""
        matches = difflib.get_close_matches(tag, options, n=1, cutoff=0.8)
        return matches[0] if matches else None

class YandexUploader:
    def __init__(self):
        self.base_url = "https://cloud-api.yandex.net/v1/disk"
        self.headers = {"Authorization": f"OAuth {YA_TOKEN}"}
        self.timeout = aiohttp.ClientTimeout(total=60)
    
    async def upload_file(self, file_url: str, filename: str) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Yandex.Disk"""
        remote_path = f"/telegram_uploads/{filename}"
        
        logger.info(f"üì§ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É {filename}...")
        start_time = time.time()
        
        async with aiohttp.ClientSession(timeout=self.timeout) as session:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_url = f"{self.base_url}/resources/upload"
            params = {"path": remote_path, "overwrite": "true"}
            
            async with session.get(upload_url, params=params, headers=self.headers) as resp:
                if resp.status != 200:
                    return {'success': False, 'error': f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {resp.status}"}
                upload_data = await resp.json()
                href = upload_data["href"]
            
            # 2. –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            try:
                async with session.get(file_url, timeout=aiohttp.ClientTimeout(total=30)) as file_resp:
                    if file_resp.status != 200:
                        return {'success': False, 'error': "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"}
                    file_data = await file_resp.read()
                
                upload_start = time.time()
                async with session.put(href, data=file_data, headers={"Content-Type": "application/octet-stream"}) as put_resp:
                    if put_resp.status != 201:
                        return {'success': False, 'error': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {put_resp.status}"}
                
                upload_time = time.time() - upload_start
                logger.info(f"üì§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {upload_time:.1f}—Å")
                
            except Exception as e:
                return {'success': False, 'error': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"}
            
            # 3. –ü—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª
            pub_url = f"{self.base_url}/resources/publish"
            async with session.put(pub_url, params={"path": remote_path}, headers=self.headers):
                pass
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            meta_url = f"{self.base_url}/resources"
            async with session.get(meta_url, params={"path": remote_path}, headers=self.headers) as meta_resp:
                meta_data = await meta_resp.json()
                public_url = meta_data.get("public_url")
                
                if not public_url:
                    return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É'}
                
                # 5. –ü–æ–ª—É—á–∞–µ–º preview –¥–ª—è cover
                preview_url = await self.get_preview_url(public_url)
                
                total_time = time.time() - start_time
                logger.info(f"üì§ –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {filename} –∑–∞ {total_time:.1f}—Å")
                
                return {
                    'success': True, 
                    'url': public_url, 
                    'preview_url': preview_url,
                    'filename': filename
                }
    
    async def get_preview_url(self, public_url: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å preview –∏–ª–∏ public_url –¥–ª—è cover"""
        try:
            api_url = 'https://cloud-api.yandex.net/v1/disk/public/resources'
            params = {'public_key': public_url}
            async with httpx.AsyncClient(timeout=30) as client:
                resp = await client.get(api_url, params=params)
            if resp.status_code == 200:
                    meta = resp.json()
                    return meta.get('preview') or meta.get('public_url', '')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è preview: {e}")
        return ''

class VideoProcessor:
    @staticmethod
    async def extract_frame(video_url: str) -> Optional[str]:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –∏–∑ –≤–∏–¥–µ–æ"""
        try:
            logger.info("üé¨ –ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞...")
            start_time = time.time()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
                async with session.get(video_url) as resp:
                    if resp.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {resp.status}")
                        return None
                    video_data = await resp.read()
            
            download_time = time.time() - start_time
            logger.info(f"üì• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ –∑–∞ {download_time:.1f}—Å")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as f:
                f.write(video_data)
                temp_video = f.name
            
            # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)
            cap = cv2.VideoCapture(temp_video)
            ret, frame = cap.read()
            cap.release()
            
            # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_video)
            except:
                pass
            
            if not ret:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as f:
                cv2.imwrite(f.name, frame)
                frame_path = f.name
            
            total_time = time.time() - start_time
            logger.info(f"üé¨ –ö–∞–¥—Ä –∏–∑–≤–ª–µ—á–µ–Ω –∑–∞ {total_time:.1f}—Å")
            
            return frame_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
            return None

class NotionManager:
    def __init__(self):
        self.client = AsyncClient(auth=NOTION_TOKEN)
    
    async def create_idea(self, fields: Dict[str, Any], file_url: str, file_name: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –∏–¥–µ–π"""
        properties = {
            "Name": {"title": [{"text": {"content": fields.get('name', file_name)}}]},
            "URL": {"url": file_url},
            "–°—Ç–∞—Ç—É—Å": {"status": {"name": fields.get('status', 'To do')}},
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
        existing_tags = ["–∏–Ω–Ω–æ–≤–∞—Ü–∏—è", "–±—ã—Å—Ç—Ä–æ", "–¥–æ—Ä–æ–≥–æ", "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç", "MVP", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–∫–æ–Ω—Ü–µ–ø—Ç"]
        existing_benefits = []  # –ó–∞–ø–æ–ª–Ω–∏ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è '–ß—Ç–æ –∫–ª–∞—Å—Å–Ω–æ?'
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if fields.get('description'):
            properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {"rich_text": [{"text": {"content": fields['description']}}]}
        # –î–ª—è —á–µ–≥–æ?
        if fields.get('purpose'):
            properties["–î–ª—è —á–µ–≥–æ?"] = {"rich_text": [{"text": {"content": fields['purpose']}}]}
        # –ß—Ç–æ –∫–ª–∞—Å—Å–Ω–æ?
        if fields.get('benefits'):
            benefits = fields['benefits']
            if isinstance(benefits, str):
                benefits = [benefits]
            filtered_benefits = self._filter_to_existing_options(benefits, existing_benefits)
            if filtered_benefits:
                properties["–ß—Ç–æ –∫–ª–∞—Å—Å–Ω–æ?"] = {"multi_select": [{"name": b} for b in filtered_benefits]}
        # –¢–µ–≥–∏
        if fields.get('tags'):
            tags = fields['tags']
            if isinstance(tags, str):
                tag_list = [tag.strip() for tag in tags.split(',')]
            elif isinstance(tags, list):
                tag_list = [str(tag).strip() for tag in tags]
            else:
                tag_list = [str(tags).strip()]
            final_tags = []
            for tag in tag_list:
                match = self._fuzzy_tag_match(tag, existing_tags)
                if match:
                    final_tags.append(match)
    else:
                    final_tags.append(tag)  # –ù–æ–≤—ã–π —Ç–µ–≥, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ö–æ–∂–µ–≥–æ
            properties["–¢–µ–≥–∏"] = {"multi_select": [{"name": tag} for tag in set(final_tags) if tag]}
        
        # –í –±–∞–∑–µ –∏–¥–µ–π –µ—Å—Ç—å –ø–æ–ª–µ –í–µ—Å
        if fields.get('importance'):
            try:
                properties["–í–µ—Å"] = {"number": int(fields['importance'])}
            except Exception:
                pass
        
        return await self.client.pages.create(
            parent={"database_id": NOTION_IDEAS_DB_ID},
            properties=properties
        )
    
    async def create_material(self, fields: Dict[str, Any], file_url: str, file_name: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        properties = {
            "Name": {"title": [{"text": {"content": fields.get('name', file_name)}}]},
            "URL": {"url": file_url},
            "–°—Ç–∞—Ç—É—Å": {"status": {"name": fields.get('status', 'To do')}},
        }
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if fields.get('description'):
            properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {"rich_text": [{"text": {"content": fields['description']}}]}
        # –î–ª—è —á–µ–≥–æ?
        if fields.get('purpose'):
            properties["–î–ª—è —á–µ–≥–æ?"] = {"rich_text": [{"text": {"content": fields['purpose']}}]}
        # –ß—Ç–æ –∫–ª–∞—Å—Å–Ω–æ?
        if fields.get('benefits'):
            properties["–ß—Ç–æ –∫–ª–∞—Å—Å–Ω–æ?"] = {"rich_text": [{"text": {"content": fields['benefits']}}]}
        
        if fields.get('tags'):
            tags = fields['tags']
            if isinstance(tags, str):
                tag_list = [tag.strip() for tag in tags.split(',')]
            elif isinstance(tags, list):
                tag_list = [str(tag).strip() for tag in tags]
        else:
                tag_list = [str(tags).strip()]
            properties["–¢–µ–≥–∏"] = {"multi_select": [{"name": tag} for tag in tag_list if tag]}
        
        if fields.get('importance'):
            try:
                properties["–í–∞–∂–Ω–æ—Å—Ç—å"] = {"number": int(fields['importance'])}
            except Exception:
                pass
        
        return await self.client.pages.create(
            parent={"database_id": NOTION_MATERIALS_DB_ID},
            properties=properties
        )
    
    async def set_cover(self, page_id: str, cover_url: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cover –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            await self.client.pages.update(
                page_id=page_id,
                cover={
                    "type": "external",
                    "external": {"url": cover_url}
                }
            )
            return True
    except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cover: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
yandex = YandexUploader()
notion = NotionManager()
video_processor = VideoProcessor()
llm = LLMProcessor()

AUDIO_TRANSCRIBE_FOLDER = "/audio_transcribe/"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª, –∏ —è –∑–∞–≥—Ä—É–∂—É –µ–≥–æ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Notion!\n\n"
        "üí° –ú–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏–¥–µ—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ '–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á'\n"
        "‚Ä¢ '–ù—É–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –≤–∞–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è'\n"
        "‚Ä¢ '–ò–¥–µ—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç–µ–≥–∏: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –º–æ–±–∏–ª—å–Ω—ã–µ'"
    )

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    message = update.message
    file_obj = None
    file_type = None
    file_size = None
    if message.voice:
        file_obj = message.voice
        file_type = 'voice'
        file_size = file_obj.file_size
    elif message.audio:
        file_obj = message.audio
        file_type = 'audio'
        file_size = file_obj.file_size
    elif message.document:
        file_obj = message.document
        file_type = 'document'
        file_size = file_obj.file_size
    else:
        await message.reply_text('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å–æ–≤—ã–µ.')
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: type={file_type}, size={file_size} –±–∞–π—Ç")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç Telegram
    if file_size and file_size > 50 * 1024 * 1024:
        await message.reply_text('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (>50 –ú–ë).')
        return
    # –ü–æ–ª—É—á–∞–µ–º file_id –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
    file_info = await context.bot.get_file(file_obj.file_id)
    file_path = file_info.file_path
    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_path}"
    file_name = getattr(file_obj, 'file_name', None) or f"{file_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    await message.reply_text(f"üöÄ –ó–∞–≥—Ä—É–∂–∞—é {file_name}...")
    
    try:
        if file_type == "video":
            video_result = await yandex.upload_file(file_url, file_name)
            if not video_result['success']:
                await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {video_result['error']}")
                return
            frame_path = await video_processor.extract_frame(file_url)
            if frame_path:
            frame_name = f"{file_name}_frame.jpg"
                frame_result = await yandex.upload_file(f"file://{frame_path}", frame_name)
            os.unlink(frame_path)
            else:
                cover_url = video_result['preview_url']
            upload_result = video_result
        else:
            upload_result = await yandex.upload_file(file_url, file_name)
            cover_url = upload_result.get('preview_url', '')
        if not upload_result['success']:
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_result['error']}")
            return
        await message.reply_text(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {upload_result['url']}")
        user_states[user_id] = {
            'database_choice': None,
            'file_url': upload_result['url'],
            'file_name': file_name,
            'cover_url': cover_url
        }
        keyboard = [
            [InlineKeyboardButton("–ò–¥–µ–∏", callback_data="ideas"), InlineKeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="materials")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(
            "–í –∫–∞–∫—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å?",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_states:
        return
    
    text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ LLM
    await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ...")
    llm_fields = await llm.parse_natural_language(text)
    
    if not llm_fields.get('name'):
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.")
        return
    
    try:
        state = user_states[user_id]
        file_url = state['file_url']
        file_name = state['file_name']
        cover_url = state.get('cover_url', '')
        database_choice = state['database_choice']
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç LLM
        log_fields = {
            'name': llm_fields.get('name'),
            'description': llm_fields.get('description', '')[:50] + '...' if llm_fields.get('description') else None,
            'purpose': llm_fields.get('purpose'),
            'benefits': llm_fields.get('benefits'),
            'tags': llm_fields.get('tags'),
            'importance': llm_fields.get('importance')
        }
        logger.info(f"LLM —Ä–∞—Å–ø–∞—Ä—Å–∏–ª: {log_fields}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Notion
            if database_choice == 'materials':
            notion_resp = await notion.create_material(llm_fields, file_url, file_name)
                db_name = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
            else:
            notion_resp = await notion.create_idea(llm_fields, file_url, file_name)
                db_name = "–ò–¥–µ–∏"
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        tokens_used = llm_fields.get('total_tokens', 0)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É '{db_name}'\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens_used}\n"
            f"üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {llm.total_tokens_used}"
        )
        
            notion_id = notion_resp.get('id', '')
            notion_url = f"https://notion.so/{notion_id.replace('-', '')}"
        
        await update.message.reply_text(f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ '{db_name}': {notion_url}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cover (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram)
        if cover_url and notion_id:
            success = await notion.set_cover(notion_id, cover_url)
            if success:
                logger.info(f"Cover —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {notion_id}: {cover_url}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cover –¥–ª—è {notion_id}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states.pop(user_id, None)

                except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_states:
        return
    
    if query.data == "materials":
        user_states[user_id]['database_choice'] = 'materials'
        await query.edit_message_text(
            "üìã –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã'.\n\n"
            "üí¨ –û–ø–∏—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
            "‚Ä¢ '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É'\n"
            "‚Ä¢ '–í–∏–¥–µ–æ—É—Ä–æ–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –≤–∞–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è'\n"
            "‚Ä¢ '–î–æ–∫—É–º–µ–Ω—Ç —Å –ø–ª–∞–Ω–∞–º–∏, —Ç–µ–≥–∏: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è'"
        )
    elif query.data == "ideas":
        user_states[user_id]['database_choice'] = 'ideas'
        await query.edit_message_text(
            "üí° –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ '–ò–¥–µ–∏'.\n\n"
            "üí¨ –û–ø–∏—à–∏ –∏–¥–µ—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
            "‚Ä¢ '–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'\n"
            "‚Ä¢ '–ò–¥–µ—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∞–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è'\n"
            "‚Ä¢ '–ù—É–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏, —Ç–µ–≥–∏: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'"
        )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    stats = llm.get_stats()
    
    message = f"""
üí∞ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê TOKENS DEEPSEEK**

üìä **–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:** {stats['total_tokens']}
üîÑ **–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {stats['total_requests']}
üìà **–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å:** {stats['avg_tokens_per_request']:.1f}

üí° **–≠–∫–æ–Ω–æ–º–∏—è:** 97% —Ç–æ–∫–µ–Ω–æ–≤ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
"""
    
    await update.message.reply_text(message)

async def check_design(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if not update.message.photo:
        await update.message.reply_text(
            "üé® –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
            "AI –æ—Ü–µ–Ω–∏—Ç:\n"
            "‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—é –∏ –±–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ –¶–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É\n"
            "‚Ä¢ –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É\n"
            "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
        )
        return
    
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∑–∞–π–Ω...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = update.message.photo[-1]
        file_info = await context.bot.get_file(photo.file_id)
        image_url = file_info.file_path
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∏
        context_text = update.message.caption or "–î–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis = await llm.analyze_design(image_url, context_text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        overall = analysis.get('overall', 0)
        composition = analysis.get('composition', 0)
        colors = analysis.get('colors', 0)
        typography = analysis.get('typography', 0)
        modernity = analysis.get('modernity', 0)
        functionality = analysis.get('functionality', 0)
        
        issues = analysis.get('issues', [])
        suggestions = analysis.get('suggestions', [])
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        def get_emoji(score):
            if score >= 8: return "üü¢"
            elif score >= 6: return "üü°"
            else: return "üî¥"
        
        response = f"""
üé® **–ê–ù–ê–õ–ò–ó –î–ò–ó–ê–ô–ù–ê**

üìä **–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {get_emoji(overall)} {overall}/10

**–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:**
‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {get_emoji(composition)} {composition}/10
‚Ä¢ –¶–≤–µ—Ç–∞: {get_emoji(colors)} {colors}/10  
‚Ä¢ –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞: {get_emoji(typography)} {typography}/10
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å: {get_emoji(modernity)} {modernity}/10
‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {get_emoji(functionality)} {functionality}/10
"""
        
        if issues:
            response += f"\n‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã:**\n"
            for issue in issues:
                response += f"‚Ä¢ {issue}\n"
        
        if suggestions:
            response += f"\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            for suggestion in suggestions:
                response += f"‚Ä¢ {suggestion}\n"
        
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∑–∞–π–Ω–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

async def transcribe_audio(file_url: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ AssemblyAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"""
    headers = {"authorization": ASSEMBLYAI_API_KEY}
    # 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ AssemblyAI (–µ—Å–ª–∏ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π URL)
    response = requests.post(
        "https://api.assemblyai.com/v2/transcript",
        json={"audio_url": file_url},
        headers=headers
    )
    transcript_id = response.json().get("id")
    if not transcript_id:
        return "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ AssemblyAI"
    # 2. –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for _ in range(30):
        res = requests.get(f"https://api.assemblyai.com/v2/transcript/{transcript_id}", headers=headers)
        status = res.json().get("status")
        if status == "completed":
            return res.json().get("text", "(–ø—É—Å—Ç–æ)")
        elif status == "failed":
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {res.json().get('error', '')}"
        await asyncio.sleep(3)
    return "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"

async def transcribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_states.get(user_id)
    if not state or not state.get('file_url'):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ—Ñ–∞–π–ª!")
        return
    file_url = state['file_url']
    await update.message.reply_text("‚è≥ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —á–µ—Ä–µ–∑ AssemblyAI...")
    text = await transcribe_audio(file_url)
    await update.message.reply_text(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{text}")

async def transcribe_yadisk(update, context):
    message = update.message
    args = context.args
    if not args:
        await message.reply_text("–£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return
    file_path_or_url = args[0]
    # –ò–º—è —Ñ–∞–π–ª–∞
    file_name = file_path_or_url.split("/")[-1]
    yadisk_path = AUDIO_TRANSCRIBE_FOLDER + file_name
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    upload_result = await yandex.upload_file(file_path_or_url, yadisk_path)
    if not upload_result['success']:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –Ø.–î–∏—Å–∫: {upload_result['error']}")
        return
    await message.reply_text(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {AUDIO_TRANSCRIBE_FOLDER}")
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ AssemblyAI
    transcript = await transcribe_audio(upload_result['url'])
    await message.reply_text(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:\n{transcript}")

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("check_design", check_design))
    application.add_handler(CommandHandler("transcribe", transcribe_command))
    application.add_handler(CommandHandler("transcribe_yadisk", transcribe_yadisk))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO, handle_file))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()

if __name__ == "__main__":
    main() 