#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô TELEGRAM –ë–û–¢ –° LLM
–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ + –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ —è–∑—ã–∫–∞
"""

import os
import logging
from datetime import datetime
from typing import Dict, Any, Optional
import time
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from notion_client import AsyncClient
import aiohttp
import httpx
from dotenv import load_dotenv
import tempfile
import cv2
import json

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_MATERIALS_DB_ID = os.getenv('NOTION_MATERIALS_DB_ID', '1d9ace03d9ff804191a4d35aeedcbbd4')
NOTION_IDEAS_DB_ID = os.getenv('NOTION_IDEAS_DB_ID', 'ad92a6e21485428c84de8587706b3be1')
YA_TOKEN = os.getenv('YA_ACCESS_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-DzPhbaSCgP7_YPxOuPvMOA')
DEEPSEEK_BASE_URL = os.getenv('DEEPSEEK_BASE_URL', 'https://hubai.loe.gg/v1')

if not all([NOTION_TOKEN, YA_TOKEN, TELEGRAM_TOKEN]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã!")
    exit(1)

logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class LLMProcessor:
    def __init__(self):
        self.api_key = DEEPSEEK_API_KEY
        self.base_url = DEEPSEEK_BASE_URL
    
    async def parse_natural_language(self, text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è"""
        try:
            prompt = f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª –∏–¥–µ—é –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º —Å—Ç–∏–ª–µ. –ò–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
            
            –¢–µ–∫—Å—Ç: "{text}"
            
            –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
            - name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            - description: –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            - tags: —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
            - importance: –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 5 (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)
            - status: —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)
            
            –ü—Ä–∏–º–µ—Ä—ã:
            - "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏" ‚Üí {{"name": "–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "tags": "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –±–æ—Ç", "importance": 4}}
            - "–ù—É–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏" ‚Üí {{"name": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏", "description": "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏", "tags": "–∑–∞–¥–∞—á–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "importance": 3}}
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
            
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "deepseek-chat",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.1,
                        "max_tokens": 500
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    content = result['choices'][0]['message']['content']
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
                    try:
                        # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                        start = content.find('{')
                        end = content.rfind('}') + 1
                        if start != -1 and end != 0:
                            json_str = content[start:end]
                            parsed = json.loads(json_str)
                            logger.info(f"LLM —Ä–∞—Å–ø–∞—Ä—Å–∏–ª: {parsed}")
                            return parsed
                    except json.JSONDecodeError:
                        pass
                    
                    # Fallback: –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
                    return self.simple_parse(text)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ LLM API: {response.status_code}")
                    return self.simple_parse(text)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return self.simple_parse(text)
    
    def simple_parse(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ LLM"""
        fields = {}
        
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–∞)
        parts = text.split(',')
        if parts:
            name_part = parts[0].strip()
            if ':' in name_part:
                name_part = name_part.split(':', 1)[1].strip()
            fields['name'] = name_part
        
        # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if len(parts) > 1:
            desc_parts = []
            for part in parts[1:]:
                part = part.strip()
                if ':' in part:
                    key, value = part.split(':', 1)
                    key = key.strip().lower()
                    if key in ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description']:
                        fields['description'] = value.strip()
                    elif key in ['—Ç–µ–≥–∏', 'tags']:
                        fields['tags'] = value.strip()
                    elif key in ['–≤–∞–∂–Ω–æ—Å—Ç—å', 'importance']:
                        try:
                            fields['importance'] = int(value.strip())
                        except:
                            pass
                else:
                    desc_parts.append(part)
            
            if desc_parts and 'description' not in fields:
                fields['description'] = ', '.join(desc_parts)
        
        return fields

class YandexUploader:
    def __init__(self):
        self.base_url = "https://cloud-api.yandex.net/v1/disk"
        self.headers = {"Authorization": f"OAuth {YA_TOKEN}"}
        self.timeout = aiohttp.ClientTimeout(total=120)
    
    async def upload_file(self, file_url: str, filename: str) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Yandex.Disk"""
        remote_path = f"/telegram_uploads/{filename}"
        
        async with aiohttp.ClientSession(timeout=self.timeout) as session:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_url = f"{self.base_url}/resources/upload"
            params = {"path": remote_path, "overwrite": "true"}
            
            async with session.get(upload_url, params=params, headers=self.headers) as resp:
                if resp.status != 200:
                    return {'success': False, 'error': f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {resp.status}"}
                upload_data = await resp.json()
                href = upload_data["href"]
            
            # 2. –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            try:
                async with session.get(file_url) as file_resp:
                    if file_resp.status != 200:
                        return {'success': False, 'error': "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"}
                    file_data = await file_resp.read()
                
                async with session.put(href, data=file_data, headers={"Content-Type": "application/octet-stream"}) as put_resp:
                    if put_resp.status != 201:
                        return {'success': False, 'error': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {put_resp.status}"}
            except Exception as e:
                return {'success': False, 'error': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"}
            
            # 3. –ü—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª
            pub_url = f"{self.base_url}/resources/publish"
            async with session.put(pub_url, params={"path": remote_path}, headers=self.headers):
                pass
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            meta_url = f"{self.base_url}/resources"
            async with session.get(meta_url, params={"path": remote_path}, headers=self.headers) as meta_resp:
                meta_data = await meta_resp.json()
                public_url = meta_data.get("public_url")
                
                if not public_url:
                    return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É'}
                
                # 5. –ü–æ–ª—É—á–∞–µ–º preview –¥–ª—è cover
                preview_url = await self.get_preview_url(public_url)
                
                return {
                    'success': True, 
                    'url': public_url, 
                    'preview_url': preview_url,
                    'filename': filename
                }
    
    async def get_preview_url(self, public_url: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å preview –∏–ª–∏ public_url –¥–ª—è cover"""
        try:
            api_url = 'https://cloud-api.yandex.net/v1/disk/public/resources'
            params = {'public_key': public_url}
            async with httpx.AsyncClient(timeout=30) as client:
                resp = await client.get(api_url, params=params)
                if resp.status_code == 200:
                    meta = resp.json()
                    return meta.get('preview') or meta.get('public_url', '')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è preview: {e}")
        return ''

class VideoProcessor:
    @staticmethod
    async def extract_frame(video_url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            async with aiohttp.ClientSession() as session:
                async with session.get(video_url) as resp:
                    if resp.status != 200:
                        return None
                    video_data = await resp.read()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as f:
                f.write(video_data)
                temp_video = f.name
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä
            cap = cv2.VideoCapture(temp_video)
            ret, frame = cap.read()
            cap.release()
            
            if not ret:
                os.unlink(temp_video)
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as f:
                cv2.imwrite(f.name, frame)
                frame_path = f.name
            
            os.unlink(temp_video)
            return frame_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
            return None

class NotionManager:
    def __init__(self):
        self.client = AsyncClient(auth=NOTION_TOKEN)
    
    async def create_idea(self, fields: Dict[str, Any], file_url: str, file_name: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –∏–¥–µ–π"""
        properties = {
            "Name": {"title": [{"text": {"content": fields.get('name', file_name)}}]},
            "URL": {"url": file_url},
            "–°—Ç–∞—Ç—É—Å": {"status": {"name": fields.get('status', 'To do')}},
        }
        
        if fields.get('description'):
            properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {"rich_text": [{"text": {"content": fields['description']}}]}
        
        if fields.get('tags'):
            properties["–¢–µ–≥–∏"] = {"multi_select": [{"name": tag.strip()} for tag in fields['tags'].split(',')]}
        
        if fields.get('importance'):
            properties["–í–∞–∂–Ω–æ—Å—Ç—å"] = {"number": int(fields['importance'])}
        
        return await self.client.pages.create(
            parent={"database_id": NOTION_IDEAS_DB_ID},
            properties=properties
        )
    
    async def create_material(self, fields: Dict[str, Any], file_url: str, file_name: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        properties = {
            "Name": {"title": [{"text": {"content": fields.get('name', file_name)}}]},
            "URL": {"url": file_url},
            "–°—Ç–∞—Ç—É—Å": {"status": {"name": fields.get('status', 'To do')}},
        }
        
        if fields.get('description'):
            properties["–û–ø–∏—Å–∞–Ω–∏–µ"] = {"rich_text": [{"text": {"content": fields['description']}}]}
        
        if fields.get('tags'):
            properties["–¢–µ–≥–∏"] = {"multi_select": [{"name": tag.strip()} for tag in fields['tags'].split(',')]}
        
        if fields.get('importance'):
            properties["–í–∞–∂–Ω–æ—Å—Ç—å"] = {"number": int(fields['importance'])}
        
        return await self.client.pages.create(
            parent={"database_id": NOTION_MATERIALS_DB_ID},
            properties=properties
        )
    
    async def set_cover(self, page_id: str, cover_url: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cover –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            await self.client.pages.update(
                page_id=page_id,
                cover={
                    "type": "external",
                    "external": {"url": cover_url}
                }
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cover: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
yandex = YandexUploader()
notion = NotionManager()
video_processor = VideoProcessor()
llm = LLMProcessor()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª, –∏ —è –∑–∞–≥—Ä—É–∂—É –µ–≥–æ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Notion!\n\n"
        "üí° –ú–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏–¥–µ—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ '–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á'\n"
        "‚Ä¢ '–ù—É–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –≤–∞–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è'\n"
        "‚Ä¢ '–ò–¥–µ—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç–µ–≥–∏: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –º–æ–±–∏–ª—å–Ω—ã–µ'"
    )

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if update.message.document:
        file_obj = update.message.document
        file_type = "document"
        file_name = file_obj.file_name or f"document_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    elif update.message.photo:
        file_obj = update.message.photo[-1]
        file_type = "photo"
        file_name = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    elif update.message.video:
        file_obj = update.message.video
        file_type = "video"
        file_name = file_obj.file_name or f"video_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
    elif update.message.audio:
        file_obj = update.message.audio
        file_type = "audio"
        file_name = file_obj.file_name or f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp3"
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    file_info = await context.bot.get_file(file_obj.file_id)
    if str(file_info.file_path).startswith("http"):
        file_url = file_info.file_path
    else:
        file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_info.file_path}"
    
    await update.message.reply_text(f"üöÄ –ó–∞–≥—Ä—É–∂–∞—é {file_name}...")
    
    try:
        start_time = time.time()
        
        if file_type == "video":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            video_result = await yandex.upload_file(file_url, file_name)
            if not video_result['success']:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {video_result['error']}")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä
            frame_path = await video_processor.extract_frame(file_url)
            if frame_path:
                frame_name = f"{file_name}_frame.jpg"
                frame_result = await yandex.upload_file(f"file://{frame_path}", frame_name)
                os.unlink(frame_path)
                
                if frame_result['success']:
                    cover_url = frame_result['preview_url']
                else:
                    cover_url = video_result['preview_url']
            else:
                cover_url = video_result['preview_url']
            
            upload_result = video_result
            elapsed = time.time() - start_time
            logger.info(f"–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {elapsed:.1f}—Å")
            
        else:
            # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
            upload_result = await yandex.upload_file(file_url, file_name)
            cover_url = upload_result.get('preview_url', '')
        
        if not upload_result['success']:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_result['error']}")
            return
        
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {upload_result['url']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = {
            'database_choice': None,
            'file_url': upload_result['url'],
            'file_name': file_name,
            'cover_url': cover_url
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–∑—ã
        keyboard = [
            [InlineKeyboardButton("üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="db_materials")],
            [InlineKeyboardButton("üí° –ò–¥–µ–∏", callback_data="db_ideas")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í –∫–∞–∫—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å?",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_states:
        return
    
    text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ LLM
    await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ...")
    fields = await llm.parse_natural_language(text)
    
    if not fields.get('name'):
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.")
        return
    
    try:
        state = user_states[user_id]
        file_url = state['file_url']
        file_name = state['file_name']
        cover_url = state.get('cover_url', '')
        database_choice = state['database_choice']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Notion
        if database_choice == 'materials':
            notion_resp = await notion.create_material(fields, file_url, file_name)
            db_name = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
        else:
            notion_resp = await notion.create_idea(fields, file_url, file_name)
            db_name = "–ò–¥–µ–∏"
        
        notion_id = notion_resp.get('id', '')
        notion_url = f"https://notion.so/{notion_id.replace('-', '')}"
        
        await update.message.reply_text(f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ '{db_name}': {notion_url}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cover (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram)
        if cover_url and notion_id:
            success = await notion.set_cover(notion_id, cover_url)
            if success:
                logger.info(f"Cover —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {notion_id}: {cover_url}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cover –¥–ª—è {notion_id}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_states:
        return
    
    if query.data == "db_materials":
        user_states[user_id]['database_choice'] = 'materials'
        await query.edit_message_text(
            "üìã –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã'.\n\n"
            "üí¨ –û–ø–∏—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
            "‚Ä¢ '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É'\n"
            "‚Ä¢ '–í–∏–¥–µ–æ—É—Ä–æ–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –≤–∞–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è'\n"
            "‚Ä¢ '–î–æ–∫—É–º–µ–Ω—Ç —Å –ø–ª–∞–Ω–∞–º–∏, —Ç–µ–≥–∏: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è'"
        )
    elif query.data == "db_ideas":
        user_states[user_id]['database_choice'] = 'ideas'
        await query.edit_message_text(
            "üí° –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ '–ò–¥–µ–∏'.\n\n"
            "üí¨ –û–ø–∏—à–∏ –∏–¥–µ—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
            "‚Ä¢ '–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'\n"
            "‚Ä¢ '–ò–¥–µ—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∞–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è'\n"
            "‚Ä¢ '–ù—É–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏, —Ç–µ–≥–∏: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'"
        )

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å LLM...")
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO, handle_file))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main() 