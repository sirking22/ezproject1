#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ Notion —Å –æ–±–ª–æ–∂–∫–æ–π –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å—Å—ã–ª–∫–∏ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
"""
import asyncio
import aiohttp
import os
import re
import random
import urllib.parse
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")
MATERIALS_DB = os.getenv("MATERIALS_DB")

YANDEX_DISK_URL = "https://disk.yandex.ru/i/zI58gExBEHdp6A"

def log(message: str, level: str = "INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] [{level}] {message}")

async def get_yandex_disk_image(yandex_url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å—Å—ã–ª–∫–∏ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    log(f"üîç –ü–æ–ª—É—á–∞—é –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {yandex_url}")
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(yandex_url, headers=headers, timeout=aiohttp.ClientTimeout(total=30)) as response:
            log(f"üìä –°—Ç–∞—Ç—É—Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {response.status}")
            
            if response.status == 200:
                html = await response.text()
                log(f"üìÑ –†–∞–∑–º–µ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ò—â–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
                # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
                image_patterns = [
                    r'https://downloader\.disk\.yandex\.ru/preview/[^"\']+',
                    r'https://yastatic\.net/s3/psf/disk-public/[^"\']+',
                    r'https://img\.yandex\.net/[^"\']+',
                    r'https://avatars\.mds\.yandex\.net/[^"\']+',
                    r'https://[^"\']*\.png',
                    r'https://[^"\']*\.jpg',
                    r'https://[^"\']*\.jpeg',
                    r'https://[^"\']*\.webp'
                ]
                
                for pattern in image_patterns:
                    matches = re.findall(pattern, html)
                    if matches:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –∏ –ª–æ–≥–æ—Ç–∏–ø—ã
                        for match in matches:
                            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                            decoded_match = urllib.parse.unquote(match)
                            # –ó–∞–º–µ–Ω—è–µ–º &amp; –Ω–∞ &
                            decoded_match = decoded_match.replace('&amp;', '&')
                            
                            if not any(icon in decoded_match.lower() for icon in ['icon', 'logo', 'favicon', 'yastatic.net/s3/psf/disk-public/_/']):
                                log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {decoded_match}")
                                return decoded_match
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
                meta_pattern = r'<meta property="og:image" content="([^"]+)"'
                meta_matches = re.findall(meta_pattern, html)
                if meta_matches:
                    image_url = urllib.parse.unquote(meta_matches[0])
                    image_url = image_url.replace('&amp;', '&')
                    log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ meta: {image_url}")
                    return image_url
                
                # Fallback: –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏
                img_tags = re.findall(r'<img[^>]+src="([^"]+)"', html)
                for img_src in img_tags:
                    decoded_src = urllib.parse.unquote(img_src)
                    decoded_src = decoded_src.replace('&amp;', '&')
                    if any(ext in decoded_src.lower() for ext in ['.png', '.jpg', '.jpeg', '.webp']):
                        if not any(icon in decoded_src.lower() for icon in ['icon', 'logo', 'favicon']):
                            log(f"‚úÖ Fallback - –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {decoded_src}")
                            return decoded_src
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
                log(f"üîç –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞ –∏–∑ URL
                file_id_match = re.search(r'/i/([a-zA-Z0-9]+)', yandex_url)
                if file_id_match:
                    file_id = file_id_match.group(1)
                    log(f"üìã –ù–∞–π–¥–µ–Ω ID —Ñ–∞–π–ª–∞: {file_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ API
                    api_url = f"https://cloud-api.yandex.net/v1/disk/resources"
                    api_params = {"public_key": yandex_url}
                    api_headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
                    
                    async with session.get(api_url, headers=api_headers, params=api_params) as api_response:
                        if api_response.status == 200:
                            api_data = await api_response.json()
                            log(f"üìã API –¥–∞–Ω–Ω—ã–µ: {api_data}")
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–≤—å—é
                            preview_url = api_data.get("preview")
                            if preview_url:
                                log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ API: {preview_url}")
                                return preview_url
                
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")

async def upload_to_yadisk_and_get_permanent_url(image_url: str, filename: str) -> tuple:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É"""
    log(f"üì• –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(image_url, timeout=aiohttp.ClientTimeout(total=30)) as response:
            if response.status != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}")
            
            image_data = await response.read()
            log(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {len(image_data)} –±–∞–π—Ç")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            random_suffix = random.randint(1000, 9999)
            safe_filename = f"{filename}_{timestamp}_{random_suffix}.jpg"
            remote_path = f"/notion_covers/{safe_filename}"
            
            log(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {remote_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
            params = {
                "path": remote_path,
                "overwrite": "true"
            }
            
            async with session.get(upload_url, headers=headers, params=params) as upload_response:
                if upload_response.status != 200:
                    error_text = await upload_response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∑–∫–∏: {upload_response.status} - {error_text}")
                
                upload_data = await upload_response.json()
                href = upload_data.get("href")
                
                if not href:
                    raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω href –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                async with session.put(href, data=image_data) as put_response:
                    if put_response.status not in [201, 202, 200]:
                        error_text = await put_response.text()
                        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {put_response.status} - {error_text}")
                
                log(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ download API
                download_url = "https://cloud-api.yandex.net/v1/disk/resources/download"
                download_params = {"path": remote_path}
                
                async with session.get(download_url, headers=headers, params=download_params) as download_response:
                    if download_response.status != 200:
                        error_text = await download_response.text()
                        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è download —Å—Å—ã–ª–∫–∏: {download_response.status} - {error_text}")
                    
                    download_data = await download_response.json()
                    permanent_url = download_data.get("href")
                    
                    if not permanent_url:
                        raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                    
                    log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {permanent_url[:80]}...")
                    return permanent_url, remote_path

async def create_notion_material(title: str, cover_url: str, original_url: str) -> tuple:
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion —Å –æ–±–ª–æ–∂–∫–æ–π"""
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –ë–ï–ó –æ–±–ª–æ–∂–∫–∏ —Å–Ω–∞—á–∞–ª–∞
    material_data = {
        "parent": {"database_id": MATERIALS_DB},
        "properties": {
            "Name": {"title": [{"text": {"content": title}}]},
            "URL": {"url": original_url}
        }
    }
    
    async with aiohttp.ClientSession() as session:
        log(f"üìÑ –°–æ–∑–¥–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion...")
        async with session.post("https://api.notion.com/v1/pages", headers=headers, json=material_data) as resp:
            data = await resp.json()
            page_id = data.get("id")
            if not page_id:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {data}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        log(f"üñºÔ∏è –î–æ–±–∞–≤–ª—è—é –æ–±–ª–æ–∂–∫—É –≤ Notion...")
        cover_data = {
            "cover": {
                "type": "external",
                "external": {"url": cover_url}
            }
        }
        
        async with session.patch(f"https://api.notion.com/v1/pages/{page_id}", headers=headers, json=cover_data) as resp:
            patch_data = await resp.json()
            if resp.status != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏: {patch_data}")
            
            return data.get("url"), cover_url

async def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        yandex_image_url = await get_yandex_disk_image(YANDEX_DISK_URL)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        download_url, remote_path = await upload_to_yadisk_and_get_permanent_url(yandex_image_url, "yandex_disk_image")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion —Å –æ–±–ª–æ–∂–∫–æ–π
        notion_url, used_cover_url = await create_notion_material(
            title="Yandex.Disk Image Test (Final)",
            cover_url=download_url,
            original_url=YANDEX_DISK_URL
        )
        
        print(f"\n‚úÖ –ì–û–¢–û–í–û!")
        print(f"üìÑ –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion: {notion_url}")
        print(f"üñºÔ∏è –°—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –æ–±–ª–æ–∂–∫—É: {used_cover_url}")
        print(f"üíæ –§–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ: {remote_path}")
        print(f"üîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å—Å—ã–ª–∫–∞: {YANDEX_DISK_URL}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –¥–æ–ª–≥–æ–≤–µ—á–Ω–∞—è
        if "downloader.disk.yandex.ru" in used_cover_url:
            print(f"‚úÖ –°—Å—ã–ª–∫–∞ –î–û–õ–ì–û–í–ï–ß–ù–ê–Ø (—á–µ—Ä–µ–∑ download API)")
        else:
            print(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π")
            
    except Exception as e:
        log(f"‚ùå –û–®–ò–ë–ö–ê: {e}", "ERROR")
        if 'download_url' in locals():
            print(f"üîó –°—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é –ø—ã—Ç–∞–ª–∏—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {download_url}")
        if 'remote_path' in locals():
            print(f"üíæ –§–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ: {remote_path}")

if __name__ == "__main__":
    asyncio.run(main()) 