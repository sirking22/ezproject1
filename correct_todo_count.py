import os
import requests
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
TASKS_DB_ID = os.getenv("NOTION_TASKS_DB_ID", "9c5f4269d61449b6a7485579a3c21da3")

if not NOTION_TOKEN:
    raise RuntimeError("NOTION_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

print("üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–°–ß–ï–¢ –ó–ê–î–ê–ß –í –°–¢–ê–¢–£–°–ï 'TO DO'")
print("=" * 60)

url = f"https://api.notion.com/v1/databases/{TASKS_DB_ID}/query"
headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": "2022-06-28",
    "Content-Type": "application/json"
}

# –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏
print("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏...")
results = []
payload = {}
while True:
    response = requests.post(url, headers=headers, json=payload)
    data = response.json()
    results.extend(data.get('results', []))
    if not data.get('has_more'):
        break
    payload = {"start_cursor": data.get('next_cursor')}

print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ: {len(results)}")

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
status_counts = defaultdict(int)
todo_tasks = []
assignee_counts = defaultdict(int)

for task in results:
    props = task.get("properties", {})
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = "–ù–µ —É–∫–∞–∑–∞–Ω"
    if " –°—Ç–∞—Ç—É—Å" in props:
        s = props[" –°—Ç–∞—Ç—É—Å"]
        if s.get("status"):
            status = s["status"]["name"]
    
    status_counts[status] += 1
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å To do - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    if status.lower() in ["to do", "todo", "–Ω–µ –Ω–∞—á–∞—Ç–∞"]:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–æ–ª—è "–ü–æ–¥–∑–∞–¥–∞—á–∏"
        title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        if "–ü–æ–¥–∑–∞–¥–∞—á–∏" in props and props["–ü–æ–¥–∑–∞–¥–∞—á–∏"].get("title"):
            title = props["–ü–æ–¥–∑–∞–¥–∞—á–∏"]["title"][0]["plain_text"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        assignees = []
        if "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" in props and props["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"].get("people"):
            for person in props["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]["people"]:
                assignee_name = person.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
                if assignee_name.lower() != "account":  # –ò—Å–∫–ª—é—á–∞–µ–º Account
                    assignees.append(assignee_name)
                    assignee_counts[assignee_name] += 1
        
        todo_tasks.append({
            "id": task["id"],
            "title": title,
            "assignees": assignees
        })

print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
    print(f"   ‚Ä¢ {status}: {count}")

print(f"\nüéØ –ó–ê–î–ê–ß–ò –í –°–¢–ê–¢–£–°–ï 'TO DO': {len(todo_tasks)}")

print(f"\nüë• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï TODO –ó–ê–î–ê–ß –ü–û –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø–ú:")
for assignee, count in sorted(assignee_counts.items(), key=lambda x: x[1], reverse=True):
    print(f"   ‚Ä¢ {assignee}: {count}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á To do
print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–î–ê–ß TO DO:")
for i, task in enumerate(todo_tasks[:10], 1):
    assignees_str = ", ".join(task["assignees"]) if task["assignees"] else "–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
    print(f"   {i}. {task['title'][:60]} ‚Üí {assignees_str}")

if len(todo_tasks) > 10:
    print(f"   ... –∏ –µ—â–µ {len(todo_tasks) - 10} –∑–∞–¥–∞—á")

print(f"\n‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç!") 