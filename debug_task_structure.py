#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–¥–∞—á –≤ Notion
"""

import asyncio
import json
from mcp_notion_server import NotionMCPServer

async def debug_task_structure():
    """–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–¥–∞—á"""
    try:
        server = NotionMCPServer()
        tasks_db_id = server.tasks_db_id or "d09df250ce7e4e0d9fbe4e036d320def"
        
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã: {tasks_db_id}")
        tasks_response = await server.get_database_pages(tasks_db_id)
        
        if not tasks_response.get('success'):
            print(f"‚ùå –û—à–∏–±–∫–∞: {tasks_response.get('error')}")
            return
        
        tasks = tasks_response.get('pages', [])
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        for i, task in enumerate(tasks[:3]):
            print(f"\n{'='*60}")
            print(f"üîç –ó–ê–î–ê–ß–ê {i+1}")
            print(f"{'='*60}")
            
            properties = task.get('properties', {})
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
            for prop_name, prop_value in properties.items():
                print(f"\nüìã {prop_name}:")
                print(f"   –¢–∏–ø: {type(prop_value)}")
                print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {json.dumps(prop_value, ensure_ascii=False, indent=2)}")
            
            print(f"\nüÜî ID –∑–∞–¥–∞—á–∏: {task.get('id')}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å
            participants = properties.get('–£—á–∞—Å—Ç–Ω–∏–∫–∏', {})
            status = properties.get('–°—Ç–∞—Ç—É—Å', {})
            
            print(f"\nüéØ –£–ß–ê–°–¢–ù–ò–ö–ò (–¥–µ—Ç–∞–ª—å–Ω–æ):")
            print(f"   –¢–∏–ø: {type(participants)}")
            if isinstance(participants, dict):
                if 'people' in participants:
                    people = participants['people']
                    print(f"   –°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π: {len(people) if people else 0}")
                    for person in people:
                        print(f"     - {person}")
            
            print(f"\nüìä –°–¢–ê–¢–£–° (–¥–µ—Ç–∞–ª—å–Ω–æ):")
            print(f"   –¢–∏–ø: {type(status)}")
            if isinstance(status, dict):
                if 'status' in status:
                    status_info = status['status']
                    print(f"   –°—Ç–∞—Ç—É—Å: {status_info}")
                    if isinstance(status_info, dict):
                        print(f"     - ID: {status_info.get('id')}")
                        print(f"     - –ù–∞–∑–≤–∞–Ω–∏–µ: {status_info.get('name')}")
                        print(f"     - –¶–≤–µ—Ç: {status_info.get('color')}")
            
            if i == 2:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
                break
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_task_structure()) 