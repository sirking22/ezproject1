#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–î–ó–ê–î–ê–ß
"""

import asyncio
import os
from dotenv import load_dotenv
from notion_client import AsyncClient

load_dotenv()

async def create_task_with_subtasks(guide_id: str, task_title: str):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏"""
    
    client = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    
    print(f"üîß –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –° –ü–û–î–ó–ê–î–ê–ß–ê–ú–ò")
    print("=" * 50)
    
    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –≥–∞–π–¥–µ
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ–¥–∑–∞–¥–∞—á –≤ –≥–∞–π–¥–µ {guide_id}...")
        
        guide = await client.pages.retrieve(page_id=guide_id)
        guide_title = guide['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        print(f"üìö –ì–∞–π–¥: {guide_title}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ –ø–æ–ª—è "–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏"
        subtasks_relation = guide['properties'].get('–î–∏–∑–∞–π–Ω –ø–æ–¥–∑–∞–¥–∞—á–∏', {}).get('relation', [])
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: {len(subtasks_relation)}")
        
        if not subtasks_relation:
            print("‚ùå –ü–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≥–∞–π–¥–µ")
            return None
        
        # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_title}")
        
        task_properties = {
            "–ó–∞–¥–∞—á–∞": {
                "title": [
                    {
                        "text": {
                            "content": task_title
                        }
                    }
                ]
            },
            "üì¨ –ì–∞–π–¥—ã": {
                "relation": [
                    {
                        "id": guide_id
                    }
                ]
            },
            "–°—Ç–∞—Ç—É—Å": {
                "select": {
                    "name": "–°—Ç–∞—Ä—Ç"
                }
            }
        }
        
        task = await client.pages.create(
            parent={"database_id": "d09df250ce7e4e0d9fbe4e036d320def"},  # –ó–∞–¥–∞—á–∏
            properties=task_properties
        )
        
        task_id = task['id']
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –∑–∞–¥–∞—á–µ–π
        created_subtask_ids = []
        
        for i, subtask_ref in enumerate(subtasks_relation, 1):
            subtask_id = subtask_ref['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–∑–∞–¥–∞—á—É
            original_subtask = await client.pages.retrieve(page_id=subtask_id)
            subtask_title = original_subtask['properties'].get('–ü–æ–¥–∑–∞–¥–∞—á–∏', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            print(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ {i}: {subtask_title}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤
            new_subtask_properties = {
                "Name": {
                    "title": [
                        {
                            "text": {
                                "content": subtask_title
                            }
                        }
                    ]
                },
                "–°—Ç–∞—Ç—É—Å": {
                    "select": {
                        "name": "–°—Ç–∞—Ä—Ç"
                    }
                },
                "–î–∏–∑–∞–π–Ω –∑–∞–¥–∞—á–∏": {
                    "relation": [
                        {
                            "id": task_id
                        }
                    ]
                }
            }
            
            new_subtask = await client.pages.create(
                parent={"database_id": "47c6086858d442ebaeceb4fad1b23ba3"},  # –ß–µ–∫–ª–∏—Å—Ç—ã
                properties=new_subtask_properties
            )
            
            created_subtask_ids.append(new_subtask['id'])
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {new_subtask['id']}")
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –¥–æ–±–∞–≤–ª—è—è —Å–≤—è–∑—å —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
        print(f"üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á —Å –∑–∞–¥–∞—á–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ –∑–∞–¥–∞—á–µ
        current_subtasks = task['properties'].get('–ü–æ–¥–∑–∞–¥–∞—á–∏', {}).get('relation', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_subtask_relations = current_subtasks + [{"id": subtask_id} for subtask_id in created_subtask_ids]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        await client.pages.update(
            page_id=task_id,
            properties={
                "–ü–æ–¥–∑–∞–¥–∞—á–∏": {
                    "relation": all_subtask_relations
                }
            }
        )
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å {len(created_subtask_ids)} –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        
        final_task = await client.pages.retrieve(page_id=task_id)
        final_subtasks = final_task['properties'].get('–ü–æ–¥–∑–∞–¥–∞—á–∏', {}).get('relation', [])
        
        print(f"üìã –ó–∞–¥–∞—á–∞: {task_title}")
        print(f"üÜî ID: {task_id}")
        print(f"üìö –ì–∞–π–¥—ã: {len(final_task['properties'].get('üì¨ –ì–∞–π–¥—ã', {}).get('relation', []))}")
        print(f"üìã –ü–æ–¥–∑–∞–¥–∞—á–∏: {len(final_subtasks)}")
        
        for i, subtask_ref in enumerate(final_subtasks, 1):
            subtask = await client.pages.retrieve(page_id=subtask_ref['id'])
            subtask_title = subtask['properties'].get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"{i}. {subtask_title}")
        
        return task_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # ID –≥–∞–π–¥–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
    guide_id = "47c60868-58d4-42eb-aece-b4fad1b23ba3"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥–∞–π–¥–∞
    task_title = "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏"
    
    asyncio.run(create_task_with_subtasks(guide_id, task_title)) 