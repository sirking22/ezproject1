#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ Google Docs
"""

import os
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

from transcribe_with_speakers import AssemblyAITranscriber

def upload_to_google_docs(markdown_file, title="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–≤–µ—â–∞–Ω–∏—è"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ Google Docs —á–µ—Ä–µ–∑ API"""
    try:
        # –ß–∏—Ç–∞–µ–º markdown —Ñ–∞–π–ª
        with open(markdown_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML –¥–ª—è Google Docs
        html_content = markdown_to_html(content)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Docs API
        # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        
        print(f"üìù Google Docs –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é!")
        print(f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {markdown_file}")
        print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ: https://docs.google.com")
        print(f"üìÑ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Docs: {e}")
        return False

def markdown_to_html(markdown_text):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è markdown –≤ HTML"""
    html = markdown_text
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    html = html.replace('# ', '<h1>').replace('\n# ', '</h1>\n<h1>')
    html = html.replace('## ', '<h2>').replace('\n## ', '</h2>\n<h2>')
    
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    html = html.replace('**', '<strong>').replace('**', '</strong>')
    
    # –¢–∞–±–ª–∏—Ü—ã
    html = html.replace('|', '</td><td>')
    html = html.replace('\n|', '\n<tr><td>')
    html = html.replace('|\n', '</td></tr>\n')
    
    return html

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ Google Docs"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = os.getenv('ASSEMBLYAI_API_KEY')
        if not api_key:
            print("‚ùå ASSEMBLYAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print("üé§ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ Google Docs...")
        print(f"üîë API –∫–ª—é—á: {api_key[:10]}...")
        print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä–∞
        transcriber = AssemblyAITranscriber()
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        audio_path = "/audio_transcribe/record.ogg"
        
        print("üìÅ –§–∞–π–ª:", audio_path)
        print("üöÄ –†–µ–∂–∏–º: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print()
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        result = transcriber.transcribe_audio(audio_path, "meeting_transcript")
        
        print(f"\n‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['speakers_count']}")
        print(f"üìÑ Word –¥–æ–∫—É–º–µ–Ω—Ç: {result['word_file']}")
        print(f"üìù Markdown —Ñ–∞–π–ª: {result['markdown_file']}")
        print()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Docs
        print("üåê –ó–∞–≥—Ä—É–∂–∞—é –≤ Google Docs...")
        upload_to_google_docs(result['markdown_file'])
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        print(f"   Speaker A = —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π")
        print(f"   Speaker B = –≤—Ç–æ—Ä–æ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        print(f"   ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ")
        print()
        print("üîó –ü—É–±–ª–∏—á–Ω–∞—è –ø–∞–ø–∫–∞: https://yadi.sk/d/9bDnaC7TPqtnLQ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 