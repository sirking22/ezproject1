#!/usr/bin/env python3
"""
üö® –ë–´–°–¢–†–´–ô –ß–ï–ö-–õ–ò–°–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –∞–Ω–∞–ª–∏–∑–æ–º Notion –±–∞–∑
"""

import os
from dotenv import load_dotenv

load_dotenv()

def check_data_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    env_vars = {
        "NOTION_TOKEN": os.getenv("NOTION_TOKEN"),
        "NOTION_DESIGN_TASKS_DB_ID": os.getenv("NOTION_DESIGN_TASKS_DB_ID"),
        "NOTION_SUBTASKS_DB_ID": os.getenv("NOTION_SUBTASKS_DB_ID"),
        "NOTION_PROJECTS_DB_ID": os.getenv("NOTION_PROJECTS_DB_ID"),
        "NOTION_MATERIALS_DB_ID": os.getenv("NOTION_MATERIALS_DB_ID"),
        "NOTION_IDEAS_DB_ID": os.getenv("NOTION_IDEAS_DB_ID"),
    }
    
    for var, value in env_vars.items():
        status = "‚úÖ" if value else "‚ùå"
        print(f"   {status} {var}: {value[:20] if value else '–ù–ï –ù–ê–ô–î–ï–ù'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID
    print("\nüéØ –ü–†–ê–í–ò–õ–¨–ù–´–ï ID –ë–ê–ó:")
    correct_ids = {
        "–ó–∞–¥–∞—á–∏ (TASKS)": "d09df250ce7e4e0d9fbe4e036d320def",
        "–ü–æ–¥–∑–∞–¥–∞—á–∏ (SUBTASKS)": "9c5f4269d61449b6a7485579a3c21da3",
        "–ü—Ä–æ–µ–∫—Ç—ã (PROJECTS)": "342f18c67a5e41fead73dcec00770f4e",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã (MATERIALS)": "1d9ace03d9ff804191a4d35aeedcbbd4",
        "–ò–¥–µ–∏ (IDEAS)": "ad92a6e21485428c84de8587706b3be1",
    }
    
    for name, correct_id in correct_ids.items():
        env_id = env_vars.get(f"NOTION_{name.split()[0].upper()}_DB_ID")
        status = "‚úÖ" if env_id == correct_id else "‚ùå"
        print(f"   {status} {name}: {correct_id}")
        if env_id != correct_id:
            print(f"      ‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–æ—Å—å: {correct_id}")
            print(f"      ‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–æ: {env_id}")
    
    # –ß–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    print("\nüîß –ß–ï–ö-–õ–ò–°–¢ –ü–ï–†–ï–î –ê–ù–ê–õ–ò–ó–û–ú:")
    checklist = [
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ —Å—ã—Ä–æ–≥–æ API",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ –±–∞–∑–µ",
        "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ERRORS_SOLUTIONS.md"
    ]
    
    for i, item in enumerate(checklist, 1):
        print(f"   {i}. {item}")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê:")
    rules = [
        "–í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ —Å—ã—Ä—ã—Ö API",
        "–í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è—Ç—å ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º",
        "–í–°–ï–ì–î–ê –ø–æ–Ω–∏–º–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é: –ü—Ä–æ–µ–∫—Ç—ã ‚Üí –ó–∞–¥–∞—á–∏ ‚Üí –ü–æ–¥–∑–∞–¥–∞—á–∏",
        "–ù–ï –ü–£–¢–ê–¢–¨ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –±–∞–∑—ã!",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è: '–ó–∞–¥–∞—á–∞' vs '–ü–æ–¥–∑–∞–¥–∞—á–∏'"
    ]
    
    for rule in rules:
        print(f"   ‚ö†Ô∏è  {rule}")
    
    # –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    print("\nüí° –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    commands = [
        "python correct_tasks_analysis.py  # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ MCP",
        "python final_todo_count.py        # –ü–æ–¥—Å—á–µ—Ç ToDo –∑–∞–¥–∞—á",
        "python quick_data_check.py        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞"
    ]
    
    for cmd in commands:
        print(f"   $ {cmd}")
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìñ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ docs/DATA_STRUCTURE_GUIDE.md")

if __name__ == "__main__":
    check_data_structure() 